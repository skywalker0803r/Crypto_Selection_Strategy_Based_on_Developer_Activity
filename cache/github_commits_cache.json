{
    "ethereum/go-ethereum_2024-07-22_2025-07-21": [
        {
            "date": "2025-07-21 00:00:00",
            "message": "core/vm: triple modexp cost post-cancun (#32231)\n\nhttps://github.com/ethereum/EIPs/pull/9969/files"
        },
        {
            "date": "2025-07-21 00:00:00",
            "message": "triedb/pathdb: fix incorrect address length in history searching (#32248)\n\nWe should use account length to check address, else OOB maybe occured\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-07-18 00:00:00",
            "message": "core/txpool/blobpool: remove unused `txValidationFn` from BlobPool (#32237)\n\nThis PR removes the now\u2011unused `txValidationFn` field from BlobPool.\nIt became obsolete after a PR\u00a0 https://github.com/ethereum/go-ethereum/pull/31202 \nwas merged.\n\nResolves https://github.com/ethereum/go-ethereum/issues/32236"
        },
        {
            "date": "2025-07-18 00:00:00",
            "message": "params: update tx gas limit cap (#32230)\n\nUpdates the tx gas limit cap to the new parameter (2^24)\nhttps://github.com/ethereum/EIPs/pull/9986/files"
        },
        {
            "date": "2025-07-17 00:00:00",
            "message": "all: define constructor for BlobSidecar (#32213)\n\nThe main purpose of this change is to enforce the version setting when\nconstructing the blobSidecar, avoiding creating sidecar with wrong/default \nversion tag."
        },
        {
            "date": "2025-07-17 00:00:00",
            "message": "triedb/pathdb: improve the performance of parse index block (#32219)\n\nThe implementation of `parseIndexBlock` used a reverse loop with slice\nappends to build the restart points, which was less cache-friendly and\ninvolved unnecessary allocations and operations. In this PR we change\nthe implementation to read and validate the restart points in one single\nforward loop.\n\nHere is the benchmark test:\n\n```bash\ngo test -benchmem -bench=BenchmarkParseIndexBlock ./triedb/pathdb/\n```\n\nThe result as below:\n\n```\nbenchmark                      old ns/op     new ns/op     delta\nBenchmarkParseIndexBlock-8     52.9          37.5          -29.05%\n```\n\nabout 29% improvements\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-07-17 00:00:00",
            "message": "eth/protocols/snap: fix negative eta in state progress logging (#32225)"
        },
        {
            "date": "2025-07-17 00:00:00",
            "message": "triedb/pathdb: avoid duplicate metadata reads (#32226)"
        },
        {
            "date": "2025-07-16 00:00:00",
            "message": "eth/tracers: apply block header overrides correctly (#32183)\n\nFixes #32175.\n\nThis fixes the scenario where the blockhash opcode would return 0x0\nduring RPC simulations when using BlockOverrides with a future block\nnumber. The root cause was that BlockOverrides.Apply() only modified the\nvm.BlockContext, but GetHashFn() depends on the actual\ntypes.Header.Number to resolve valid historical block hashes. This\ncaused a mismatch and resulted in incorrect behavior during trace and\ncall simulations.\n\n---------\n\nCo-authored-by: shantichanal <158101918+shantichanal@users.noreply.github.com>\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-07-16 00:00:00",
            "message": "account/abi/bind/v2: fix TestDeploymentWithOverrides (#32212)\n\nThe root cause of the flaky test was a nonce conflict caused by async\ncontract deployments.\n\nThis solution defines a custom deployer with automatic nonce management."
        },
        {
            "date": "2025-07-16 00:00:00",
            "message": "eth/downloader: improve nil pointer protection (#32222)\n\nFix #32221\n\n---------\n\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-07-16 00:00:00",
            "message": "trie: avoid spawning goroutines for empty children (#32220)"
        },
        {
            "date": "2025-07-15 00:00:00",
            "message": "core/rawdb: reduce allocations in rawdb.ReadHeaderNumber (#31913)\n\nThis is something interesting I came across during my benchmarks, we\nspent ~3.8% of all allocations allocating the header number on the heap.\n\n```\n(pprof) list GetHeaderByHash\nTotal: 38197204475\nROUTINE ======================== github.com/ethereum/go-ethereum/core.(*BlockChain).GetHeaderByHash in github.com/ethereum/go-ethereum/core/blockchain_reader.go\n         0 5786566117 (flat, cum) 15.15% of Total\n         .          .     79:func (bc *BlockChain) GetHeaderByHash(hash common.Hash) *types.Header {\n         . 5786566117     80: return bc.hc.GetHeaderByHash(hash)\n         .          .     81:}\n         .          .     82:\n         .          .     83:// GetHeaderByNumber retrieves a block header from the database by number,\n         .          .     84:// caching it (associated with its hash) if found.\n         .          .     85:func (bc *BlockChain) GetHeaderByNumber(number uint64) *types.Header {\nROUTINE ======================== github.com/ethereum/go-ethereum/core.(*HeaderChain).GetHeaderByHash in github.com/ethereum/go-ethereum/core/headerchain.go\n         0 5786566117 (flat, cum) 15.15% of Total\n         .          .    404:func (hc *HeaderChain) GetHeaderByHash(hash common.Hash) *types.Header {\n         . 1471264309    405: number := hc.GetBlockNumber(hash)\n         .          .    406: if number == nil {\n         .          .    407:  return nil\n         .          .    408: }\n         . 4315301808    409: return hc.GetHeader(hash, *number)\n         .          .    410:}\n         .          .    411:\n         .          .    412:// HasHeader checks if a block header is present in the database or not.\n         .          .    413:// In theory, if header is present in the database, all relative components\n         .          .    414:// like td and hash->number should be present too.\n(pprof) list GetBlockNumber\nTotal: 38197204475\nROUTINE ======================== github.com/ethereum/go-ethereum/core.(*HeaderChain).GetBlockNumber in github.com/ethereum/go-ethereum/core/headerchain.go\n  94438817 1471264309 (flat, cum)  3.85% of Total\n         .          .    100:func (hc *HeaderChain) GetBlockNumber(hash common.Hash) *uint64 {\n  94438817   94438817    101: if cached, ok := hc.numberCache.Get(hash); ok {\n         .          .    102:  return &cached\n         .          .    103: }\n         . 1376270828    104: number := rawdb.ReadHeaderNumber(hc.chainDb, hash)\n         .          .    105: if number != nil {\n         .     554664    106:  hc.numberCache.Add(hash, *number)\n         .          .    107: }\n         .          .    108: return number\n         .          .    109:}\n         .          .    110:\n         .          .    111:type headerWriteResult struct {\n(pprof) list ReadHeaderNumber\nTotal: 38197204475\nROUTINE ======================== github.com/ethereum/go-ethereum/core/rawdb.ReadHeaderNumber in github.com/ethereum/go-ethereum/core/rawdb/accessors_chain.go\n 204606513 1376270828 (flat, cum)  3.60% of Total\n         .          .    146:func ReadHeaderNumber(db ethdb.KeyValueReader, hash common.Hash) *uint64 {\n 109577863 1281242178    147: data, _ := db.Get(headerNumberKey(hash))\n         .          .    148: if len(data) != 8 {\n         .          .    149:  return nil\n         .          .    150: }\n  95028650   95028650    151: number := binary.BigEndian.Uint64(data)\n         .          .    152: return &number\n         .          .    153:}\n         .          .    154:\n         .          .    155:// WriteHeaderNumber stores the hash->number mapping.\n         .          .    156:func WriteHeaderNumber(db ethdb.KeyValueWriter, hash common.Hash, number uint64) {\n```\n\nOpening this to discuss the idea, I know that rawdb.EmptyNumber is not a\ngreat name for the variable, open to suggestions"
        },
        {
            "date": "2025-07-15 00:00:00",
            "message": "all: update dead wiki links (#32215)\n\n---\n\n\n**Description:**  \n- Replaced outdated GitHub wiki links with current, official\ndocumentation URLs.\n- Removed links that redirect or are no longer relevant.\n- Ensured all references point to up-to-date and reliable sources.\n\n\n---"
        },
        {
            "date": "2025-07-15 00:00:00",
            "message": "eth/protocols/snap, p2p/discover: improve zero time checks (#32214)"
        },
        {
            "date": "2025-07-15 00:00:00",
            "message": "core/rawdb: change the mechanism to schedule freezer sync (#32135)\n\nThis pull request slightly improves the freezer fsync mechanism by scheduling \nthe Sync operation based on the number of uncommitted items and original\ntime interval.\n\nOriginally, freezer.Sync was triggered every 30 seconds, which worked well during\nactive chain synchronization. However, once the initial state sync is complete, \nthe fixed interval causes Sync to be scheduled too frequently.\n\nTo address this, the scheduling logic has been improved to consider both the time \ninterval and the number of uncommitted items. This additional condition helps \navoid unnecessary Sync operations when the chain is idle."
        },
        {
            "date": "2025-07-15 00:00:00",
            "message": "triedb/pathdb: introduce file-based state journal (#32060)\n\nIntroduce file-based state journal in path database, fixing\nthe Pebble restriction when the journal size exceeds 4GB.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-07-15 00:00:00",
            "message": "core/types: fix CellProofsAt method (#32198)"
        },
        {
            "date": "2025-07-14 00:00:00",
            "message": "all: fix outdated ethereum wiki json-rpc json-rpc doc links (#32209)\n\nReplace outdated wiki reference with ethereum.org\ndocumentation links"
        },
        {
            "date": "2025-07-14 00:00:00",
            "message": "miner: set sidecar version when recomputing proofs (#32199)\n\n- If the block number is `osaka` fork and needs to recompute some `blob\nproofs` to `cell proofs`, here also needs to set version to `1`."
        },
        {
            "date": "2025-07-14 00:00:00",
            "message": "eth/fetcher: fix announcement drop logic (#32210)\n\nThis PR fixes an issue in the tx_fetcher DoS prevention logic where the\ncode keeps the overflow amount (`want - maxTxAnnounces`) instead of the\nallowed amount (`maxTxAnnounces - used`). The specific changes are:\n\n- Correct slice indexing in the announcement drop logic\n- Extend the overflow test case to cover the inversion scenario"
        },
        {
            "date": "2025-07-14 00:00:00",
            "message": "params: EIP-7892 - Blob Parameter Only Hardforks (#32193)\n\nThis is a resubmit of https://github.com/ethereum/go-ethereum/pull/31820\nagainst the `master` branch.\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-07-14 00:00:00",
            "message": "ethclient/gethclient: remove race condition in tests (#32206)\n\nalternative to https://github.com/ethereum/go-ethereum/pull/32200\n\nThe race condition is not happening yet, since there is only a single\ncall to `newTestBackend`, but there might be more in the future"
        },
        {
            "date": "2025-07-14 00:00:00",
            "message": "accounts/keystore: update links to documenation (#32194)\n\n---\n\n\n**Description:**  \n- Replaced outdated GitHub wiki links with the official Ethereum\ndocumentation for Web3 Secret Storage.\n- Updated references in `keystore.go` and `passphrase.go` for improved\naccuracy and reliability.\n\n\n---"
        },
        {
            "date": "2025-07-14 00:00:00",
            "message": "signer/core/apitypes: require blob txs to have tx.to set (#32197)\n\nCheck the `to` address before building the blob tx.\n\n---------\n\nCo-authored-by: jwasinger <j-wasinger@hotmail.com>"
        },
        {
            "date": "2025-07-11 00:00:00",
            "message": "cmd/geth: update vcheck testdata, add docs on generating signatures (#32121)\n\nFixed typo in security release URL by replacing:\nOld: https://blog.ethereum.org/2020/11/12/geth_security_release/\nNew: https://blog.ethereum.org/2020/11/12/geth-security-release/\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-07-11 00:00:00",
            "message": ".github: remove karalabe from CODEOWNERS"
        },
        {
            "date": "2025-07-11 00:00:00",
            "message": "eth/downloader: fix ancient limit in snap sync (#32188)\n\nThis pull request fixes an issue in disabling direct-ancient mode in\nsnap sync.\n\nSpecifically, if `origin >= frozen && origin != 0`, it implies a part of\nchain data has been written into the key-value store, all the following \nwrites into ancient store scheduled by downloader will be rejected \nwith error \n\n`ERROR[07-10|03:46:57.924] Error importing chain data to ancients\nerr=\"can't add block 1166 hash: the append operation is out-order: have\n1166 want 0\"`.\n\nThis issue is detected by the https://github.com/ethpandaops/kurtosis-sync-test, \nwhich initiates the first snap sync cycle without the finalized header and\nimplicitly disables the direct-ancient mode. A few seconds later the second \nsnap sync cycle is initiated with the finalized information and direct-ancient mode\nis enabled incorrectly."
        },
        {
            "date": "2025-07-11 00:00:00",
            "message": "core/types:  add block-level access list structures with encoding/decoding (#31948)\n\nThis adds the SSZ types from the \n[EIP-7928](https://eips.ethereum.org/EIPS/eip-7928) and also adds\nencoder/decoder generation using https://github.com/ferranbt/fastssz.\n\nThe fastssz dependency is updated because the generation will not work\nproperly with the master branch version due to a bug in fastssz.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-07-09 00:00:00",
            "message": "cmd/clef: update Safe API documentation links in changelog (#32136)\n\nThis PR updates the outdated documentation URL from docs.gnosis.io to\nthe new official docs.safe.global domain. The change reflects the\nrebranding from Gnosis Safe to Safe and ensures that users are directed\nto the current API documentation for transaction service reference."
        },
        {
            "date": "2025-07-09 00:00:00",
            "message": "cmd/utils: add the missing check for the HoodiFlag in blsync (#32179)\n\nHoodi network flag should be exclusive to other network flags for both blysnc standalone and integrated mode."
        },
        {
            "date": "2025-07-09 00:00:00",
            "message": "core,miner: implement EIP-7934 - RLP Execution Block Size Limit (#31990)\n\nThis PR adds a block validation check for the maximum block size, as required by\nEIP-7934, and also applies a slightly lower size limit during block building.\n\n---------\n\nCo-authored-by: spencer-tb <spencer@spencertaylorbrown.uk>\nCo-authored-by: Felix Lange <fjl@twurst.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-07-09 00:00:00",
            "message": "core/vm: update gas cost of CLZ to five (#32172)\n\nhttps://github.com/ethereum/EIPs/commit/a794de3fcf71bb8c71e8bafdba11f63133ce4516"
        },
        {
            "date": "2025-07-08 00:00:00",
            "message": "miner, core, core/txpool: implement EIP 7825 - TX Gas Limit Cap (#31824)\n\nImplements EIP-7825\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\nCo-authored-by: lightclient <lightclient@protonmail.com>\nCo-authored-by: MariusVanDerWijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-07-08 00:00:00",
            "message": "eth/catalyst:  abort dev mode block commit if shut down is triggered (#32166)\n\nalternate approach to https://github.com/ethereum/go-ethereum/pull/31328\nsuggested by @MariusVanDerWijden . This prevents Geth from outputting a\nlot of logs when trying to commit on-demand dev mode blocks while the\nclient is shutting down.\n\nThe issue is hard to reproduce, but I've seen it myself and it is\nannoying when it happens. I think this is a reasonable simple solution,\nand we can revisit if we find that the output is still too large (i.e.\nthere is a large delay between initiating shut down and the simulated\nbeacon receiving the signal, while in this loop).\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-07-08 00:00:00",
            "message": "cmd, eth/catalyst: exit geth only if exitWhenSynced is specified (#32149)\n\nThis pull request modifies the behavior of `--synctarget` to terminate\nthe node only when `--exitWhenSynced` is explicitly specified."
        },
        {
            "date": "2025-07-07 00:00:00",
            "message": "core/vm: implement EIP-7951 - precompile for secp256r1 (#31991)\n\nhttps://github.com/ethereum/EIPs/pull/9833\n\nBased on #27540, #30043\n\n---------\n\nCo-authored-by: Ula\u015f Erdo\u011fan <uerdogan2001@hotmail.com>"
        },
        {
            "date": "2025-07-07 00:00:00",
            "message": "consensus/misc/eip4844: implement EIP-7918  (#31965)\n\nhttps://eips.ethereum.org/EIPS/eip-7918\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-07-07 00:00:00",
            "message": ".github, internal/flags: improve actions test runs (#32150)\n\nThis change enables more tests to run on GitHub actions. First, it\nremoves the `-short` flag passed to `go test`, unskipping some longer\nrunning tests. We also enable the full consensus tests to run by\nenabling submodules during git clone.\n\nThe EF now operates org wide runners with the `self-hosted-ghr` label.\nThese are auto-scaling runners which should ideally allow us to process\nany amount of testing load we throw at them. The new runners have `HOME`\nconfigured differently from the actual user home directory, so our\ninternal test for resolving `~` had to be adapted to work in this scenario."
        },
        {
            "date": "2025-07-07 00:00:00",
            "message": "core/txpool/blobpool: lower log level for warnings (#32142)\n\n- Change the log level to `warning`, during syncing blocks, the `final\n== nil` is normal.\n- Change to log tx hash."
        },
        {
            "date": "2025-07-07 00:00:00",
            "message": "core/vm: implement EIP-7939 - CLZ opcode (#31989)\n\nhttps://eips.ethereum.org/EIPS/eip-7939\n\n---------\n\nCo-authored-by: spencer-tb <spencer@spencertaylorbrown.uk>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-07-07 00:00:00",
            "message": "core/vm: move nil-check out of the interpreter loop (#32068)\n\nMoves the jumptable nil check our of the interpreter loop.\nBenchmarks show a 2-10% improvement."
        },
        {
            "date": "2025-07-04 00:00:00",
            "message": ".gitea: fix typo in windows workflow"
        },
        {
            "date": "2025-07-04 00:00:00",
            "message": "gitea: set PATH in script"
        },
        {
            "date": "2025-07-04 00:00:00",
            "message": "gitea: try with cmd"
        },
        {
            "date": "2025-07-04 00:00:00",
            "message": ".gitea: set PATH"
        },
        {
            "date": "2025-07-04 00:00:00",
            "message": ".gitea: update PATH"
        },
        {
            "date": "2025-07-04 00:00:00",
            "message": ".gitea: add workflow_dispatch for release build"
        },
        {
            "date": "2025-07-04 00:00:00",
            "message": "cmd/utils: update flag description of gcmode (#32145)"
        },
        {
            "date": "2025-07-04 00:00:00",
            "message": "cmd/utils: show full deprecated flags (#32141)\n\nThis is a follow up PR after #32128 , Seems I've missed to add\n--txlookuplimit as hidden. In hte meanwhile, I also add the other \ndeprecated flags into the output of `show-deprecated-flags`"
        },
        {
            "date": "2025-07-03 00:00:00",
            "message": ".gitea: add windows build (experimental)"
        },
        {
            "date": "2025-07-03 00:00:00",
            "message": "cmd/utils, internal/debug: hide the deprecated flags (#32128)\n\nSome of the flags were deprecated, so try to hide them in the help\nmessage. And move the `--vmodule` and `--logjson` flags to the\nDeprecatedCategory."
        },
        {
            "date": "2025-07-03 00:00:00",
            "message": "core/state: add GetStateAndCommittedState (#31585)\n\nImproves the SSTORE gas calculation a bit. Previously we would pull up\nthe state object twice. This is okay for existing objects, since they\nare cached, however non-existing objects are not cached, thus we needed\nto go through all 128 diff layers as well as the disk layer twice, just\nfor the gas calculation\n\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/ethereum/go-ethereum/core/vm\ncpu: AMD Ryzen 9 5900X 12-Core Processor            \n               \u2502 /tmp/old.txt \u2502            /tmp/new.txt             \u2502\n               \u2502    sec/op    \u2502   sec/op     vs base                \u2502\nInterpreter-24   1118.0n \u00b1 2%   602.8n \u00b1 1%  -46.09% (p=0.000 n=10)\n```\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-07-02 00:00:00",
            "message": "cmd/workload: rework tracegen to run tracing at block level (#32092)\n\nThis PR changes the trace test to block level, aiming for better\nexecution performance.\n\n---------\n\nCo-authored-by: zsfelfoldi <zsfelfoldi@gmail.com>"
        },
        {
            "date": "2025-07-02 00:00:00",
            "message": "beacon/blsync: update logs for blsync (Fixes #31968 ) (#32046)\n\nSmall update for logs when syncing with blsync. Downgrades the \"latest\nfilled block is not available\" to warn.\n\nCo-authored-by: shantichanal <158101918+shantichanal@users.noreply.github.com>"
        },
        {
            "date": "2025-07-02 00:00:00",
            "message": "version: begin v1.16.2 release cycle"
        },
        {
            "date": "2025-07-02 00:00:00",
            "message": "version: release go-ethereum v1.16.1 stable"
        },
        {
            "date": "2025-07-02 00:00:00",
            "message": "accounts/abi: generate TryPack* methods for abigen v2 bindings (#31692)\n\n1. Fix the error return format.\n**todo**: ~~`bindtype` needs more complex logic to fix it.~~\n`\nif err != nil {\n  return nil, err\n}\nif err == nil {\n  return obj, nil\n}\n`\n2. ~~Return pointer type object to avoid copying the whole struct\ncontent.~~\n3. Give the panic decision to the user.\n4. Fix empty line at the end of function.\n\n**TODO**: ~~fix some related test cases.~~\n\n---------\n\nCo-authored-by: Jared Wasinger <j-wasinger@hotmail.com>"
        },
        {
            "date": "2025-07-02 00:00:00",
            "message": "eth/catalyst: fix edge case in simulated backend (#31871)\n\ngeth cmd: `geth --dev --dev.period 5`\ncall: `debug.setHead` to rollback several blocks.\n\nIf the `debug.setHead` call is delayed, it will trigger a panic with a\nsmall probability, due to using the null point of\n`fcResponse.PayloadID`.\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-07-02 00:00:00",
            "message": "core/rawdb, triedb/pathdb: fix two inaccurate comments (#32130)"
        },
        {
            "date": "2025-07-01 00:00:00",
            "message": "core/types: blockTimestamp in logs is hex-encoded (#32129)\n\ncloses #32120"
        },
        {
            "date": "2025-07-01 00:00:00",
            "message": "core/filtermaps: define APIs for map, epoch calculation (#31659)\n\nThis pull request refines the filtermap implementation, defining key\nAPIs for map and\nepoch calculations to improve readability.\n\nThis pull request doesn't change any logic, it's a pure cleanup.\n\n---------\n\nCo-authored-by: zsfelfoldi <zsfelfoldi@gmail.com>"
        },
        {
            "date": "2025-07-01 00:00:00",
            "message": "internal: remove unused shh and swarm modules from console (#32073)\n\nSimilar to https://github.com/ethereum/go-ethereum/pull/31856, remove\nthe not availabe shh, swarm modules in the console.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-07-01 00:00:00",
            "message": "ethapi: reduce some of the wasted effort in GetTransactionReceipt (#32021)\n\nTowards https://github.com/ethereum/go-ethereum/issues/26974\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-07-01 00:00:00",
            "message": "internal/ethapi: prealloc map for the txpool api (#32110)\n\nuse `make(map, len(txpool))` to prealloc the map for the txpool content,\nto avoid the map growing in the loop."
        },
        {
            "date": "2025-07-01 00:00:00",
            "message": "eth/catalyst: fix the log message in newPayloadV4 (#32125)\n\nIt should be `newPayloadV4 must only be called for prague payloads` for\nthe V4 payload error"
        },
        {
            "date": "2025-07-01 00:00:00",
            "message": "core/filtermaps: clean up log format of unindexing message (#32123)\n\nSorry for not fully fixed in https://github.com/ethereum/go-ethereum/pull/31761, now the log \nformat of unindexing message is cleaned up, to make it consistent with the indexing message."
        },
        {
            "date": "2025-07-01 00:00:00",
            "message": "Fix log indexer noise after debug_setHead operations (#31934)\n\n## Summary\nThis PR resolves Issue #31929 by reducing log noise generated by the log\nindexer after `debug_setHead` operations.\n\n## Problem Description\nWhen `debug_setHead` is called to rewind the blockchain, blocks are\nremoved from the database. However, the log indexer's `ChainView`\nobjects may still hold references to these deleted blocks. When\n`extendNonCanonical()` attempts to access these missing headers, it\nresults in:\n\n1. **Repeated ERROR logs**: `Header not found number=X hash=0x...`\n2. **Log noise** that can mask other important errors  \n3. **User confusion** about whether this indicates a real problem\n\n## Root Cause Analysis\nThe issue occurs because:\n- `debug_setHead` removes blocks from the blockchain database\n- Log indexer's `ChainView` may still reference deleted block hashes\n- `extendNonCanonical()` in `core/filtermaps/chain_view.go` tries to\nfetch these missing headers\n- The existing `return false` logic properly handles the error, but logs\nat ERROR level\n\n## Solution\nThis is a **logging improvement only** - no functional logic changes:\n\n### Changes Made\n1. **Log level**: Changed from `ERROR` to `DEBUG` \n2. **Log message**: Enhanced with descriptive context about chain view\nextension\n3. **Comments**: Added explanation for when this situation occurs\n4. **Behavior**: Maintains existing error handling (`return false` was\nalready present)\n\n### Code Changes\n```go\n// Before\nlog.Error(\"Header not found\", \"number\", number, \"hash\", hash)\nreturn false\n\n// After  \n// Header not found - this can happen after debug_setHead operations\n// where blocks have been deleted. Return false to indicate the chain view\n// is no longer valid rather than logging repeated errors.\nlog.Debug(\"Header not found during chain view extension\", \"number\", number, \"hash\", hash)\nreturn false\n```\n\n## Testing\n\n### Automated Tests\n- \u2705 All existing filtermaps tests pass: `go test ./core/filtermaps -v`\n- \u2705 No regressions in related functionality\n\n### Manual Verification\n1. **Before fix**: Started geth in dev mode, generated blocks, called\n`debug_setHead(3)` \u2192 **5 repeated ERROR logs**\n2. **After fix**: Same scenario \u2192 **4 DEBUG logs, no ERROR noise**\n\n### Test Environment\n```bash\n# Setup test environment\nrm -rf ./dev-test-data\n./build/bin/geth --dev --datadir ./dev-test-data --http --http.api debug,eth,net,web3 --verbosity 4\n\n# Generate test blocks and trigger issue\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"jsonrpc\":\"2.0\",\"method\":\"debug_setHead\",\"params\":[\"0x3\"],\"id\":1}' http://localhost:8545\n```\n\n\n## Related Issues\n- Fixes #31929\n\n## Additional Context\nThis issue was reported as spurious error messages appearing after\n`debug_setHead` operations. The investigation revealed that while the\nerror handling was functionally correct, the ERROR log level was\ninappropriate for this expected scenario in development/debugging\nworkflows.\n\nThe fix maintains full compatibility while significantly improving the\ndebugging experience for developers using `debug_setHead`.\n\n---------\n\nCo-authored-by: Sun Tae, Kim <38067691+humblefirm@users.noreply.github.com>\nCo-authored-by: zsfelfoldi <zsfelfoldi@gmail.com>"
        },
        {
            "date": "2025-07-01 00:00:00",
            "message": "eth/filters: add address limit to filters (#31876)\n\nThe address filter was never checked against a maximum limit, which can\nbe somewhat abusive for API nodes. This PR adds a limit similar to\ntopics\n\n## Description (AI generated)\n\nThis pull request introduces a new validation to enforce a maximum limit\non the number of addresses allowed in filter criteria for Ethereum logs.\nIt includes updates to the `FilterAPI` and `EventSystem` logic, as well\nas corresponding test cases to ensure the new constraint is properly\nenforced.\n\n### Core functionality changes:\n\n* **Validation for maximum addresses in filter criteria**:\n- Added a new constant, `maxAddresses`, set to 100, to define the\nmaximum allowable addresses in a filter.\n- Introduced a new error, `errExceedMaxAddresses`, to handle cases where\nthe number of addresses exceeds the limit.\n- Updated the `GetLogs` method in `FilterAPI` to validate the number of\naddresses against `maxAddresses`.\n- Modified the `UnmarshalJSON` method to return an error if the number\nof addresses in the input JSON exceeds `maxAddresses`.\n- Added similar validation to the `SubscribeLogs` method in\n`EventSystem`.\n\n### Test updates:\n\n* **New test cases for address limit validation**:\n- Added a test in `TestUnmarshalJSONNewFilterArgs` to verify that\nexceeding the maximum number of addresses triggers the\n`errExceedMaxAddresses` error.\n- Updated `TestInvalidLogFilterCreation` to include a test case for an\ninvalid filter with more than `maxAddresses` addresses.\n- Updated `TestInvalidGetLogsRequest` to test for invalid log requests\nwith excessive addresses.\n\nThese changes ensure that the system enforces a reasonable limit on the\nnumber of addresses in filter criteria, improving robustness and\npreventing potential performance issues.\n\n---------\n\nCo-authored-by: zsfelfoldi <zsfelfoldi@gmail.com>"
        },
        {
            "date": "2025-07-01 00:00:00",
            "message": "triedb: reset state indexer after snap synced (#32104)\n\nFix the issue after initial snap sync with `gcmode=archive` enabled.\n\n```\nNewPayload: inserting block failed       error=\"history indexing is out of order, last: null, requested: 1\"\n```\n\n---------\n\nSigned-off-by: Delweng <delweng@gmail.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-06-30 00:00:00",
            "message": ".gitea: disable cron schedule"
        },
        {
            "date": "2025-06-30 00:00:00",
            "message": ".gitea: fix 386 upload"
        },
        {
            "date": "2025-06-30 00:00:00",
            "message": ".gitea: switch release builds to static linking (#32118)\n\nThis is to avoid compatibility issues with mismatched glibc versions\nbetween the builder and deployment target.\n\nFixes #32102"
        },
        {
            "date": "2025-06-27 00:00:00",
            "message": "eth: correct tracer initialization in BlockchainConfig (#32107)\n\ncore.BlockChainConfig.VmConfig is not a pointer, so setting the Tracer\non the `vmConfig` object after it was passed to options does *not* apply\nit to options.VmConfig\n\nThis fixes the issue by setting the value directly inside the `options`\nobject and removing the confusing `vmConfig` variable to prevent further\nmistakes."
        },
        {
            "date": "2025-06-27 00:00:00",
            "message": "node: do not double-wrap KV stores (#32089)\n\nFor no apparent reason, KV stores were getting wrapped in `nofreezedb`\nfirst and then in `freezerdb`."
        },
        {
            "date": "2025-06-27 00:00:00",
            "message": "all: replace override.prague with osaka (#32093)\n\nreplace `--override.prague` with `--override.osaka`\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-06-26 00:00:00",
            "message": ".travis.yml: remove travis configuration"
        },
        {
            "date": "2025-06-26 00:00:00",
            "message": ".gitea: trigger PPA upload on tag"
        },
        {
            "date": "2025-06-26 00:00:00",
            "message": "version: begin v1.16.1 release cycle"
        },
        {
            "date": "2025-06-26 00:00:00",
            "message": "version: release go-ethereum v1.16.0 stable"
        },
        {
            "date": "2025-06-26 00:00:00",
            "message": "all: incorporate state history indexing status into eth_syncing response (#32099)\n\nThis pull request tracks the state indexing progress in eth_syncing\nRPC response, i.e. we will return non-null syncing status until indexing\nhas finished."
        },
        {
            "date": "2025-06-26 00:00:00",
            "message": "triedb/pathdb: fix journal resolution in pathdb (#32097)\n\nThis pull request fixes a flaw in the PBSS state iterator, which\ncould return empty account or storage data.\n\nIn PBSS, multiple in-memory diff layers and a write buffer are\nmaintained. These layers are persisted to the database and reloaded after\nnode restarts. However, since the state data is encoded using RLP, the\ndistinction between nil and an empty byte slice is lost during the encode/decode\nprocess. As a result, invalid state values such as `[]byte{}` can appear in PBSS\nand ultimately be returned by the state iterator.\n\n\nCheckout\nhttps://github.com/ethereum/go-ethereum/blob/master/triedb/pathdb/iterator_fast.go#L270\nfor more iterator details.\n\nIt's a long-term existent issue and now be activated since the snapshot\nintegration.\nThe error `err=\"range contains deletion\"` will occur when Geth tries to\nserve other\npeers with SNAP protocol request.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-25 00:00:00",
            "message": "core, eth, triedb: serve historical states over RPC (#31161)\n\nThis is the part-2 for archive node over path mode, which ultimately\nships the functionality to serve the historical states"
        },
        {
            "date": "2025-06-25 00:00:00",
            "message": "eth, triedb/pathdb: permit write buffer allowance in PBSS archive mode (#32091)\n\nThis pull request fixes a flaw in PBSS archive mode that significantly\ndegrades performance when the mode is enabled.\n\nOriginally, in hash mode, the dirty trie cache is completely disabled\nwhen archive mode is active, in order to disable the in-memory garbage \ncollection mechanism. However, the internal logic in path mode differs \nsignificantly, and the dirty trie node cache is essential for maintaining\nchain insertion performance. Therefore, the cache is now retained in\npath mode."
        },
        {
            "date": "2025-06-25 00:00:00",
            "message": "cmd/utils: fix formatting for beacon flag errors to fit Fatalf form (#32090)\n\nNoticed that the errors for the blsync flags were not formatted\ncorrectly for `Fatalf(..)`."
        },
        {
            "date": "2025-06-25 00:00:00",
            "message": "core, consensus/beacon: defer trie resolution (#31725)\n\nPreviously, the account trie for a given state root was resolved immediately \nwhen the stateDB was created, implying that the trie was always required\nby the stateDB.\n\nHowever, this assumption no longer holds, especially for path archive nodes, \nwhere historical states can be accessed even if the corresponding trie data \ndoes not exist."
        },
        {
            "date": "2025-06-24 00:00:00",
            "message": "cmd/geth, triedb: add pathdb state verification (#32086)\n\nThis pull request ports the snapshot iteration logic from the legacy\nimplementation."
        },
        {
            "date": "2025-06-24 00:00:00",
            "message": "core/rawdb, triedb/pathdb: implement history indexer (#31156)\n\nThis pull request is part-1 for shipping the core part of archive node\nin PBSS mode."
        },
        {
            "date": "2025-06-24 00:00:00",
            "message": "miner: default gaslimit 45M (#32087)\n\nWe believe it is safe to raise the gaslimit to 45M before the Fusaka\nfork. So this PR changes the default to 45M."
        },
        {
            "date": "2025-06-24 00:00:00",
            "message": "cmd/geth: era-download logic fix (#32081)\n\nDownloading from a range was failing because it would return and error\nearly with an error misinterpreting \"start-end\".\n\n---------\n\nCo-authored-by: shantichanal <158101918+shantichanal@users.noreply.github.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-06-24 00:00:00",
            "message": "eth/tracers: prestate lookup EIP7702 delegation account (#32080)\n\nImplement https://github.com/ethereum/go-ethereum/issues/32078 \nParse and lookup the delegation account if EIP7702 is enabled.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-06-23 00:00:00",
            "message": "cmd/clef: update readme (#32070)\n\nReplaced the outdated and broken link to the Web3 Secret Storage\nDefinition with the current official URL from ethereum.org in the Clef\nREADME. This ensures users have access to up-to-date and accurate\ndocumentation for the keystore file format."
        },
        {
            "date": "2025-06-23 00:00:00",
            "message": "eth: quick canceling block inserting when debug_setHead is invoked (#32067)\n\nIf Geth is engaged in a long-run block synchronization, such as a full\nsyncing over a large number of blocks, invoking `debug_setHead` will\ncause `downloader.Cancel` to wait for all fetchers to stop first.\nThis can be time-consuming, particularly for the block processing\nthread.\n\nTo address this, we manually call `blockchain.StopInsert` to interrupt\nthe blocking processing thread and allow it to exit immediately, and\nafter that call `blockchain.ResumeInsert` to resume the block\ndownloading process.\n\nAdditionally, we add a sanity check for the input block number of\n`debug_setHead` to ensure its validity.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-06-22 00:00:00",
            "message": "triedb/pathdb, eth: use double-buffer mechanism in pathdb (#30464)\n\nPreviously, PathDB used a single buffer to aggregate database writes,\nwhich needed to be flushed atomically. However, flushing large amounts\nof data (e.g., 256MB) caused significant overhead, often blocking the\nsystem for around 3 seconds during the flush.\n\nTo mitigate this overhead and reduce performance spikes, a double-buffer\nmechanism is introduced. When the active buffer fills up, it is marked\nas frozen and a background flushing process is triggered. Meanwhile, a\nnew buffer is allocated for incoming writes, allowing operations to\ncontinue uninterrupted.\n\nThis approach reduces system blocking times and provides flexibility in\nadjusting buffer parameters for improved performance."
        },
        {
            "date": "2025-06-22 00:00:00",
            "message": "core/state: fix prefetch on single core CPU (#32075)\n\nWe need at least one prefetch goroutine. SetLimit(0) would block\nprefetch.\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>"
        },
        {
            "date": "2025-06-21 00:00:00",
            "message": "core/state: improve the prefetcher concurrency allowance (#32071)\n\nImprove the prefetcher concurrency allowance."
        },
        {
            "date": "2025-06-21 00:00:00",
            "message": "core/state: expose the state reader stats (#31998)\n\nThis pull request introduces a mechanism to expose statistics from the\nstate reader, specifically related to cache utilization during state prefetching.\n\nTo improve state access performance, a pair of state readers is constructed \nwith a shared local cache. One reader to execute transactions  ahead of time\nto warm up the cache. The other reader is used by the actual chain processing \nlogic, which can benefit from the prefetched states.\n\nThis PR adds visibility into how effective the cache is by exposing relevant \nusage statistics.\n\n---------\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>\nCo-authored-by: Csaba Kiraly <csaba.kiraly@gmail.com>"
        },
        {
            "date": "2025-06-20 00:00:00",
            "message": "ethdb: Implement DeleteRange in batch (#31947)\n\nimplement #31945\n\n---------\n\nCo-authored-by: prpeh <prpeh@proton.me>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-06-20 00:00:00",
            "message": "crypto/bn256: add documentation on subgroup checks for G2 (#32066)\n\nThis PR improves the IsOnCurve methods for BN254 G2 points by:\n\n* Clarifying its behavior the docstring, making it explicit that it\nverifies both the point being on the curve and in the correct subgroup.\n\n* Adding an in-line comment explaining the subgroup membership check\n(c.Mul(Order)).\n\n * Minor wording adjustments for readability and consistency."
        },
        {
            "date": "2025-06-20 00:00:00",
            "message": "crypto/bn256/gnark: align marshaling behavior (#32065)\n\nAligns the marshaling behavior of gnark to google and cloudflare\n\nCo-authored-by: kevaundray <kevtheappdev@gmail.com>"
        },
        {
            "date": "2025-06-19 00:00:00",
            "message": ".gitea: show environment in release-ppa.yml"
        },
        {
            "date": "2025-06-19 00:00:00",
            "message": "trie: delete secKeyCacheOwner (#31785)\n\nThe optimization tried to defer allocating the cache map until it was used for the\nfirst time. It's a relic from earlier times, when tries were copied often. This seems\nunnecessary now, so we can just create the map when the trie is created.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-19 00:00:00",
            "message": ".gitea: touch cron workflow files"
        },
        {
            "date": "2025-06-19 00:00:00",
            "message": "core: consolidate BlockChain constructor options (#31925)\n\nIn this pull request, the original `CacheConfig` has been renamed to `BlockChainConfig`.\n\nOver time, more fields have been added to `CacheConfig` to support\nblockchain configuration. Such as `ChainHistoryMode`, which clearly extends\nbeyond just caching concerns.\n\nAdditionally, adding new parameters to the blockchain constructor has\nbecome increasingly complicated, since it\u2019s initialized across multiple\nplaces in the codebase. A natural solution is to consolidate these arguments \ninto a dedicated configuration struct.\n\nAs a result, the existing `CacheConfig` has been redefined as `BlockChainConfig`.\nSome parameters, such as `VmConfig`, `TxLookupLimit`, and `ChainOverrides`\nhave been moved into `BlockChainConfig`. Besides, a few fields in `BlockChainConfig`\nwere renamed, specifically:\n\n- `TrieCleanNoPrefetch` -> `NoPrefetch`\n- `TrieDirtyDisabled` -> `ArchiveMode`\n\nNotably, this change won't affect the command line flags or the toml\nconfiguration file. It's just an internal refactoring and fully backward-compatible.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-19 00:00:00",
            "message": "core: simplify effectiveTip calculation (#31771)\n\nSince we have the effective gas price in the message, we can compute tip by\nsimply subtracting the basefee. No need to recompute the effective price.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-19 00:00:00",
            "message": "core/rawdb: don't decode the full block body in ReadTransaction (#32027)\n\nReading a single transaction out of a block shouldn't need decoding the\nentire body\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-06-19 00:00:00",
            "message": "eth,core: terminate the downloader immediately when shutdown signal is received (#32062)\n\nCloses https://github.com/ethereum/go-ethereum/issues/32058"
        },
        {
            "date": "2025-06-18 00:00:00",
            "message": "crypto/bn256/cloudflare: pull in upstream fix for R27 and R29 usage (#32057)\n\nPulls in https://github.com/cloudflare/bn256/pull/48 to remove usage of\nR27 and R29 [which are reserved](https://go.dev/doc/asm#arm64)."
        },
        {
            "date": "2025-06-18 00:00:00",
            "message": "all: reuse the global hash buffer (#31839)\n\nAs https://github.com/ethereum/go-ethereum/pull/31769 defined a global\nhash pool, so we can reuse it, and also remove the unnecessary\nKeccakState buffering\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-06-18 00:00:00",
            "message": "eth/catalyst: fetch header on forkchoiceUpdated (#31928)\n\ncloses https://github.com/ethereum/go-ethereum/issues/31254\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-06-17 00:00:00",
            "message": "build: upgrade -dlgo version to Go 1.24.4 (#31978)"
        },
        {
            "date": "2025-06-17 00:00:00",
            "message": "tests/fuzzers: added bn marshaling fuzzers (#32053)\n\nAdds marshaling fuzzing for G1 and G2 to oss-fuzz. \n\nAlso aligns the behavior of the google library to that of gnark and\ncloudflare, which only ever read the first 64 / 128 bytes of the input,\nregardless of how long the input is"
        },
        {
            "date": "2025-06-17 00:00:00",
            "message": "crypto/bn256: fix gnark deserialisation (#32055)\n\nfixes the gnark deserialisation\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-17 00:00:00",
            "message": "go.mod: bump golang.org/x/net from 0.36.0 to 0.38.0 (#31658)"
        },
        {
            "date": "2025-06-17 00:00:00",
            "message": "accounts: fix data race when closing manager (#31982)\n\nFixes a data race on the `wallets` slice when closing account Manager.\n\nAt the moment, there is a data race between a go-routine calling the\nManager's `Close` function and the background go-routine handling most\noperations on the `Manager`. The `Manager`'s `wallets` field is accessed\nwithout proper synchronization.\n\nBy moving the closing of wallets from the `Close()` function into the\nbackground thread, this issue can be resolved."
        },
        {
            "date": "2025-06-17 00:00:00",
            "message": "ethdb/pebble: lower the compaction debt (#31988)\n\nThis pull request reduces the threshold for triggering compaction at\nlevel0, leading to less compaction debt. This change is helpful in the\ncase of heavy write-load, mitigating the case of heavy write stalls\ncaused by compaction.\n\ncloses https://github.com/ethereum/go-ethereum/issues/31830"
        },
        {
            "date": "2025-06-17 00:00:00",
            "message": "fix: skip storage entries with missing preimage keys (#32051)\n\nWhen `GetKey`  is called, a missing preimage can cause the function to return a `nil`\nkey. This, in turn, makes `account.Storage` persist an incorrect value."
        },
        {
            "date": "2025-06-16 00:00:00",
            "message": "Revert \"crypto/bn256: default to gnark (#32024)\"\n\nThis reverts commit e0cf89ecfaa29b40dc548eec16e071242b40eedd."
        },
        {
            "date": "2025-06-16 00:00:00",
            "message": "node: fix data race on httpConfig.prefix (#32047)\n\nThis fixes a data race when accessing the `httpConfig.prefix` field.\nThis field can be modified while the server is running through\n`enableRPC`. The fix is storing the prefix in the handler, which is\naccessed through the atomic pointer.\n\nalternative to #32035\nfixes https://github.com/ethereum/go-ethereum/issues/32019"
        },
        {
            "date": "2025-06-16 00:00:00",
            "message": "tracers/prestate: always remove empty accounts from pre-state (#31427)\n\nThe prestateTracer had the intention of excluding accounts that were\nempty prior to execution from the prestate. This was being done only for\ncreated contracts. This PR makes it so all such empty accounts are\nexcluded. This behavior is configurable using the `includeEmpty: true`\nflag introduced in #31855.\n\n---------\n\nSigned-off-by: Ignacio Hagopian <jsign.uy@gmail.com>\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2025-06-16 00:00:00",
            "message": "go.mod: update gnark-crypto to v0.18.0 (#32034)\n\nmainly to pull in https://github.com/Consensys/gnark-crypto/pull/693"
        },
        {
            "date": "2025-06-16 00:00:00",
            "message": "crypto/bn256: default to gnark (#32024)"
        },
        {
            "date": "2025-06-16 00:00:00",
            "message": "eth/tracers: flag for empty acounts in prestateTracer (#31855)\n\nThis PR introduces a flag that enables returning of newly created state\nobjects in the prestateTracer.\n\n**Rationale**\nHaving this information is useful because local execution can more\neasily distinguish between newly created objects and system contracts.\n\n---------\n\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2025-06-13 00:00:00",
            "message": "Makefile: add make evm (#32029)"
        },
        {
            "date": "2025-06-13 00:00:00",
            "message": "core/vm: implement updates to modexp gas cost changes in EIP-7883 (#32015)\n\nImplements the updated gas cost changes introduced in\nhttps://github.com/ethereum/EIPs/commit/5cdd75157d78522bde8dc58977717c14cd7f2789"
        },
        {
            "date": "2025-06-13 00:00:00",
            "message": "metrics: remove use of reflect in metrics registration code (#31962)\n\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-06-13 00:00:00",
            "message": "trie: no need to store preimage if not enabled (#32012)\n\nAs the preimage will only be stored if `t.preimages != nil`, so no need\nto save them into local cache if not enabled. This will reduce the memory \nwasted to copy the bytes\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-06-12 00:00:00",
            "message": "metrics: add chain/gas for cumulative gas usage (#32004)\n\nThis is a followup to #31753.\n\nA cumulative counter is more useful when we need to measure / aggregate\nthe metric over a longer period of time. It also means we won't miss data,\ne.g. our prometheus scrapes every 30 seconds, and so may miss a transient \nspike in the pre-aggregated mgas/s.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-06-12 00:00:00",
            "message": "crypto/kzg4844: remove kzg initialization (#32017)\n\nThis fixes a regression in the state tests where we always initialized\nthe KZG library. This was added to test some stuff in #31791"
        },
        {
            "date": "2025-06-11 00:00:00",
            "message": "core/vm, cmd/evm: remove EOF (#32000)\n\nWith EOF removed from the Osaka fork, and no longer being tested, the\nimplementation will now just be bitrotting. I'm opting to remove it so\nit doesn't get in the way of other changes."
        },
        {
            "date": "2025-06-10 00:00:00",
            "message": "eth/filters: add timestamp to derived logs (#31887)\n\nThe block timestamp field is now added to the logs returned\nby eth_getLogs."
        },
        {
            "date": "2025-06-09 00:00:00",
            "message": "params: enable osaka fork in MergedTestChainConfig (#31993)"
        },
        {
            "date": "2025-06-09 00:00:00",
            "message": "cmd/workload: introduce transaction-trace test (#31288)\n\nThis pull request introduces a new test suite in workload framework, for\ntransaction tracing.\n\n**test generation**\n`go run . tracegen --trace-tests trace-test.json http://host:8545`\n\nand you can choose to store the trace result in a specific folder\n`go run . tracegen --trace-tests trace-test.json --trace-output\n./trace-result http://host:8545`\n\n**test run**\n`./workload test -run Trace/Transaction --trace-invalid ./trace-invalid\nhttp://host:8545`\n\nThe mismatched trace result will be saved in the specific folder for\nfurther investigation."
        },
        {
            "date": "2025-06-09 00:00:00",
            "message": "eth: initialize blobTxPool (#31992)\n\nFixes a regression introduced in #31791, see\nhttps://github.com/ethereum/go-ethereum/pull/31791#issuecomment-2955554641"
        },
        {
            "date": "2025-06-09 00:00:00",
            "message": "ethdb/pebble: adjust the number of memory tables (#31970)\n\nThis pull request adjusts the number of allowed memory tables in Pebble.\n\nPebble allows configuring an arbitrary number of memory tables to hold \nunflushed data. When the current memtable becomes full, it is scheduled \nfor flushing, and a new memtable is allocated to accept subsequent\nwrites. However, if too many memtables accumulate and are waiting to be \nflushed, subsequent writes will stall.\n\nOriginally, only two memtables were configured, each with a size of 512\nMB for Ethereum mainnet. While this setup works well under normal\nconditions, it becomes problematic under heavy write loads. In such scenarios,\nflushing is only triggered when more than 512 MB of data is pending, which may\nnot be responsive enough. Even worse, if compactions are running\nconcurrently, flushing memtables can become slow due to the heavy IO \noverhead, leading to write stalls across the system.\n\nThis pull request tries to mitigate the performance degradation by having \nmore memory tables but with a smaller size. In this case, the pending\nwrites can be flushed more smoothly and responsively."
        },
        {
            "date": "2025-06-09 00:00:00",
            "message": "eth/catalyst: implement getBlobsV2 (#31791)\n\nImplements `engine_getBlobsV2` which is needed for PeerDAS.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-05 00:00:00",
            "message": "core/vm: implement EIP 7883 - ModExp Gas Cost Increase (#31606)\n\nhttps://eips.ethereum.org/EIPS/eip-7883\n\n---------\n\nCo-authored-by: MariusVanDerWijden <m.vanderwijden@live.de>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-05 00:00:00",
            "message": "cmd/geth: fix era1 download location to match store (#31951)\n\nThis changes the era1 downloader to place the files into the correct\nlocation where geth will actually use them. Also adds integration with\nthe new --datadir.era flag."
        },
        {
            "date": "2025-06-05 00:00:00",
            "message": "eth, p2p: improve dial speed by pre-fetching dial candidates (#31944)\n\nThis PR improves the speed of Disc/v4 and Disc/v5 based discovery by\nadding a prefetch buffer to discovery sources, eliminating slowdowns\ndue to timeouts and rate mismatch between the two processes.\n\nSince we now want to filter the discv4 nodes iterator, it is being removed\nfrom the default discovery mix in p2p.Server. To keep backwards-compatibility,\nthe default unfiltered discovery iterator will be utilized by the server when\nno protocol-specific discovery is configured.\n\n---------\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-04 00:00:00",
            "message": "crypto/kzg4844: avoid copying blobs for marshaling (#31911)\n\nLLVM is not able to handle large arrays on stack"
        },
        {
            "date": "2025-06-04 00:00:00",
            "message": "core/vm: implement EIP 7823 - Set upper bounds for MODEXP (#31818)"
        },
        {
            "date": "2025-06-04 00:00:00",
            "message": "eth/downloader: fix missing receipt (#31952)\n\nThis fixes a regression introduced by #29158 where receipts of empty blocks\nwere stored into the database as an empty byte array, instead of an RLP empty list.\n\nFixes #31938\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-04 00:00:00",
            "message": "cmd/utils: update SepoliaFlag usage (#31961)\n\nThe Sepolia testnet has transitioned to pos following The Merge."
        },
        {
            "date": "2025-06-04 00:00:00",
            "message": "accounts/abi:  error when packing negative values in unsigned types (#31790)\n\nThis is an alternative approach to\nhttps://github.com/ethereum/go-ethereum/pull/31607 , that doesn't break\nbackwards-compatibility with abigen.\n\nNote that this does change the behavior of `Argument.Pack`: previously,\npacking negative values for a `uint` parameter would cause them to be\nrepresented in signed binary representation via two's complement. Now,\nit will fail explicitly in this case.\n\nHowever, I don't see a reason to support this functionality. The ABI\nalready explicitly supports signed integers. There's no reason that a\nsmart contract author would choose to store signed values in a `uint`\nafaict.\n\n---------\n\nCo-authored-by: MariusVanDerWijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-06-04 00:00:00",
            "message": "eth/catalyst: use atomics instead of locks (#31955)"
        },
        {
            "date": "2025-06-03 00:00:00",
            "message": "metrics: disable CPU metrics on tinygo (#31953)"
        },
        {
            "date": "2025-06-03 00:00:00",
            "message": "eth/filters: fix pruned history error for genesis block (#31941)\n\nFixes an issue where querying logs for block ranges starting from 0 would fail with an irrelevant\nerror on a pruned node. Now the correct \"history is pruned\" error will be returned."
        },
        {
            "date": "2025-06-03 00:00:00",
            "message": "eth/catalyst: change warning to error for 'too many bad block attempts' (#31940)\n\nThis situation was failing quietly for me recently when I had a partial\ndata corruption issue. Changing the log level to Error would increase\nvisibility for me."
        },
        {
            "date": "2025-06-03 00:00:00",
            "message": "core/filtermaps: remove filter base row cache, add group read (#31852)\n\nThis PR changes the database access of the base part of filter rows that\nare stored in groups of 32 adjacent maps for improved database storage\nsize and data access efficiency.\nBefore this grouped storage was introduced, filter rows were not cached\nbecause the access pattern of either the index rendering or the search\ndoes not really benefit from caching. Also no mutex was necessary for\nfilter row access. Storing adjacent rows in groups complicated the\nsituation as a search typically required reading all or most of adjacent\nrows of a group, so in order to implement the single row read operation\nwithout having to read the entire group up to 32 times, a cache for the\nbase row groups was added. This also introduced data race issues for\nconcurrenct read/write in the same group which was avoided by locking\nthe `indexLock` mutex. Unfortunately this also led to slowed down or\ntemporarily blocked search operations when indexing was in progress.\nThis PR returns to the original concept of uncached, no-mutex filter map\naccess by increasing read efficiency in a better way; similiarly to\nwrite operations that already operate on groups of filter maps, now\n`getFilterMapRow` is also replaced by `getFilterMapRows` that accepts a\nsingle `rowIndex` and a list of `mapIndices`. It slightly complicates\n`singleMatcherInstance.getMatchesForLayer` which now has to collect\ngroups of map indices accessed in the same row, but in exchange it\nguarantees maximum read efficiency while avoiding read/write mutex\ninterference.\n\nNote: a follow-up refactoring is WIP that further changes the database\naccess scheme by prodiving an immutable index view to the matcher, makes\nthe whole indexer more straightforward with no callbacks, and entirely\nremoves the concept of matcher syncing with `validBlocks` and the\nresulting multiple retry logic in `eth/filters/filter.go`. This might\ntake a bit longer to finish though and in the meantime this change could\nhopefully already solve the blocked request issues."
        },
        {
            "date": "2025-06-03 00:00:00",
            "message": "core/rawdb: integrate eradb backend for RPC (#31604)\n\nThis implements a backing store for chain history based on era1 files.\nThe new store is integrated with the freezer. Queries for blocks and receipts\nbelow the current freezer tail are handled by the era store.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-06-02 00:00:00",
            "message": "eth: return null for not-found in BlockByNumberOrHash (#31949)\n\nThis changes the API backend to return null for not-found blocks. This behavior\nis required by the RPC When `BlockByNumberOrHash` always returned an error\nfor this case ever since being added in https://github.com/ethereum/go-ethereum/pull/19491.\nThe backend method has a couple of call sites, and all of them handle a `nil`\nblock result because `BlockByNumber` returns `nil` for not-found.\n\nThe only case where this makes a real difference is for `eth_getBlockReceipts`,\nwhich was changed in #31361 to actually forward the error from `BlockByNumberOrHash`\nto the caller."
        },
        {
            "date": "2025-06-02 00:00:00",
            "message": ".gitea: modify scheduled workflow times (#31946)"
        },
        {
            "date": "2025-05-29 00:00:00",
            "message": "go.mod: bump flock package version (#31909)\n\nThe newer version has a stub implementation for unsupported targets,\nwhich allows us to compile to more exotic targets."
        },
        {
            "date": "2025-05-29 00:00:00",
            "message": ".travis.yml: remove master branch push builds (#31927)\n\nRelease artefact building has been migrated to another system (Gitea),\nso we can finally stop using Travis CI. However, in order to have a\nfail-safe for the release, I'm leaving the config in and it will still\ntrigger builds on Travis for tagged releases. That way, if our new\nsystem fails to work for the next release, we will still have the option\nof using Travis."
        },
        {
            "date": "2025-05-29 00:00:00",
            "message": "cmd/geth, cmd/utils: log prefunded account/key in ephemeral development mode (#31898)\n\nThis PR modifies the disclaimer/banner that is printed when starting up\nGeth in dev mode:\n* if the client is spun up in ephemeral dev mode with a keystore\noverride, the address of the first (prefunded) account is printed.\n* if the client is spun up in ephemeral mode without a keystore\noverride, the genesis allocation contains a single static prefunded EOA\naccount. It's address and private key are logged.\n* the banner is printed at the end of client initialization to make it\nmore prominent. Previously, it was logged towards the beginning of\nclient initialization and subsequent logging from startup filled the\nterminal, pushing it out of view of the user.\n\nOther change is that we now use a static prefunded dev account instead\nof generating a random one when instantiating a new dev mode chain.\n\nThis is an example of what the banner looks like:\n```\nWARN [05-28|23:05:16.475] You are running Geth in --dev mode. Please note the following:\nWARN [05-28|23:05:16.475] \nWARN [05-28|23:05:16.475]   1. This mode is only intended for fast, iterative development without assumptions on\nWARN [05-28|23:05:16.475]      security or persistence.\nWARN [05-28|23:05:16.475]   2. The database is created in memory unless specified otherwise. Therefore, shutting down\nWARN [05-28|23:05:16.475]      your computer or losing power will wipe your entire block data and chain state for\nWARN [05-28|23:05:16.475]      your dev environment.\nWARN [05-28|23:05:16.475]   3. A random, pre-allocated developer account will be available and unlocked as\nWARN [05-28|23:05:16.475]      eth.coinbase, which can be used for testing. The random dev account is temporary,\nWARN [05-28|23:05:16.475]      stored on a ramdisk, and will be lost if your machine is restarted.\nWARN [05-28|23:05:16.475]   4. Mining is enabled by default. However, the client will only seal blocks if transactions\nWARN [05-28|23:05:16.475]      are pending in the mempool. The miner's minimum accepted gas price is 1.\nWARN [05-28|23:05:16.475]   5. Networking is disabled; there is no listen-address, the maximum number of peers is set\nWARN [05-28|23:05:16.475]      to 0, and discovery is disabled.\nWARN [05-28|23:05:16.475] \nWARN [05-28|23:05:16.475] \nWARN [05-28|23:05:16.475]  Running in ephemeral mode.  The following account has been prefunded in the genesis:\nWARN [05-28|23:05:16.475] \nWARN [05-28|23:05:16.475]        Account\nWARN [05-28|23:05:16.475]        ------------------\nWARN [05-28|23:05:16.475]        0x71562b71999873db5b286df957af199ec94617f7 (10^49 ETH)\nWARN [05-28|23:05:16.475]  \nWARN [05-28|23:05:16.475]        Private Key\nWARN [05-28|23:05:16.475]        ------------------\nWARN [05-28|23:05:16.475]        0xb71c71a67e1177ad4e901695e1b4b9ee17ae16c6668d313eac2f96dbcda3f291\nWARN [05-28|23:05:16.475] \n```\n\ncloses #31796\n\n---------\n\nCo-authored-by: jwasinger <j-wasinger@hotmail.com>"
        },
        {
            "date": "2025-05-28 00:00:00",
            "message": ".gitea: run release build on tag push (#31924)"
        },
        {
            "date": "2025-05-28 00:00:00",
            "message": ".gitea: fix arm64 build (#31923)"
        },
        {
            "date": "2025-05-28 00:00:00",
            "message": ".gitea: fix archive uploads and run PPA upload on release push (#31922)"
        },
        {
            "date": "2025-05-28 00:00:00",
            "message": ".gitea: fix apt update (#31921)"
        },
        {
            "date": "2025-05-28 00:00:00",
            "message": ".gitea: fix secrets passing (#31920)"
        },
        {
            "date": "2025-05-28 00:00:00",
            "message": ".gitea: port more builds from travis and fix PPA env (#31919)"
        },
        {
            "date": "2025-05-28 00:00:00",
            "message": ".gitea: add env to scheduled builds (#31918)"
        },
        {
            "date": "2025-05-28 00:00:00",
            "message": ".gitea: adjust cron schedule (#31915)\n\nThis should make the scheduled build actually run."
        },
        {
            "date": "2025-05-28 00:00:00",
            "message": "triedb/pathdb: introduce lookup structure to optimize state access (#30971)\n\nThis pull request introduces a mechanism to improve state lookup\nefficiency in pathdb by maintaining a lookup structure that eliminates\nunnecessary iteration over diff layers.\n\nThe core idea is to track a mutation history for each dirty state entry\nresiding in the diff layers. This history records the state roots of all layers\nin which the entry was modified, sorted from oldest to newest.\n\nDuring state lookup, this mutation history is queried to find the most\nrecent layer whose state root either matches the target root or is a\ndescendant of it. This allows us to quickly identify the layer containing\nthe relevant data, avoiding the need to iterate through all diff layers from\ntop to bottom.\n\nBesides, the overhead for state lookup is constant, no matter how many\ndiff layers are retained in the pathdb, which unlocks the potential to hold\nmore diff layers.\n\nOf course, maintaining this lookup structure introduces some overhead.\nFor each state transition, we need to:\n(a) update the mutation records for the modified state entries, and\n(b) remove stale mutation records associated with outdated layers.\n\nOn our benchmark machine, it will introduce around 1ms overhead which is\nacceptable."
        },
        {
            "date": "2025-05-26 00:00:00",
            "message": "core/vm: fix bls benchmark (#31896)\n\nFixes #31893"
        },
        {
            "date": "2025-05-23 00:00:00",
            "message": "core: remove unused queued import status (#31870)"
        },
        {
            "date": "2025-05-23 00:00:00",
            "message": "internal/build: add support for Github Actions CI environment (#31891)\n\nThis adds support for the Github actions environment in the build tool.\nInformation from environment variables, like the build number and\nbranch/tag name, is used to make decisions about uploads and package\nfilenames."
        },
        {
            "date": "2025-05-23 00:00:00",
            "message": ".gitea: add cron build script (#31890)\n\nAlso swaps the push build scripts and adds environment output."
        },
        {
            "date": "2025-05-23 00:00:00",
            "message": "core/state: fix copy of storageChange (#31874)\n\nMissing field origvalue when copying storageChange."
        },
        {
            "date": "2025-05-23 00:00:00",
            "message": ".gitea: update release build actions (#31886)\n\nTrying to make the docker build work."
        },
        {
            "date": "2025-05-23 00:00:00",
            "message": ".gitea: add initial workflow file (#31885)"
        },
        {
            "date": "2025-05-23 00:00:00",
            "message": "consensus: remove clique RPC APIs (#31875)"
        },
        {
            "date": "2025-05-23 00:00:00",
            "message": "crypto: use pure Go signature implementation in tinygo (#31878)\n\ntinygo is having problems compiling the C implementation"
        },
        {
            "date": "2025-05-23 00:00:00",
            "message": "internal/era: update link to documentation (#31879)\n\nUpdated reference URL in accumulator.go comment to point to the correct\nlocation of the historical-hashes-accumulator documentation in the\nEthereum portal network specs"
        },
        {
            "date": "2025-05-22 00:00:00",
            "message": "build: Update EEST to v4.5.0 (#31880)\n\nWe deleted outdated pectra-devnet-6@v1.0.0 release by mistake, so this\nPR updates the referenced EEST release to the correct latest version.\n\n@s1na I removed the TODO comment because I think this solves it, unless\nit meant something else.\n\n---------\n\nCo-authored-by: MariusVanDerWijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-05-22 00:00:00",
            "message": "core/txpool: add explicit max blob count limit (#31837)\n\nFixes #31792.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-05-21 00:00:00",
            "message": "eth/tracers: Improve test coverage for toWord (#31846)"
        },
        {
            "date": "2025-05-21 00:00:00",
            "message": "eth/catalyst: move witness methods from engine api (#31867)\n\nNo functional changes, just moves the witness methods into its own file"
        },
        {
            "date": "2025-05-20 00:00:00",
            "message": "core/state: reduce allocation in updateStateObject (#31861)\n\nOptimize updateStateObject to reduce an allocation."
        },
        {
            "date": "2025-05-20 00:00:00",
            "message": "eth/tracers/native: add erc7562 tracer (#31006)\n\nThis PR introduces a new native tracer for AA bundlers. Bundlers participating in the alternative\nmempool will need to validate userops. This tracer will return sufficient information for them to\ndecide whether griefing is possible. Resolves #30546\n\n---------\n\nCo-authored-by: Sina M <1591639+s1na@users.noreply.github.com>"
        },
        {
            "date": "2025-05-20 00:00:00",
            "message": "core/txpool/legacypool: fix flaky test TestAllowedTxSize #30975 (#31836)\n\nSome tests involving transactions near the txMaxSize limit were flaky.\nThis was due to ECDSA signatures occasionally having leading zeros,\nwhich are omitted during RLP encoding \u2014 making the final transaction\nsize 1 byte smaller than expected.\n\nTo address this, a new helper function pricedDataTransactionWithFixedSignature\nwas added. It ensures both r and s are exactly 32 bytes (i.e., no leading zeros),\nproducing transactions with deterministic size."
        },
        {
            "date": "2025-05-20 00:00:00",
            "message": "README: update broken JSON-RPC API documentation link (#31860)\n\nI've updated the broken link to point to the current official Ethereum\nJSON-RPC API documentation at\nhttps://ethereum.org/en/developers/docs/apis/json-rpc/. This is the\ncorrect and up-to-date location for the Ethereum Execution Layer APIs\ndocumentation. The link should now work properly."
        },
        {
            "date": "2025-05-20 00:00:00",
            "message": "internal/reexec: fix broken link to Docker/Moby in comment (#31859)\n\nHey team\u2014noticed a dead link, replaced it with a working URL\n\nhttps://github.com/moby/moby/blob/master/pkg/reexec/reexec.go - old link\n\nhttps://github.com/moby/moby/blob/master/pkg/reexec/reexec_deprecated.go\n- new link"
        },
        {
            "date": "2025-05-19 00:00:00",
            "message": "internal: remove eth_{compile,getWork,submitWork} from console (#31856)\n\nThe `compile` and `eth_getWork` `eth_submitWork` apis were not available\nanymore, so try to remove them"
        },
        {
            "date": "2025-05-19 00:00:00",
            "message": "cmd/utils: remove duplicate code for influxDB tags (#31854)\n\nremove duplicate code\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>"
        },
        {
            "date": "2025-05-19 00:00:00",
            "message": "trie: use common.Hash as the key in secKeyCache map (#31786)"
        },
        {
            "date": "2025-05-19 00:00:00",
            "message": "core: don't emit the warning of log indexing if the db was not initialized (#31845)"
        },
        {
            "date": "2025-05-18 00:00:00",
            "message": "cmd/devp2p/internal/ethtest: tests for BlockRangeUpdate (#31843)\n\nI added a test for BlockRangeUpdate in #29158 but forgot to enable it.\nHere I'm adding two more tests for it. Also applied a small refactoring\nto combine calls to `dial()` and `peer()` into a single function, since\nthese two calls are duplicated in each test."
        },
        {
            "date": "2025-05-16 00:00:00",
            "message": "eth: use headers in debug.GetModifiedAccountsBy* (#31765)\n\nSmall optimization in debug_getModifiedAccountsBy* to avoid fetching block body."
        },
        {
            "date": "2025-05-16 00:00:00",
            "message": "eth/protocols/eth: implement eth/69 (#29158)\n\nThis PR implements eth/69. This protocol version drops the bloom filter\nfrom receipts messages, reducing the amount of data needed for a sync\nby ~530GB (2.3B txs * 256 byte) uncompressed. Compressed this will\nbe reduced to ~100GB\n\nThe new version also changes the Status message and introduces the\nBlockRangeUpdate message to relay information about the available history\nrange.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-05-16 00:00:00",
            "message": "core, triedb/pathdb: final integration (snapshot integration pt 5) (#30661)\n\nIn this pull request, snapshot generation in pathdb has been ported from \nthe legacy state snapshot implementation. Additionally, when running in \npath mode, legacy state snapshot data is now managed by the pathdb\nbased snapshot logic.\n\nNote: Existing snapshot data will be re-generated, regardless of whether \nit was previously fully constructed."
        },
        {
            "date": "2025-05-16 00:00:00",
            "message": "cmd/utils: remove deprecated LES flags (#31838)\n\nThey were not widely used in users setups."
        },
        {
            "date": "2025-05-15 00:00:00",
            "message": "build: upgrade -dlgo version to Go 1.24.3 (#31774)\n\nNew security fix: https://groups.google.com/g/golang-announce/c/UZoIkUT367A"
        },
        {
            "date": "2025-05-15 00:00:00",
            "message": "cmd/geth, internal/era/eradl: add era1 downloader tool (#31823)\n\nThis adds a geth subcommand for downloading era1 files and placing them into\nthe correct location. The tool can be used even while geth is already running\non the datadir. Downloads are checked against a hard-coded list of checksums\nfor mainnet and sepolia.\n\n```\n./geth download-era --server $SERVER --block 333333\n./geth download-era --server $SERVER --block 333333-444444\n./geth download-era --server $SERVER --epoch 0-10\n./geth download-era --server $SERVER --all\n```\n\nThe implementation reuses the file downloader we already had for\nfetching build tools. I've done some refactoring on it to make sure it\ncan support the new use case, and there are some changes to the build\nhere as well."
        },
        {
            "date": "2025-05-15 00:00:00",
            "message": "AUTHORS, .mailmap: update name and email attribution (#31624)"
        },
        {
            "date": "2025-05-15 00:00:00",
            "message": "core/state, core/vm: update stateless gas costs to follow the verkle-gen-7 testnet (#31014)\n\nAdding values to the witness introduces a new class of issues for\ncomputing gas: if there is not enough gas to cover adding an item to the\nwitness, then the item should not be added to the witness.\n\nThe problem happens when several items are added together, and that\nprocess runs out of gas. The witness gas computation needs a way to\nsignal that not enough gas was provided. These values can not be\nhardcoded, however, as they are context dependent, i.e. two calls to the\nsame function with the same parameters can give two different results.\n\nThe approach is to return both the gas that was actually consumed, and\nthe gas that was necessary. If the values don't match, then a witness\nupdate OOG'd. The caller should then charge the `consumed` value\n(remaining gas will be 0) and error out.\n\nWhy not return a boolean instead of the wanted value? Because when\nseveral items are touched, we want to distinguish which item lacked gas.\n\n---------\n\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>"
        },
        {
            "date": "2025-05-15 00:00:00",
            "message": "p2p/enode: add support for naming iterator sources (#31779)\n\nThis adds support for naming the source iterators of FairMix, like so:\n\n  mix.AddSource(enode.WithSourceName(\"mySource\", iter))\n\nThe source that produced the latest node is returned by the new NodeSource method."
        },
        {
            "date": "2025-05-15 00:00:00",
            "message": "cmd/utils: always record preimages in dev mode (#31821)\n\nFix a todo: force-enable this in --dev mode\n\n---------\n\nCo-authored-by: jwasinger <j-wasinger@hotmail.com>"
        },
        {
            "date": "2025-05-14 00:00:00",
            "message": "eth/catalyst: refactor engine api checks (#31182)\n\nThis PR contains three refactors:\n- refactor the latest fork check that we use quite extensively \n- refactor the nil checks in NewPayloads\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-05-14 00:00:00",
            "message": "core: use unix time to check fork readiness (#31800)"
        },
        {
            "date": "2025-05-13 00:00:00",
            "message": "eth: fix returned blockContext for empty blocks in stateAtTransaction (#31768)\n\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-05-13 00:00:00",
            "message": "crypto/kzg4844: use package github.com/crate-crypto/go-eth-kzg (#31806)\n\nI saw in https://github.com/ethereum/go-ethereum/pull/31378 introduced\ngithub.com/crate-crypto/go-eth-kzg to calculate the kzg hash, and\ngithub.com/crate-crypto/go-kzg-4844 was only used in the test files, so\npropose to drop it with go-eth-kzg instead"
        },
        {
            "date": "2025-05-12 00:00:00",
            "message": "accounts/abi/abigen: remove unnecessary test files (#31804)\n\nfix #31793: resolve conflict markers in structs-abi.go.txt"
        },
        {
            "date": "2025-05-12 00:00:00",
            "message": "core/state: fix incorrect description of function behavior (#31809)"
        },
        {
            "date": "2025-05-12 00:00:00",
            "message": "ethdb/pebble: expose stall counter of pebble (#31782)\n\nThis pull request adds a more Pebble metrics, tracking the amount of\nwrite stalls with specific reasons"
        },
        {
            "date": "2025-05-10 00:00:00",
            "message": "metrics: add chain/mgasps to track gas usage rate (#31753)\n\nThis adds a metric called `chain/mgasps`, which records how many million\ngas per second are being used during block insertion.\n\nThe value is calculated as `usedGas * 1000 / elapsed`, and it's updated\nin the `insertStats.report` method. Also cleaned up the log output to\nreuse the same value instead of recalculating it.\n\nUseful for monitoring block processing throughput.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-05-09 00:00:00",
            "message": "core/types: reduce allocations in tx.EffectiveGasTip (#31598)\n\nThis PR introduces an allocation-free version of the\nTransaction.EffectiveGasTip method to improve performance by reducing\nmemory allocations.\n\n## Changes\n- Added a new `EffectiveGasTipInto` method that accepts a destination\nparameter to avoid memory allocations\n- Refactored the existing `EffectiveGasTip` method to use the new\nallocation-free implementation\n- Updated related methods (`EffectiveGasTipValue`, `EffectiveGasTipCmp`,\n`EffectiveGasTipIntCmp`) to use the allocation-free approach\n- Added tests and benchmarks to verify correctness and measure\nperformance improvements\n\n## Motivation\nIn high-transaction-volume environments, the `EffectiveGasTip` method is\ncalled frequently. Reducing memory allocations in this method decreases\ngarbage collection pressure and improves overall system performance.\n\n## Benchmark Results\n\nAs-Is\nBenchmarkEffectiveGasTip/Original-10 42089140 27.45 ns/op 8 B/op 1\nallocs/op\n\nTo-Be\nBenchmarkEffectiveGasTip/IntoMethod-10 72353263 16.73 ns/op 0 B/op 0\nallocs/op\n\n\n## Summary of Improvements\n- **Performance**: ~39% faster execution (27.45 ns/op \u2192 16.73 ns/op)\n- **Memory**: Eliminated all allocations (8 B/op \u2192 0 B/op)\n- **Allocation count**: Reduced from 1 to 0 allocations per operation\n\nThis optimization follows the same pattern successfully applied to other\nmethods in the codebase, maintaining API compatibility while improving\nperformance.\n\n## Safety & Compatibility\nThis optimization has no side effects or adverse impacts because:\n- It maintains functional equivalence as confirmed by comprehensive\ntests\n- It preserves API compatibility with existing callers\n- It follows clear memory ownership patterns with the destination\nparameter\n- It maintains thread safety by only modifying the caller-provided\ndestination parameter\n\nThis optimization follows the same pattern successfully applied to other\nmethods in the codebase, providing better performance without\ncompromising stability or correctness.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-05-09 00:00:00",
            "message": "all: create global hasher pool (#31769)\n\nThis PR creates a global hasher pool that can be used by all packages.\nIt also removes a bunch of the package local pools.\n\nIt also updates a few locations to use available hashers or the global\nhashing pool to reduce allocations all over the codebase.\nThis change should reduce global allocation count by ~1%\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-05-08 00:00:00",
            "message": "core: implement in-block prefetcher (#31557)\n\nThis pull request enhances the block prefetcher by executing transactions \nin parallel to warm the cache alongside the main block processor.\n\nUnlike the original prefetcher, which only executes the next block and\nis limited to chain syncing, the new implementation can be applied to any \nblock. This makes it useful not only during chain sync but also for regular \nblock insertion after the initial sync.\n\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-05-08 00:00:00",
            "message": "core, triedb/pathdb: bail out error if write state history fails (#31781)\n\nThis PR fixes an issue that could lead to data corruption.\n\nWriting the state history may fail due to insufficient disk space or\nother potential errors. With this change, the entire state insertion \nwill be aborted instead of silently ignoring the error.\n\nWithout this fix, state transitions would continue while the associated\nstate history is lost. After a restart, the resulting gap would be detected, \nmaking recovery impossible."
        },
        {
            "date": "2025-05-08 00:00:00",
            "message": "core/types: delete unused test variable (#31776)\n\nDelete the unused `Account.PrivateKey` variable."
        },
        {
            "date": "2025-05-08 00:00:00",
            "message": "cmd/geth, internal: fix flaky console tests (#31784)\n\nThis pull request bumps the timeout for flaky console tests on appveyor."
        },
        {
            "date": "2025-05-08 00:00:00",
            "message": "core, ethdb: introduce database sync function (#31703)\n\nThis pull request introduces a SyncKeyValue function to the\nethdb.KeyValueStore\ninterface, providing the ability to forcibly flush all previous writes\nto disk.\n\nThis functionality is critical for go-ethereum, which internally uses\ntwo independent\ndatabase engines: a key-value store (such as Pebble, LevelDB, or\nmemoryDB for\ntesting) and a flat-file\u2013based freezer. To ensure write-order\nconsistency between\nthese engines, the key-value store must be explicitly synced before\nwriting to the\nfreezer and vice versa.\n\nFixes \n- https://github.com/ethereum/go-ethereum/issues/31405\n- https://github.com/ethereum/go-ethereum/issues/29819"
        },
        {
            "date": "2025-05-08 00:00:00",
            "message": "internal/web3ext: remove the legacy backtraceAt method (#31783)\n\nThe function `BacktraceAt` has been removed in #28187 . But the API\nend-point `debug_backtraceAt` is not removed from the file\n`internal/web3ext/web3ext.go`."
        },
        {
            "date": "2025-05-07 00:00:00",
            "message": "p2p: add metrics for inbound connection errors (#31652)\n\nAdd metics detailing reasons we reject inbound connections for, and\nreasons these connections fail during the handshake."
        },
        {
            "date": "2025-05-07 00:00:00",
            "message": "beacon/blsync: fix requests encoding in engine_newPayloadV4 (#31775)\n\nThis fixes an issue where blocks containing CL requests triggered an\nerror in the engine API. The encoding of requests used base64 instead of\nhex."
        },
        {
            "date": "2025-05-06 00:00:00",
            "message": "cmd/utils:  don't allow network ID override if a preset network is specified (#31630)"
        },
        {
            "date": "2025-05-06 00:00:00",
            "message": "go.mod: update pebble to v1.1.5 to reduce clutter in go.sum (#31541)\n\n```\ngo get github.com/cockroachdb/pebble@v1.1.5\ngo mod tidy\n```\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-05-05 00:00:00",
            "message": "version: begin v1.15.12 release cycle"
        },
        {
            "date": "2025-05-05 00:00:00",
            "message": "version: release go-ethereum v1.15.11 stable"
        },
        {
            "date": "2025-05-05 00:00:00",
            "message": "eth/tracers: fix `standardTraceBlockToFile` (#31763)\n\nFixes methods debug_standardTraceBlockToFile\nand debug_standardTraceBadBlockToFile which were\noutputting empty files.\n\n---------\n\nCo-authored-by: maskpp <maskpp266@gmail.com>\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2025-05-05 00:00:00",
            "message": "rpc: add method name length limit (#31711)\n\nThis change adds a limit for RPC method names to prevent potential abuse\nwhere large method names could lead to large response sizes.\n\nThe limit is enforced in:\n- handleCall for regular RPC method calls\n- handleSubscribe for subscription method calls\n\nAdded tests in websocket_test.go to verify the length limit\nfunctionality for both regular method calls and subscriptions.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-05-05 00:00:00",
            "message": "internal/ethapi: fix tx.from in eth_simulateV1 (#31480)\n\nIssue statement: when user requests eth_simulateV1 to return full\ntransaction objects, these objects always had an empty `from` field. The\nreason is we lose the sender when translation the message into a\ntypes.Transaction which is then later on serialized.\n\nI did think of an alternative but opted to keep with this approach as it\nkeeps complexity at the edge. The alternative would be to pass down a\nsigner object to RPCMarshal* methods and define a custom signer which\nkeeps the senders in its state and doesn't attempt the signature\nrecovery."
        },
        {
            "date": "2025-05-05 00:00:00",
            "message": "triedb: add test suite for preimage store (#31574)"
        },
        {
            "date": "2025-05-05 00:00:00",
            "message": "logs(indexer)Clean up log format in head index progress messages (#31761)\n\nupdates the log entries in `core/filtermaps/indexer.go` to remove double\nquotes around keys like \"first block\" and \"last block\", changing them to\n`firstblock` and `lastblock`. This brings them in line with the general\nlogging style used across the codebase, where log keys are unquoted\nsingle words.\n\nFor example, the log:\n`  INFO [...] \"first block\"=..., \"last block\"=...`\n\nIs now rendered as:\n`  INFO [...] firstblock=..., lastblock=...`\n\nThis change improves readability and maintains consistency with logs\nsuch as:\n`  INFO [...] number=2 sealhash=... uncles=0 txs=0 ...`\n\nNo functional behavior is changed \u2014 this is purely a formatting cleanup\nfor better developer experience."
        },
        {
            "date": "2025-05-05 00:00:00",
            "message": "core: reduce load on txindexer from API (#31752)\n\nFixes https://github.com/ethereum/go-ethereum/issues/31732.\n\nThis logic was removed in the recent refactoring in the txindexer to\nhandle history cutoff (#31393). It was first introduced in this PR:\nhttps://github.com/ethereum/go-ethereum/pull/28908.\n\nI have tested it and it works as an alternative to #31745.\n\nThis PR packs 3 changes to the flow of fetching txs from the API:\n\n- It caches the indexer tail after each run is over to avoid hitting the\ndb all the time as was done originally in #28908.\n\n- Changes `backend.GetTransaction`. It doesn't return an error anymore\nwhen tx indexer is in progress. It shifts the responsibility to the\ncaller to check the progress. The reason is that in most cases we anyway\ncheck the txpool for the tx. If it was indeed a pending tx we can avoid\nthe indexer progress check.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-05-04 00:00:00",
            "message": "params: fix comment for `DefaultBlobSchedule` (#31760)\n\n`DefaultBlobSchedule` is actually used downstream to calculate blob fees\n(e.g.,\n[src](https://github.com/ethereum-optimism/optimism/blob/601a380e47853c2922ea1f8944cda05f0eac16f4/op-service/eth/blob.go#L301)),\nthis PR makes it explicit that these params are for `Ethereum prod`\ninstead of `test chains`."
        },
        {
            "date": "2025-05-04 00:00:00",
            "message": "core/txpool/legacypool: fix data race of pricedList access (#31758)"
        },
        {
            "date": "2025-05-03 00:00:00",
            "message": "core/filtermaps: fix log index initialization (#31750)\n\nThis PR fixes an initialization bug that in some cases caused the map\nrenderer to leave the last, partially rendered map as is and resume\nrendering from the next map. At initialization we check whether the\nexisting rendered maps are consistent with the current chain view and\nrevert them if necessary. Until now this happened through an ugly hacky\nsolution, a \"limited\" chain view that was supposed to trigger a rollback\nof some maps in the renderer logic if necessary. This whole setup worked\nunder assumptions that just weren't true any more. As a result it always\ntried to revert the last map but also it did not shorten the indexed\nrange, only set `headIndexed` to false which indicated to the renderer\nlogic that the last map is fully populated (which it wasn't).\nNow an explicit rollback of any unusable (reorged) maps happens at\nstartup, which also means that no hacky chain view is necessary, as soon\nas the new `FilterMaps` is returned, the indexed range and view are\nconsistent with each other.\n\nIn the first commit an extra check is also added to `writeFinishedMaps`\nso that if there is ever again a bug that would result in a gapped index\nthen it will not break the db with writing the incomplete data. Instead\nit will return an indexing error which causes the indexer to revert to\nunindexed mode and print an error log instantly. Hopefully this will not\never happen in the future, but in order to test this safeguard check I\nmanually triggered the bug with only the first commit enabled, which\ncaused an indexing error as expected. With the second commit added (the\nactual fix) the same operation succeeded without any issues.\n\nNote that the database version is also bumped in this PR in order to\nenforce a full reindexing as any existing database might be potentially\nbroken.\n\nFixes https://github.com/ethereum/go-ethereum/issues/31729"
        },
        {
            "date": "2025-05-02 00:00:00",
            "message": "core/filtermaps: fix log value search range (#31734)\n\nThis PR fixes the out-of-range block number logic of `getBlockLvPointer`\nwhich sometimes caused searches to fail if the head was updated in the\nwrong moment. This logic ensures that querying the pointer of a future\nblock returns the pointer after the last fully indexed block (instead of\nfailing) and therefore an async range update will not cause the search\nto fail. Earier this behaviour only worked when `headIndexed` was true\nand `headDelimiter` pointed to the end of the indexed range. Now it also\nworks for an unfinished index.\n\nThis logic is also moved from `FilterMaps.getBlockLvPointer` to\n`FilterMapsMatcherBackend.GetBlockLvPointer` because it is only required\nby the search anyways. `FilterMaps.getBlockLvPointer` now only returns a\npointer for existing blocks, consistently with how it is used in the\nindexer/renderer.\n\nNote that this unhandled case has been present in the code for a long\ntime but went unnoticed because either one of two previously fixed bugs\ndid prevent it from being triggered; the incorrectly positive\n`tempRange.headIndexed` (fixed in\nhttps://github.com/ethereum/go-ethereum/pull/31680), though caused other\nproblems, prevented this one from being triggered as with a positive\n`headIndexed` no database read was triggered in `getBlockLvPointer`.\nAlso, the unnecessary `indexLock` in `synced()` (fixed in\nhttps://github.com/ethereum/go-ethereum/pull/31708) usually did prevent\nthe search seeing the temp range and therefore avoided noticeable\nissues."
        },
        {
            "date": "2025-05-02 00:00:00",
            "message": "core, eth/gasestimator: introduce MaxGasUsed for estimation (#31735)\n\nThis PR improves gas estimation for data-heavy transactions which hit the floor data gas cost."
        },
        {
            "date": "2025-05-02 00:00:00",
            "message": "node: avoid double close resp.Body (#31710)\n\nThe functions `rpcRequest` and `batchRpcRequest` call `baseRpcRequest`.\nAnd `resp.Body` will be closed in the function `baseRpcRequest` later by\n`t.Cleanup`:\n\n```go\nfunc baseRpcRequest(t *testing.T, url, bodyStr string, extraHeaders ...string) *http.Response {\n        // ......\n\tt.Cleanup(func() { resp.Body.Close() })\n\treturn resp\n}\n```"
        },
        {
            "date": "2025-05-02 00:00:00",
            "message": "cmd/devp2p: test for non-existent block request (#31506)\n\nAdd tests for GetBlockHeaders that verify client does not disconnect when unlikely block numbers are requested, e.g. max uint64.\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-05-02 00:00:00",
            "message": "ethclient: fix retrieval of pending block (#31504)\n\nSince the block hash is not returned for pending blocks, ethclient cannot unmarshal into RPC block. This makes hash optional on rpc block and compute the hash locally for pending blocks to correctly key the tx sender cache.\n\n\nhttps://github.com/ethereum/go-ethereum/blob/a82303f4e3cedcebe31540a53dde4f24fc93da80/internal/ethapi/api.go#L500-L504\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-04-30 00:00:00",
            "message": "cmd/geth: fix compatErr in initGenesis (#31746)"
        },
        {
            "date": "2025-04-30 00:00:00",
            "message": "core/filtermaps: do not derive full receipts during rendering (#31716)\n\nThis changes the filtermaps to only pull up the raw receipts, not the\nderived receipts which saves a lot of allocations.\n\nDuring normal execution this will reduce the allocations of the whole\ngeth node by ~15%."
        },
        {
            "date": "2025-04-30 00:00:00",
            "message": "eth/fetcher: define BatchSize as a constant (#31742)"
        },
        {
            "date": "2025-04-30 00:00:00",
            "message": "cmd/geth: print crit log if chain config is not compatible (#31743)"
        },
        {
            "date": "2025-04-29 00:00:00",
            "message": "crypto/kzg4844: add ComputeCells functionality (#31378)\n\nFor PeerDAS, we need to compute cell proofs. Both ckzg and gokzg support\ncomputing these cell proofs.\nThis PR does the following:\n\n- Update the go-kzg library from \"github.com/crate-crypto/go-kzg-4844\"\nto \"github.com/crate-crypto/go-eth-kzg\" which will be the new upstream\nfor go-kzg moving forward\n- Update ckzg from v1.0.0 to v2.0.1 and switch to /v2\n- Updates the trusted setup to contain the g1 points both in lagrange\nand monomial form\n- Expose `ComputeCells` to compute the cell proofs"
        },
        {
            "date": "2025-04-29 00:00:00",
            "message": "beacon/engine: omit empty witness in payload response (#31739)\n\nFixes https://github.com/ethereum/go-ethereum/issues/31737"
        },
        {
            "date": "2025-04-29 00:00:00",
            "message": "core: apply overrides to mainnet chainconfig (#31733)\n\nThis PR applies the config overrides to the new config as well,\notherwise they will not be applied to defined configs, making\nshadowforks impossible.\n\nTo test:\n```\n>  ./build/bin/geth --override.prague 123 --dev --datadir /tmp/geth\nINFO [04-28|21:20:47.009]  - Prague:                      @123\n> ./build/bin/geth --override.prague 321 --dev --datadir /tmp/geth\nINFO [04-28|21:23:59.760]  - Prague:                      @321\n``"
        },
        {
            "date": "2025-04-28 00:00:00",
            "message": "trie: add edgecase for rangeproof correctness (#31667)\n\nThis PR adds checking for an edgecase which theoretically can happen in\nthe range-prover. Right now, we check that a key does not overwrite a\nprevious one by checking that the key is increasing. However, if keys\nare of different lengths, it is possible to create a key which is\nincreasing _and_ overwrites the previous key. Example: `0xaabbcc`\nfollowed by `0xaabbccdd`.\n\nThis can not happen in go-ethereum, which always uses fixed-size paths\nfor accounts and storage slot paths in the trie, but it might happen if\nthe range prover is used without guaranteed fixed-size keys.\n\nThis PR also adds some testcases for the errors that are expected."
        },
        {
            "date": "2025-04-28 00:00:00",
            "message": "core/txpool/legacypool: refactor truncatePending (#31715)\n\nTruncatePending shows up bright red on our nodes, because it computes\nthe length of a map multiple times.\nI don't know why this is so expensive, but around 20% of our time is\nspent on this, which is super weird.\n\n```\n//PR: BenchmarkTruncatePending-24    \t   17498\t     69397 ns/op\t   32872 B/op\t       3 allocs/op\n//Master: BenchmarkTruncatePending-24    \t    9960\t    123954 ns/op\t   32872 B/op\t       3 allocs/op\n```\n\n```\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkTruncatePending-24     123954        69397         -44.01%\n\nbenchmark                       old allocs     new allocs     delta\nBenchmarkTruncatePending-24     3              3              +0.00%\n\nbenchmark                       old bytes     new bytes     delta\nBenchmarkTruncatePending-24     32872         32872         +0.00%\n```\nThis simple PR is a 44% improvement over the old state\n\n\n``` \nOUTINE ======================== github.com/ethereum/go-ethereum/core/txpool/legacypool.(*LegacyPool).truncatePending in github.com/ethereum/go-ethereum/core/txpool/legacypool/legacypool.go\n     1.96s     18.02s (flat, cum) 19.57% of Total\n         .          .   1495:func (pool *LegacyPool) truncatePending() {\n         .          .   1496:\tpending := uint64(0)\n      60ms      2.99s   1497:\tfor _, list := range pool.pending {\n     250ms      5.48s   1498:\t\tpending += uint64(list.Len())\n         .          .   1499:\t}\n         .          .   1500:\tif pending <= pool.config.GlobalSlots {\n         .          .   1501:\t\treturn\n         .          .   1502:\t}\n         .          .   1503:\n         .          .   1504:\tpendingBeforeCap := pending\n         .          .   1505:\t// Assemble a spam order to penalize large transactors first\n         .      510ms   1506:\tspammers := prque.New[int64, common.Address](nil)\n     140ms      2.50s   1507:\tfor addr, list := range pool.pending {\n         .          .   1508:\t\t// Only evict transactions from high rollers\n      50ms      5.08s   1509:\t\tif uint64(list.Len()) > pool.config.AccountSlots {\n         .          .   1510:\t\t\tspammers.Push(addr, int64(list.Len()))\n         .          .   1511:\t\t}\n         .          .   1512:\t}\n         .          .   1513:\t// Gradually drop transactions from offenders\n         .          .   1514:\toffenders := []common.Address{}\n```\n\n```go\n// Benchmarks the speed of batch transaction insertion in case of multiple accounts.\nfunc BenchmarkTruncatePending(b *testing.B) {\n\t// Generate a batch of transactions to enqueue into the pool\n\tpool, _ := setupPool()\n\tdefer pool.Close()\n\tb.ReportAllocs()\n\tbatches := make(types.Transactions, 4096+1024+1)\n\tfor i := range len(batches) {\n\t\tkey, _ := crypto.GenerateKey()\n\t\taccount := crypto.PubkeyToAddress(key.PublicKey)\n\t\tpool.currentState.AddBalance(account, uint256.NewInt(1000000), tracing.BalanceChangeUnspecified)\n\t\ttx := transaction(uint64(0), 100000, key)\n\t\tbatches[i] = tx\n\t}\n\tfor _, tx := range batches {\n\t\tpool.addRemotesSync([]*types.Transaction{tx})\n\t}\n\tb.ResetTimer()\n\t// benchmark truncating the pending\n\tfor range b.N {\n\t\tpool.truncatePending()\n\t}\n}\n```"
        },
        {
            "date": "2025-04-25 00:00:00",
            "message": "version: begin v1.15.11 release cycle"
        },
        {
            "date": "2025-04-25 00:00:00",
            "message": "version: release go-ethereum v1.15.10 stable"
        },
        {
            "date": "2025-04-25 00:00:00",
            "message": "core/filtermaps: fix deadlock in filtermap callback (#31708)\n\nThis PR fixes a deadlock situation is deleteTailEpoch that might arise\nwhen\nrange delete is running in iterator based fallback mode (either using\nleveldb\ndatabase or the hashdb state storage scheme). \n\nIn this case a stopCb callback is called periodically that does check\nevents,\nincluding matcher sync requests, in which case it tries to acquire\nindexLock\nfor read access, while deleteTailEpoch already held it for write access.\n\nThis pull request removes the indexLock acquiring in\n`FilterMapsMatcherBackend.synced`\nas this function is only called in the indexLoop.\n\nFixes https://github.com/ethereum/go-ethereum/issues/31700"
        },
        {
            "date": "2025-04-24 00:00:00",
            "message": "beacon/params: add mainnet electra config (#31706)\n\nThis PR adds the electra beacon chain configuration for mainnet."
        },
        {
            "date": "2025-04-24 00:00:00",
            "message": "miner: increase default gas limit to 36M (#31705)"
        },
        {
            "date": "2025-04-23 00:00:00",
            "message": "ethclient: allow passing AuthorizationList to calls (#31198)\n\nThis PR adds the `AuthorizationList` field to the `CallMsg` interface to support `eth_call`\nand `eth_estimateGas` of set-code transactions.\n\n---------\n\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2025-04-22 00:00:00",
            "message": "internal/debug: add debug_setMemoryLimit (#31441)"
        },
        {
            "date": "2025-04-21 00:00:00",
            "message": "version: begin v1.15.10 release cycle"
        },
        {
            "date": "2025-04-21 00:00:00",
            "message": "version: release go-ethereum v1.15.9 stable"
        },
        {
            "date": "2025-04-21 00:00:00",
            "message": "core/filtermaps: clone cached slices, fix tempRange (#31680)\n\nThis PR ensures that caching a slice or a slice of slices will never\naffect the original version by always cloning a slice fetched from cache\nif it is not used in a guaranteed read only way."
        },
        {
            "date": "2025-04-20 00:00:00",
            "message": "beacon/params, core/filtermaps: update checkpoints (#31674)\n\nThis PR updates checkpoints for blsync and filtermaps."
        },
        {
            "date": "2025-04-20 00:00:00",
            "message": "eth/filters, core/filtermaps: safe chain view update (#31590)\n\nThis PR changes the chain view update mechanism of the log filter.\nPreviously the head updates were all wired through the indexer, even in\nunindexed mode. This was both a bit weird and also unsafe as the\nindexer's chain view was updates asynchronously with some delay, making\nsome log related tests flaky. Also, the reorg safety of the indexed\nsearch was integrated with unindexed search in a weird way, relying on\n`syncRange.ValidBlocks` in the unindexed case too, with a special\ncondition added to only consider the head of the valid range but not the\ntail in the unindexed case.\n\nIn this PR the current chain view is directly accessible through the\nfilter backend and unindexed search is also chain view based, making it\ninherently safe. The matcher sync mechanism is now only used for indexed\nsearch as originally intended, removing a few ugly special conditions.\n\nThe PR is currently based on top of\nhttps://github.com/ethereum/go-ethereum/pull/31642\nTogether they fix https://github.com/ethereum/go-ethereum/issues/31518\nand replace https://github.com/ethereum/go-ethereum/pull/31542\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-04-19 00:00:00",
            "message": "eth/gasprice: fix eth_feeHistory blobGasUsedRatio divide zero (#31663)\n\nThe API `eth_feeHistory` returns\n`{\"jsonrpc\":\"2.0\",\"id\":1,\"error\":{\"code\":-32603,\"message\":\"json:\nunsupported value: NaN\"}}`, when we query `eth_feeHistory` with a old\nblock that without a blob, or when the field\n`config.blobSchedule.cancun.max` in genesis.config is 0 (that happens\nfor some projects fork geth but they don't have blob).\n\nSo here we specially handle the case when maxBlobGas == 0 to prevent\nthis issue from happening."
        },
        {
            "date": "2025-04-19 00:00:00",
            "message": "core: fail execution if system call fails to execute (#31639)\n\nsee: https://github.com/ethereum/pm/issues/1450#issuecomment-2800911584"
        },
        {
            "date": "2025-04-18 00:00:00",
            "message": "core/filtermaps: make ChainView thread safe (#31671)\n\nThis PR makes `filtermaps.ChainView` thread safe because it is used\nconcurrently both by the indexer and multiple matcher threads. Even\nthough it represents an immutable view of the chain, adding a mutex lock\nto the `blockHash` function is necessary because it does so by extending\nits list of non-canonical hashes if the underlying blockchain is\nchanged.\n\nThe unsafe concurrency did cause a panic once after running the unit\ntests for several hours and it could also happen during live operation."
        },
        {
            "date": "2025-04-18 00:00:00",
            "message": "core/filtermaps: only use common ancestor snapshots (#31668)\n\nThis PR makes the conditions for using a map rendering snapshot stricter\nso that whenever a reorg happens, only a snapshot of a common ancestor\nblock can be used. The issue fixed in\nhttps://github.com/ethereum/go-ethereum/pull/31642 originated from using\na snapshot that wasn't a common ancestor. For example in the following\nreorg scenario: `A->B`, then `A->B2`, then `A->B2->C2`, then `A->B->C`\nthe last reorg triggered a render from snapshot `B` saved earlier. Now\nthis is possible under certain conditions but extra care is needed, for\nexample if block `B` crosses a map boundary then it should not be\nallowed. With the latest fix the checks are sufficient but I realized I\nwould just feel safer if we disallowed this rare and risky scenario\naltogether and just render from snapshot `A` after the last reorg in the\nexample above. The performance difference if a few milliseconds and it\noccurs rarely (about once a day on Holesky, probably much more rare on\nMainnet).\nNote that this PR only makes the snapshot conditions stricter and\n`TestIndexerRandomRange` does check that snapshots are still used\nwhenever it's obviously possible (adding blocks after the current head\nwithout a reorg) so this change can be considered safe. Also I am\nrunning the unit tests and the fuzzer and everything seems to be fine."
        },
        {
            "date": "2025-04-17 00:00:00",
            "message": "eth: add tx to locals only if it has a chance of acceptance (#31618)\n\nThis pull request improves error handling for local transaction submissions.\n\nSpecifically, if a transaction fails with a temporary error but might be\naccepted later, the error will not be returned to the user; instead, the\ntransaction will be tracked locally for resubmission. \n\nHowever, if the transaction fails with a permanent error (e.g., invalid\ntransaction or insufficient balance), the error will be propagated to the user.\n\nThese errors returned in the legacyPool are regarded as temporary failure:\n\n- `ErrOutOfOrderTxFromDelegated`\n- `txpool.ErrInflightTxLimitReached`\n- `ErrAuthorityReserved`\n- `txpool.ErrUnderpriced`\n- `ErrTxPoolOverflow`\n- `ErrFutureReplacePending`\n\nNotably, InsufficientBalance is also treated as a permanent error, as\nit\u2019s highly unlikely that users will transfer funds into the sender account\nafter submitting the transaction. Otherwise, users may be confused\u2014seeing\ntheir transaction submitted but unaware that the sender lacks sufficient funds\u2014and\ncontinue waiting for it to be included.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-04-17 00:00:00",
            "message": "eth/catalyst: sanitize simulated beacon period to avoid overflowing time.Duration (#31407)\n\ncloses #31401\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\nCo-authored-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-04-17 00:00:00",
            "message": "core,params: add fork readiness indicator in logs (#31340)\n\ncloses #31310 \n\nThis has been requested a few times in the past and I think it is a nice\nquality-of-life improvement for users. At a predetermined interval,\nthere will now be a \"Fork ready\" log when a future fork is scheduled,\nbut not yet active.\n\nIt can only possibly print after block import, which kinda avoids the\nscenario where the client isn't progressing or is syncing and the user\nthinks it's \"ready\" because it sees a ready log.\n\nNew output:\n\n```console\nINFO [03-08|21:32:57.472] Imported new potential chain segment     number=7 hash=aa24ee..f09e62 blocks=1 txs=0 mgas=0.000 elapsed=\"874.916\u00b5s\" mgasps=0.000 snapdiffs=973.00B triediffs=7.05KiB triedirty=0.00B\nINFO [03-08|21:32:57.473] Ready for fork activation                fork=Prague date=\"18 Mar 25 19:29 CET\" remaining=237h57m0s timestamp=1,742,322,597\nINFO [03-08|21:32:57.475] Chain head was updated                   number=7 hash=aa24ee..f09e62 root=19b0de..8d32f2 elapsed=\"129.125\u00b5s\"\n```\n\nEasiest way to verify this behavior is to apply this patch and run `geth\n--dev --dev.period=12`\n\n```patch\ndiff --git a/params/config.go b/params/config.go\nindex 9c7719d901..030c4f80e7 100644\n--- a/params/config.go\n+++ b/params/config.go\n@@ -174,7 +174,7 @@ var (\n                ShanghaiTime:            newUint64(0),\n                CancunTime:              newUint64(0),\n                TerminalTotalDifficulty: big.NewInt(0),\n-               PragueTime:              newUint64(0),\n+               PragueTime:              newUint64(uint64(time.Now().Add(time.Hour * 300).Unix())),\n                BlobScheduleConfig: &BlobScheduleConfig{\n                        Cancun: DefaultCancunBlobConfig,\n                        Prague: DefaultPragueBlobConfig,\n```"
        },
        {
            "date": "2025-04-17 00:00:00",
            "message": "params: add prague timestamp for mainnet (#31535)\n\nhttps://eips.ethereum.org/EIPS/eip-7600#activation\n\nTimestamp: `1746612311`\nFork id: `0xc376cf8b`"
        },
        {
            "date": "2025-04-17 00:00:00",
            "message": "eth: fix transaction sender cache miss before broadcast (#31657)\n\nBroadcastTransactions needs the Sender address to route message flows\nfrom the same Sender address consistently to the same random subset of\npeers. It however spent considerable time calculating the Sender\naddresses, even if the Sender address was already calculated and cached\nin other parts of the code.\n\nSince we only need the mapping, we can use any signer, and the one that\nhad already been used is a better choice because of cache reuse."
        },
        {
            "date": "2025-04-17 00:00:00",
            "message": "core: fix sync reset in pruned nodes (#31638)\n\nThis is an attempt at fixing #31601. I think what happens is the startup\nlogic will try to get the full block body (it's `bc.loadLastState`) and\nfail because genesis block has been pruned from the freezer. This will\ncause it to keep repeating the reset logic, causing a deadlock.\n\nThis can happen when due to an unsuccessful sync we don't have the state\nfor the head (or any other state) fully, and try to redo the snap sync.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-04-17 00:00:00",
            "message": "core: fix history pruning initialization for empty DB (#31656)\n\nThis fixes an issue where running geth with `--history.chain postmerge`\nwould not work on an empty database.\n\n```\nERROR[04-16|23:11:12.913] Chain history database is pruned to unknown block tail=0\nFatal: Failed to register the Ethereum service: unexpected database tail\n```"
        },
        {
            "date": "2025-04-17 00:00:00",
            "message": "core/txpool/legacypool: fix data race of txlookup access (#31641)"
        },
        {
            "date": "2025-04-16 00:00:00",
            "message": "core/state: fix log format (#31610)\n\nLog `key` in hexadecimal string format."
        },
        {
            "date": "2025-04-16 00:00:00",
            "message": "core/filtermaps: fix map renderer reorg issue (#31642)\n\nThis PR fixes a bug in the map renderer that sometimes used an obsolete\nblock log value pointer to initialize the iterator for rendering from a\nsnapshot. This bug was triggered by chain reorgs and sometimes caused\nindexing errors and invalid search results. A few other conditions are\nalso made safer that were not reported to cause issues yet but could\npotentially be unsafe in some corner cases. A new unit test is also\nadded that reproduced the bug but passes with the new fixes.\n\nFixes https://github.com/ethereum/go-ethereum/issues/31593\nMight also fix https://github.com/ethereum/go-ethereum/issues/31589\nthough this issue has not been reproduced yet, but it appears to be\nrelated to a log index database corruption around a specific block,\nsimilarly to the other issue.\n\nNote that running this branch resets and regenerates the log index\ndatabase. For this purpose a `Version` field has been added to\n`rawdb.FilterMapsRange` which will also make this easier in the future\nif a breaking database change is needed or the existing one is\nconsidered potentially broken due to a bug, like in this case."
        },
        {
            "date": "2025-04-16 00:00:00",
            "message": "cmd/geth: remove the unused bloomfilter.size flag (#31646)"
        },
        {
            "date": "2025-04-15 00:00:00",
            "message": "p2p: fix dial metrics not picking up the right error (#31621)\n\nOur metrics related to dial errors were off. The original error was not\nwrapped, so the caller function had no chance of picking it up.\nTherefore the most common error, which is \"TooManyPeers\", was not\ncorrectly counted.\n\nThe metrics were originally introduced in\nhttps://github.com/ethereum/go-ethereum/pull/27621\n\nI was thinking of various possible solutions.\n- the one proposed here wraps both the new error and the origial error.\nIt is not a pattern we use in other parts of the code, but works. This\nis maybe the smallest possible change.\n- as an alternate, I could write a proper `errProtoHandshakeError` with\nit's own wrapped error\n- finally, I'm not even sure we need `errProtoHandshakeError`, maybe we\ncould just pass up the original error.\n\n---------\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-04-15 00:00:00",
            "message": "all: remove martin from CODEOWNERS (#31637)\n\nThank you, @holiman, for being an integral part of the Go-Ethereum \nand for your invaluable contributions over the years.\n\nThis will always be your home and you're welcome back anytime!"
        },
        {
            "date": "2025-04-15 00:00:00",
            "message": "core: initialize history pruning in BlockChain (#31636)\n\nI added the history mode configuration in eth/ethconfig initially, since\nit seemed like the logical place. But it turns out we need access to the\nintended pruning setting at a deeper level, and it actually needs to be\nintegrated with the blockchain startup procedure.\n\nWith this change applied, if a node previously had its history pruned,\nand is subsequently restarted **without** the `--history.chain\npostmerge` flag, the `BlockChain` initialization code will now verify\nthe freezer tail against the known pruning point of the predefined\nnetwork and will restore pruning status. Note that this logic is quite\nrestrictive, we allow non-zero tail only for known networks, and only\nfor the specific pruning point that is defined."
        },
        {
            "date": "2025-04-14 00:00:00",
            "message": "eth: add logic to drop peers randomly when saturated (#31476)\n\nAs of now, Geth disconnects peers only on protocol error or timeout,\nmeaning once connection slots are filled, the peerset is largely fixed.\n\nAs mentioned in https://github.com/ethereum/go-ethereum/issues/31321,\nGeth should occasionally disconnect peers to ensure some churn.\nWhat/when to disconnect could depend on:\n- the state of geth (e.g. sync or not)\n- current number of peers\n- peer level metrics\n\nThis PR adds a very slow churn using a random drop.\n\n---------\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-04-14 00:00:00",
            "message": "p2p: better dial/serve success metrics (#31629)\n\nOur previous success metrics gave success even if a peer disconnected\nright after connection. These metrics only count peers that stayed\nconnected for at least 1 min. The 1 min limit is an arbitrary choice. We do\nnot use this for decision logic, only statistics."
        },
        {
            "date": "2025-04-11 00:00:00",
            "message": "version: begin v1.15.9 release cycle"
        },
        {
            "date": "2025-04-11 00:00:00",
            "message": "version: release go-ethereum v1.15.8 stable"
        },
        {
            "date": "2025-04-11 00:00:00",
            "message": "build: upgrade -dlgo version to Go 1.24.2 (#31538)"
        },
        {
            "date": "2025-04-10 00:00:00",
            "message": "tests/testdata: revert to v17.0\n\nThe submodule was accidentally updated to another commit by f64aa6eaf7."
        },
        {
            "date": "2025-04-10 00:00:00",
            "message": "internal/testlog: fix log output from sub-loggers (#31539)\n\nWhen we instantiate a sub-logger via\n`go-ethereum/internal/testlog/logger.With`, we copy the reference to the\n`bufHandler` from the parent logger. However, internally,\n`go-ethereum/internal/testlog/logger.With` calls `log/slog/Logger.With`\nwhich creates a new handler instance (via\n`internal/bufHandler.WithAttrs`).\n\nThis PR modifies sub-logger instantiation to use the newly-instantiated\nhandler, instead of copying the reference from the parent instance. The\ntype cast from `slog.Handler` to `*bufHandler` in\n`internal/testlog/Logger.With` is safe here because a\n`internal/testlog/Logger` can only be instantiated with a `*bufHandler`\nas the underlying handler type.\n\nNote, that I've also removed a pre-existing method that broke the above\nassumption. However, this method is not used in our codebase.\n\nI'm not sure if the assumption holds for forks of geth (e.g. optimism\nhas modified the testlogger somewhat allowing test loggers to accept\narbitrary handler types), but it seems okay to break API compatibility\ngiven that this is in the `internal` package.\n\ncloses https://github.com/ethereum/go-ethereum/issues/31533"
        },
        {
            "date": "2025-04-10 00:00:00",
            "message": "eth/catalyst:  in tests, manually sync txpool after initial chain insertion to prevent race between txpool head reset and promotion of txs that will be subsequently added (#31595)\n\nbefore this changes, this will result in numerous test failures:\n```\n> go test -run=Eth2AssembleBlock -c\n> stress ./catalyst.test\n```\n\nThe reason is that after creating/inserting the test chain, there is a\nrace between the txpool head reset and the promotion of txs added from\ntests.\n\nEnsuring that the txpool state is up to date with the head of the chain\nbefore proceeding fixes these flaky tests."
        },
        {
            "date": "2025-04-10 00:00:00",
            "message": "accounts/usbwallet: full 32bit chainId support for Trezor (#17439)\n\nThis fix allows Trezor to support full 32bit chainId in geth, with the\nnext version of firmware.\n\nFor `chainId > 2147483630` case, Trezor returns signature bit only.\n- Trezor returns only signature parity for `chainId > 2147483630` case.\n- for `chainId == 2147483630` case, Trezor returns `MAX_UINT32` or `0`,\nbut it doesn't matter.\n  (`2147483630 * 2 + 35` = `4294967295`(`MAX_UINT32`))\n\nchainId | returned signature_v | compatible issue\n---------|------------------------|--------------------\n0 < chainId <= 255 | chainId * 2 + 35 + v | no issue (firmware `1.6.2`\nfor Trezor one)\n255 < chainId <= 2147483630 | chainId * 2 + 35 + v | ***fixed.***\n*firmware `1.6.3`*\nchainId > 2147483630 | v | *firmware `1.6.3`*\n\nPlease see also: full 32bit chainId support for Trezor\n- Trezor one: https://github.com/trezor/trezor-mcu/pull/399 ***merged***\n- Trezor model T: https://github.com/trezor/trezor-core/pull/311\n***merged***\n\n---------\n\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\nCo-authored-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>"
        },
        {
            "date": "2025-04-10 00:00:00",
            "message": "eth/fetcher: Fix flaky TestTransactionForgotten test using mock clock (#31468)\n\nFixes #31169\n\nThe TestTransactionForgotten test was flaky due to real time\ndependencies. This PR:\n\n- Replaces real time with mock clock for deterministic timing control\n- Adds precise state checks at timeout boundaries\n- Verifies underpriced cache states and cleanup\n- Improves test reliability by controlling transaction timestamps\n- Adds checks for transaction re-enqueueing behavior\n\nThe changes ensure consistent test behavior without timing-related\nflakiness.\n\n---------\n\nCo-authored-by: Zsolt Felfoldi <zsfelfoldi@gmail.com>"
        },
        {
            "date": "2025-04-10 00:00:00",
            "message": "core/txpool: allow tx and authority regardless of admission order (#31373)\n\nThis PR proposes a change to the authorizations' validation introduced\nin commit cdb66c8. These changes make the expected behavior independent\nof the order of admission of authorizations, improving the\npredictability of the resulting state and the usability of the system\nwith it.\n\nThe current implementation behavior is dependent on the transaction\nsubmission order: This issue is related to authorities and the sender of\na transaction, and can be reproduced respecting the normal nonce rules.\n\nThe issue can be reproduced by the two following cases:\n**First case**\n- Given an empty pool.\n- Submit transaction `{ from: B, auths [ A ] }`: is accepted.\n- Submit transaction `{ from: A }`: Is accepted: it becomes the one\nin-flight transaction allowed.\n\n**Second case**\n- Given an empty pool.\n- Submit transaction `{ from: A }`:  is accepted\n- Submit transaction `{ from: B, auths [ A ] }`: is rejected since there\nis already a queued/pending transaction from A.\n\nThe expected behavior is that both sequences of events would lead to the\nsame sets of accepted and rejected transactions.\n\n**Proposed changes** \nThe queued/pending transactions issued from any authority of the\ntransaction being validated have to be counted, allowing one transaction\nfrom accounts submitting an authorization.\n\n- Notice that the expected behavior was explicitly forbidden in the case\n\"reject-delegation-from-pending-account\", I believe that this behavior\nconflicts to the definition of the limitation, and it is removed in this\nPR. The expected behavior is tested in\n\"accept-authorization-from-sender-of-one-inflight-tx\".\n- Replacement tests have been separated to improve readability of the\nacceptance test.\n- The test \"allow-more-than-one-tx-from-replaced-authority\" has been\nextended with one extra transaction, since the system would always have\naccepted one transaction (but not two).\n- The test \"accept-one-inflight-tx-of-delegated-account\" is extended to\nclean-up state, avoiding leaking the delegation used into the other\ntests. Additionally, replacement check is removed to be tested in its\nown test case.\n\n**Expected behavior** \nThe expected behavior of the authorizations' validation shall be as\nfollows:\n\n![image](https://github.com/user-attachments/assets/dbde7a1f-9679-4691-94eb-c197a0cbb823)\nNotice that replacement shall be allowed, and behavior shall remain\ncoherent with the table, according to the replaced transaction.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-04-09 00:00:00",
            "message": "core/txpool: add notice to` Clear` that is not meant for production code (#31567)\n\nThe `Sync(..)` function explicitly says not to rely on in production\ncode, but it is used in `Clear(..)` so should add a similar mention."
        },
        {
            "date": "2025-04-09 00:00:00",
            "message": "p2p/nat: fix UPnP port reset (#31566)\n\nMake UPnP more robust\n\n- Once a random port was mapped, we try to stick to it even if a UPnP\nrefresh fails. Previously we were immediately moving back to try the\ndefault port, leading to frequent ENR changes.\n\n- We were deleting port mappings before refresh as a possible\nworkaround. This created issues in some UPnP servers. The UPnP (and PMP)\nspecification is explicit about the refresh requirements, and delete is\nclearly not needed (see\nhttps://github.com/ethereum/go-ethereum/pull/30265#issuecomment-2766987859).\nFrom now on we only delete when closing.\n\n- We were trying to add port mappings only once, and then moved on to\nrandom ports. Now we insist a bit more, so that a simple failed request\nwon't lead to ENR changes.\n\nFixes https://github.com/ethereum/go-ethereum/issues/31418\n\n---------\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-04-08 00:00:00",
            "message": "core/vm: optimize push2 opcode (#31267)\n\nDuring my benchmarks on Holesky, around 10% of all CPU time was spent in\nPUSH2\n```\nROUTINE ======================== github.com/ethereum/go-ethereum/core/vm.newFrontierInstructionSet.makePush.func1 in github.com/ethereum/go-ethereum/core/vm/instructions.go\n    16.38s     20.35s (flat, cum) 10.31% of Total\n     740ms      740ms    976:\treturn func(pc *uint64, interpreter *EVMInterpreter, scope *ScopeContext) ([]byte, error) {\n         .          .    977:\t\tvar (\n      40ms       40ms    978:\t\t\tcodeLen = len(scope.Contract.Code)\n     970ms      970ms    979:\t\t\tstart   = min(codeLen, int(*pc+1))\n     200ms      200ms    980:\t\t\tend     = min(codeLen, start+pushByteSize)\n         .          .    981:\t\t)\n     670ms      2.39s    982:\t\ta := new(uint256.Int).SetBytes(scope.Contract.Code[start:end])\n         .          .    983:\n         .          .    984:\t\t// Missing bytes: pushByteSize - len(pushData)\n     410ms      410ms    985:\t\tif missing := pushByteSize - (end - start); missing > 0 {\n         .          .    986:\t\t\ta.Lsh(a, uint(8*missing))\n         .          .    987:\t\t}\n    12.69s     14.94s    988:\t\tscope.Stack.push2(*a)\n      10ms       10ms    989:\t\t*pc += size\n     650ms      650ms    990:\t\treturn nil, nil\n         .          .    991:\t}\n         .          .    992:}\n```\n\nWhich is quite crazy. We have a handwritten encoder for PUSH1 already,\nthis PR adds one for PUSH2.\n\nPUSH2 is the second most used opcode as shown here:\nhttps://gist.github.com/shemnon/fb9b292a103abb02d98d64df6fbd35c8 since\nit is used by solidity quite significantly. Its used ~20 times as much\nas PUSH20 and PUSH32.\n\n# Benchmarks\n\n```\nBenchmarkPush/makePush-14         \t94196547\t        12.27 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkPush/push-14             \t429976924\t         2.829 ns/op\t       0 B/op\t       0 allocs/op\n``` \n\n---------\n\nCo-authored-by: jwasinger <j-wasinger@hotmail.com>"
        },
        {
            "date": "2025-04-08 00:00:00",
            "message": "core/txpool: add 7702 protection to blobpool (#31526)\n\nThis pull request introduces two constraints in the blobPool:\n\n(a) If the sender has a pending authorization or delegation, only one\nin-flight\nexecutable transaction can be cached.\n(b) If the authority address in a SetCode transaction is already\nreserved by\nthe blobPool, the transaction will be rejected.\n\nThese constraints mitigate an attack where an attacker spams the pool\nwith\nnumerous blob transactions, evicts other transactions, and then cancels\nall\npending blob transactions by draining the sender\u2019s funds if they have a\ndelegation.\n\nNote, because there is no exclusive lock held between different subpools\nwhen processing transactions, it's totally possible the SetCode\ntransaction\nand blob transactions with conflict sender and authorities are accepted\nsimultaneously. I think it's acceptable as it's very hard to be\nexploited.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-04-08 00:00:00",
            "message": "eth/remotedb: improve error handling (#31331)\n\nThis PR improves error handling in the remotedb package by fixing two\nissues:\n\n1. In the `Has` method, we now properly propagate errors instead of\nsilently returning false. This makes the behavior more predictable and\nhelps clients better understand when there are connection issues.\n\n2. In the `New` constructor, we add a nil check for the client parameter\nto prevent potential panics. This follows Go best practices for\nconstructor functions.\n\nThese changes make the code more robust and follow Go's error handling\nidioms without requiring any changes to other parts of the codebase.\n\nChanges:\n- Modified `Has` method to return errors instead of silently returning\nfalse\n- Added nil check in `New` constructor\n- Fixed field name in constructor to match struct definition"
        },
        {
            "date": "2025-04-07 00:00:00",
            "message": "cmd/geth: set trie,gc and other cache flags for import chain (#31577)\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-04-04 00:00:00",
            "message": "internal/era: random access to header and receipts (#31544)\n\nCo-authored-by: lightclient <lightclient@protonmail.com>\n\nAdd GetHeaderByNumber and GetReceiptsByNumber to allow more efficient API request filling from Era files."
        },
        {
            "date": "2025-04-04 00:00:00",
            "message": "p2p/nat: remove forceful port mapping in upnp (#30265)\n\nHere we are modifying the port mapping logic so that existing port\nmappings will only be removed when they were previously created by geth.\n\nThe AddAnyPortMapping functionality has been adapted to work consistently\nbetween the IGDv1 and IGDv2 backends."
        },
        {
            "date": "2025-04-03 00:00:00",
            "message": "beacon/blsync: add checkpoint import/export file feature (#31469)\n\nThis PR adds a new `--beacon.checkpoint.file` config flag to geth and\nblsync which specifies a checkpoint import/export file. If a file with\nan existing checkpoint is specified, it is used for initialization\ninstead of the hardcoded one (except when `--beacon.checkpoint` is also\nspecified simultaneously). Whenever the client encounters a new valid\nfinality update with a suitable finalized beacon block root at an epoch\nboundary, it saves the block root in hex format to the checkpoint file."
        },
        {
            "date": "2025-04-03 00:00:00",
            "message": "core, eth, node: use sync write option in pebble (#31519)\n\nFixes #31499"
        },
        {
            "date": "2025-04-03 00:00:00",
            "message": "cmd/devp2p/internal/v5test: log test descriptions (#31551)\n\nThis adds the test description text to the output, instead of keeping it\nas a Go comment. Logs are visible in the hive UI where these tests run,\nwhile Go comments are not."
        },
        {
            "date": "2025-04-03 00:00:00",
            "message": "eth: fix calls to HistoryPruningCutoff (#31552)\n\nThese were caused by crossed merges of recent PRs #31414 and #31361"
        },
        {
            "date": "2025-04-03 00:00:00",
            "message": "build: upgrade to golangci-lint v2 (#31530)"
        },
        {
            "date": "2025-04-03 00:00:00",
            "message": "core, eth/downloader: implement pruning mode sync (#31414)\n\nThis pull request introduces new sync logic for pruning mode. The downloader will now skip\ninsertion of block bodies and receipts before the configured history cutoff point.\n\nOriginally, in snap sync, the header chain and other components (bodies and receipts) were\ninserted separately. However, in Proof-of-Stake, this separation is unnecessary since the\nsync target is already verified by the CL.\n\nTo simplify the process, this pull request modifies `InsertReceiptChain` to insert headers\nalong with block bodies and receipts together. Besides, `InsertReceiptChain` doesn't have\nthe notion of reorg, as the common ancestor is always be found before the sync and extra\nside chain is truncated at the beginning if they fall in the ancient store. The stale\ncanonical chain flags will always be rewritten by the new chain. Explicit reorg logic is\nno longer required in `InsertReceiptChain`."
        },
        {
            "date": "2025-04-03 00:00:00",
            "message": "eth/protocols/eth: improve over/underflow handling in  `GetBlockHeaders` (#31522)"
        },
        {
            "date": "2025-04-02 00:00:00",
            "message": "all: fix typos in docs and comments (#31548)\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-04-02 00:00:00",
            "message": "README: fixup typos (#31540)\n\nFixes a few typos in readme."
        },
        {
            "date": "2025-04-02 00:00:00",
            "message": "p2p/discover: pass node instead of node ID to TALKREQ handler (#31075)\n\nThis is for the implementation of Portal Network in the Shisui client.\nTheir handler needs access to the node object in order to send further\ncalls to the requesting node. This is a breaking API change but it\nshould be fine, since there are basically no known users of TALKREQ\noutside of Portal network.\n\n---------\n\nSigned-off-by: thinkAfCod <q315xia@163.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-04-02 00:00:00",
            "message": "p2p/discover: repeat exact encoding when resending WHOAREYOU packet (#31543)\n\nWhen resending the WHOAREYOU packet, a new nonce and random IV should not\nbe generated. The sent packet needs to match the previously-sent one exactly\nin order to make the handshake retry work.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-04-02 00:00:00",
            "message": "core/txpool: add GetMetadata to transaction pool (#31433)\n\nThis is an alternative to #31309\n\nWith eth/68, transaction announcement must have transaction type and\nsize. So in announceTransactions, we need to query the transaction from\ntransaction pool with its hash. This creates overhead in case of blob\ntransaction which needs to load data from billy and RLP decode. This\ncommit creates a lightweight lookup from transaction hash to transaction\nsize and a function GetMetadata to query transaction type and\ntransaction size given the transaction hash.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-04-02 00:00:00",
            "message": "triedb/pathdb: improve perf by separating nodes map (#31306)\n\nThis PR refactors the `nodeSet` structure in the path database to use\nseparate maps for account and storage trie nodes, resulting in\nperformance improvements. The change maintains the same API while\noptimizing the internal data structure."
        },
        {
            "date": "2025-04-01 00:00:00",
            "message": "accounts/abi/abigen: fix a flaky bind test case `NewSingleStructArgument` (#31501)\n\nfound the failed testcase here\nhttps://ci.appveyor.com/project/ethereum/go-ethereum/builds/51767091/job/rbjke432c05pufja\n\nadd a timeout to wait the tx to be mined.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>\nCo-authored-by: Jared Wasinger <j-wasinger@hotmail.com>"
        },
        {
            "date": "2025-04-01 00:00:00",
            "message": "core/filtermaps: add metrics (#31511)\n\nThis PR adds metrics related to map rendering and pattern matching to\nthe `core/filtermaps` package."
        },
        {
            "date": "2025-04-01 00:00:00",
            "message": "cmd: apply snapshot cache flag in the MakeChain (#31534)"
        },
        {
            "date": "2025-04-01 00:00:00",
            "message": "p2p/nat: improve AddMapping code (#31486)\n\nIt introduces a new variable to store the external port returned by the\naddAnyPortMapping function and ensures that the correct external port is\nreturned even in case of an error.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-04-01 00:00:00",
            "message": "eth, eth/filters: implement API error code for pruned blocks (#31361)\n\nImplements #31275\n\n---------\n\nCo-authored-by: Jared Wasinger <j-wasinger@hotmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-31 00:00:00",
            "message": "version: begin v1.15.8 release cycle reloaded"
        },
        {
            "date": "2025-03-31 00:00:00",
            "message": ".travis.yml: remove macos build"
        },
        {
            "date": "2025-03-31 00:00:00",
            "message": "version: back to v1.15.7, to fix the build"
        },
        {
            "date": "2025-03-31 00:00:00",
            "message": "version: begin v1.15.8 release cycle"
        },
        {
            "date": "2025-03-31 00:00:00",
            "message": "version: release go-ethereum v1.15.7 stable"
        },
        {
            "date": "2025-03-31 00:00:00",
            "message": "core/filtermaps: hashdb safe delete range (#31525)\n\nThis PR adds `rawdb.SafeDeleteRange` and uses it for range deletion in\n`core/filtermaps`. This includes deleting the old bloombits database,\nresetting the log index database and removing index data for unindexed\ntail epochs (which previously weren't properly implemented for the\nfallback case).\n`SafeDeleteRange` either calls `ethdb.DeleteRange` if the node uses the\nnew path based state scheme or uses an iterator based fallback method\nthat safely skips trie nodes in the range if the old hash based state\nscheme is used. Note that `ethdb.DeleteRange` also has its own iterator\nbased fallback implementation in `ethdb/leveldb`. If a path based state\nscheme is used and the backing db is pebble (as it is on the majority of\nnew nodes) then `rawdb.SafeDeleteRange` uses the fast native range\ndelete.\nAlso note that `rawdb.SafeDeleteRange` has different semantics from\n`ethdb.DeleteRange`, it does not automatically return if the operation\ntakes a long time. Instead it receives a `stopCallback` that can\ninterrupt the process if necessary. This is because in the safe mode\npotentially a lot of entries are iterated without being deleted (this is\ndefinitely the case when deleting the old bloombits database which has a\nsingle byte prefix) and therefore restarting the process every time a\nfixed number of entries have been iterated would result in a quadratic\nrun time in the number of skipped entries.\n\nWhen running in safe mode, unindexing an epoch takes about a second,\nremoving bloombits takes around 10s while resetting a full log index\nmight take a few minutes. If a range delete operation takes a\nsignificant amount of time then log messages are printed. Also, any\nrange delete operation can be interrupted by shutdown (tail uinindexing\ncan also be interrupted by head indexing, similarly to how tail indexing\nworks). If the last unindexed epoch might have \"dirty\" index data left\nthen the indexed map range points to the first valid epoch and\n`cleanedEpochsBefore` points to the previous, potentially dirty one. At\nstartup it is always assumed that the epoch before the first fully\nindexed one might be dirty. New tail maps are never rendered and also no\nfurther maps are unindexed before the previous unindexing is properly\ncleaned up.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-31 00:00:00",
            "message": ".gitignore: ignore binaries (#31531)\n\nIgnores all hand-built binaries (built with go build, everything built\nwith make is already ignored)"
        },
        {
            "date": "2025-03-28 00:00:00",
            "message": "core/filtermaps: revert to unindexed mode in case of indexing error (#31500)\n\nThis PR changes log indexer error handling so that if an indexing error\nhappens then it disables the indexer and reverts to unindexed more\nwithout resetting the database (except in case of a failed database\ninit).\nResetting the database on the first error would probably be overkill as\na client update might fix this without having to reindex the entire\nhistory. It would also make debugging very hard. On the other hand,\nthese errors do not resolve themselves automatically so constantly\nretrying makes no sense either. With these changes a new attempt to\nresume indexing is made every time the client is restarted.\nThe PR also fixes https://github.com/ethereum/go-ethereum/issues/31491\nwhich originated from the tail indexer trying to resume processing a\nfailed map renderer.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-28 00:00:00",
            "message": "core/txpool: fix nonce assignment in local tracker (#31496)\n\nFixes #31494"
        },
        {
            "date": "2025-03-28 00:00:00",
            "message": "core/txpool/legacypool: fix data race in checkDelegationLimit (#31475)"
        },
        {
            "date": "2025-03-28 00:00:00",
            "message": "cmd/geth: update geth subcommand arguments (#31293)"
        },
        {
            "date": "2025-03-27 00:00:00",
            "message": "Merge pull request #31228 from curvegrid/fix-sim-rollback\n\neth/catalyst: force sync of txpool before clearing subpools in Rollback"
        },
        {
            "date": "2025-03-27 00:00:00",
            "message": "internal/ethapi: CreateAccessList with stateOverrides (#31497)\n\nAdd support for state overrides in eth_createAccessList. This will make the method consistent\nwith other execution methods.\n\n---------\n\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2025-03-26 00:00:00",
            "message": "accounts/abi: include access-list in gas estimation (#31394)\n\nSimple bugfix to include the access-list in the gas-estimation step of\nthe ABI bindings code."
        },
        {
            "date": "2025-03-26 00:00:00",
            "message": "eth: downgrade peer removal error to warning level (#31492)"
        },
        {
            "date": "2025-03-26 00:00:00",
            "message": "core/rawdb: remove LES database stats (#31495)\n\nThis removes DB schema for LES related db entries. LES has been non-functional\nsince the merge."
        },
        {
            "date": "2025-03-26 00:00:00",
            "message": "core/state: fix double-increment of accountLoaded counter (#31493)"
        },
        {
            "date": "2025-03-25 00:00:00",
            "message": "internal/ethapi: exclude 7702 authorities from result in eth_createAccessList (#31336)\n\ncloses https://github.com/ethereum/go-ethereum/issues/31335\n\n---------\n\nCo-authored-by: sashabeton <sashabeton2007@gmail.com>"
        },
        {
            "date": "2025-03-25 00:00:00",
            "message": "trie: optimize memory allocation (#30932)\n\nThis pull request removes the node copy operation to reduce memory\nallocation. Key Changes as below:\n\n**(a) Use `decodeNodeUnsafe` for decoding nodes retrieved from the trie\nnode reader**\n\nIn the current implementation of the MPT, once a trie node blob is\nretrieved, it is passed to `decodeNode` for decoding. However,\n`decodeNode` assumes the supplied byte slice might be mutated later, so\nit performs a deep copy internally before parsing the node.\n\nGiven that the node reader is implemented by the path database and the\nhash database, both of which guarantee the immutability of the returned\nbyte slice. By restricting the node reader interface to explicitly\nguarantee that the returned byte slice will not be modified, we can\nsafely replace `decodeNode` with `decodeNodeUnsafe`. This eliminates the\nneed for a redundant byte copy during each node resolution.\n\n**(b) Modify the trie in place**\n\nIn the current implementation of the MPT, a copy of a trie node is\ncreated before any modifications are made. These modifications include:\n- Node resolution: Converting the value from a hash to the actual node.\n- Node hashing: Tagging the hash into its cache.\n- Node commit: Replacing the children with its hash.\n- Structural changes: For example, adding a new child to a fullNode or\nreplacing a child of a shortNode.\n\nThis mechanism ensures that modifications only affect the live tree,\nleaving all previously created copies unaffected.\n\nUnfortunately, this property leads to a huge memory allocation\nrequirement. For example, if we want to modify the fullNode for n times,\nthe node will be copied for n times.\n\nIn this pull request, all the trie modifications are made in place. In\norder to make sure all previously created copies are unaffected, the\n`Copy` function now will deep-copy all the live nodes rather than the\nroot node itself.\n\nWith this change, while the `Copy` function becomes more expensive, it's\ntotally acceptable as it's not a frequently used one. For the normal\ntrie operations (Get, GetNode, Hash, Commit, Insert, Delete), the node\ncopy is not required anymore."
        },
        {
            "date": "2025-03-25 00:00:00",
            "message": "all: use fmt.Appendf instead of fmt.Sprintf where possible (#31301)"
        },
        {
            "date": "2025-03-25 00:00:00",
            "message": "core: process EL requests in GenerateVerkleChain (#31175)"
        },
        {
            "date": "2025-03-25 00:00:00",
            "message": "version: begin v1.15.7 release cycle"
        },
        {
            "date": "2025-03-25 00:00:00",
            "message": "version: release v1.15.6 stable"
        },
        {
            "date": "2025-03-25 00:00:00",
            "message": "core/txpool: reject stale transaction for local tracking (#31473)\n\nFixes https://github.com/ethereum/go-ethereum/issues/31451"
        },
        {
            "date": "2025-03-24 00:00:00",
            "message": "internal/ethapi: support for beacon root and withdrawals in simulate api (#31304)\n\nAdds block override fields for beacon block root and withdrawals to the eth_simulateV1.\nAddresses https://github.com/ethereum/go-ethereum/issues/31264"
        },
        {
            "date": "2025-03-24 00:00:00",
            "message": "tests: update test submodule (#31479)\n\nThis commit upgrades the test submodule to latest version:\n\nLatest:\nhttps://github.com/ethereum/tests/commit/81862e4848585a438d64f911a19b3825f0f4cd95\nOld:\nhttps://github.com/ethereum/tests/commit/faf33b471465d3c6cdc3d04fbd690895f78d33f2"
        },
        {
            "date": "2025-03-24 00:00:00",
            "message": "beacon/params: new checkpoints (#31470)\n\nThis PR updates beacon checkpoints. The checkpoints are now stored as\nembedded hex files, in the same format that\nhttps://github.com/ethereum/go-ethereum/pull/31469 uses."
        },
        {
            "date": "2025-03-24 00:00:00",
            "message": "core/filtermaps: fix log indexer init conditions (#31455)\n\nThis PR adds an extra condition to the log indexer initialization in\norder to avoid initializing with block 0 as target head. Previously this\ncaused the indexer to initialize without a checkpoint. Later, when the\nreal chain head was set, it indexed the entire history, then unindexed\nmost of it if only the recent history was supposed to be indexed. Now\nthe init only happens when there is an actual synced chain head and\ntherefore the index is initialized at the most recent checkpoint and\nonly the last year is indexed according to the default parameters.\nDuring checkpoint initialization the best available checkpoint is also\nchecked against the history cutoff point and fails if the indexing would\nhave to start from a block older than the cutoff. If initialization\nfails then the indexer reverts to unindexed mode instead of retrying\nbecause the the failure conditions cannot be expected to recover later."
        },
        {
            "date": "2025-03-24 00:00:00",
            "message": "core/rawdb: improve database stats output (#31463)\n\nInstead of reporting all filtermaps stuff in one line, I'm breaking it\ndown into the three separate kinds of entries here.\n\n```\n+-----------------------+-----------------------------+------------+------------+\n|       DATABASE        |          CATEGORY           |    SIZE    |   ITEMS    |\n+-----------------------+-----------------------------+------------+------------+\n| Key-Value store       | Log index filter-map rows   | 59.21 GiB  |  616077345 |\n| Key-Value store       | Log index last-block-of-map | 12.35 MiB  |     269755 |\n| Key-Value store       | Log index block-lv          | 421.70 MiB |   22109169 |\n```\n\nAlso added some other changes to make it easier to debug:\n\n- restored bloombits into the inspect output, so we notice if it doesn't\nget deleted for some reason\n- tracking of unaccounted key examples"
        },
        {
            "date": "2025-03-23 00:00:00",
            "message": "internal/ethapi: return code 3 from call/estimateGas even if a revert reason was not returned (#31456)"
        },
        {
            "date": "2025-03-21 00:00:00",
            "message": "eth/filter: downgrade log level (#31450)"
        },
        {
            "date": "2025-03-21 00:00:00",
            "message": "cmd/geth: add prune history command (#31384)\n\nThis adds a new subcommand 'geth prune-history' that removes the pre-merge history\non supported networks. Geth is not fully ready to work in this mode, please do not run\nthis command on your production node.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-21 00:00:00",
            "message": "core: respect history cutoff in txindexer (#31393)\n\nIn #31384 we unindex TXes prior to the merge block. However when the\nnode starts up it will try to re-index those back if the config is to index the\nwhole chain. This change makes the indexer aware of the history cutoff block,\navoiding reindexing in that segment.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-21 00:00:00",
            "message": "core/bloombits: remove old bloombits logic and chain indexer (#31081)\n\nThis PR is #3 of a 3-part series that implements the new log index\nintended to replace core/bloombits.\nBased on https://github.com/ethereum/go-ethereum/pull/31079 and\nhttps://github.com/ethereum/go-ethereum/pull/31080\nReplaces https://github.com/ethereum/go-ethereum/pull/30370\n\nThis part removes the old bloombits package and the chain indexer that\nwas only used by bloombits. Deletes the old bloombits database.\n\nFilterMaps data structure explanation:\nhttps://gist.github.com/zsfelfoldi/a60795f9da7ae6422f28c7a34e02a07e\n\nLog index generator code overview:\nhttps://gist.github.com/zsfelfoldi/97105dff0b1a4f5ed557924a24b9b9e7\n\nSearch pattern matcher code overview:\nhttps://gist.github.com/zsfelfoldi/5981735641c956afb18065e84f8aff34\n\nNote that the possibility of a tree hashing scheme and remote proof\nprotocol are mentioned in the documents above but they are not exactly\nspecified yet. These specs are WIP and will be finalized after the local\nlog indexer/filter code is finalized and merged.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-20 00:00:00",
            "message": "core/txpool/legacypool: reject gapped tx from delegated account (#31430)\n\nThis pull request improves the protection mechanism in the txpool for \nsenders with delegation. A sender with either delegation or pending \ndelegation is now limited to a maximum of one in-flight executable \ntransaction, while gapped transactions will be rejected.\n\nReason:\nIf nonce-gapped transaction from delegated/pending-delegated senders\ncan be acceptable, then it's no-longer possible to send another\n\"executable\" transaction with correct nonce due to the policy of at most\none inflight tx. The gapped transaction will be stuck in the txpool, with no\nmeaningful way to unlock the sender.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-03-20 00:00:00",
            "message": "p2p/discover: repeat WHOAREYOU challenge when handshake in progress (#31356)\n\nThis fixes the handshake in a scenario where the remote end sends two unknown\npackets in a row. When this happens, we would previously respond to both with\na WHOAREYOU challenge, but keep only the latest sent challenge. Transmission is\nassumed to be unreliable, so any client that sends two request packets simultaneously\nhas to be prepared to follow up on whichever request leads to a handshake. With\nthis fix, we force them to do the handshake that we can actually complete.\n\nFixes #30581"
        },
        {
            "date": "2025-03-20 00:00:00",
            "message": "core/filtermaps: allow log search while head indexing (#31429)\n\nThis PR changes the matcher syncing conditions so that it is possible to\nrun a search while head indexing is in progress. Previously it was a\nrequirement to have the head indexed in order to perform matcher sync\nbefore and after a search. This was unnecessarily strict as the purpose\nwas just to avoid syncing the valid range with the temporary shortened\nindexed range applied while updating existing head maps. Now the sync\ncondition explicitly checks whether the indexer has a temporary indexed\nrange with some head maps being partially updated.\nIt also fixes a deadlock that happened when matcher synchronization was\nattempted in the event handler called from the `writeFinishedMaps`\nperiodical callback."
        },
        {
            "date": "2025-03-20 00:00:00",
            "message": "eth/tracers: fix test (#31445)\n\nThis pull request fixes a broken unit test\n\n```\n=== CONT  TestTracingWithOverrides\n    api_test.go:1012: result: {\"gas\":21167,\"failed\":false,\"returnValue\":\"0x0000000000000000000000000000000000000000000000000000000000000002\",\"structLogs\":[{\"pc\":0,\"op\":\"PUSH1\",\"gas\":24978860,\"gasCost\":3,\"depth\":1,\"stack\":[]},{\"pc\":2,\"op\":\"CALLDATALOAD\",\"gas\":24978857,\"gasCost\":3,\"depth\":1,\"stack\":[\"0x0\"]},{\"pc\":3,\"op\":\"PUSH1\",\"gas\":24978854,\"gasCost\":3,\"depth\":1,\"stack\":[\"0x1\"]},{\"pc\":5,\"op\":\"ADD\",\"gas\":24978851,\"gasCost\":3,\"depth\":1,\"stack\":[\"0x1\",\"0x1\"]},{\"pc\":6,\"op\":\"PUSH1\",\"gas\":24978848,\"gasCost\":3,\"depth\":1,\"stack\":[\"0x2\"]},{\"pc\":8,\"op\":\"MSTORE\",\"gas\":24978845,\"gasCost\":6,\"depth\":1,\"stack\":[\"0x2\",\"0x0\"]},{\"pc\":9,\"op\":\"PUSH1\",\"gas\":24978839,\"gasCost\":3,\"depth\":1,\"stack\":[]},{\"pc\":11,\"op\":\"PUSH1\",\"gas\":24978836,\"gasCost\":3,\"depth\":1,\"stack\":[\"0x20\"]},{\"pc\":13,\"op\":\"RETURN\",\"gas\":24978833,\"gasCost\":0,\"depth\":1,\"stack\":[\"0x20\",\"0x0\"]}]}\n    api_test.go:1013: test 10, result mismatch, have\n        {21167 false 0x0000000000000000000000000000000000000000000000000000000000000002}\n        , want\n        {21167 false 0000000000000000000000000000000000000000000000000000000000000002}\n    api_test.go:1012: result: {\"gas\":25664,\"failed\":false,\"returnValue\":\"0x000000000000000000000000c6e93f4c1920eaeaa1e699f76a7a8c18e3056074\",\"structLogs\":[]}\n    api_test.go:1013: test 11, result mismatch, have\n        {25664 false 0x000000000000000000000000c6e93f4c1920eaeaa1e699f76a7a8c18e3056074}\n        , want\n        {25664 false 000000000000000000000000c6e93f4c1920eaeaa1e699f76a7a8c18e3056074}\n\n```"
        },
        {
            "date": "2025-03-20 00:00:00",
            "message": "eth/tracers: hex-encode returnValue (#31216)\n\nThis is a **breaking change** to the opcode tracer. The top-level\n`returnValue` field of a trace will be now hex-encoded. If the return\ndata is empty, this field will contain \"0x\".\n\nFixes #31196"
        },
        {
            "date": "2025-03-20 00:00:00",
            "message": "cmd/workload: fixed filter test request error handling (#31424)\n\nThis PR fixes the broken request error handling of the workload filter\ntests. Until now `validateHistoryPruneErr` was invoked with `fq.Err` as\nan input which was always nil and a timeout or http error was reported\nas a result content mismatch.\nAlso, in case of `errPrunedHistory` it is wrong to return here without\nsetting an error because then it will look like a valid empty result and\nthe check will later fail. So instead `errPrunedHistory` is always\nreturned now (without printing an error message) and the callers of\n`run` should handle this special case (typically ignore silently)."
        },
        {
            "date": "2025-03-20 00:00:00",
            "message": "cmd/utils: force hash scheme for archive mode (#31439)"
        },
        {
            "date": "2025-03-19 00:00:00",
            "message": "core/types: cleanup tx signer logic (#31434)\n\nThis removes the signer type-train in favor of defining a single object\nthat can handle all tx types. Supported types are enabled via a map.\nNotably, the new signer also supports disabling legacy transactions."
        },
        {
            "date": "2025-03-19 00:00:00",
            "message": "core/types: reduce allocs in transaction signing (#31258)\n\nThis PR roughly halves the number of allocations needed to compute the\nsigHash for a transaction.\n\nThis sigHash is used whenever we recover a signature of a transaction,\nso quite often. During a recent benchmark full syncing on Holesky,\nroughly 2.8% of all allocations were happening here because the fields\nfrom the transaction would be copied multiple times.\n\n```\n66168733  153175654 (flat, cum)  2.80% of Total\n         .          .    368:func (s londonSigner) Hash(tx *Transaction) common.Hash {\n         .          .    369:\tif tx.Type() != DynamicFeeTxType {\n         .          .    370:\t\treturn s.eip2930Signer.Hash(tx)\n         .          .    371:\t}\n         .   19169966    372:\treturn prefixedRlpHash(\n         .          .    373:\t\ttx.Type(),\n  26442187   26442187    374:\t\t[]interface{}{\n         .          .    375:\t\t\ts.chainId,\n   6848616    6848616    376:\t\t\ttx.Nonce(),\n         .   19694077    377:\t\t\ttx.GasTipCap(),\n         .   18956774    378:\t\t\ttx.GasFeeCap(),\n   6357089    6357089    379:\t\t\ttx.Gas(),\n         .   12321050    380:\t\t\ttx.To(),\n         .   16865054    381:\t\t\ttx.Value(),\n  13435187   13435187    382:\t\t\ttx.Data(),\n  13085654   13085654    383:\t\t\ttx.AccessList(),\n         .          .    384:\t\t})\n         .          .    385:}\n```\n\nThis PR reduces the allocations and speeds up the computation of the\nsigHash by ~22%, which is quite significantly given that this operation\ninvolves a call to Keccak\n```\n// BenchmarkHash-8   \t  440082\t      2639 ns/op\t     384 B/op\t      13 allocs/op\n// BenchmarkHash-8   \t  493566\t      2033 ns/op\t     240 B/op\t       6 allocs/op\n```\n\n```\nHash-8   2.691\u00b5 \u00b1 8%   2.097\u00b5 \u00b1 9%  -22.07% (p=0.000 n=10)\n```\n\nIt also kinda cleans up stuff in my opinion, since the transaction\nshould itself know best how to compute the sighash\n\n\n\n\n![Screenshot_2025-02-25_13-52-41](https://github.com/user-attachments/assets/e2b268aa-e137-417d-926b-f3619daef748)\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-03-19 00:00:00",
            "message": "core/txpool, eth: add GetRLP to transaction pool (#31307)\n\nCurrently, when answering GetPooledTransaction request, txpool.Get() is\nused. When the requested hash is blob transaction, blobpool.Get() is\ncalled. This function loads the RLP-encoded transaction from limbo then\ndecodes and returns. Later, in answerGetPooledTransactions, we need to\nRLP encode again. This decode then encode is wasteful. This commit adds\nGetRLP to transaction pool interface so that answerGetPooledTransactions\ncan use the RLP-encoded from limbo directly.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-03-18 00:00:00",
            "message": "ethclient: Add EstimateGasAtBlock[Hash] to estimate against a specific block (#27508)\n\nThe main use case I see of this is that it allows users to estimate gas\nagainst the same state that they query for their nonce, and the same\nstate they base the data of their transaction against. This helps ensure\nthat gas estimation won't fail and the transaction won't revert on-chain\nbecause of a mismatch between the state used for gas estimation and the\nstate used to generate the inputs to gas estimation or the transaction's\nnonce when submitted to the mempool.\n\nThis PR also updates the EstimateGas comment based on the new geth\n`eth_estimateGas` default of using latest state as of v1.12.0:\nhttps://github.com/ethereum/go-ethereum/pull/24363\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-18 00:00:00",
            "message": "cmd: set name to chaindata for all the opened db (#31352)\n\nWhen I'm running `geth import --metrics`, the metrics is different to\nnormal `geth --metrics`, so the grafana dashboard needs to be updated,\neg: `eth_db_chaindata_disk_read` vs `disk_read`.\n\nSo I think we should always set the name to `eth/db/chaindata` for more\nconvenient.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-03-18 00:00:00",
            "message": "core/filtermaps: fixed indexer checkpoint initialization (#31419)\n\nThis PR fixes a bug in the `lastMapBoundaryBefore` logic that resulted\nin incorrect checkpoint initialization (started rendering from the\nprevious epoch boundary which caused the `needTailEpoch` check to fail).\nApparently the bug was present before but went unnoticed because\n`needTailEpoch` behaved differently.\nFixes https://github.com/ethereum/go-ethereum/issues/31413"
        },
        {
            "date": "2025-03-18 00:00:00",
            "message": "internal/ethapi: fix logs bloom in eth_simulateV1 (#31411)\n\nGeth was returning empty logsBloom for the simulated block."
        },
        {
            "date": "2025-03-18 00:00:00",
            "message": "params: add hoodi testnet definition (#31406)\n\nAdds support for the new hoodi testnet. Hoodi is meant for stakers to test\ntheir setup. For more info please refer to https://hoodi.ethpandaops.io/."
        },
        {
            "date": "2025-03-18 00:00:00",
            "message": "eth/tracers: fix precompile move feat for debug_traceCall (#31348)\n\n`debug_traceCall` was ignoring the override `movePrecompileToAddress`. Now it is\nat feature-parity with eth_call."
        },
        {
            "date": "2025-03-17 00:00:00",
            "message": "eth/filters: implement log filter using new log index (#31080)\n\nThis PR is #2 of a 3-part series that implements the new log index\nintended to replace core/bloombits.\nBased on https://github.com/ethereum/go-ethereum/pull/31079\nReplaces https://github.com/ethereum/go-ethereum/pull/30370\n\nThis part replaces the old bloombits based log search logic in\n`eth/filters` to use the new `core/filtermaps` logic.\n\nFilterMaps data structure explanation:\nhttps://gist.github.com/zsfelfoldi/a60795f9da7ae6422f28c7a34e02a07e\n\nLog index generator code overview:\nhttps://gist.github.com/zsfelfoldi/97105dff0b1a4f5ed557924a24b9b9e7\n\nSearch pattern matcher code overview:\nhttps://gist.github.com/zsfelfoldi/5981735641c956afb18065e84f8aff34\n\nNote that the possibility of a tree hashing scheme and remote proof\nprotocol are mentioned in the documents above but they are not exactly\nspecified yet. These specs are WIP and will be finalized after the local\nlog indexer/filter code is finalized and merged.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-17 00:00:00",
            "message": "core/rawdb: allow for truncation in the freezer (#31362)\n\nHere we add the notion of prunable tables for the `TruncateTail` operation\nin the freezer. TruncateTail for the chain freezer now only truncates the body and\nreceipts tables, leaving headers and hashes as-is.\n\nThis change also requires changing the validation/repair at startup to allow for\ntables with different tail. For the header and hash tables, we now require them to start\nat number zero.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-03-17 00:00:00",
            "message": "cmd/abigen, accounts/abi/bind: implement abigen version 2 (#31379)\n\nThis PR implements a new version of the abigen utility (v2) which exists\nalong with the pre-existing v1 version.\n\nAbigen is a utility command provided by go-ethereum that, given a\nsolidity contract ABI definition, will generate Go code to transact/call\nthe contract methods, converting the method parameters/results and\nstructures defined in the contract into corresponding Go types. This is\nuseful for preventing the need to write custom boilerplate code for\ncontract interactions.\n\nMethods in the generated bindings perform encoding between Go types and\nSolidity ABI-encoded packed bytecode, as well as some action (e.g.\n`eth_call` or creating and submitting a transaction). This limits the\nflexibility of how the generated bindings can be used, and prevents\neasily adding new functionality, as it will make the generated bindings\nlarger for each feature added.\n\nAbigen v2 was conceived of by the observation that the only\nfunctionality that generated Go bindings ought to perform is conversion\nbetween Go types and ABI-encoded packed data. Go-ethereum already\nprovides various APIs which in conjunction with conversion methods\ngenerated in v2 bindings can cover all functionality currently provided\nby v1, and facilitate all other previously-desired use-cases.\n\n## Generating Bindings\n\nTo generate contract bindings using abigen v2, invoke the `abigen`\ncommand with the `--v2` flag. The functionality of all other flags is\npreserved between the v2 and v1 versions.\n\n## What is Generated in the Bindings\n\nThe execution of `abigen --v2` generates Go code containing methods\nwhich convert between Go types and corresponding ABI-encoded data\nexpected by the contract. For each input-accepting contract method and\nthe constructor, a \"packing\" method is generated in the binding which\nconverts from Go types to the corresponding packed solidity expected by\nthe contract. If a method returns output, an \"unpacking\" method is\ngenerated to convert this output from ABI-encoded data to the\ncorresponding Go types.\n\nFor contracts which emit events, an unpacking method is defined for each\nevent to unpack the corresponding raw log to the Go type that it\nrepresents.\n\nLikewise, where custom errors are defined by contracts, an unpack method\nis generated to unpack raw error data into a Go type.\n\n## Using the Generated Bindings\n\nFor a smooth user-experience, abigen v2 comes with a number of utility\nfunctions to be used in conjunction with the generated bindings for\nperforming common contract interaction use-cases. These include:\n\n* filtering for historical logs of a given topic\n* watching the chain for emission of logs with a given topic\n* contract deployment methods\n* Call/Transact methods\n\nhttps://geth.ethereum.org will be updated to include a new tutorial page\nfor abigen v2 with full code examples. The page currently exists in a\nPR: https://github.com/ethereum/go-ethereum/pull/31390 .\n\nThere are also extensive examples of interactions with contract bindings\nin [test\ncases](https://github.com/ethereum/go-ethereum/blob/cc855c7ede460270ae9c83bba278b23cb4f26a00/accounts/abi/bind/v2/lib_test.go)\nprovided with this PR.\n\n---------\n\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-17 00:00:00",
            "message": "eth/catalyst: set FeeRecipient in dev mode (#31316)\n\nthis adds 2 features to improve `geth --dev` experience.\n\n1. we don't need to use `dev_SetFeeRecipient` to set initial coinbase\naddress. it was a pain.\n2. we don't need to unlock keystore if we don't use it. we had it\nbecause of clique."
        },
        {
            "date": "2025-03-17 00:00:00",
            "message": "go.mod: bump golang.org/x/net from 0.34.0 to 0.36.0 (#31369)\n\nBumps [golang.org/x/net](https://github.com/golang/net) from 0.34.0 to\n0.36.0.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a\nhref=\"https://github.com/golang/net/commit/85d1d54551b68719346cb9fec24b911da4e452a1\"><code>85d1d54</code></a>\ngo.mod: update golang.org/x dependencies</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/cde1dda944dcf6350753df966bb5bda87a544842\"><code>cde1dda</code></a>\nproxy, http/httpproxy: do not mismatch IPv6 zone ids against hosts</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/fe7f0391aa994a401c82d829183c1efab7a64df4\"><code>fe7f039</code></a>\npublicsuffix: spruce up code gen and speed up PublicSuffix</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/459513d1f8abff01b4854c93ff0bff7e87985a0a\"><code>459513d</code></a>\ninternal/http3: move more common stream processing to genericConn</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/aad0180cad195ab7bcd14347e7ab51bece53f61d\"><code>aad0180</code></a>\nhttp2: fix flakiness from t.Log when GOOS=js</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/b73e5746f64471c22097f07593643a743e7cfb0f\"><code>b73e574</code></a>\nhttp2: don't log expected errors from writing invalid trailers</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/5f45c776a9c4d415cbe67d6c22c06fd704f8c9f1\"><code>5f45c77</code></a>\ninternal/http3: make read-data tests usable for server handlers</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/43c2540165a4d1bc9a81e06a86eb1e22ece64145\"><code>43c2540</code></a>\nhttp2, internal/httpcommon: reject userinfo in :authority</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/1d78a085008d9fedfe3f303591058325f99727d7\"><code>1d78a08</code></a>\nhttp2, internal/httpcommon: factor out server header logic for\nh2/h3</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/0d7dc54a591c12b4bd03bcd745024178d03d9218\"><code>0d7dc54</code></a>\nquic: add Conn.ConnectionState</li>\n<li>Additional commits viewable in <a\nhref=\"https://github.com/golang/net/compare/v0.34.0...v0.36.0\">compare\nview</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=golang.org/x/net&package-manager=go_modules&previous-version=0.34.0&new-version=0.36.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't\nalter it yourself. You can also trigger a rebase manually by commenting\n`@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits\nthat have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after\nyour CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge\nand block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating\nit. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all\nof the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop\nDependabot creating any more for this major version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop\nDependabot creating any more for this minor version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop\nDependabot creating any more for this dependency (unless you reopen the\nPR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the\n[Security Alerts\npage](https://github.com/ethereum/go-ethereum/network/alerts).\n\n</details>\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
        },
        {
            "date": "2025-03-17 00:00:00",
            "message": "eth/catalyst: fix flaky test (#31403)\n\nThis pull request enhances the unit test, avoiding unnecessary failure\nin CI.\n\n```\n--- FAIL: TestSimulatedBeaconSendWithdrawals (12.08s)\n    simulated_beacon_test.go:139: timed out without including all withdrawals/txs\nFAIL\n```"
        },
        {
            "date": "2025-03-17 00:00:00",
            "message": "metrics: spin up meter ticker routine when enabling metric system (#31400)\n\nAddresses https://github.com/ethereum/go-ethereum/issues/31244"
        },
        {
            "date": "2025-03-15 00:00:00",
            "message": "cmd/utils: fix geth test issue on OpenBSD (#31357)"
        },
        {
            "date": "2025-03-14 00:00:00",
            "message": "tests: update ethereum/tests to v17.0 (#31381)\n\nGet the re-filled tests (plus removal of outdated EIP-2537 tests)"
        },
        {
            "date": "2025-03-14 00:00:00",
            "message": "cmd/evm: fix statetest with multi-fork statetest fixtures (#31374)\n\nFixes `evm statetest` for state test fixtures with multiple fork entries\nin their `post` field (e.g.,\n[chainId.json](https://github.com/ethereum/tests/blob/81862e4848585a438d64f911a19b3825f0f4cd95/GeneralStateTests/stChainId/chainId.json#L39)).\n\nWhen these re-activated flags aren't exposed, `statetest` only executes\nthe fixture for a single fork entry instead of all of the forks as\nexpected.\n\nThis only affects ethereum/tests state test fixtures, not\nethereum/execution-spec-tests (EEST) state tests. EEST writes a separate\nfixture/test case (i.e. a separate top-level dict entry in the .json)\nfor each fork configuration as apposed to combining multiple forks in\none fixture test case: New EEST state tests targeting Prague behavior\nare not affected."
        },
        {
            "date": "2025-03-14 00:00:00",
            "message": "log: fix SetDefault for custom loggers (#31368)\n\nCurrently, even though it takes in a `Logger` interface,\n`log.SetDefualt` enforces that the concrete type of the provided logger\nis `*logger` because:\n1. in `init` `root.Store` is called with a `*logger`\n2. `atomic.Value` panics if the concrete type provided in `Store` is not\nconsistent across calls.\n([ref](https://pkg.go.dev/sync/atomic#Value.Store))\n\n> All calls to Store for a given Value must use values of the same\nconcrete type.\n\nThis PR changes to use `sync.RWMutex` and adds a test that panics on\n`master`."
        },
        {
            "date": "2025-03-14 00:00:00",
            "message": "accounts/abi: improve unpack performance (#31387)\n\nSlightly improves performance of abi.Unpack\n\n```\nBefore\nBenchmarkUnpack/0-14   5965714       210.9 ns/op     280 B/op       5 allocs/op\nBenchmarkUnpack/1-14   2148283       569.7 ns/op     688 B/op      16 allocs/op\n\nAfter:\nBenchmarkUnpack/0-14  \t 7693365\t       151.2 ns/op\t     136 B/op\t       4 allocs/op\nBenchmarkUnpack/1-14  \t 2261294\t       508.9 ns/op\t     544 B/op\t      15 allocs/op\n```\n\nreplaces https://github.com/ethereum/go-ethereum/pull/31292 since I was\nunable to push to your branch @Exca-DK\n\n---------\n\nCo-authored-by: Exca-DK <dawidk.info@gmail.com>"
        },
        {
            "date": "2025-03-13 00:00:00",
            "message": "core/filtermaps: FilterMaps log index generator and search logic (#31079)\n\nThis PR is #1 of a 3-part series that implements the new log index\nintended to replace core/bloombits.\nReplaces https://github.com/ethereum/go-ethereum/pull/30370\n\nThis part implements the new data structure, the log index generator and\nthe search logic. This PR has most of the complexity but it does not\naffect any existing code yet so maybe it is easier to review separately.\n\nFilterMaps data structure explanation:\nhttps://gist.github.com/zsfelfoldi/a60795f9da7ae6422f28c7a34e02a07e\n\nLog index generator code overview:\nhttps://gist.github.com/zsfelfoldi/97105dff0b1a4f5ed557924a24b9b9e7\n\nSearch pattern matcher code overview:\nhttps://gist.github.com/zsfelfoldi/5981735641c956afb18065e84f8aff34\n\nNote that the possibility of a tree hashing scheme and remote proof\nprotocol are mentioned in the documents above but they are not exactly\nspecified yet. These specs are WIP and will be finalized after the local\nlog indexer/filter code is finalized and merged.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-13 00:00:00",
            "message": "eth/ethconfig: fix history prune blocks (#31383)"
        },
        {
            "date": "2025-03-13 00:00:00",
            "message": "cmd/workload: implement checks for history-pruned node (#31355)\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-13 00:00:00",
            "message": "p2p/discover: expose discv5 functions for portal JSON-RPC interface (#31117)\n\nFixes #31093\n\nHere we add some API\u00a0functions on the UDPv5 object for the purpose of implementing\nthe Portal Network JSON-RPC API in the shisui client.\n\n---------\n\nSigned-off-by: Chen Kai <281165273grape@gmail.com>"
        },
        {
            "date": "2025-03-13 00:00:00",
            "message": "core: update blockProcFeed in insertChain (#31065)\n\nThis PR moves the updating of the `blockProcFeed` event feed from\n`InsertChain` to `insertChain` in order to ensure that the feed\nsubscribers are notified whenever block processing happens.\nNote that this event is not subscribed to anywhere in our codebase at\nthe moment, earlier it was used by the LES server to avoid slowing down\nblock processing. Now I want to do the same with the log indexer, the\nproblem is that back then every block insertion was done by\n`InsertChain`, now the regular payload insertion is done by\n`InsertBlockWithoutSetHead`. Both of these (and also `SetCanonical` if\nneeded) calls `insertChain` so I moved the feed update there."
        },
        {
            "date": "2025-03-11 00:00:00",
            "message": "Update core/txpool/txpool.go\n\nCo-authored-by: jwasinger <j-wasinger@hotmail.com>"
        },
        {
            "date": "2025-03-13 00:00:00",
            "message": "eth/ethconfig: add HistoryMode (#31365)\n\nHere I am adding a config option and geth flag (`--history.chain`) for\nconfiguring history pruning. There are two options available:\n\n- `--history.chain all` is the default and will keep all history like\nbefore.\n- `--history.chain postmerge` will configure the history cutoff point to\nthe merge block.\n\nThe option doesn't actually do anything right now, but we need it as a\nprecursor for other history pruning changes."
        },
        {
            "date": "2025-03-12 00:00:00",
            "message": "crypto/secp256k1: update libsecp256k1 (#31242)\n\nUpdates the libsecp256k1 dependency to commit:\nc0d9480fbbf8eccbd4be23ed27f6f2af6f3b211e\n\nPR:\n```\nBenchmarkSign-24    \t   57756\t     21214 ns/op\t     164 B/op\t       3 allocs/op\nBenchmarkRecover-24    \t   37156\t     33044 ns/op\t      80 B/op\t       1 allocs/op\nBenchmarkEcrecoverSignature-24    \t   36889\t     32935 ns/op\t      80 B/op\t       1 allocs/op\nBenchmarkVerifySignature-24    \t   41163\t     29207 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkDecompressPubkey-24    \t  318624\t      4062 ns/op\t     304 B/op\t       6 allocs/op\n```\n\nMaster:\n```\nBenchmarkSign-24    \t   34509\t     35330 ns/op\t     164 B/op\t       3 allocs/op\nBenchmarkRecover-24    \t   25418\t     47725 ns/op\t      80 B/op\t       1 allocs/op\nBenchmarkEcrecoverSignature-24    \t   25735\t     47591 ns/op\t      80 B/op\t       1 allocs/op\nBenchmarkVerifySignature-24    \t   29108\t     41097 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkDecompressPubkey-24    \t  294747\t      4143 ns/op\t     304 B/op\t       6 allocs/op\n```\n\nPerformance seems to be improved significantly:\n```\nSign-24      34.86\u00b5 \u00b1 3%   21.66\u00b5 \u00b1 2%  -37.86% (p=0.000 n=10)\nRecover-24   46.14\u00b5 \u00b1 3%   33.24\u00b5 \u00b1 2%  -27.95% (p=0.000 n=10)\n```"
        },
        {
            "date": "2025-03-12 00:00:00",
            "message": "cmd: ctrl-c to halt the whole import process (#31360)\n\nWhen I press Ctrl-C during the import of multiple files, the import\nprocess will still attempt to import the subsequent files. However, in\nnormal circumstances, users would expect the import to stop immediately\nupon pressing Ctrl-C.\n\nAnd because the current file was not finished importing, subsequent\nimport tasks often fail due to an `unknown ancestor` error.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-11 00:00:00",
            "message": "go.mod: update crypto to remove dependency warning (#31334)"
        },
        {
            "date": "2025-03-11 00:00:00",
            "message": "ethdb: no need to check the metric nilness (#31353)\n\nThe metric always has a value, no need to check for the nil. \n\nSeems this code was first introduced here\nhttps://github.com/ethereum/go-ethereum/blob/054412e33528e53f6deae940c870217b614707b9/metrics/meter.go#L45-L48\n\nAs the `nilMeter` was removed, so this check seems is useless.\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-03-11 00:00:00",
            "message": "beacon/types, beacon/blsync: update for electra (#31243)\n\nThis updates the blsync base types for the Electra fork. I've been\ntesting, and it doesn't seem to make blsync fully work on Electra. But\nI'd still like to get this in to make some progress.\n\n---------\n\nCo-authored-by: Zsolt Felfoldi <zsfelfoldi@gmail.com>"
        },
        {
            "date": "2025-03-11 00:00:00",
            "message": "core: prefund pectra precompiles in developer genesis (#31342)\n\nPrefund the precompile addresses for the new precompiles in the\ndeveloper genesis block."
        },
        {
            "date": "2025-03-11 00:00:00",
            "message": "core/txpool: demote error log to warn (#31332)\n\nThis error log in `legacypool.go` isn't necessary, since even though the\nbehavior is unexpected, it is handled correctly. A discussion on issue\n#22301 concluded that this should instead be a warning log."
        },
        {
            "date": "2025-03-10 00:00:00",
            "message": "cmd,eth,les: replace Cancun override flag with Prague (#31341)\n\nIt's that time of the cycle, should have this ready to go for mainnet\nPrague release."
        },
        {
            "date": "2025-03-07 00:00:00",
            "message": "core/rawdb,state: add preimage miss metric (#31295)\n\n1. The metric of preimage/hits are always the same as preimage/total, prefer to replace\n   the hits with miss instead.\n2. For the state/read/accounts metric, follow the same naming of others,\n  change into singuar."
        },
        {
            "date": "2025-03-05 00:00:00",
            "message": "build: fix execution-spec-tests sanitycheck URL (#31314)"
        },
        {
            "date": "2025-03-05 00:00:00",
            "message": "version: begin v1.15.6 release cycle"
        },
        {
            "date": "2025-03-05 00:00:00",
            "message": "version: release v1.15.5 stable"
        },
        {
            "date": "2025-03-05 00:00:00",
            "message": "core: match on deposit contract log topic (#31317)\n\nThis resolves a situation on the Sepolia testnet, which has a different\ndeposit contract. The contract on that network emits two kinds of logs,\ninstead of only deposit events like the deposit contract on mainnet. So\nwe need to skip events with mismatched topics."
        },
        {
            "date": "2025-03-05 00:00:00",
            "message": "build: upgrade to Go 1.24.1 and golangci-lint 1.64.4 (#31313)\n\n- upgrade -dlgo version to Go 1.24.1\n- upgrade golangci-lint version to 1.64.6"
        },
        {
            "date": "2025-03-04 00:00:00",
            "message": "eth/tracers: fix omitempty for memory and storage (#31289)\n\nThis fixes a regression in the opcode tracer API where we would log\nempty memory and storage fields."
        },
        {
            "date": "2025-03-01 00:00:00",
            "message": "version: begin v1.15.5 release cycle"
        },
        {
            "date": "2025-03-01 00:00:00",
            "message": "version: release go-ethereum v1.15.4 stable"
        },
        {
            "date": "2025-03-01 00:00:00",
            "message": "ethclient: add BlobBaseFee method (#31290)"
        },
        {
            "date": "2025-03-01 00:00:00",
            "message": "eth: check blob transaction validity on the peer goroutine when received (#31219)\n\nThis ensures that if we receive a blob transaction announcement where we cannot\nlink the tx to the sidecar commitments, we will drop the sending peer. This check\nis added in the protocol handler for the PooledTransactions message.\n\nTests for this have also been added in the cross-client \"eth\" protocol test suite.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-01 00:00:00",
            "message": "eth: do not add failed tx to localTxTracker (#31202)\n\nIn transaction-sending APIs such as `eth_sendRawTransaction`, a submitted transaction \nfailing the configured txpool validation rules (i.e. fee too low) would cause an error to be\nreturned, even though the transaction was successfully added into the locals tracker.\nOnce added there, the transaction may even be included into the chain at a later time,\nwhen fee market conditions change.\n\nThis change improves on this by performing the validation in the locals tracker, basically\nskipping some of the validation rules for local transactions. We still try to add the tx to the\nmain pool immediately, but an error will only be returned for transactions which are \nfundamentally invalid.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-02-28 00:00:00",
            "message": "eth: remove EventMux accessors (#30017)\n\nHi, it seems these methods in the `backend.go` and `api_backend.go`\nfiles are not used that expose the eventMux, but that is not needed."
        },
        {
            "date": "2025-02-28 00:00:00",
            "message": "core/tracing: stringer for gas and nonce change reasons (#31234)"
        },
        {
            "date": "2025-02-27 00:00:00",
            "message": "build/deb: add step for new Go bootstrap to debian rules (#31283)\n\nNext attempt at fixing the build on launchpad.net"
        },
        {
            "date": "2025-02-27 00:00:00",
            "message": "all: drop x/exp direct dependency (#30558)\n\nThis is a not-particularly-important \"cleanliness\" PR. It removes the\nlast remnants of the `x/exp` package, where we used the `maps.Keys`\nfunction.\n\nThe original returned the keys in a slice, but when it became 'native'\nthe signature changed to return an iterator, so the new idiom is\n`slices.Collect(maps.Keys(theMap))`, unless of course the raw iterator\ncan be used instead.\n\nIn some cases, where we previously collect into slice and then sort, we\ncan now instead do `slices.SortXX` on the iterator instead, making the\ncode a bit more concise.\n\nThis PR might be _slighly_ less optimal, because the original `x/exp`\nimplementation allocated the slice at the correct size off the bat,\nwhich I suppose the new code won't.\n\nPutting it up for discussion.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-02-27 00:00:00",
            "message": "build: simplify go mod tidy check (#31266)\n\nThis changes the go mod tidy check to use the go mod tidy -diff command,\nremoving the custom diffing for go.mod. The check for go.mod/go.sum is now\nperformed in the check_generate action.\n\nAlso included is a change where check_generate and check_baddeps will now\nrun on the GitHub Actions lint step.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-02-27 00:00:00",
            "message": "build: update PPA Go bootstrap version to 1.23 (#31282)\n\nThis is for fixing the PPA build, which has been failing since the\nupdate to Go 1.24. In Go 1.24, the required Go version for bootstrapping\nwas updated to 1.22. In general, they are following through with always\ndepending on the Go version two releases ago for bootstrapping.\n\nSince we still support Ubuntu Xenial (16.04) until its EOL date of\n04/2026, and Xenial only has golang 1.10 as a package, we now need to\nbuild Go a total of four times to get the most recent version. I'm adding a step\nfor Go 1.23 here. This should last us until Go 1.25, which should be out around\n04/2026, and we can hopefully drop the first bootstrapping step at that time."
        },
        {
            "date": "2025-02-27 00:00:00",
            "message": "core/txpool: fix error logs flood caused by removeAuthorities (#31249)\n\nwhen remove an non-SetCodeTxType transaction, error logs flood\n```\nt=2025-02-25T03:11:06+0000 lvl=error msg=\"Authority with untracked tx\" addr=0xD5bf9221fCB1C31Cd1EE477a60c148d40dD63DC1 hash=0x626fdf205a5b1619deb2f9e51fed567353f80acbd522265b455daa0821c571d9\n```\n\nin this PR, only try to removeAuthorities for txs with SetCodeTxType\n\nin addition, the performance of removeAuthorities improved a lot,\nbecause no need range all `t.auths` now.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-02-27 00:00:00",
            "message": "eth/gasprice: sanity check ratio values (#31270)\n\nFollow on to #31246. Adds a sanity check in the test to make sure the\nratio value never goes over 1. Would have avoided the issue in #31245."
        },
        {
            "date": "2025-02-26 00:00:00",
            "message": "cmd/workload: RPC workload tests for filters and history (#31189)\n\n\nCo-authored-by: Felix Lange <fjl@twurst.com>\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2025-02-26 00:00:00",
            "message": "eth/gasprice: fix eth_feeHistory blobGasRatio (#31246)\n\nThis change divides BlobGasUsed by MaxBlobGasPerBlock instead of\nMaxBlobsPerBlock. Dividing by MaxBlobsPerBlock\nmeant the blobGasUsedRatio was an incorrect large number. This bug was\nintroduced by a typo\n[here](https://github.com/ethereum/go-ethereum/commit/e6f3ce7b168b8f346de621a8f60d2fa57c2ebfb0#diff-3357b2399699d7cf954c543cbfb02ff442eb24491e55f5e813e3cc85829b3e8dR110)\n\nFixes https://github.com/ethereum/go-ethereum/issues/31245"
        },
        {
            "date": "2025-02-26 00:00:00",
            "message": "build: filter out .git folder for go generate check (#31265)\n\nFixes lint issue\n\n    >>> /home/appveyor/.gvm/gos/go1.24.0/bin/go generate ./...\n    ci.go:404: File changed: .git/index\n    ci.go:407: One or more generated files were updated by running 'go generate ./...'\n    exit status 1"
        },
        {
            "date": "2025-02-25 00:00:00",
            "message": "version: begin v1.15.4 release cycle"
        },
        {
            "date": "2025-02-25 00:00:00",
            "message": "version: release go-ethereum v1.15.3 stable"
        },
        {
            "date": "2025-02-25 00:00:00",
            "message": "eth/protocols/eth: fix loading \"eth\" ENR key in dial filter (#31251)\n\nThis fixes an issue where dial candidates from discv5 would be ignored\nbecause the \"eth\" ENR entry was not loaded correctly."
        },
        {
            "date": "2025-02-25 00:00:00",
            "message": "ethclient/simulated: add goroutine leak test  (#31033)\n\nAdds a basic sanity test case to catch any go-routines leaked from\ninstantiation/closing of a simulated backend."
        },
        {
            "date": "2025-02-21 00:00:00",
            "message": "Fix flakey behavior in simulated backend Rollback"
        },
        {
            "date": "2025-02-24 00:00:00",
            "message": "params: add deposit contract addresses (#31247)\n\nWe forgot to add the deposit contract address for holesky, causing\ndeposits to not be flagged correctly\n\n---------\n\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>"
        },
        {
            "date": "2025-02-24 00:00:00",
            "message": "core/txpool: move setcode tx validation into legacyPool (#31209)\n\nIn this PR, several improvements have been made:\n\nAuthorization-related validations have been moved to legacyPool. \nPreviously, these checks were part of the standard validation procedure,\nwhich applies common validations across different pools. Since these \nchecks are specific to SetCode transactions, relocating them to\nlegacyPool\nis a more reasonable choice.\n\nAdditionally, authorization conflict checks are now performed regardless\nof whether the transaction is a replacement or not.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-02-24 00:00:00",
            "message": "crypto: add comment to FromECDSAPub (#31241)\n\ncloses https://github.com/ethereum/go-ethereum/issues/26240"
        },
        {
            "date": "2025-02-24 00:00:00",
            "message": "go.mod: update cloudflare-go (#31240)\n\nUpdates cloudflare-go from v0.79.0 to v0.114.0 which also gets rid of a\ndependency to `github.com/hashicorp/go-retryablehttp` which had a\nsecurity flaw.\n\nDiff:\nhttps://github.com/cloudflare/cloudflare-go/compare/v0.79.0...v0.114.0\n\nI did a quick sanity check on the diff on all methods that we use and\nwent through the release notes, there was nothing related to how we use\nit afaict"
        },
        {
            "date": "2025-02-23 00:00:00",
            "message": "eth: report error from setupDiscovery at startup (#31233)\n\nI ran into this while trying to debug a discv5 thing. I tried to disable\nDNS discovery using `--discovery.dns=false`, which doesn't work.\nAnnoyingly, geth started anyway and discarded the error silently. I\neventually found my mistake, but it took way longer than it should have.\n\nAlso including a small change to the error message for invalid DNS URLs\nhere. The user actually needs to see the URL to make sense of the error."
        },
        {
            "date": "2025-02-21 00:00:00",
            "message": "build: replace `tenv` linter with `usetesting` (#31172)"
        },
        {
            "date": "2025-02-21 00:00:00",
            "message": "cmd/clef: improve documentation in readme (#31218)\n\nFixed broken or outdated links and improved documentation formatting to\nensure consistency and correct references.\n\n---------\n\nCo-authored-by: Sina M <1591639+s1na@users.noreply.github.com>"
        },
        {
            "date": "2025-02-21 00:00:00",
            "message": "internal/ethapi: fix prev hashes in eth_simulate (#31122)\n\nShout-out to @Gabriel-Trintinalia for discovering this issue. The gist\nof it as follows:\n\nWhen processing a block, we should provide the parent block as well as\nthe last 256 block hashes. Some of these parents data (specifically the\nhash) was incorrect because even though during the processing of the\nparent block we have updated the header, that header was not updating\nthe TransactionsRoot and ReceiptsRoot fields (types.NewBlock makes a new\ncopy of the header and changes it only on that instance).\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-02-21 00:00:00",
            "message": "signer/core:  fix encoding of `bytes` nested within array (#31049)\n\nFixes an incorrect encoding of recursive bytes types.\ncloses https://github.com/ethereum/go-ethereum/issues/30979"
        },
        {
            "date": "2025-02-21 00:00:00",
            "message": "core/types: remove unneeded todo marker (#31179)"
        },
        {
            "date": "2025-02-21 00:00:00",
            "message": "p2p/nat: remove test with default servers (#31225)\n\nThe test occasionally fails when network connectivity is bad or if it\nhits the wrong server. We usually don't add tests with external network\ndependency so I'm removing them.\n\nFixes #31220"
        },
        {
            "date": "2025-02-20 00:00:00",
            "message": "oss-fuzz: remove deprecated targets (#31224)\n\nFixes https://github.com/ethereum/go-ethereum/issues/31223\n\n(sorry, I thought the fork fork would be created on my repo, not\nupstream, when I used the GH editor)"
        },
        {
            "date": "2025-02-20 00:00:00",
            "message": "eth/tracers: refactor block context in test runner (#29450)\n\nThis commit contains a minor refactoring of the block context\nused within the test runners.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-02-20 00:00:00",
            "message": "internal/ethapi: handle prague system calls in eth_simulate (#31176)\n\neth_simulate was not processing prague system calls for history contract and EL\nrequests resulting in inaccurate stateRoot and requestsRoot fields in the block."
        },
        {
            "date": "2025-02-20 00:00:00",
            "message": "core/txpool/legacypool: add setCodeTx reorg test (#31206)\n\nThis PR adds a test that makes sure that a node can send multiple\ntransactions again once a authorization is removed"
        },
        {
            "date": "2025-02-20 00:00:00",
            "message": ".github: downgrade go for lint step (#31217)"
        },
        {
            "date": "2025-02-19 00:00:00",
            "message": "core/asm: delete assembler/disassembler (#31211)\n\nI maintain an improved version of the go-ethereum assembler at\nhttps://github.com/fjl/geas. We don't really use core/asm in our tests,\nand it has some bugs that prevent it from being useful, so I'm removing\nthe package."
        },
        {
            "date": "2025-02-19 00:00:00",
            "message": "build: upgrade -dlgo version to Go 1.24.0 (#31159)\n\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-02-18 00:00:00",
            "message": "eth/catalyst: support earlier forks in SimulatedBeacon (#31084)\n\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-02-18 00:00:00",
            "message": "params: add osaka blob schedule (#31174)\n\nPrevents crashes when running execution spec tests for osaka"
        },
        {
            "date": "2025-02-18 00:00:00",
            "message": "core/vm: clean up EVM environmental structure (#31061)\n\nThis PR does a few things including:\r\n\r\n- Remove `ContractRef` interface\r\n- Remove `vm.AccountRef` which implements `ContractRef` interface\r\n- Maintain the `jumpDests` struct in EVM for sharing between call frames\r\n- Simplify the delegateCall context initialization"
        },
        {
            "date": "2025-02-18 00:00:00",
            "message": "ethclient: add comment describing block number tags (#30984)\n\nAdds a comment on how to use rpc.*BlockNumber and the explanation of the block number tags\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-02-18 00:00:00",
            "message": "utils: clarify description for history.state flag (#31164)"
        },
        {
            "date": "2025-02-18 00:00:00",
            "message": "trie: do not expect ordering in stacktrie during fuzzing (#31170)\n\nThis PR removes the assumption of the stacktrie and trie to have the\r\nsame ordering. This was hit by the fuzzers on oss-fuzz\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-02-17 00:00:00",
            "message": "version: begin v1.15.3 release cycle"
        },
        {
            "date": "2025-02-17 00:00:00",
            "message": "version: release go-ethereum v1.15.2 stable"
        },
        {
            "date": "2025-02-17 00:00:00",
            "message": "eth/protocols/eth: add discovery iterator to protocol (#31185)\n\nWe somehow forgot to add this in #30302, so discv5 and DNS have actually\nbeen disabled since then.\n\nFixes #31168"
        },
        {
            "date": "2025-02-17 00:00:00",
            "message": "p2p: fix marshaling of NAT in TOML (#31192)\n\nThis fixes an issue where a nat.Interface unmarshaled from the TOML\nconfig file could not be re-marshaled to TOML correctly.\n\nFixes #31183"
        },
        {
            "date": "2025-02-17 00:00:00",
            "message": "consensus/beacon: fix isPostMerge for mainnet (#31191)\n\nThis fixes a regression introduced in #31153 where we didn't consider\r\nmainnet to be in PoS, causing #31190.\r\nThe problem is, `params.MainnetChainConfig` does not have a defined\r\n`MergeNetsplitBlock`, so it isn't considered to be in PoS in\r\n`CalcDifficulty`."
        },
        {
            "date": "2025-02-13 00:00:00",
            "message": "core/types: create block's bloom by merging receipts' bloom (#31129)\n\nCurrently, when calculating block's bloom, we loop through all the\r\nreceipt logs to calculate the hash value. However, normally, after going\r\nthrough applyTransaction, the receipt's bloom is already calculated\r\nbased on the receipt log, so the block's bloom can be calculated by just\r\nORing these receipt's blooms.\r\n```\r\ngoos: darwin\r\ngoarch: arm64\r\npkg: github.com/ethereum/go-ethereum/core/types\r\ncpu: Apple M1 Pro\r\nBenchmarkCreateBloom\r\nBenchmarkCreateBloom/small\r\nBenchmarkCreateBloom/small-10             810922              1481 ns/op             104 B/op          5 allocs/op\r\nBenchmarkCreateBloom/large\r\nBenchmarkCreateBloom/large-10               8173            143764 ns/op            9614 B/op        401 allocs/op\r\nBenchmarkCreateBloom/small-mergebloom\r\nBenchmarkCreateBloom/small-mergebloom-10                 5178918               232.0 ns/op             0 B/op          0 allocs/op\r\nBenchmarkCreateBloom/large-mergebloom\r\nBenchmarkCreateBloom/large-mergebloom-10                   54110             22207 ns/op               0 B/op          0 allocs/op\r\n```\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\r\nCo-authored-by: Zsolt Felfoldi <zsfelfoldi@gmail.com>"
        },
        {
            "date": "2025-02-13 00:00:00",
            "message": "version: begin v1.15.2 release cycle"
        },
        {
            "date": "2025-02-13 00:00:00",
            "message": "version: release go-ethereum v1.15.1 stable"
        },
        {
            "date": "2025-02-13 00:00:00",
            "message": "core/rawdb: skip setting flushOffset in read-only mode (#31173)\n\nThis PR addresses a flaw in the freezer table upgrade path.\n\nIn v1.15.0, freezer table v2 was introduced, including an additional \nfield (`flushOffset`) maintained in the metadata file. To ensure \nbackward compatibility, an upgrade path was implemented for legacy\nfreezer tables by setting `flushOffset` to the size of the index file.\n\nHowever, if the freezer table is opened in read-only mode, this file \nwrite operation is rejected, causing Geth to shut down entirely.\n\nGiven that invalid items in the freezer index file can be detected and \ntruncated, all items in freezer v0 index files are guaranteed to be\ncomplete. Therefore, when operating in read-only mode, it is safe to\nuse the  freezer data without performing an upgrade."
        },
        {
            "date": "2025-02-13 00:00:00",
            "message": "core: sanity-check fork configuration in genesis (#31171)\n\nThis is to prevent a crash on startup with a custom genesis configuration.\nWith this change in place, upgrading a chain created by geth v1.14.x and\nbelow will now print an error instead of crashing:\n\n    Fatal: Failed to register the Ethereum service: invalid chain configuration: missing entry for fork \"cancun\" in blobSchedule\n\nArguably this is not great, and it should just auto-upgrade the config.\nWe'll address this in a follow-up PR for geth v1.15.2"
        },
        {
            "date": "2025-02-13 00:00:00",
            "message": "go.mod: update blst to v0.3.14 (#31165)\n\ncloses https://github.com/ethereum/go-ethereum/issues/31072\r\n\r\nBLST released their newest version which includes a fix for go v.1.24:\r\nhttps://github.com/supranational/blst/releases/tag/v0.3.14\r\n\r\nI went through all commits between 0.3.14 and 0.3.13 for a sanity check"
        },
        {
            "date": "2025-02-12 00:00:00",
            "message": "trie: copy preimage store pointer in StateTrie.Copy (#31158)\n\nThis fixes an error where executing `evm run --dump ...` omits preimages\r\nfrom the dump (because the statedb used for execution is a copy of\r\nanother instance)."
        },
        {
            "date": "2025-02-11 00:00:00",
            "message": "internal/ethapi: fix panic in debug methods (#31157)\n\nFixes an error when the block is not found in debug methods."
        },
        {
            "date": "2025-02-11 00:00:00",
            "message": "core/txpool/legacypool: add support for SetCode transactions (#31073)\n\nThe new SetCode transaction type introduces some additional complexity\nwhen handling the transaction pool.\n\nThis complexity stems from two new account behaviors:\n\n1. The balance and nonce of an account can change during regular\n   transaction execution *when they have a deployed delegation*.\n2. The nonce and code of an account can change without any EVM execution\n   at all. This is the \"set code\" mechanism introduced by EIP-7702.\n\nThe first issue has already been considered extensively during the design\nof ERC-4337, and we're relatively confident in the solution of simply\nlimiting the number of in-flight pending transactions an account can have\nto one. This puts a reasonable bound on transaction cancellation. Normally\nto cancel, you would need to spend 21,000 gas. Now it's possible to cancel\nfor around the cost of warming the account and sending value\n(`2,600+9,000=11,600`). So 50% cheaper.\n\nThe second issue is more novel and needs further consideration.\nSince authorizations are not bound to a specific transaction, we\ncannot drop transactions with conflicting authorizations. Otherwise,\nit might be possible to cherry-pick authorizations from txs and front\nrun them with different txs at much lower fee amounts, effectively DoSing\nthe authority. Fortunately, conflicting authorizations do not affect the\nunderlying validity of the transaction so we can just accept both.\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-02-11 00:00:00",
            "message": "p2p/discover: make discv5 response timeout configurable (#31119)"
        },
        {
            "date": "2025-02-11 00:00:00",
            "message": "p2p/discover: remove unused parameter in revalidationList.get (#31155)"
        },
        {
            "date": "2025-02-11 00:00:00",
            "message": "consensus/beacon: remove TestingTTDBlock (#31153)\n\nThis removes the method `TestingTTDBlock` introduced by #30744. It was\nadded to make the beacon consensus engine aware of the merge block in\ntests without relying on the total difficulty. However, tracking the\nmerge block this way is very annoying. We usually configure forks in the\n`ChainConfig`, but the method is on the consensus engine, which isn't\nalways created in the same place. By sidestepping the `ChainConfig` we\ndon't get the usual fork-order checking, so it's possible to enable the\nmerge before the London fork, for example. This in turn can lead to very\nhard-to-debug outputs and validation errors.\n\nSo here I'm changing the consensus engine to check the\n`MergeNetsplitBlock` instead. Alternatively, we assume a network is\nmerged if it has a `TerminalTotalDifficulty` of zero, which is a very\ncommon configuration in tests."
        },
        {
            "date": "2025-02-08 00:00:00",
            "message": "params,core/forkid: enable prague on holesky and sepolia (#31139)\n\nAgreed to the following fork dates for Holesky and Sepolia on ACDC 150\n\nHolesky slot: 3710976\t(Mon, Feb 24 at 21:55:12 UTC)\nSepolia slot: 7118848\t(Wed, Mar 5 at 07:29:36 UTC)"
        },
        {
            "date": "2025-02-07 00:00:00",
            "message": "cmd/devp2p/internal/ethtest: remove TD from status validation (#31137)\n\nAfter recent changes in Geth (removing TD):\r\n\r\nhttps://github.com/ethereum/go-ethereum/commit/39638c81c56db2b2dfe6f51999ffd3029ee212cb#diff-d70a44d4b7a0e84fe9dcca25d368f626ae6c9bc0b8fe9690074ba92d298bcc0d\r\n\r\nNon-Geth clients are failing many devp2p tests with an error:\r\n`peering failed: status exchange failed: wrong TD in status: have 1 want 0`\r\n\r\nRight now only Geth is passing it - all other clients are affected by\r\nthis change. I think there should be no validation of TD when checking `Status`\r\nmessage in hive tests. Now Geth has 0 (and hive tests requires 0) and\r\nall other clients have actual TD. And on real networks there is no validation\r\nof TD when peering"
        },
        {
            "date": "2025-02-06 00:00:00",
            "message": "version: begin v1.15.1 release cycle"
        },
        {
            "date": "2025-02-06 00:00:00",
            "message": "version: release go-ethereum v1.15.0"
        },
        {
            "date": "2025-02-06 00:00:00",
            "message": "build: update EEST fixtures to prague devnet-6 (#31088)\n\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-02-05 00:00:00",
            "message": "build: update to Go 1.23.6 (#31130)\n\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-02-05 00:00:00",
            "message": "all: update license comments and AUTHORS (#31133)"
        },
        {
            "date": "2025-02-05 00:00:00",
            "message": "core/tracing: state journal wrapper (#30441)\n\nHere we add some more changes for live tracing API v1.1:\n\n- Hook `OnSystemCallStartV2` was introduced with `VMContext` as parameter.\n- Hook `OnBlockHashRead` was introduced.\n- `GetCodeHash` was added to the state interface\n- The new `WrapWithJournal` construction helps with tracking EVM reverts in the tracer.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-02-05 00:00:00",
            "message": "consensus/misc/eip4844: more changes for blob gas calculation (#31128)\n\nThis PR changes the signature of `CalcExcessBlobGas` to take in just\nthe header timestamp instead of the whole object. It also adds a sanity\ncheck for the parent->child block order to `VerifyEIP4844Header`."
        },
        {
            "date": "2025-02-04 00:00:00",
            "message": "consensus/misc/eip4844: use head's target blobs, not parent (#31101)\n\nA clarification was made to EIP-7691 stating that at the fork boundary\nit is required to use the target blob count associated with the head\nblock, rather than the parent as implemented here.\n\nSee for more: https://github.com/ethereum/EIPs/pull/9249"
        },
        {
            "date": "2025-02-04 00:00:00",
            "message": "core/txpool/blobpool: fix incorrect arguments in test (#31127)\n\nFixes the linter on master which was broken by\r\nhttps://github.com/ethereum/go-ethereum/pull/30559"
        },
        {
            "date": "2025-02-04 00:00:00",
            "message": "core/txpool: remove locals-tracking from txpools (#30559)\n\nReplaces  #29297, descendant from #27535\r\n\r\n---------\r\n\r\nThis PR removes `locals` as a concept from transaction pools. Therefore,\r\nthe pool now acts as very a good simulation/approximation of how our\r\npeers' pools behave. What this PR does instead, is implement a\r\nlocals-tracker, which basically is a little thing which, from time to\r\ntime, asks the pool \"did you forget this transaction?\". If it did, the\r\ntracker resubmits it.\r\n\r\nIf the txpool _had_ forgotten it, chances are that the peers had also\r\nforgotten it. It will be propagated again.\r\n\r\nDoing this change means that we can simplify the pool internals, quite a\r\nlot.\r\n\r\n### The semantics of `local` \r\n\r\nHistorically, there has been two features, or usecases, that has been\r\ncombined into the concept of `locals`.\r\n\r\n1. \"I want my local node to remember this transaction indefinitely, and\r\nresubmit to the network occasionally\"\r\n2. \"I want this (valid) transaction included to be top-prio for my\r\nminer\"\r\n\r\n\r\nThis PR splits these features up, let's call it `1: local` and `2:\r\nprio`. The `prio` is not actually individual transaction, but rather a\r\nset of `address`es to prioritize.\r\nThe attribute `local` means it will be tracked, and `prio` means it will\r\nbe prioritized by miner.\r\n\r\nFor `local`: anything transaction received via the RPC is marked as\r\n`local`, and tracked by the tracker.\r\nFor `prio`: any transactions from this sender is included first, when\r\nbuilding a block. The existing commandline-flag `--txpool.locals` sets\r\nthe set of `prio` addresses.\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-02-04 00:00:00",
            "message": "core: assign default difficulty to zero for chain without ethash (#31067)\n\nI hit this case while trying something with the simulated backend. The\nEVM only enables instruction set forks after the merge when 'Random' is\nset. In the simulated backend, the random value will be set via the\nengine API for all blocks after genesis. But for the genesis block\nitself, the random value will not be assigned in the vm.BlockContext\nbecause the genesis has a non-zero difficulty. For my case, this meant\nthat estimateGas did not work for the first transaction sent on the\nsimulated chain, since the contract contained a PUSH0 instruction.\n\nThis could also be fixed by explicitly configuring a zero difficulty in\nthe simulated backend. However, I think that zero difficulty is a better\ndefault these days.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-02-04 00:00:00",
            "message": "params,core: add max and target value to chain config (#31002)\n\nImplements [EIP-7840](https://github.com/ethereum/EIPs/pull/9129) and\r\n[EIP-7691](https://github.com/ethereum/EIPs/blob/d96625a4dcbbe2572fa006f062bd02b4582eefd5/EIPS/eip-7691.md).\r\n\r\n---------\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-02-04 00:00:00",
            "message": "params: start osaka fork (#31125)\n\nThis PR defines the Osaka fork. An easy first step to start our work on\nthe next hardfork\n\n(This is needed for EOF testing as well)\n\n---------\n\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>"
        },
        {
            "date": "2025-02-04 00:00:00",
            "message": "core: copy genesis before modifying (#31097)\n\nThis PR fixes a data race in SetupGenesisWithOverride."
        },
        {
            "date": "2025-02-04 00:00:00",
            "message": "core/rawdb: introduce flush offset in freezer (#30392)\n\nThis is a follow-up PR to #29792 to get rid of the data file sync.\n\n**This is a non-backward compatible change, which increments the\ndatabase version from 8 to 9**.\n\nWe introduce a flushOffset for each freezer table, which tracks the position\nof the most recently fsync\u2019d item in the index file. When this offset moves\nforward, it indicates that all index entries below it, along with their corresponding\ndata items, have been properly persisted to disk. The offset can also be moved\nbackward when truncating from either the head or tail of the file.\n\nPreviously, the data file required an explicit fsync after every mutation, which\nwas highly inefficient. With the introduction of the flush offset, the synchronization\nstrategy becomes more flexible, allowing the freezer to sync every 30 seconds\ninstead.\n\nThe data items above the flush offset are regarded volatile and callers must ensure\nthey are recoverable after the unclean shutdown, or explicitly sync the freezer\nbefore any proceeding operations.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-02-04 00:00:00",
            "message": "tests/fuzzers/bls12381: fix error message in fuzzCrossG2Add (#31113)\n\nFixes a typo in the error message within the `fuzzCrossG2Add`\r\nfunction. The panic message incorrectly references \"G1 point addition\r\nmismatch\" when it should be \"G2 point addition mismatch,\" as the\r\nfunction deals with G2 points.\r\n\r\nThis doesn't affect functionality but could cause confusion during\r\ndebugging. I've updated the message to reflect the correct curve."
        },
        {
            "date": "2025-02-03 00:00:00",
            "message": "core/vm: simplify tracer hook invocation in interpreter loop (#31074)\n\nRemoves duplicate code in the interpreter loop."
        },
        {
            "date": "2025-01-31 00:00:00",
            "message": "eth/catalyst: fix validation of type 0 request (#31103)\n\nI caught this error on Hive. It was introduced by\nhttps://github.com/ethereum/go-ethereum/pull/31071 because after adding\nthe equality check the request type 0 will be rejected."
        },
        {
            "date": "2025-01-31 00:00:00",
            "message": "params: update system contract addresses for devnet-6 (#31102)\n\nFinalize Prague system contract addresses. Reference:\n\n* https://github.com/ethereum/EIPs/pull/9287\n* https://github.com/ethereum/EIPs/pull/9288\n* https://github.com/ethereum/EIPs/pull/9289"
        },
        {
            "date": "2025-01-30 00:00:00",
            "message": "core/vm: EXTCODE* return delegation designator for 7702 (#31089)\n\nImplements https://github.com/ethereum/EIPs/pull/9248"
        },
        {
            "date": "2025-01-30 00:00:00",
            "message": "core: implement eip-7623 floor data gas (#30946)\n\nThis PR builds on #29040 and updates it to the new version of the spec.\nI filled the EEST tests and they pass.\n\nLink to spec: https://eips.ethereum.org/EIPS/eip-7623\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-01-30 00:00:00",
            "message": "all: add build tags for wasip1 (#31090)"
        },
        {
            "date": "2025-01-30 00:00:00",
            "message": "version: begin v1.15.0 release cycle"
        },
        {
            "date": "2025-01-30 00:00:00",
            "message": "build: provide a flag to disable publishing in dockerx build (#31098)\n\nThis changes the `-upload` flag to just toggle the upload. The remote\nimage name is now configured using the `-hub` flag."
        },
        {
            "date": "2025-01-30 00:00:00",
            "message": "crypto: add IsOnCurve check (#31100)"
        },
        {
            "date": "2025-01-30 00:00:00",
            "message": "build: retry PPA upload up to three times (#31099)"
        },
        {
            "date": "2025-01-30 00:00:00",
            "message": "Revert \".travis.yml: change arch for Docker build to arm64 (#31096)\"\n\nThis reverts commit 7b96ec4dae8d4ddeffc761c7757c12e2d2b8bf74."
        },
        {
            "date": "2025-01-30 00:00:00",
            "message": ".travis.yml: change arch for Docker build to arm64 (#31096)\n\nThis is an attempt to work around a gcc issue in the Docker build."
        },
        {
            "date": "2025-01-30 00:00:00",
            "message": "build: bump test timeout (#31095)\n\nTravis often fails because the test times out."
        },
        {
            "date": "2025-01-29 00:00:00",
            "message": "core/{.,state,vm},miner,eth/tracers,tests: implement 7709 with a syscall flag (#31036)\n\nSame as #31015 but requires the contract to exist. Not compatible with\nany verkle testnet up to now.\n\nThis adds a `isSytemCall` flag so that it is possible to detect when a\nsystem call is executed, so that the code execution and other locations\nare not added to the witness.\n\n---------\n\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\nCo-authored-by: Ignacio Hagopian <jsign.uy@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-01-28 00:00:00",
            "message": ".github: add lint step (#31068)"
        },
        {
            "date": "2025-01-28 00:00:00",
            "message": "all: nuke total difficulty (#30744)\n\nThe total difficulty is the sum of all block difficulties from genesis\nto a certain block. This value was used in PoW for deciding which chain\nis heavier, and thus which chain to select. Since PoS has a different\nfork selection algorithm, all blocks since the merge have a difficulty\nof 0, and all total difficulties are the same for the past 2 years.\n\nWhilst the TDs are mostly useless nowadays, there was never really a\nreason to mess around removing them since they are so tiny. This\nreasoning changes when we go down the path of pruned chain history. In\norder to reconstruct any TD, we **must** retrieve all the headers from\nchain head to genesis and then iterate all the difficulties to compute\nthe TD.\n\nIn a world where we completely prune past chain segments (bodies,\nreceipts, headers), it is not possible to reconstruct the TD at all. In\na world where we still keep chain headers and prune only the rest,\nreconstructing it possible as long as we process (or download) the chain\nforward from genesis, but trying to snap sync the head first and\nbackfill later hits the same issue, the TD becomes impossible to\ncalculate until genesis is backfilled.\n\nAll in all, the TD is a messy out-of-state, out-of-consensus computed\nfield that is overall useless nowadays, but code relying on it forces\nthe client into certain modes of operation and prevents other modes or\nother optimizations. This PR completely nukes out the TD from the node.\nIt doesn't compute it, it doesn't operate on it, it's as if it didn't\neven exist.\n\nCaveats:\n\n- Whenever we have APIs that return TD (devp2p handshake, tracer, etc.)\nwe return a TD of 0.\n- For era files, we recompute the TD during export time (fairly quick)\nto retain the format content.\n- It is not possible to \"verify\" the merge point (i.e. with TD gone, TTD\nis useless). Since we're not verifying PoW any more, just blindly trust\nit, not verifying but blindly trusting the many year old merge point\nseems just the same trust model.\n- Our tests still need to be able to generate pre and post merge blocks,\nso they need a new way to split the merge without TTD. The PR introduces\na settable ttdBlock field on the consensus object which is used by tests\nas the block where originally the TTD happened. This is not needed for\nlive nodes, we never want to generate old blocks.\n- One merge transition consensus test was disabled. With a\nnon-operational TD, testing how the client reacts to TTD is useless, it\ncannot react.\n\nQuestions:\n\n- Should we also drop total terminal difficulty from the genesis json?\nIt's a number we cannot react on any more, so maybe it would be cleaner\nto get rid of even more concepts.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-01-28 00:00:00",
            "message": "chore: fix various comments (#31082)"
        },
        {
            "date": "2025-01-25 00:00:00",
            "message": "fix README.md (#31076)\n\nHi\nI fixed 2 minor spelling issues.\n\n---------\n\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>"
        },
        {
            "date": "2025-01-24 00:00:00",
            "message": "p2p/nat: add stun protocol (#31064)\n\nThis implements a basic mechanism to query the node's external IP using\na STUN server. There is a built-in list of public STUN servers for convenience.\nThe new detection mechanism must be selected explicitly using `--nat=stun` \nand is not enabled by default in Geth.\n\nFixes #30881\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-01-24 00:00:00",
            "message": "core/vm: implement EIP-2537 spec updates (#30978)\n\nReference:\n\n- Remove MUL precompiles: https://github.com/ethereum/EIPs/pull/8945\n- Pricing change for pairing operation:\nhttps://github.com/ethereum/EIPs/pull/9098\n- Pricing change for add, mapping and mul operations:\nhttps://github.com/ethereum/EIPs/pull/9097\n- Pricing change for MSM operations:\nhttps://github.com/ethereum/EIPs/pull/9116\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-01-24 00:00:00",
            "message": "accounts/usbwallet: fix ledger access for latest firmware and add Ledger Flex (#31004)\n\nThe latest firmware for Ledger Nano S Plus now returns `0x5000` for it's\nproduct ID, which doesn't match any of the product IDs enumerated in\n`hub.go`.\n\nThis PR removes the assumption about the interfaces exposed, and simply\nchecks the upper byte for a match.\n\nAlso adds support for the `0x0007` / `0x7000` product ID (Ledger Flex)."
        },
        {
            "date": "2025-01-23 00:00:00",
            "message": "eth/catalyst: fail on duplicate request types (#31071)\n\nRefer to: https://github.com/ethereum/execution-apis/pull/623"
        },
        {
            "date": "2025-01-23 00:00:00",
            "message": "trie: reduce allocations in stacktrie (#30743)\n\nThis PR uses various tweaks and tricks to make the stacktrie near\nalloc-free.\n\n```\n[user@work go-ethereum]$ benchstat stacktrie.1 stacktrie.7\ngoos: linux\ngoarch: amd64\npkg: github.com/ethereum/go-ethereum/trie\ncpu: 12th Gen Intel(R) Core(TM) i7-1270P\n             \u2502 stacktrie.1  \u2502             stacktrie.7              \u2502\n             \u2502    sec/op    \u2502    sec/op     vs base                \u2502\nInsert100K-8   106.97m \u00b1 8%   88.21m \u00b1 34%  -17.54% (p=0.000 n=10)\n\n             \u2502   stacktrie.1    \u2502             stacktrie.7              \u2502\n             \u2502       B/op       \u2502     B/op      vs base                \u2502\nInsert100K-8   13199.608Ki \u00b1 0%   3.424Ki \u00b1 3%  -99.97% (p=0.000 n=10)\n\n             \u2502  stacktrie.1   \u2502             stacktrie.7             \u2502\n             \u2502   allocs/op    \u2502 allocs/op   vs base                 \u2502\nInsert100K-8   553428.50 \u00b1 0%   22.00 \u00b1 5%  -100.00% (p=0.000 n=10)\n```\nAlso improves derivesha:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/ethereum/go-ethereum/core/types\ncpu: 12th Gen Intel(R) Core(TM) i7-1270P\n                          \u2502 derivesha.1 \u2502             derivesha.2              \u2502\n                          \u2502   sec/op    \u2502    sec/op     vs base                \u2502\nDeriveSha200/stack_trie-8   477.8\u00b5 \u00b1 2%   430.0\u00b5 \u00b1 12%  -10.00% (p=0.000 n=10)\n\n                          \u2502 derivesha.1  \u2502             derivesha.2              \u2502\n                          \u2502     B/op     \u2502     B/op      vs base                \u2502\nDeriveSha200/stack_trie-8   45.17Ki \u00b1 0%   25.65Ki \u00b1 0%  -43.21% (p=0.000 n=10)\n\n                          \u2502 derivesha.1 \u2502            derivesha.2             \u2502\n                          \u2502  allocs/op  \u2502 allocs/op   vs base                \u2502\nDeriveSha200/stack_trie-8   1259.0 \u00b1 0%   232.0 \u00b1 0%  -81.57% (p=0.000 n=10)\n\n```\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-01-22 00:00:00",
            "message": "triedb/pathdb: fix state revert on v2 history (#31060)\n\nState history v2 has been shipped and will take effect after the Cancun fork.\r\nHowever, the state revert function does not differentiate between v1 and v2,\r\ninstead blindly using the storage map key for state reversion. \r\n\r\nThis mismatch between the keys of the live state set and the state history\r\ncan trigger a panic: `non-existent storage slot for reverting`.\r\n\r\nThis flaw has been fixed in this PR."
        },
        {
            "date": "2025-01-22 00:00:00",
            "message": "go.mod: gencodec stable v0.1.0 (#31062)"
        },
        {
            "date": "2025-01-22 00:00:00",
            "message": "p2p: support configuring NAT in TOML file (#31041)\n\nThis is an alternative for #27407 with a solution based on gencodec.\nWith the PR, one can now configure like this:\n\n```\n# config.toml\n[Node.P2P]\nNAT = \"extip:33.33.33.33\"\n```\n\n```shell\n$ geth --config config.toml\n...\nINFO [01-17|16:37:31.436] Started P2P networking      self=enode://2290...ab@33.33.33.33:30303\n```"
        },
        {
            "date": "2025-01-21 00:00:00",
            "message": "cmd/evm: restore --bench flag to evm statetest (#31055)\n\nRefactoring of the `evm` command moved where some commands were valid.\nOne command, `--bench`, used to work in `evm statetest`. The pluming is\nstill in place. This PR puts the `--bench` flag in the place the trace\nflags were moved, and adds tests to validate the bench flag operates in\n`run` and `statetest`\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-01-21 00:00:00",
            "message": "go.mod: remove toolchain line (#31057)\n\nWe have our own system for downloading the toolchain, and really don't\nwant Go's to get in the way of that. We may switch to Go's builtin\ntoolchain support, but not now."
        },
        {
            "date": "2025-01-21 00:00:00",
            "message": "eth/filters: ensure API timeoutLoop terminates with event system (#31056)\n\nDiscovered from failing test introduced\nhttps://github.com/ethereum/go-ethereum/pull/31033 . We should ensure\n`timeoutLoop` terminates if the filter event system is terminated."
        },
        {
            "date": "2025-01-21 00:00:00",
            "message": "cmd/evm: refactor handling output-files for `t8n` (#30854)\n\nAs part of trying to make the inputs and outputs of the evm subcommands\r\nmore streamlined and aligned, this PR modifies how `evm t8n` manages\r\noutput-files.\r\n\r\nPreviously, we do a kind of wonky thing where between each transaction,\r\nwe invoke a `getTracer` closure. In that closure, we create a new\r\noutput-file, a tracer, and then make the tracer stream output to the\r\nfile. We also fiddle a bit to ensure that the file becomes properly\r\nclosed.\r\n\r\nIt is a kind of hacky solution we have in place. This PR changes it, so\r\nthat from the execution-pipeline point of view, we have just a regular\r\ntracer. No fiddling with re-setting it or closing files.\r\n\r\nThat particular tracer, however, is a bit special: it takes care of\r\ncreating new files per transaction (in the tx-start-hook) and closing\r\n(on tx-end-hook). Also instantiating the right type of underlying\r\ntracer, which can be a json-logger or a custom tracer.\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-01-21 00:00:00",
            "message": "core/txpool:  terminate subpool reset goroutine if pool was closed (#31030)\n\nif the pool terminates before `resetDone` can be read, then the\r\ngo-routine will hang."
        },
        {
            "date": "2025-01-20 00:00:00",
            "message": "core/types: initialize ChainID in SetCodeTx copy method (#31054)"
        },
        {
            "date": "2025-01-20 00:00:00",
            "message": "build: upgrade -dlgo version to Go 1.23.5 (#31037)"
        },
        {
            "date": "2025-01-20 00:00:00",
            "message": "core/types: correct chainId check for pragueSigner (#31032)\n\nUse zero value check for the pragueSigner\n\nThis aligns with cancunSigner and londonSigner as well."
        },
        {
            "date": "2025-01-20 00:00:00",
            "message": "cmd/abigen: require either `--abi` or `--combined-json` (#31045)\n\nThis PR addresses issue #30768 , which highlights that running\r\ncmd/abigen/abigen --pkg my_package example.json (erroneously omitting\r\nthe --abi flag) generates an empty binding, when it should fail\r\nexplicitly.\r\n\r\n---------\r\n\r\nCo-authored-by: jwasinger <j-wasinger@hotmail.com>"
        },
        {
            "date": "2025-01-17 00:00:00",
            "message": "ethdb/memorydb: faster DeleteRange (#31038)\n\nThis PR replaces the iterator based DeleteRange implementation of\nmemorydb with a simpler and much faster loop that directly deletes keys\nin the order of iteration instead of unnecessarily collecting keys in\nmemory and sorting them.\n\n---------\n\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2025-01-17 00:00:00",
            "message": "all: implement state history v2 (#30107)\n\nThis pull request delivers the new version of the state history, where\r\nthe raw storage key is used instead of the hash.\r\n\r\nBefore the cancun fork, it's supported by protocol to destruct a\r\nspecific account and therefore, all the storage slot owned by it should\r\nbe wiped in the same transition.\r\n\r\nTechnically, storage wiping should be performed through storage\r\niteration, and only the storage key hash will be available for traversal\r\nif the state snapshot is not available. Therefore, the storage key hash\r\nis chosen as the identifier in the old version state history.\r\n\r\nFortunately, account self-destruction has been deprecated by the\r\nprotocol since the Cancun fork, and there are no empty accounts eligible\r\nfor deletion under EIP-158. Therefore, we can conclude that no storage\r\nwiping should occur after the Cancun fork. In this case, it makes no\r\nsense to keep using hash.\r\n\r\nBesides, another big reason for making this change is the current format\r\nstate history is unusable if verkle is activated. Verkle tree has a\r\ndifferent key derivation scheme (merkle uses keccak256), the preimage of\r\nkey hash must be provided in order to make verkle rollback functional.\r\nThis pull request is a prerequisite for landing verkle.\r\n\r\nAdditionally, the raw storage key is more human-friendly for those who\r\nwant to manually check the history, even though Solidity already\r\nperforms some hashing to derive the storage location.\r\n\r\n---\r\n\r\nThis pull request doesn't bump the database version, as I believe the\r\ndatabase should still be compatible if users degrade from the new geth\r\nversion to old one, the only side effect is the persistent new version\r\nstate history will be unusable.\r\n\r\n---------\r\n\r\nCo-authored-by: Zsolt Felfoldi <zsfelfoldi@gmail.com>"
        },
        {
            "date": "2025-01-16 00:00:00",
            "message": "core/tracing: document `OnCodeChange` now being called from SelfDestruct (#31007)\n\nCo-authored-by: Sina M <1591639+s1na@users.noreply.github.com>"
        },
        {
            "date": "2025-01-16 00:00:00",
            "message": "core/txpool/legacypool: ensure pending nonces are reset by SubPool.Clear (#31020)\n\ncloses https://github.com/ethereum/go-ethereum/issues/30842"
        },
        {
            "date": "2025-01-16 00:00:00",
            "message": "core: use sync.Once for SenderCacher initialization (#31029)\n\nThis changes the SenderCacher so its goroutines will only be started on first use.\nAvoids starting them when package core is just imported but core.BlockChain isn't used."
        },
        {
            "date": "2025-01-15 00:00:00",
            "message": "beacon/engine: check for empty requests (#31010)\n\nAccording to\nhttps://github.com/ethereum/execution-apis/blob/main/src/engine/prague.md#engine_newpayloadv4:\n\n> Elements of the list MUST be ordered by request_type in ascending\norder. Elements with empty request_data MUST be excluded from the list.\n\n---------\n\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>"
        },
        {
            "date": "2025-01-14 00:00:00",
            "message": "eth/gasprice: ensure cache purging goroutine terminates with subscription (#31025)"
        },
        {
            "date": "2025-01-14 00:00:00",
            "message": "core/types: change SetCodeTx.ChainID to uint256 (#30982)\n\nWe still need to decide how to handle non-specfic `chainId` in the JSON\nencoding of authorizations. With `chainId` being a uint64, the previous\nimplementation just used value zero. However, it might actually be more\ncorrect to use the value `null` for this case."
        },
        {
            "date": "2025-01-14 00:00:00",
            "message": "all: fix some typos in comments and names (#31023)"
        },
        {
            "date": "2025-01-14 00:00:00",
            "message": "cmd, core, miner: rework genesis setup (#30907)\n\nThis pull request refactors the genesis setup function, the major\nchanges are highlighted here:\n\n**(a) Triedb is opened in verkle mode if `EnableVerkleAtGenesis` is\nconfigured in chainConfig or the database has been initialized previously with\n`EnableVerkleAtGenesis` configured**.\n\nA new config field `EnableVerkleAtGenesis` has been added in the\nchainConfig. This field must be configured with True if Geth wants to initialize \nthe genesis in Verkle mode.\n\nIn the verkle devnet-7, the verkle transition is activated at genesis.\nTherefore, the verkle rules should be used since the genesis. In production\nnetworks (mainnet and public testnets), verkle activation always occurs after\nthe genesis block. Therefore, this flag is only made for devnet and should be\ndeprecated later. Besides, verkle transition at non-genesis block hasn't been\nimplemented yet, it should be done in the following PRs.\n\n**(b) The genesis initialization condition has been simplified**\nThere is a special mode supported by the Geth is that: Geth can be\ninitialized with an existing chain segment, which can fasten the node sync\nprocess by retaining the chain freezer folder.\n\nOriginally, if the triedb is regarded as uninitialized and the genesis block can\nbe found in the chain freezer, the genesis block along with genesis state will be\ncommitted. This condition has been simplified to checking the presence of chain\nconfig in key-value store. The existence of chain config can represent the genesis\nhas been committed."
        },
        {
            "date": "2025-01-13 00:00:00",
            "message": "core: remove unused function parameters (#31001)"
        },
        {
            "date": "2025-01-13 00:00:00",
            "message": "core/txpool/legacypool: fix flaky test TestAllowedTxSize (#30975)\n\n- it was failing because the maximum data length (previously `dataSize`)\nwas set to `txMaxSize - 213` but should had been `txMaxSize - 103` and\nthe last call `dataSize+1+uint64(rand.Intn(10*txMaxSize)))` would\nsometimes fail depending on rand.Intn.\n- Maximal transaction data size comment (invalid) replaced by code logic\nto find the maximum tx length without its data length\n- comments and variable naming improved for clarity\n- 3rd pool add test replaced to add just 1 above the maximum length,\nwhich is important to ensure the logic is correct"
        },
        {
            "date": "2025-01-13 00:00:00",
            "message": "cmd/devp2p/internal/ethtest: using slices.SortFunc to simplify the code (#31012)\n\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-01-13 00:00:00",
            "message": "eth/tracers/logger: return revert reason (#31013)\n\nFix the error comparison in tracer to prevent dropping revert reason data\r\n\r\n---------\r\n\r\nCo-authored-by: Martin <mrscdevel@gmail.com>\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-01-13 00:00:00",
            "message": "build: upgrade golangci-lint to v1.63.4 (#31019)\n\nThis PR upgrades `golangci-lint` to v1.63.4 and fixes a warn message\r\nwhich is reported by v1.63.4:\r\n\r\n```text\r\nWARN [config_reader] The configuration option `run.skip-dirs-use-default` is deprecated, please use `issues.exclude-dirs-use-default`.\r\n```\r\n\r\nAlso fixes 2 warnings which are reported by v1.63.4:\r\n\r\n```text\r\ncore/txpool/blobpool/blobpool.go:1754:12: S1005: unnecessary assignment to the blank identifier (gosimple)\r\n        for acct, _ := range p.index {\r\n                  ^\r\ncore/txpool/legacypool/legacypool.go:1989:19: S1005: unnecessary assignment to the blank identifier (gosimple)\r\n        for localSender, _ := range pool.locals.accounts {\r\n                         ^\r\n```"
        },
        {
            "date": "2025-01-10 00:00:00",
            "message": "triedb/pathdb: configure different node hasher in pathdb (#31008)\n\nAs the node hash scheme in verkle and merkle are totally different, the\r\noriginal default node hasher in pathdb is no longer suitable. Therefore,\r\nthis pull request configures different node hasher respectively."
        },
        {
            "date": "2025-01-08 00:00:00",
            "message": "README: remove private network section from readme (#31005)"
        },
        {
            "date": "2025-01-07 00:00:00",
            "message": "triedb/pathdb: fix tester generator (#30972)\n\nThis change fixes is a rare bug in test generator: If the run is very unlucky it\r\ncan use `modifyAccountOp` / `deleteAccountOp` without creating any\r\naccount, leading to have a trie root same as the parent.\r\n\r\nThis change makes the first operation always be a creation."
        },
        {
            "date": "2025-01-07 00:00:00",
            "message": "cmd/clef: fix JS issues in documentation (#30980)\n\nFixes a couple of js-flaws in the docs"
        },
        {
            "date": "2025-01-06 00:00:00",
            "message": "eth/protocols/eth: prevent hanging dispatch (#30918)\n\nThis PR attempts to fix a strange test-failure (timeout) observed on a\nwindows-32 platform.\n\nhttps://ci.appveyor.com/project/ethereum/go-ethereum/builds/51174391/job/d8ascanwwltrlqd5\n\nA goroutine is stuck trying to deliver a response:\n```\ngoroutine 9632 [select, 29 minutes]:\ngithub.com/ethereum/go-ethereum/eth/protocols/eth.(*Peer).dispatchResponse(0x314f100, 0x3e5f6d0, 0x3acbb84)\n\tC:/projects/go-ethereum/eth/protocols/eth/dispatcher.go:172 +0x2a5\ngithub.com/ethereum/go-ethereum/eth/protocols/eth.handleBlockHeaders({0x12abe68, 0x30021b8}, {0x12a815c, 0x40b41c0}, 0x314f100)\n\tC:/projects/go-ethereum/eth/protocols/eth/handlers.go:301 +0x173\ngithub.com/ethereum/go-ethereum/eth/protocols/eth.handleMessage({0x12abe68, 0x30021b8}, 0x314f100)\n\tC:/projects/go-ethereum/eth/protocols/eth/handler.go:205 +0x4f6\ngithub.com/ethereum/go-ethereum/eth/protocols/eth.Handle({0x12abe68, 0x30021b8}, 0x314f100)\n\tC:/projects/go-ethereum/eth/protocols/eth/handler.go:149 +0x33\ngithub.com/ethereum/go-ethereum/eth.testSnapSyncDisabling.func1(0x314f100)\n\tC:/projects/go-ethereum/eth/sync_test.go:65 +0x33\ngithub.com/ethereum/go-ethereum/eth.(*handler).runEthPeer(0x30021b8, 0x314f100, 0x427f648)\n\tC:/projects/go-ethereum/eth/handler.go:355 +0xe65\ncreated by github.com/ethereum/go-ethereum/eth.testSnapSyncDisabling in goroutine 11\n\tC:/projects/go-ethereum/eth/sync_test.go:64 +0x54f\nFAIL\tgithub.com/ethereum/go-ethereum/eth\t1800.138s\n\n```\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-01-06 00:00:00",
            "message": "core/types: improve printList in DeriveSha test (#30969)"
        },
        {
            "date": "2025-01-06 00:00:00",
            "message": "core/rawdb: fix panic in freezer (#30973)\n\nFixes an issue where the node panics when an LStat fails with something \r\nother than os.ErrNotExist\r\n\r\ncloses https://github.com/ethereum/go-ethereum/issues/30968"
        },
        {
            "date": "2025-01-03 00:00:00",
            "message": "internal/ethapi: update default simulation timestamp increment to 12 (#30981)\n\nUpdate the default timestamp increment to 12s for `eth_simulate` endpoint"
        },
        {
            "date": "2025-01-02 00:00:00",
            "message": "eth/tracers/logger: skip system calls (#30923)\n\nThis commit makes it so that the struct logger will not emit logs while\nsystem calls are being executed. This will make it consistent with\nthe JSON and MD loggers. It is as it stands hard to distinguish when\nsystem calls are being processed vs when a tx is being processed.\n\n---------\n\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2025-01-02 00:00:00",
            "message": "all: use cmp.Compare (#30958)"
        },
        {
            "date": "2025-01-02 00:00:00",
            "message": "crypto/bn256: fix MulScalar (#30974)\n\nThe `a` parameter should be used in the `MulScalar` function. The\nupstream cloudflare and google repos have already merged fixes.\n\nReference:\n*\nhttps://cs.opensource.google/go/x/crypto/+/8d7daa0c54b357f3071e11eaef7efc4e19a417e2\n* https://github.com/cloudflare/bn256/pull/33"
        },
        {
            "date": "2025-01-02 00:00:00",
            "message": "internal/flags: update copyright year to 2025 (#30976)"
        },
        {
            "date": "2024-12-19 00:00:00",
            "message": "params: update system contracts for prague devnet-5 (#30938)"
        },
        {
            "date": "2024-12-19 00:00:00",
            "message": "core, core/types: rename AuthList to SetCodeAuthorizations (#30935)\n\nAs a follow-up to #30933, I propose to also use the SetCode prefix in\r\nour internal APIs for the authorization list."
        },
        {
            "date": "2024-12-18 00:00:00",
            "message": "cmd/evm: update tests for SetCodeAuthorization JSON encoding change (#30936)\n\nFixing a regression introduced by 73a4ecf675f6, which I accidentally\r\npushed to the master branch directly."
        },
        {
            "date": "2024-12-18 00:00:00",
            "message": "core/types: rename SetCodeAuthorization 'v' to 'yParity'\n\nThe API spec requires the name yParity."
        },
        {
            "date": "2024-12-18 00:00:00",
            "message": "core/types: updates for EIP-7702 API functions (#30933)\n\nHere I am proposing two small changes to the exported API for EIP-7702:\r\n\r\n(1) `Authorization` has a very generic name, but it is in fact only used\r\nfor one niche use case: authorizing code in a `SetCodeTx`. So I propose\r\ncalling it `SetCodeAuthorization` instead. The signing function is\r\nrenamed to `SignSetCode` instead of `SignAuth`.\r\n   \r\n(2) The signing function for authorizations should take key as the first\r\nparameter, and the authorization second. The key will almost always be\r\nin a variable, while the authorization can be given as a literal."
        },
        {
            "date": "2024-12-17 00:00:00",
            "message": "cmd/evm: make evm statetest accept non-json files (#30927)\n\nThis fixes a regression introduced recently. Without this fix, it's not\r\npossible to use statetests without `.json` suffix. This is problematic for\r\ngoevmlab `minimizer`, which appends the suffix `.min` during processing."
        },
        {
            "date": "2024-12-17 00:00:00",
            "message": "core/types, internal/ethapi: fixes for prague RPC encoding (#30926)\n\nFixing some issues I found while regenerating RPC tests for Prague:\r\n\r\n- Authorization signature values were not encoded as hex\r\n- `requestsRoot` in block should be `requestsHash`\r\n- `authorizationList` should work for `eth_call`"
        },
        {
            "date": "2024-12-17 00:00:00",
            "message": "core/vm: make all opcodes proper type (#30925)\n\nNoticed this omission while doing some work on goevmlab. We don't\r\nproperly type some of the opcodes, but apparently implicit casting works\r\nin all the internal usecases."
        },
        {
            "date": "2024-12-17 00:00:00",
            "message": "build(deps): bump golang.org/x/crypto from 0.26.0 to 0.31.0 (#30921)\n\nBumps [golang.org/x/crypto](https://github.com/golang/crypto) from\r\n0.26.0 to 0.31.0.\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
        },
        {
            "date": "2024-12-17 00:00:00",
            "message": "core: fixes for Prague fork in GenerateChain (#30924)\n\nAdding some missing functionality I noticed while updating the hivechain\r\ntool for the Prague fork:\r\n\r\n- we forgot to process the parent block hash\r\n- added `ConsensusLayerRequests` to get the requests list of the block"
        },
        {
            "date": "2024-12-17 00:00:00",
            "message": "accounts/abi/bind: make it possible to wait for tx hash (#30079)\n\nThis change adds methods which makes it possible for to wait for a transaction with a specific hash when deploying contracts during abi bind interaction.\r\n\r\n---------\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2024-12-17 00:00:00",
            "message": "core/vm, go.mod: update uint256 and use faster method to write to memory (#30868)\n\nUpdates geth to use the latest uint256, and use faster memory-writer"
        },
        {
            "date": "2024-12-16 00:00:00",
            "message": "trie/pathdb: state iterator (snapshot integration pt 4) (#30654)\n\nIn this pull request, the state iterator is implemented. It's mostly a copy-paste\r\nfrom the original state snapshot package, but still has some important changes\r\nto highlight here:\r\n\r\n(a) The iterator for the disk layer consists of a diff iterator and a disk iterator.\r\n\r\nOriginally, the disk layer in the state snapshot was a wrapper around the disk, \r\nand its corresponding iterator was also a wrapper around the disk iterator.\r\nHowever, due to structural differences, the disk layer iterator is divided into\r\ntwo parts:\r\n\r\n- The disk iterator, which traverses the content stored on disk.\r\n- The diff iterator, which traverses the aggregated state buffer.\r\n\r\nCheckout `BinaryIterator` and `FastIterator` for more details.\r\n\r\n(b) The staleness management is improved in the diffAccountIterator and\r\ndiffStorageIterator\r\n\r\nOriginally, in the `diffAccountIterator`, the layer\u2019s staleness had to be checked \r\nwithin the Next function to ensure the iterator remained usable. Additionally, \r\na read lock on the associated diff layer was required to first retrieve the account \r\nblob. This read lock protection is essential to prevent concurrent map read/write. \r\nAfterward, a staleness check was performed to ensure the retrieved data was \r\nnot outdated.\r\n\r\nThe entire logic can be simplified as follows: a loadAccount callback is provided \r\nto retrieve account data. If the corresponding state is immutable (e.g., diff layers\r\nin the path database), the staleness check can be skipped, and a single account \r\ndata retrieval is sufficient. However, if the corresponding state is mutable (e.g., \r\nthe disk layer in the path database), the callback can operate as follows:\r\n\r\n```go\r\nfunc(hash common.Hash) ([]byte, error) {\r\n    dl.lock.RLock()\r\n    defer dl.lock.RUnlock()\r\n\r\n    if dl.stale {\r\n        return nil, errSnapshotStale\r\n    }\r\n    return dl.buffer.states.mustAccount(hash)\r\n}\r\n```\r\n\r\nThe callback solution can eliminate the complexity for managing\r\nconcurrency with the read lock for atomic operation."
        },
        {
            "date": "2024-12-16 00:00:00",
            "message": "all: implement eip-7702 set code tx (#30078)\n\nThis PR implements EIP-7702: \"Set EOA account code\". \r\nSpecification: https://eips.ethereum.org/EIPS/eip-7702\r\n\r\n> Add a new transaction type that adds a list of `[chain_id, address,\r\nnonce, y_parity, r, s]` authorization tuples. For each tuple, write a\r\ndelegation designator `(0xef0100 ++ address)` to the signing account\u2019s\r\ncode. All code reading operations must load the code pointed to by the\r\ndesignator.\r\n\r\n---------\r\n\r\nCo-authored-by: Mario Vega <marioevz@gmail.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-12-13 00:00:00",
            "message": "p2p: DNS resolution for static nodes (#30822)\n\nCloses #23210 \r\n\r\n# Context \r\nWhen deploying Geth in Kubernetes with ReplicaSets, we encountered two\r\nDNS-related issues affecting node connectivity. First, during startup,\r\nGeth tries to resolve DNS names for static nodes too early in the config\r\nunmarshaling phase. If peer nodes aren't ready yet (which is common in\r\nKubernetes rolling deployments), this causes an immediate failure:\r\n\r\n\r\n```\r\nINFO [11-26|10:03:42.816] Starting Geth on Ethereum mainnet...\r\nINFO [11-26|10:03:42.817] Bumping default cache on mainnet         provided=1024 updated=4096\r\nFatal: config.toml, line 81: (p2p.Config.StaticNodes) lookup idontexist.geth.node: no such host\r\n``` \r\n\r\nThe second issue comes up when pods get rescheduled to different nodes -\r\ntheir IPs change but peers keep using the initially resolved IP, never\r\nupdating the DNS mapping.\r\n\r\nThis PR adds proper DNS support for enode:// URLs by deferring resolution\r\nto connection time. It also handles DNS failures gracefully instead of failing\r\nfatally during startup, making it work better in container environments where\r\nIPs are dynamic and peers come and go during rollouts.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-12-12 00:00:00",
            "message": "internal/ethapi: add block override to estimateGas (#30695)\n\nAdd block overrides to `eth_estimateGas` to align consistency with\r\n`eth_call`.\r\n\r\n\r\nhttps://github.com/ethereum/go-ethereum/issues/27800#issuecomment-1658186166\r\n\r\nFixes https://github.com/ethereum/go-ethereum/issues/28175\r\n\r\n---------\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2024-12-12 00:00:00",
            "message": "p2p: fix DiscReason encoding/decoding (#30855)\n\nThis fixes an issue where the disconnect message was not wrapped in a list.\r\nThe specification requires it to be a list like any other message.\r\n\r\nIn order to remain compatible with legacy geth versions, we now accept both\r\nencodings when parsing a disconnect message.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-12-11 00:00:00",
            "message": "core/state: remove pointless wrapper functions (#30891)"
        },
        {
            "date": "2024-12-10 00:00:00",
            "message": "accounts/abi: support unpacking solidity errors (#30738)\n\nThis PR adds the error fragments to `func (abi ABI) getArguments` which\r\nallows typed decoding of errors."
        },
        {
            "date": "2024-12-10 00:00:00",
            "message": "build: update to Go 1.23.4 (#30872)"
        },
        {
            "date": "2024-12-10 00:00:00",
            "message": "metrics, cmd/geth: change init-process of metrics (#30814)\n\nThis PR modifies how the metrics library handles `Enabled`: previously,\r\nthe package `init` decided whether to serve real metrics or just\r\ndummy-types.\r\n\r\nThis has several drawbacks: \r\n- During pkg init, we need to determine whether metrics are enabled or\r\nnot. So we first hacked in a check if certain geth-specific\r\ncommandline-flags were enabled. Then we added a similar check for\r\ngeth-env-vars. Then we almost added a very elaborate check for\r\ntoml-config-file, plus toml parsing.\r\n\r\n- Using \"real\" types and dummy types interchangeably means that\r\neverything is hidden behind interfaces. This has a performance penalty,\r\nand also it just adds a lot of code.\r\n\r\nThis PR removes the interface stuff, uses concrete types, and allows for\r\nthe setting of Enabled to happen later. It is still assumed that\r\n`metrics.Enable()` is invoked early on.\r\n\r\nThe somewhat 'heavy' operations, such as ticking meters and exp-decay,\r\nnow checks the enable-flag to prevent resource leak.\r\n\r\nThe change may be large, but it's mostly pretty trivial, and from the\r\nlast time I gutted the metrics, I ensured that we have fairly good test\r\ncoverage.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-12-10 00:00:00",
            "message": "core/vm: remove unnecessary comment (#30887)"
        },
        {
            "date": "2024-12-10 00:00:00",
            "message": "cmd/evm: consolidate evm output switches (#30849)\n\nThis PR attempts to clean up some ambiguities and quirks from recent\r\nchanges to evm flag handling.\r\n\r\nThis PR mainly focuses on `evm run` subcommand, to use the same flags\r\nfor configuring tracing/output options as `statetest/blocktest` does.\r\n\r\nAdditionally, it adds quite a lot of tests for expected outputs of the\r\nvarious subcommands, to avoid accidental changes.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-12-10 00:00:00",
            "message": "core/state: enable partial-functional reader (snapshot integration pt 3) (#30650)\n\nIt's a pull request based on https://github.com/ethereum/go-ethereum/pull/30643\r\n\r\nIn this pull request, the partial functional state reader is enabled if **legacy snapshot\r\nis not enabled**. The tracked flat states in pathdb will be used to serve the state\r\nretrievals, as the second implementation to fasten the state access.\r\n\r\nThis pull request should be a noop change in normal cases."
        },
        {
            "date": "2024-12-09 00:00:00",
            "message": "core/txpool: remove unused parameter `local`  (#30871)"
        },
        {
            "date": "2024-12-06 00:00:00",
            "message": "trie/utils: ensure master can generate a correct genesis for kaustinen7 (#30856)\n\nThis imports the following fixes:\r\n\r\n - update gnark to 1.1.0\r\n - update go-verkle to 0.2.2\r\n - fix: main storage offset bug (gballet/go-ethereum#329)\r\n - fix: tree key generation (gballet/go-ethereum#401)\r\n\r\n---------\r\n\r\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\r\nCo-authored-by: Ignacio Hagopian <jsign.uy@gmail.com>"
        },
        {
            "date": "2024-12-04 00:00:00",
            "message": "core/tracing: extends tracing.Hooks with OnSystemCallStartV2 (#30786)\n\nThis PR extends the Hooks interface with a new method,\r\n`OnSystemCallStartV2`, which takes `VMContext` as its parameter.\r\n\r\nMotivation\r\n\r\nBy including `VMContext` as a parameter, the `OnSystemCallStartV2` hook\r\nachieves parity with the `OnTxStart` hook in terms of provided insights.\r\nThis alignment simplifies the inner tracer logic, enabling consistent\r\nhandling of state changes and internal calls within the same framework.\r\n\r\n---------\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2024-12-04 00:00:00",
            "message": "cmd/evm, eth/tracers: refactor structlogger and make it streaming (#30806)\n\nThis PR refactors the structlog a bit, making it so that it can be used\r\nin a streaming mode.\r\n\r\n-------------\r\n\r\nOBS: this PR makes a change in the input `config` config, the third\r\ninput-parem field to `debug.traceCall`. Previously, seteting it to e.g.\r\n` {\"enableMemory\": true, \"limit\": 1024}` would mean that the response\r\nwas limited to `1024` items. Since an 'item' may include both memory and\r\nstorage, the actual size of the response was undertermined.\r\nAfter this change, the response will be limited to `1024` __`bytes`__\r\n(or thereabouts).\r\n\r\n\r\n\r\n-----------\r\n\r\n\r\nThe commandline usage of structlog now uses the streaming mode, leaving\r\nthe non-streaming mode of operation for the eth_Call.\r\n\r\nThere are two benefits of streaming mode \r\n1. Not have to maintain a long list of operations, \r\n2. Not have to duplicate / n-plicate data, e.g. memory / stack /\r\nreturndata so that each entry has their own private slice.\r\n\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-12-03 00:00:00",
            "message": "CODEOWNERS: add some more entries for auto assignment (#30851)"
        },
        {
            "date": "2024-12-03 00:00:00",
            "message": "eth/downloader: move SyncMode to package eth/ethconfig (#30847)\n\nLots of packages depend on eth/downloader just for the SyncMode type.\r\nSince we have a dedicated package for eth protocol configuration, it\r\nmakes more sense to define SyncMode there, turning eth/downloader into\r\nmore of a leaf package."
        },
        {
            "date": "2024-12-02 00:00:00",
            "message": "internal/debug: rename --trace to --go-execution-trace (#30846)\n\nThis flag is very rarely needed, so it's OK for it to have a verbose\r\nname. The name --trace also conflicts with the concept of EVM tracing,\r\nwhich is much more heavily used."
        },
        {
            "date": "2024-12-02 00:00:00",
            "message": "fuzzing: fix oss-fuzz fuzzer (#30845)\n\nThe fuzzer added recenly to fuzz the eth handler doesn't\r\nbuild on oss-fuzz, because it also has dependencies in the peer_test.go.\r\n\r\nThis change fixes it, I hope, by adding that file also for preprocessing."
        },
        {
            "date": "2024-12-02 00:00:00",
            "message": "cmd/evm: improve block/state test runner (#30633)\n\n* unify `staterunner` and `blockrunner` CLI flags, especially around\r\ntracing\r\n* added support for struct logger or json logging (although having issue\r\n#30658)\r\n* new --cross-check flag to validate the stateless witness collection\r\n  / execution matches stateful\r\n* adds support for tracing the stateless execution when a tracer is set\r\n  (to more easily debug differences)\r\n* --human for more readable test summary\r\n* directory or file input, so if you pass tests/spec-tests/fixtures/blockchain_tests it will execute all\r\nblockchain tests"
        },
        {
            "date": "2024-11-29 00:00:00",
            "message": "eth/tracers: fix state hooks in API (#30830)\n\nWhen a tx/block was being traced through the API the state hooks weren't\r\nbeing called as they should. This is due to #30745 moving the hooked\r\nstatedb one level up in the state processor. This PR fixes that.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-11-29 00:00:00",
            "message": "core: switch EVM tx context in ApplyMessage (#30809)\n\nThis change relocates the EVM tx context switching to the ApplyMessage function.\r\nWith this change, we can remove a lot of EVM.SetTxContext calls before\r\nmessage execution.\r\n\r\n### Tracing API changes\r\n\r\n- This PR replaces the `GasPrice` field of the `VMContext` struct with\r\n  `BaseFee`. Users may instead take the effective gas price from\r\n  `tx.EffectiveGasTipValue(env.BaseFee)`.\r\n\r\n---------\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2024-11-29 00:00:00",
            "message": "core/state: introduce code reader interface (#30816)\n\nThis PR introduces a `ContractCodeReader` interface with functions defined:\r\n\r\ntype ContractCodeReader interface {\r\n\tCode(addr common.Address, codeHash common.Hash) ([]byte, error)\r\n\tCodeSize(addr common.Address, codeHash common.Hash) (int, error)\r\n}\r\n\r\nThis interface can be implemented in various ways. Although the codebase\r\ncurrently includes only one implementation, additional implementations\r\ncould be created for different purposes and scenarios, such as a code\r\nreader designed for the Verkle tree approach or one that reads code from\r\nthe witness.\r\n\r\n*Notably, this interface modifies the function\u2019s semantics. If the\r\ncontract code is not found, no error will be returned. An error should\r\nonly be returned in the event of an unexpected issue, primarily for\r\nfuture implementations.*\r\n\r\nThe original state.Reader interface is extended with ContractCodeReader\r\nmethods, it gives us more flexibility to manipulate the reader with additional\r\nlogic on top, e.g. Hooks.\r\n\r\ntype Reader interface {\r\n\tContractCodeReader\r\n\tStateReader\r\n}\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-11-29 00:00:00",
            "message": "triedb/pathdb: track flat state changes in pathdb (snapshot integration pt 2) (#30643)\n\nThis pull request ports some changes from the main state snapshot\r\nintegration one, specifically introducing the flat state tracking in\r\npathdb.\r\n\r\nNote, the tracked flat state changes are only held in memory and won't\r\nbe persisted in the disk. Meanwhile, the correspoding state retrieval in\r\npersistent state is also not supported yet. The states management in\r\ndisk is more complicated and will be implemented in a separate pull\r\nrequest.\r\n\r\nPart 1: https://github.com/ethereum/go-ethereum/pull/30752"
        },
        {
            "date": "2024-11-28 00:00:00",
            "message": "core/types: add length check in CalcRequestsHash (#30829)\n\nThe existing implementation is correct when building and verifying\r\nblocks, since we will only collect non-empty requests into the block\r\nrequests list.\r\n\r\nBut it isn't correct for cases where a requests list containing empty\r\nitems is sent by the consensus layer on the engine API. We want to\r\nensure that empty requests do not cause a difference in validation\r\nthere, so the commitment computation should explicitly skip them."
        },
        {
            "date": "2024-11-28 00:00:00",
            "message": "cmd/bootnode: remove bootnode utility (#30813)\n\nSince we don't really support custom networks anymore, we don't need the\r\nbootnode utility. In case a discovery-only node is wanted, it can still be run using cmd/devp2p."
        },
        {
            "date": "2024-11-28 00:00:00",
            "message": "all: exclude empty outputs in requests commitment (#30670)\n\nImplements changes from these spec PRs:\r\n\r\n- https://github.com/ethereum/EIPs/pull/8989\r\n- https://github.com/ethereum/execution-apis/pull/599"
        },
        {
            "date": "2024-11-28 00:00:00",
            "message": "trie: combine validation loops in VerifyRangeProof (#30823)\n\nSmall optimization. It's guaranteed that `len(keys)` == `len(values)`,\r\nso we can combine the checks in a single loop rather than 2 separate\r\nloops."
        },
        {
            "date": "2024-11-28 00:00:00",
            "message": "core/state/snapshot: handle legacy journal (#30802)\n\nThis workaround is meant to minimize the possibility for snapshot generation\r\nonce the geth node upgrades to new version (specifically #30752 )\r\n\r\nIn #30752, the journal format in state snapshot is modified by removing\r\nthe destruct set. Therefore, the existing old format (version = 0) will be\r\ndiscarded and all in-memory layers will be lost. Unfortunately, the lost \r\nin-memory layers can't be recovered by some other approaches, and the \r\nentire state snapshot will be regenerated (it will last about 2.5 hours).\r\n\r\nThis pull request introduces a workaround to adopt the legacy journal if\r\nthe destruct set contained is empty. Since self-destruction has been\r\ndeprecated following the cancun fork, the destruct set is expected to be nil for\r\nlayers above the fork block. However, an exception occurs during contract \r\ndeployment: pre-funded accounts may self-destruct, causing accounts with \r\nnon-zero balances to be removed from the state. For example,\r\nhttps://etherscan.io/tx/0xa087333d83f0cd63b96bdafb686462e1622ce25f40bd499e03efb1051f31fe49).\r\n\r\n\r\nFor nodes with a fully synced state, the legacy journal is likely compatible with\r\nthe updated definition, eliminating the need for regeneration. Unfortunately,\r\nnodes performing a full sync of historical chain segments or encountering \r\npre-funded account deletions may face incompatibilities, leading to automatic \r\nsnapshot regeneration."
        },
        {
            "date": "2024-11-27 00:00:00",
            "message": "core: better document reason for dropping error on return (#30811)\n\nAdd a comment for error return of nil\r\n\r\nSigned-off-by: wangjingcun <wangjingcun@aliyun.com>"
        },
        {
            "date": "2024-11-26 00:00:00",
            "message": "cmd/evm: don't reuse state between iterations, show errors (#30780)\n\nReusing state between benchmark iterations resulted in inconsistent\r\nresults across runs, which surfaced in https://github.com/ethereum/go-ethereum/issues/30778 .\r\n\r\nIf these errors are triggered again, they will now trigger panic. \r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-11-26 00:00:00",
            "message": "Revert \"core/state/snapshot: simplify snapshot rebuild (#30772)\" (#30810)\n\nThis reverts commit 23800122b37695be50565f8221858a16ce1763db.\r\n\r\nThe original pull request introduces a bug and some flaky tests are\r\ndetected because of this flaw.\r\n\r\n```\r\n--- FAIL: TestRecoverSnapshotFromWipingCrash (0.27s)\r\n    blockchain_snapshot_test.go:158: The disk layer is not integrated snapshot is not constructed\r\n{\"pc\":0,\"op\":88,\"gas\":\"0x7148\",\"gasCost\":\"0x2\",\"memSize\":0,\"stack\":[],\"depth\":1,\"refund\":0,\"opName\":\"PC\"}\r\n{\"pc\":1,\"op\":255,\"gas\":\"0x7146\",\"gasCost\":\"0x1db0\",\"memSize\":0,\"stack\":[\"0x0\"],\"depth\":1,\"refund\":0,\"opName\":\"SELFDESTRUCT\"}\r\n{\"output\":\"\",\"gasUsed\":\"0x0\"}\r\n{\"output\":\"\",\"gasUsed\":\"0x1db2\"}\r\n{\"pc\":0,\"op\":116,\"gas\":\"0x13498\",\"gasCost\":\"0x3\",\"memSize\":0,\"stack\":[],\"depth\":1,\"refund\":0,\"opName\":\"PUSH21\"}\r\n```\r\n\r\nBefore the original PR, the snapshot would block the function until the\r\ndisk layer\r\nwas fully generated under the following conditions:\r\n\r\n(a) explicitly required by users with `AsyncBuild = false`.\r\n(b) the snapshot was being fully rebuilt or *the disk layer generation\r\nhad resumed*.\r\n\r\nUnfortunately, with the changes introduced in that PR, the snapshot no\r\nlonger waits\r\nfor disk layer generation to complete if the generation is resumed. It\r\nbrings lots of\r\nuncertainty and breaks this tiny debug feature."
        },
        {
            "date": "2024-11-26 00:00:00",
            "message": "core/tracing: add GetCodeHash to StateDB (#30784)\n\nThis PR extends the tracing.StateDB interface by adding a GetCodeHash function."
        },
        {
            "date": "2024-11-26 00:00:00",
            "message": "eth/ethconfig: improve error message if TTD missing (#30807)\n\nThis updates the message you get when trying to initialize Geth with\r\ngenesis.json that doesn't have `terminalTotalDifficulty`. The previous\r\nmessage was a bit obscure, I had to check the code to find out what the\r\nproblem was."
        },
        {
            "date": "2024-11-25 00:00:00",
            "message": "core/state/snapshot: simplify snapshot rebuild (#30772)\n\nThis PR is purely for improved readability; I was doing work involving\r\nthe file and think this may help others who are trying to understand\r\nwhat's going on.\r\n\r\n1. `snapshot.Tree.Rebuild()` now returns a function that blocks until\r\nregeneration is complete, allowing `Tree.waitBuild()` to be removed\r\nentirely as all it did was search for the `done` channel behind this new\r\nfunction.\r\n2. Its usage inside `New()` is also simplified by (a) only waiting if\r\n`!AsyncBuild`; and (b) avoiding the double negative of `if !NoBuild`.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-11-25 00:00:00",
            "message": "accounts/abi:  fix MakeTopics mutation of big.Int inputs (#30785)\n\n#28764 updated `func MakeTopics` to support negative `*big.Int`s.\r\nHowever, it also changed the behavior of the function from just\r\n_reading_ the input `*big.Int` via `Bytes()`, to leveraging\r\n`big.U256Bytes` which is documented as being _destructive_:\r\n\r\nThis change updates `MakeTopics` to not mutate the original, and \r\nalso applies the same change in signer/core/apitypes."
        },
        {
            "date": "2024-11-25 00:00:00",
            "message": "internal/ethapi: remove double map-clone (#30803)\n\nSimilar to https://github.com/ethereum/go-ethereum/pull/30788"
        },
        {
            "date": "2024-11-25 00:00:00",
            "message": "eth/tracers/logger: improve markdown logger (#30805)\n\nThis PR improves the output of the markdown logger a bit.\r\n\r\n- Remove `RStack` field, \r\n- Move `Stack` last, since it may have very large vertical expansion\r\n- Make the pre- and post-exec  metadata structured into a bullet-list"
        },
        {
            "date": "2024-11-25 00:00:00",
            "message": "eth/tracers/logger: fix json-logger output missing (#30804)\n\nFixes a flaw introduced in\r\nhttps://github.com/ethereum/go-ethereum/pull/29795 , discovered while\r\nreviewing https://github.com/ethereum/go-ethereum/pull/30633 ."
        },
        {
            "date": "2024-11-24 00:00:00",
            "message": "internal/flags: fix \"flag redefined\" bug for alias on custom flags (#30796)\n\nThis change fixes a bug on the `DirectoryFlag` and the `BigFlag`, which would trigger a `panic` with the message \"flag redefined\" in case an alias was added to such a flag."
        },
        {
            "date": "2024-11-22 00:00:00",
            "message": "core, triedb: remove destruct flag in state snapshot (#30752)\n\nThis pull request removes the destruct flag from the state snapshot to\r\nsimplify the code.\r\n\r\nPreviously, this flag indicated that an account was removed during a\r\nstate transition, making all associated storage slots inaccessible.\r\nBecause storage deletion can involve a large number of slots, the actual\r\ndeletion is deferred until the end of the process, where it is handled\r\nin batches.\r\n\r\nWith the deprecation of self-destruct in the Cancun fork, storage\r\ndeletions are no longer expected. Historically, the largest storage\r\ndeletion event in Ethereum was around 15 megabytes\u2014manageable in memory.\r\n\r\nIn this pull request, the single destruct flag is replaced by a set of\r\ndeletion markers for individual storage slots. Each deleted storage slot\r\nwill now appear in the Storage set with a nil value.\r\n\r\nThis change will simplify a lot logics, such as storage accessing,\r\nstorage flushing, storage iteration and so on."
        },
        {
            "date": "2024-11-22 00:00:00",
            "message": "trie: replace custom logic with bytes.HasPrefix (#30771)\n\nin `trie`\r\n- Replace custom logic with `bytes.HasPrefix`\r\n- Remove unnecessary code in `GetNode`"
        },
        {
            "date": "2024-11-22 00:00:00",
            "message": "all: typos in comments (#30779)\n\nfixes some typos"
        },
        {
            "date": "2024-11-22 00:00:00",
            "message": "internal/ethapi: remove double map-clone (#30788)\n\n`ActivePrecompiledContracts()` clones the precompiled contract map, thus\r\nits callsite does not need to clone it"
        },
        {
            "date": "2024-11-22 00:00:00",
            "message": "core, eth, internal, miner: remove unnecessary parameters (#30776)\n\nFollow-up to #30745 , this change removes some unnecessary parameters."
        },
        {
            "date": "2024-11-20 00:00:00",
            "message": "core, eth, internal, cmd: rework EVM constructor (#30745)\n\nThis pull request refactors the EVM constructor by removing the\r\nTxContext parameter.\r\n\r\nThe EVM object is frequently overused. Ideally, only a single EVM\r\ninstance should be created and reused throughout the entire state\r\ntransition of a block, with the transaction context switched as needed\r\nby calling evm.SetTxContext.\r\n\r\nUnfortunately, in some parts of the code, the EVM object is repeatedly\r\ncreated, resulting in unnecessary complexity. This pull request is the\r\nfirst step towards gradually improving and simplifying this setup.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-11-20 00:00:00",
            "message": "core/vm/program: evm bytecode-building utility (#30725)\n\nIn many cases, there is a need to create somewhat nontrivial bytecode. A\r\nrecent example is the verkle statetests, where we want a `CREATE2`- op\r\nto create a contract, which can then be invoked, and when invoked does a\r\nselfdestruct-to-self.\r\n\r\nIt is overkill to go full solidity, but it is also a bit tricky do\r\nassemble this by concatenating bytes. This PR takes an approach that\r\nhas been used in in goevmlab for several years.\r\n\r\nUsing this utility, the case can be expressed as: \r\n```golang\r\n\t// Some runtime code\r\n\truntime := program.New().Ops(vm.ADDRESS, vm.SELFDESTRUCT).Bytecode()\r\n\t// A constructor returning the runtime code\r\n\tinitcode := program.New().ReturnData(runtime).Bytecode()\r\n\t// A factory invoking the constructor\r\n\touter := program.New().Create2AndCall(initcode, nil).Bytecode()\r\n```\r\n\r\nWe have a lot of places in the codebase where we concatenate bytes, cast\r\nfrom `vm.OpCode` . By taking tihs approach instead, thos places can be made a\r\nbit more maintainable/robust."
        },
        {
            "date": "2024-11-19 00:00:00",
            "message": "version: fix typo in v1.14.13 release cycle name"
        },
        {
            "date": "2024-11-19 00:00:00",
            "message": "version: begin v1.14.13 release cycle"
        },
        {
            "date": "2024-11-19 00:00:00",
            "message": "version: go-ethereum v1.14.12 stable"
        },
        {
            "date": "2024-11-19 00:00:00",
            "message": "rpc: run tests in parallel (#30384)\n\nContinuation of https://github.com/ethereum/go-ethereum/pull/30381"
        },
        {
            "date": "2024-11-19 00:00:00",
            "message": "core/txpool, eth/catalyst: clear transaction pool in Rollback (#30534)\n\nThis adds an API method `DropTransactions` to legacy pool, blob pool and\r\ntxpool interface. This method removes all txs currently tracked in the\r\npools.\r\n\r\nIt modifies the simulated beacon to use the new method in `Rollback`\r\nwhich removes previous hacky implementation that also erroneously reset\r\nthe gas tip to 1 gwei.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-11-19 00:00:00",
            "message": "all: remove kilic dependency from bls12381 fuzzers (#30296)\n\nThe [kilic](https://github.com/kilic/bls12-381) bls12381 implementation\r\nhas been archived. It shouldn't be necessary to include it as a fuzzing\r\ntarget any longer.\r\n\r\nThis also adds fuzzers for G1/G2 mul that use inputs that are guaranteed\r\nto be valid. Previously, we just did random input fuzzing for these\r\nprecompiles."
        },
        {
            "date": "2024-11-19 00:00:00",
            "message": "core: fix typos (#30767)"
        },
        {
            "date": "2024-11-15 00:00:00",
            "message": "build: upgrade -dlgo version to Go 1.23.3 (#30742)\n\nNew release: https://groups.google.com/g/golang-announce/c/X5KodEJYuqI"
        },
        {
            "date": "2024-11-15 00:00:00",
            "message": "cmd/geth: remove unlock commandline flag (#30737)\n\nThis is one further step towards removing account management from\r\n`geth`. This PR deprecates the flag `unlock`, and makes the flag moot:\r\nunlock via geth is no longer possible."
        },
        {
            "date": "2024-11-15 00:00:00",
            "message": "core/state: tests on the binary iterator (#30754)\n\nFixes an error in the binary iterator, adds additional testcases\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-11-11 00:00:00",
            "message": "docs: fix typo (#30740)\n\nfixes a typo on one of the postmortems"
        },
        {
            "date": "2024-11-11 00:00:00",
            "message": "p2p/netutil: unittests for addrutil (#30439)\n\nadd unit tests for `p2p/addrutil`\r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-11-10 00:00:00",
            "message": "tests: fix test panic (#30741)\n\nFix panic in tests"
        },
        {
            "date": "2024-11-09 00:00:00",
            "message": "eth/protocols/eth: add ETH68 protocol handler fuzzers (#30417)\n\nAdds a protocol handler fuzzer to fuzz the ETH68 protocol handlers"
        },
        {
            "date": "2024-11-09 00:00:00",
            "message": "core/state, triedb/database: refactor state reader (#30712)\n\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-11-08 00:00:00",
            "message": "travis: build and upload RISC-V docker images too (#30739)\n\nRequested by @barnabasbusa"
        },
        {
            "date": "2024-11-08 00:00:00",
            "message": "trie/utils: remove unneeded initialization (#30472)"
        },
        {
            "date": "2024-11-08 00:00:00",
            "message": "core/state: invoke OnCodeChange-hook on selfdestruct (#30686)\n\nThis change invokes the OnCodeChange hook when selfdestruct operation is performed, and a contract is removed. This is an event which can be consumed by tracers."
        },
        {
            "date": "2024-11-08 00:00:00",
            "message": "beacon/blsync: remove cli dependencies (#30720)\n\nThis PR moves chain config related code (config file processing, fork\r\nlogic, network defaults) from `beacon/types` and `beacon/blsync` into\r\n`beacon/params` while the command line flag logic of the chain config is\r\nmoved into `cmd/utils`, thereby removing the cli dependencies from\r\npackage `beacon` and its sub-packages."
        },
        {
            "date": "2024-11-08 00:00:00",
            "message": "cmd/evm:  benchmarking via `statetest` command + filter by name, index and fork (#30442)\n\nWhen `evm statetest --bench` is specified, benchmark the execution\r\nsimilarly to `evm run`.\r\n\r\nAlso adds the ability to filter tests by name, index and fork. \r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-11-08 00:00:00",
            "message": "signer/core: extended support for EIP-712 array types (#30620)\n\nThis change updates the EIP-712 implementation to resolve [#30619](https://github.com/ethereum/go-ethereum/issues/30619).\r\n\r\nThe test cases have been repurposed from the ethers.js [repository](https://github.com/ethers-io/ethers.js/blob/main/testcases/typed-data.json.gz), but have been updated to remove tests that don't have a valid domain separator; EIP-712 messages without a domain separator are not supported by geth.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-11-08 00:00:00",
            "message": "accounts/usbwallet: support dynamic tx (#30180)\n\nAdds support non-legacy transaction-signing using ledger\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-11-08 00:00:00",
            "message": "internal/ethapi:  Set basefee for `AccessList` based on given block, not chain tip (#30538)"
        },
        {
            "date": "2024-11-08 00:00:00",
            "message": "ethclient/gethclient: testcase for createAccessList, make tabledriven (#30194)\n\nAdds testcase for createAccessList when user requested gasPrice is less than baseFee, also makes the tests tabledriven\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-11-07 00:00:00",
            "message": "ethclient: add RevertErrorData function and example (#30669)\n\nHere I'm adding a new helper function that extracts the revert reason of\r\na contract call. Unfortunately, this aspect of the API is underspecified.\r\nSee these spec issues for more detail:\r\n\r\n- https://github.com/ethereum/execution-apis/issues/232\r\n- https://github.com/ethereum/execution-apis/issues/463\r\n- https://github.com/ethereum/execution-apis/issues/523\r\n\r\nThe function added here only works with Geth-like servers that return\r\nerror code `3`. We will not be able to support all possible servers.\r\nHowever, if there is a specific server implementation that makes it\r\npossible to extract the same info, we could add it in the same function\r\nas well.\r\n\r\n---------\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2024-11-07 00:00:00",
            "message": "build(deps): bump github.com/golang-jwt/jwt/v4 from 4.5.0 to 4.5.1 (#30728)\n\nBumps [github.com/golang-jwt/jwt/v4](https://github.com/golang-jwt/jwt) from 4.5.0 to 4.5.1.\r\n\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
        },
        {
            "date": "2024-11-06 00:00:00",
            "message": "cmd/utils: change blssync.JWTSecretFlag to DirectoryFlag (#30729)\n\ncloses https://github.com/ethereum/go-ethereum/issues/30304\r\n\r\nWe already use `DirectoryFlag` for `authrpc.jwtsecret` which expands the\r\ntilde, so this should work out of the box"
        },
        {
            "date": "2024-11-05 00:00:00",
            "message": "core/state: small fix in hooked statedb (#30732)\n\nfixes a very tiny bug"
        },
        {
            "date": "2024-11-05 00:00:00",
            "message": "eth/tracers: fill the creationMethod in flatCall (#30539)\n\n`flatCallTracer` will now specify the type of a create in the action\r\nvia the `creationMethod` field.\r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2024-11-04 00:00:00",
            "message": "all: fix issues with benchmarks (#30667)\n\nThis PR fixes some issues with benchmarks\r\n\r\n- [x] Removes log output from a log-test\r\n- [x] Avoids a `nil`-defer in `triedb/pathdb`\r\n- [x] Fixes some crashes re tracers\r\n- [x] Refactors a very resource-expensive benchmark for blobpol.\r\n**NOTE**: this rewrite touches live production code (a little bit), as\r\nit makes the validator-function used by the blobpool configurable.\r\n- [x] Switch some benches over to use pebble over leveldb\r\n- [x] reduce mem overhead in the setup-phase of some tests\r\n- [x] Marks some tests with a long setup-phase to be skipped if `-short`\r\nis specified (where long is on the order of tens of seconds). Ideally,\r\nin my opinion, one should be able to run with `-benchtime 10ms -short`\r\nand sanity-check all tests very quickly.\r\n- [x]  Drops some metrics-bechmark which times the speed of `copy`.\r\n\r\n---------\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2024-11-04 00:00:00",
            "message": "core, trie: verkle state processor tests (#30672)\n\nTests that are crucial to for verifying the verkle testnet functions properly.\r\n\r\n---------\r\n\r\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\r\nCo-authored-by: Ignacio Hagopian <jsign.uy@gmail.com>\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-11-04 00:00:00",
            "message": "core/vm/runtime: invoke tx-end hook (#30711)\n\nWhen using the `core/vm/runtime` helpers to execute code, callbacks for the tx end were not invoked. This change fixes it by invoking them."
        },
        {
            "date": "2024-11-04 00:00:00",
            "message": "eth/catalyst: make engine api test time independent (#30713)\n\nThis test depends on a 100ms timer, which fails quite often, messing up\r\nour pipelines. Hook directly into the internal version of getPayload\r\nwhich has the capacity to wait for the full payload before returning.\r\nThis might not be absolutely correct from a test perspective, but it\r\nbeats failing ci. The alternative would be to expose the full build hook\r\ninto the outside, but it might be a bit overkill for this scenario."
        },
        {
            "date": "2024-11-04 00:00:00",
            "message": "core/txpool: improve error responses with wrapped errors (#30715)"
        },
        {
            "date": "2024-11-04 00:00:00",
            "message": "tests/fuzzers/bls12381: more verbose fuzzing-output (#30724)\n\nThis PR updates the fuzzing verbosity a bit, in case of mismatches"
        },
        {
            "date": "2024-11-03 00:00:00",
            "message": "build: use slices.Clone for copying slice (#30716)"
        },
        {
            "date": "2024-11-01 00:00:00",
            "message": "eth/tracers:  flatCallTracer error compatible with parity (#30497)\n\nCompatible error message in the flat call tracer with parity-style endpoints.\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2024-10-31 00:00:00",
            "message": "all: remove `personal` RPC namespace (#30704)\n\nThis PR is a first step towards removing account management from geth,\r\nand contains a lot of the user-facing changes.\r\n\r\nWith this PR, the `personal` namespace disappears. **Note**: `personal`\r\nnamespace has been deprecated for quite some time (since\r\nhttps://github.com/ethereum/go-ethereum/pull/26390 1 year and 8 months\r\nago), and users who have wanted to use it has been forced to used the\r\nflag `--rpc.enabledeprecatedpersonal`. So I think it's fairly\r\nnon-controversial to drop it at this point.\r\n\r\nSpecifically, this means: \r\n\r\n- Account/wallet listing\r\n  -`personal.getListAccounts`  \r\n  -`personal.listAccounts`     \r\n  -`personal.getListWallets`   \r\n  -`personal.listWallets`      \r\n- Lock/unlock\r\n  -`personal.lockAccount`      \r\n  -`personal.openWallet`       \r\n  -`personal.unlockAccount`\r\n- Sign ops\r\n  -`personal.sign`             \r\n  -`personal.sendTransaction`  \r\n  -`personal.signTransaction`  \r\n- Imports / inits\r\n  -`personal.deriveAccount`    \r\n  -`personal.importRawKey`     \r\n  -`personal.initializeWallet` \r\n  -`personal.newAccount`       \r\n  -`personal.unpair` \r\n- Other: \r\n  -`personal.ecRecover`        \r\n\r\n\r\nThe underlying keystores and account managent code is still in place,\r\nwhich means that `geth --dev` still works as expected, so that e.g. the\r\nexample below still works:\r\n\r\n```\r\n> eth.sendTransaction({data:\"0x6060\", value: 1, from:eth.accounts[0]})\r\n```\t\r\n\r\nAlso, `ethkey` and `clef` are untouched. \r\n\r\nWith the removal of `personal`, as far as I know we have no more API\r\nmethods which contain credentials, and if we want to implement\r\nlogging-capabilities of RPC ingress payload, it would be possible after\r\nthis.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-10-31 00:00:00",
            "message": "internal/flags: remove low-use type TextMarshalerFlag (#30707)\n\nCurrently we have a custom TextMarshalerFlag. It's a nice idea, allowing\r\nanything implementing text marshaller to be used as a flag. That said,\r\nwe only ever used it in one place because it's not that obvious how to\r\nuse and it needs some boilerplate on the type itself too, apart of the\r\nheavy boilerplate got the custom flag.\r\n\r\nAll in all there's no *need* to drop this feature just now, but while\r\nporting the cmds over to cli @v3, all other custom flags worker\r\nperfectly, whereas this one started crashing deep inside the cli\r\npackage. The flag handling in v3 got rebuild on generics and there are a\r\nnumber of new methods needed; and my guess is that maybe one of them\r\ndoesn't work like this flag currently is designed too.\r\n\r\nWe could definitely try and redesign this flag for cli v3... but all\r\nthat effort and boilerplate just to use it for 1 flag in 1 location,\r\nseems not worth it. So for now I'm suggesting removing it and maybe\r\nreconsider a similar feature in cli v3 with however it will work."
        },
        {
            "date": "2024-10-31 00:00:00",
            "message": "internal/flags: remove Merge, it's identical to slices.Concat (#30706)\n\nThis is a noop change to not have custom code for stdlib functionality."
        },
        {
            "date": "2024-10-31 00:00:00",
            "message": "cmd/utils, eth/ethconfig: remove some ancient leftover flag (#30705)\n\nThis is a flag leftover from the swarm era. No need to deprecate it,\r\nit's been useless/dead forever now."
        },
        {
            "date": "2024-10-31 00:00:00",
            "message": "core: add code to witness when state object is accessed (#30698)\n\nI think the core code should generally be agnostic about the witness and\r\nthe statedb layer should determine what elements need to be included in\r\nthe witness. Because code is accessed via `GetCode`, and\r\n`GetCodeLength`, the statedb will always know when it needs to add that\r\ncode into the witness.\r\n\r\nThe edge case is block hashes, so we continue to add them manually in\r\nthe implementation of `BLOCKHASH`.\r\n\r\nIt probably makes sense to refactor statedb so we have a wrapped\r\nimplementation that accumulates the witness, but this is a simpler\r\nchange that makes #30078 less aggressive."
        },
        {
            "date": "2024-10-30 00:00:00",
            "message": "core/vm: speed up push and interpreter loop (#30662)\n\nLooking at the cpu profile of a burntpix benchmark, I noticed that a lot\r\nof time was spent in gas-used, in the interpreter loop. It's an actual\r\ncall (not inlined), which explicitly wants to be ignored by tracing\r\n(\"tracing.GasChangeIgnored\"), so it can be safely and simply inlined.\r\n\r\nThe other change is in `pushX`. These also do a call to\r\n`common.RightPadBytes`. I replaced that by a doing a corresponding `Lsh`\r\non the `u256` if needed. Note: it's needed only to make the stack output\r\nlook right, for fuzzers. It technically doesn't matter what we put\r\nthere: if code ends on a pushdata immediate, nothing will consume the\r\nstack element. We could just as well just ignore it, if we didn't care\r\nabout fuzzers (which I do).\r\n\r\nSeems quite a lot faster on burntpix, according to my runs. \r\n\r\nThis PR:\r\n```\r\nEVM gas used:    5642735088\r\nexecution time:  34.84609475s\r\nallocations:     915683\r\nallocated bytes: 175334088\r\n```\r\n```\r\nEVM gas used:    5642735088\r\nexecution time:  36.671958278s\r\nallocations:     915701\r\nallocated bytes: 175340528\r\n```\r\n\r\nMaster\r\n```\r\nEVM gas used:    5642735088\r\nexecution time:  49.349209526s\r\nallocations:     915684\r\nallocated bytes: 175333368\r\n```\r\n```\r\nEVM gas used:    5642735088\r\nexecution time:  46.581006598s\r\nallocations:     915681\r\nallocated bytes: 175330728\r\n```\r\n\r\n---------\r\n\r\nCo-authored-by: Sina M <1591639+s1na@users.noreply.github.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-10-30 00:00:00",
            "message": "beacon/light: remove unused CommitteeChain.signerThreshold (#30484)\n\nThis field is a duplicate of UpdateScore.SignerCount and never referenced."
        },
        {
            "date": "2024-10-29 00:00:00",
            "message": "appveyor, build, internal: ci.go cleanups, add package dep checker (#30696)"
        },
        {
            "date": "2024-10-29 00:00:00",
            "message": "ethdb: refactor Database interface (#30693)"
        },
        {
            "date": "2024-10-29 00:00:00",
            "message": "core, eth, node: break rawdb -> {leveldb, pebble} dependency (#30689)"
        },
        {
            "date": "2024-10-29 00:00:00",
            "message": "eth/tracers: add disableCode/Storage options for prestateTracer (#30648)\n\nWhen using the prestateTracer, in some cases users are only concerned\r\nwith balances or nonce information, and are not interested in the lengthy\r\ncontract code or storage data.\r\n\r\nTherefore, this PR introduces two new configuration options in the\r\n`prestateTracerConfig` structure:\r\n- `disableCode`\r\n- `disableStorage`\r\n\r\nThese options allow users to control whether the tracer returns contract\r\ncode and storage data during execution tracing. By setting these\r\noptions, users can more flexibly customize their needs and focus on\r\nobtaining information that is more critical and relevant to their\r\nspecific use cases.\r\n\r\nThese options work with the default mode as well as `diffMode: true`.\r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\nCo-authored-by: Sina M <1591639+s1na@users.noreply.github.com>"
        },
        {
            "date": "2024-10-28 00:00:00",
            "message": "cmd/geth: avoid hard coding the IPC name (#30687)"
        },
        {
            "date": "2024-10-28 00:00:00",
            "message": "build: document doGoModTidy function in ci.go (#30685)"
        },
        {
            "date": "2024-10-25 00:00:00",
            "message": "ethdb: add DeleteRange feature (#30668)\n\nThis PR adds `DeleteRange` to `ethdb.KeyValueWriter`. While range\r\ndeletion using an iterator can be really slow, `DeleteRange` is natively\r\nsupported by pebble and apparently runs in O(1) time (typically 20-30ms\r\nin my tests for removing hundreds of millions of keys and gigabytes of\r\ndata). For leveldb and memorydb an iterator based fallback is\r\nimplemented. Note that since the iterator method can be slow and a\r\ndatabase function should not unexpectedly block for a very long time,\r\nthe number of deleted keys is limited at 10000 which should ensure that\r\nit does not block for more than a second. ErrTooManyKeys is returned if\r\nthe range has only been partially deleted. In this case the caller can\r\nrepeat the call until it finally succeeds."
        },
        {
            "date": "2024-10-25 00:00:00",
            "message": "beacon/blsync: add holesky config and update checkpoints (#30671)\n\nThis PR adds the beacon chain config for the holesky testnet. It also\r\nupdates beacon checkpoints for Mainnet and Sepolia."
        },
        {
            "date": "2024-10-24 00:00:00",
            "message": "core/vm: remove debug printout in eof test (#30665)"
        },
        {
            "date": "2024-10-24 00:00:00",
            "message": "core: fix tracing of system calls (#30666)\n\nThis change makes it so that the wrapped statedb with tracing-hooks is passed to the system call processing\r\n\r\nFixes #30658"
        },
        {
            "date": "2024-10-23 00:00:00",
            "message": "docs: update security policy (#30606)\n\nprevious key expired 2023-07-27, the new one expires 2026-02-22:\r\n\r\npub   rsa4096 2016-11-11 [SC] [expires: 2026-02-22]\r\n      AE96ED969E479B0084F3E17FE88D3334FA5F6A0A\r\nuid Ethereum Foundation Security Team <security@ethereum.org>\r\nuid Ethereum Foundation Bug Bounty <bounty@ethereum.org>\r\nsub   rsa4096 2016-11-11 [E] [expires: 2026-02-22]"
        },
        {
            "date": "2024-10-23 00:00:00",
            "message": "eth/tracers/internal/tracertest: add missing Random to call context (#30652)\n\nFixes a configuration issue in a test-helper, so that we can do call tracing-tests post-merge"
        },
        {
            "date": "2024-10-23 00:00:00",
            "message": "all: remove TerminalTotalDifficultyPassed (#30609)\n\nrebased https://github.com/ethereum/go-ethereum/pull/29766 . The\r\ndownstream branch appears to have been deleted and I don't have perms to\r\npush to that fork.\r\n\r\n`TerminalTotalDifficultyPassed` is removed. `TerminalTotalDifficulty`\r\nmust now be non-nil, and it is expected that networks are already\r\nmerged: we can only import PoW/Clique chains, not produce blocks on\r\nthem.\r\n\r\n---------\r\n\r\nCo-authored-by: stevemilk <wangpeculiar@gmail.com>"
        },
        {
            "date": "2024-10-23 00:00:00",
            "message": "crypto, tests/fuzzers: add gnark bn254 precompile methods for fuzzing (#30585)\n\nMakes the gnark precompile methods more amenable to fuzzing"
        },
        {
            "date": "2024-10-23 00:00:00",
            "message": "core/state: move state log mechanism to a separate layer (#30569)\n\nThis PR moves the logging/tracing-facilities out of `*state.StateDB`,\r\nin to a wrapping struct which implements `vm.StateDB` instead.\r\n\r\nIn most places, it is a pretty straight-forward change: \r\n- First, hoisting the invocations from state objects up to the statedb. \r\n- Then making the mutation-methods simply return the previous value, so\r\nthat the external logging layer could log everything.\r\n\r\nSome internal code uses the direct object-accessors to mutate the state,\r\nparticularly in testing and in setting up state overrides, which means\r\nthat these changes are unobservable for the hooked layer. Thus, configuring\r\nthe overrides are not necessarily part of the API we want to publish.\r\n\r\nThe trickiest part about the layering is that when the selfdestructs are\r\nfinally deleted during `Finalise`, there's the possibility that someone\r\nsent some ether to it, which is burnt at that point, and thus needs to\r\nbe logged. The hooked layer reaches into the inner layer to figure out\r\nthese events.\r\n\r\nIn package `vm`, the conversion from `state.StateDB + hooks` into a\r\nhooked `vm.StateDB` is performed where needed.\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-10-21 00:00:00",
            "message": "common: drop BigMin and BigMax, they pollute our dep graph (#30645)\n\nWay back we've added `common.math.BigMin` and `common.math.BigMax`.\r\nThese were kind of cute helpers, but unfortunate ones, because package\r\nall over out codebase added dependencies to this package just to avoid\r\nhaving to write out 3 lines of code.\r\n\r\nBecause of this, we've also started having package name clashes with the\r\nstdlib `math`, which got solves even more badly by moving some helpers\r\nover ***from*** the stdlib into our custom lib (e.g. MaxUint64). The\r\nlatter ones were nuked out in a previous PR and this PR nukes out BigMin\r\nand BigMax, inlining them at all call sites.\r\n\r\nAs we're transitioning to uint256, if need be, we can add a min and max\r\nto that."
        },
        {
            "date": "2024-10-21 00:00:00",
            "message": "consensus/clique, miner: remove clique -> accounts dependency (#30642)\n\nClique currently depends on the `accounts` package. This was a bit of a\r\nbig cannon even in the past, just to pass a signer \"account\" to the\r\nClique block producer. Either way, nowadays Geth does not support clique\r\nmining any more, so by removing that bit of functionality from our code,\r\nwe can also break this dependency.\r\n\r\nClique should ideally be further torn out, but this at least gets us one\r\nstep closer to cleanups."
        },
        {
            "date": "2024-10-20 00:00:00",
            "message": "eth/tracers/js: avoid compiling js bigint when not needed (#30640)\n\nWhile looking at some mem profiles from `evm` runs, I noticed that\r\n`goja` compilation of the bigint library was present. The bigint library\r\ncompilation happens in a package `init`, whenever the package\r\n`eth/tracers/js` is loaded. This PR changes it to load lazily when\r\nneeded.\r\n\r\nIt becomes slightly faster with this change, and slightly less alloc:y. \r\n\r\nNon-scientific benchmark with 100 executions: \r\n```\r\ntime for i in {1..100}; do ./evm --code 6040 run; done;\r\n ```\r\n\r\ncurrent `master`:\r\n\r\n```\r\nreal    0m6.634s\r\nuser    0m5.213s\r\nsys     0m2.277s\r\n```\r\nWithout compiling bigint\r\n```\r\nreal    0m5.802s\r\nuser    0m4.191s\r\nsys     0m1.965s\r\n```"
        },
        {
            "date": "2024-10-20 00:00:00",
            "message": "build, internal, version: break ci.go/version->common dependency (#30638)\n\nThis PR tries to break the ci.go to common dependency by moving the\r\nversion number out of params."
        },
        {
            "date": "2024-10-20 00:00:00",
            "message": "common/math: sigh, keep deleting dead code"
        },
        {
            "date": "2024-10-20 00:00:00",
            "message": "common/math: delete some further dead code (#30639)"
        },
        {
            "date": "2024-10-20 00:00:00",
            "message": "build: get rid of ci.go -> common direct dependency (#30637)"
        },
        {
            "date": "2024-10-20 00:00:00",
            "message": "all: get rid of custom MaxUint64 and MaxUint64 (#30636)"
        },
        {
            "date": "2024-10-20 00:00:00",
            "message": "core/state: fix runaway alloc caused by prefetcher heap escape (#30629)\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2024-10-18 00:00:00",
            "message": "core, trie, triedb: minor changes from snapshot integration (#30599)\n\nThis change ports some non-important changes from https://github.com/ethereum/go-ethereum/pull/30159, including interface renaming and some trivial refactorings."
        },
        {
            "date": "2024-10-18 00:00:00",
            "message": "build: reenable building arm64 concurrently (#30626)"
        },
        {
            "date": "2024-10-18 00:00:00",
            "message": "gitignore: get rid of some relics (#30623)\n\nClean out some ancient stuff from git ignore."
        },
        {
            "date": "2024-10-18 00:00:00",
            "message": "swarm: nuke this leftover (#30622)\n\nSwarm moved out more than 5 years ago, time to let it go."
        },
        {
            "date": "2024-10-17 00:00:00",
            "message": "beacon/engine, core/txpool, eth/catalyst: add engine_getBlobsV1 API (#30537)"
        },
        {
            "date": "2024-10-17 00:00:00",
            "message": "beacon/engine,eth/catalyst: hex marshal requests in engine api (#30603)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-10-17 00:00:00",
            "message": "miner: send full request when resolving full payload (#30615)\n\nFixes an issue missed in #30576 where we send empty requests for a full\r\npayload being resolved, causing hash mismatch later on when we get the\r\npayload back via `NewPayload`."
        },
        {
            "date": "2024-10-17 00:00:00",
            "message": "eth/tracers: various fixes (#30540)\n\nBreaking changes:\r\n\r\n- The ChainConfig was exposed to tracers via VMContext passed in\r\n`OnTxStart`. This is unnecessary specially looking through the lens of\r\nlive tracers as chain config remains the same throughout the lifetime of\r\nthe program. It was there so that native API-invoked tracers could\r\naccess it. So instead we moved it to the constructor of API tracers.\r\n\r\nNon-breaking:\r\n\r\n- Change the default config of the tracers to be `{}` instead of nil.\r\nThis way an extra nil check can be avoided.\r\n\r\nRefactoring:\r\n\r\n- Rename `supply` struct to `supplyTracer`.\r\n- Un-export some hook definitions."
        },
        {
            "date": "2024-10-16 00:00:00",
            "message": "core: reduce peak memory usage during reorg (#30600)\n\n~~Opening this as a draft to have a discussion.~~ Pressed the wrong\r\nbutton\r\nI had [a previous PR\r\n](https://github.com/ethereum/go-ethereum/pull/24616)a long time ago\r\nwhich reduced the peak memory used during reorgs by not accumulating all\r\ntransactions and logs.\r\nThis PR reduces the peak memory further by not storing the blocks in\r\nmemory.\r\nHowever this means we need to pull the blocks back up from storage\r\nmultiple times during the reorg.\r\nI collected the following numbers on peak memory usage: \r\n\r\n// Master: BenchmarkReorg-8 10000 899591 ns/op 820154 B/op 1440\r\nallocs/op 1549443072 bytes of heap used\r\n// WithoutOldChain: BenchmarkReorg-8 10000 1147281 ns/op 943163 B/op\r\n1564 allocs/op 1163870208 bytes of heap used\r\n// WithoutNewChain: BenchmarkReorg-8 10000 1018922 ns/op 943580 B/op\r\n1564 allocs/op 1171890176 bytes of heap used\r\n\r\nEach block contains a transaction with ~50k bytes and we're doing a 10k\r\nblock reorg, so the chain should be ~500MB in size\r\n\r\n---------\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
        },
        {
            "date": "2024-10-16 00:00:00",
            "message": "core, eth, ethstats: simplify chain head events (#30601)"
        },
        {
            "date": "2024-10-15 00:00:00",
            "message": "core, ethdb/pebble: run pebble in non-sync mode (#30573)\n\nImplements https://github.com/ethereum/go-ethereum/issues/29819"
        },
        {
            "date": "2024-10-15 00:00:00",
            "message": "ethdb/pebble: switch to increasing level sizes (#30602)"
        },
        {
            "date": "2024-10-15 00:00:00",
            "message": "beacon/engine: omit null witness field from payload envelope (#30597)\n\n## Description\r\n\r\nOmit null `witness` field from payload envelope.\r\n\r\n## Motivation\r\n\r\nCurrently, JSON encoded payload types always include `\"witness\": null`,\r\nwhich, I believe, is not intentional."
        },
        {
            "date": "2024-10-15 00:00:00",
            "message": "crypto: use decred secp256k1 directly (#30595)\n\nUse `github.com/decred/dcrd/dcrec/secp256k1/v4` directly rather than\r\n`github.com/btcsuite/btcd/btcec/v2` which is just a wrapper around the\r\nunderlying decred library. Inspired by\r\nhttps://github.com/cosmos/cosmos-sdk/pull/15018\r\n\r\n`github.com/btcsuite/btcd/btcec/v2` has a very annoying breaking change\r\nwhen upgrading from `v2.3.3` to `v2.3.4`. The easiest way to workaround\r\nthis is to just remove the wrapper.\r\n\r\nWould be very nice if you could backport this to the release branches.\r\n\r\nReferences:\r\n- https://github.com/btcsuite/btcd/issues/2221\r\n- https://github.com/cometbft/cometbft/pull/4294\r\n- https://github.com/cometbft/cometbft/pull/3728\r\n- https://github.com/zeta-chain/node/pull/2934"
        },
        {
            "date": "2024-10-15 00:00:00",
            "message": "internal/ethapi: refactor `TxArgs.setCancunFeeDefaults` (#30541)\n\ncalculating a reasonable tx blob fee cap (`max_blob_fee_per_gas *\r\ntotal_blob_gas`) only depends on the excess blob gas of the parent\r\nheader. The parent header is assumed to be correct, so the method should\r\nnot be able to fail and return an error."
        },
        {
            "date": "2024-10-14 00:00:00",
            "message": "beacon/engine: strip type byte in requests (#30576)\n\nThis change brings geth into compliance with the current engine API\nspecification for the Prague fork. I have moved the assignment of\nExecutionPayloadEnvelope.Requests into BlockToExecutableData to ensure\nthere is a single place where the type is removed.\n\nWhile doing so, I noticed that handling of requests in the miner was not\nquite correct for the empty payload. It would return `nil` requests for\nthe empty payload even for blocks after the Prague fork. To fix this, I\nhave added the emptyRequests field in miner.Payload."
        },
        {
            "date": "2024-10-14 00:00:00",
            "message": "build: update to golangci-lint 1.61.0 (#30587)\n\nChangelog: https://golangci-lint.run/product/changelog/#1610 \r\n\r\nRemoves `exportloopref` (no longer needed), replaces it with\r\n`copyloopvar` which is basically the opposite.\r\n\r\nAlso adds: \r\n- `durationcheck`\r\n- `gocheckcompilerdirectives`\r\n- `reassign`\r\n- `mirror`\r\n- `tenv`\r\n\r\n---------\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2024-10-14 00:00:00",
            "message": "trie: concurrent commit (#30545)\n\nThis change makes the trie commit operation concurrent, if the number of changes exceed 100. \r\n\r\nCo-authored-by: stevemilk <wangpeculiar@gmail.com>\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-10-13 00:00:00",
            "message": "core: enable EIP-2935 in chain maker (#30575)"
        },
        {
            "date": "2024-10-13 00:00:00",
            "message": "cmd/evm: fixup issues with requests in t8n (#30584)\n\nThis fixes a few issues missed in #29052:\r\n\r\n* `requests` must be hex encoded, so added a helper to marshal.\r\n* The statedb was committed too early and so the result of the system\r\ncalls was lost.\r\n* For devnet-4 we need to pull off the type byte prefix from the request\r\ndata."
        },
        {
            "date": "2024-10-12 00:00:00",
            "message": "build: add support for ubuntu 24.10 (#30580)"
        },
        {
            "date": "2024-10-11 00:00:00",
            "message": "all: implement EIP-7002 & EIP-7251 (#30571)\n\nThis is a redo of #29052 based on newer specs. Here we implement EIPs\r\nscheduled for the Prague fork:\r\n\r\n- EIP-7002: Execution layer triggerable withdrawals\r\n- EIP-7251: Increase the MAX_EFFECTIVE_BALANCE\r\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2024-10-10 00:00:00",
            "message": "core/tracing: add GetTransientState method to StateDB interface (#30531)\n\nAllows live custom tracers to access contract transient storage through the StateDB interface."
        },
        {
            "date": "2024-10-10 00:00:00",
            "message": "eth/protocols/eth: remove Requests in block body (#30562)\n\nBlock no longer has Requests. This PR just removes some code that wasn't removed in #30425."
        },
        {
            "date": "2024-10-10 00:00:00",
            "message": "eth/catalyst, core/txpool/blobpool: make tests output less logs (#30563)\n\nA couple of tests set the debug level to `TRACE` on stdout,\r\nand all subsequent tests in the same package are also affected\r\nby that, resulting in outputs of tens of megabytes. \r\n\r\nThis PR removes such calls from two packages where it was prevalent.\r\nThis makes getting a summary of failing tests simpler, and possibly\r\nreduces some strain from the CI pipeline."
        },
        {
            "date": "2024-10-09 00:00:00",
            "message": "eth/tracers: do system contract processing prior to parallel-tracing  (#30520)\n\nThis fixes `debug_traceBlock` methods for JS tracers in that it correctly\r\napplies the beacon block root processing to the state."
        },
        {
            "date": "2024-10-09 00:00:00",
            "message": "all: implement flat deposit requests encoding (#30425)\n\nThis implements recent changes to EIP-7685, EIP-6110, and\r\nexecution-apis.\r\n\r\n---------\r\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>\r\nCo-authored-by: Shude Li <islishude@gmail.com>"
        },
        {
            "date": "2024-10-08 00:00:00",
            "message": "log: remove unused parameter (#30432)"
        },
        {
            "date": "2024-10-04 00:00:00",
            "message": "build: upgrade -dlgo version to Go 1.23.2 (#30544)\n\nNew release: https://groups.google.com/g/golang-announce/c/NKEc8VT7Fz0"
        },
        {
            "date": "2024-10-02 00:00:00",
            "message": "beacon/light: optimize lock usage in `HeadTracker` (#30485)\n\nminimizes the time when the lock is held"
        },
        {
            "date": "2024-10-02 00:00:00",
            "message": "core/vm, cmd/evm: implement eof validation (#30418)\n\nThe bulk of this PR is authored by @lightclient , in the original\r\nEOF-work. More recently, the code has been picked up and reworked for the new EOF\r\nspecification, by @MariusVanDerWijden , in https://github.com/ethereum/go-ethereum/pull/29518, and also @shemnon has contributed with fixes.\r\n\r\nThis PR is an attempt to start eating the elephant one small bite at a\r\ntime, by selecting only the eof-validation as a standalone piece which\r\ncan be merged without interfering too much in the core stuff.\r\n\r\nIn this PR: \r\n\r\n- [x] Validation of eof containers, lifted from #29518, along with\r\ntest-vectors from consensus-tests and fuzzing, to ensure that the move\r\ndid not lose any functionality.\r\n- [x] Definition of eof opcodes, which is a prerequisite for validation\r\n- [x] Addition of `undefined` to a jumptable entry item. I'm not\r\nsuper-happy with this, but for the moment it seems the least invasive\r\nway to do it. A better way might be to go back and allowing nil-items or\r\nnil execute-functions to denote \"undefined\".\r\n- [x] benchmarks of eof validation speed \r\n\r\n\r\n---------\r\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\nCo-authored-by: Danno Ferrin <danno.ferrin@shemnon.com>"
        },
        {
            "date": "2024-10-01 00:00:00",
            "message": "internal/web3ext: rm unused modules (#30532)\n\nRemove console extensions for already deleted API namespaces (les, vflux and ethash)."
        },
        {
            "date": "2024-10-01 00:00:00",
            "message": "core/rawdb: freezer index repair (#29792)\n\nThis pull request removes the `fsync` of index files in freezer.ModifyAncients function for \r\nperformance gain.\r\n\r\nOriginally, fsync is added after each freezer write operation to ensure\r\nthe written data is truly transferred into disk. Unfortunately, it turns \r\nout `fsync` can be relatively slow, especially on\r\nmacOS (see https://github.com/ethereum/go-ethereum/issues/28754 for more\r\ninformation). \r\n\r\nIn this pull request, fsync for index file is removed as it turns out\r\nindex file can be recovered even after a unclean shutdown. But fsync for data file is still kept, as\r\nwe have no meaningful way to validate the data correctness after unclean shutdown.\r\n\r\n---\r\n\r\n**But why do we need the `fsync` in the first place?** \r\n\r\nAs it's necessary for freezer to survive/recover after the machine crash\r\n(e.g. power failure).\r\nIn linux, whenever the file write is performed, the file metadata update\r\nand data update are\r\nnot necessarily performed at the same time. Typically, the metadata will\r\nbe flushed/journalled\r\nahead of the file data. Therefore, we make the pessimistic assumption\r\nthat the file is first\r\nextended with invalid \"garbage\" data (normally zero bytes) and that\r\nafterwards the correct\r\ndata replaces the garbage. \r\n\r\nWe have observed that the index file of the freezer often contain\r\ngarbage entry with zero value\r\n(filenumber = 0, offset = 0) after a machine power failure. It proves\r\nthat the index file is extended\r\nwithout the data being flushed. And this corruption can destroy the\r\nwhole freezer data eventually.\r\n\r\nPerforming fsync after each write operation can reduce the time window\r\nfor data to be transferred\r\nto the disk and ensure the correctness of the data in the disk to the\r\ngreatest extent.\r\n\r\n---\r\n\r\n**How can we maintain this guarantee without relying on fsync?**\r\n\r\nBecause the items in the index file are strictly in order, we can\r\nleverage this characteristic to\r\ndetect the corruption and truncate them when freezer is opened.\r\nSpecifically these validation\r\nrules are performed for each index file:\r\n\r\nFor two consecutive index items:\r\n\r\n- If their file numbers are the same, then the offset of the latter one\r\nMUST not be less than that of the former.\r\n- If the file number of the latter one is equal to that of the former\r\nplus one, then the offset of the latter one MUST not be 0.\r\n- If their file numbers are not equal, and the latter's file number is\r\nnot equal to the former plus 1, the latter one is valid\r\n\r\nAnd also, for the first non-head item, it must refer to the earliest\r\ndata file, or the next file if the\r\nearliest file is not sufficient to place the first item(very special\r\ncase, only theoretical possible\r\nin tests)\r\n\r\nWith these validation rules, we can detect the invalid item in index\r\nfile with greatest possibility.\r\n\r\n--- \r\n\r\nBut unfortunately, these scenarios are not covered and could still lead\r\nto a freezer corruption if it occurs:\r\n\r\n**All items in index file are in zero value**\r\n\r\nIt's impossible to distinguish if they are truly zero (e.g. all the data\r\nentries maintained in freezer\r\nare zero size) or just the garbage left by OS. In this case, these index\r\nitems will be kept by truncating\r\nthe entire data file, namely the freezer is corrupted.\r\n\r\nHowever, we can consider that the probability of this situation\r\noccurring is quite low, and even\r\nif it occurs, the freezer can be considered to be close to an empty\r\nstate. Rerun the state sync\r\nshould be acceptable.\r\n\r\n**Index file is integral while relative data file is corrupted**\r\n\r\nIt might be possible the data file is corrupted whose file size is\r\nextended correctly with garbage\r\nfilled (e.g. zero bytes). In this case, it's impossible to detect the\r\ncorruption by index validation.\r\n\r\nWe can either choose to `fsync` the data file, or blindly believe that\r\nif index file is integral then\r\nthe data file could be integral with very high chance. In this pull\r\nrequest, the first option is taken."
        },
        {
            "date": "2024-10-01 00:00:00",
            "message": "params: begin v1.14.12 release cycle (#30536)\n\nparams: begin v1.14.12 release cycle"
        },
        {
            "date": "2024-10-01 00:00:00",
            "message": "params: begin v1.14.12 release cycle"
        },
        {
            "date": "2024-10-01 00:00:00",
            "message": "params: go-ethereum v1.14.11 stable"
        },
        {
            "date": "2024-10-01 00:00:00",
            "message": "internal/ethapi: remove td field from block (#30386)\n\nimplement https://github.com/ethereum/execution-apis/pull/570"
        },
        {
            "date": "2024-09-30 00:00:00",
            "message": "cmd/geth: remove deprecated lightchaindata db (#30527)\n\nThis PR removes the dependencies on `lightchaindata` db as the light\r\nprotocol has been deprecated and removed from the codebase."
        },
        {
            "date": "2024-09-30 00:00:00",
            "message": "eth/catalyst: use setcanonical instead of sethead in simulated fork (#30465)\n\nFixes https://github.com/ethereum/go-ethereum/issues/30448"
        },
        {
            "date": "2024-09-30 00:00:00",
            "message": " build: use buildx to build multi-platform docker images (#30530)"
        },
        {
            "date": "2024-09-30 00:00:00",
            "message": "core/txpool/blobpool: use types.Sender instead of signer.Sender (#30473)\n\nUse types.Sender(signer, tx) to utilize the transaction's sender cache\r\nand avoid repeated address recover."
        },
        {
            "date": "2024-09-30 00:00:00",
            "message": "p2p/discover: add config option for disabling FINDNODE liveness check (#30512)\n\nThis is for fixing Prysm integration tests."
        },
        {
            "date": "2024-09-27 00:00:00",
            "message": "params: begin v1.14.11 release cycle"
        },
        {
            "date": "2024-09-27 00:00:00",
            "message": "params: release Geth v1.14.10"
        },
        {
            "date": "2024-09-27 00:00:00",
            "message": "Revert \"core/txpool, eth/catalyst:  ensure gas tip retains current value upon rollback\" (#30521)\n\nReverts ethereum/go-ethereum#30495\r\n\r\nYou are free to create a proper Clear method if that's the best way. But\r\none that does a proper cleanup, not some hacky call to set gas which\r\nscrews up logs, metrics and everything along the way. Also doesn't work\r\nfor legacy pool local transactions.\r\n\r\nThe current code had a hack in the simulated code, now we have a hack in\r\nlive txpooling code. No, that's not acceptable. I want the live code to\r\nbe proper, meaningful API, meaningful comments, meaningful\r\nimplementation."
        },
        {
            "date": "2024-09-27 00:00:00",
            "message": "Merge pull request #30518 from holiman/blobpool_fix\n\ncore/txpool/blobpool: return all reinject-addresses"
        },
        {
            "date": "2024-09-27 00:00:00",
            "message": "core/txpool/blobpool: add test to check internal shuffling"
        },
        {
            "date": "2024-09-27 00:00:00",
            "message": "core/txpool/blobpool: revert part of #30437, return all reinject-addresses"
        },
        {
            "date": "2024-09-26 00:00:00",
            "message": "core/txpool, eth/catalyst: ensure gas tip retains current value upon rollback (#30495)\n\nHere we move the method that drops all transactions by temporarily increasing the fee\r\ninto the TxPool itself. It's better to have it there because we can set it back to the\r\nconfigured value afterwards. This resolves a TODO in the simulated backend."
        },
        {
            "date": "2024-09-26 00:00:00",
            "message": "deps: update supranational/blst (#30504)\n\nThis update should only affect the fuzzers, as far as I know. But it\r\nseems like it might also fix some arm/macos compilation issue in\r\nhttps://github.com/ethereum/go-ethereum/issues/30494\r\n\r\nCloses #30494 (I think)"
        },
        {
            "date": "2024-09-26 00:00:00",
            "message": "p2p/discover: fix flaky tests writing to test.log after completion (#30506)\n\nThis PR fixes two tests, which had a tendency to sometimes write to the `*testing.T` `log` facility after the test function had completed, which is not allowed. This PR fixes it by using waitgroups to ensure that the handler/logwriter terminates before the test exits.\r\n\r\ncloses #30505"
        },
        {
            "date": "2024-09-24 00:00:00",
            "message": "core/vm: more benchmarks for bls g1/g2-multiexp precompiles (#30459)\n\nThis change adds more comprehensive benchmarks with a wider-variety of input sizes for g1 and g2 multi exponentiation."
        },
        {
            "date": "2024-09-24 00:00:00",
            "message": "core/tracing, core/vm: add ContractCode to the OpContext (#30466)\n\nExtends the opcontext interface to include accessor for code being executed in current context. While it is possible to get the code via `statedb.GetCode`, that approach doesn't work for initcode."
        },
        {
            "date": "2024-09-24 00:00:00",
            "message": "internal/ethapi: fix gascap 0 for eth_simulateV1 (#30496)\n\nSimilar to #30474."
        },
        {
            "date": "2024-09-24 00:00:00",
            "message": "core/rawdb: make sure specified state scheme is valid (#30499)\n\nThis change exits with error if user provided a `--state.scheme` which is neither `hash` nor `path`"
        },
        {
            "date": "2024-09-23 00:00:00",
            "message": "internal/ethapi/api: for simulated calls, set gaspool to max value if global gascap is 0 (#30474)\n\nIn #27720, we introduced RPC global gas cap. A value of `0` means an unlimited gas cap. However, this was not the case for simulated calls. This PR fixes the behaviour."
        },
        {
            "date": "2024-09-23 00:00:00",
            "message": "core/state: commit snapshot only if the base layer exists (#30493)\n\nThis pull request skips the state snapshot update if the base layer is\r\nnot existent, eliminating the numerous warning logs after an unclean\r\nshutdown.\r\n\r\nSpecifically, Geth will rewind its chain head to a historical block\r\nafter unclean shutdown and state snapshot will be remained as unchanged\r\nwaiting for recovery. During this period of time, the snapshot is unusable\r\nand all state updates should be ignored/skipped for state snapshot update."
        },
        {
            "date": "2024-09-23 00:00:00",
            "message": "core/state: fix comment of `mode` (#30490)"
        },
        {
            "date": "2024-09-23 00:00:00",
            "message": "cmd/utils: fix `setEtherbase` (#30488)\n\nMake `setEtherbase` fall thorugh and handle `miner.pending.feeRecipient` after showing deprecation-warning for `miner.etherbase`-flag."
        },
        {
            "date": "2024-09-22 00:00:00",
            "message": "travis: work around travis/osx/go1.23 setup bug (#30491)\n\nThis is a work-around for a strange issue with travis, specifically,\r\n`os=osx, go: 1.23.1`. When this is used, the actual go that ends up\r\nbeing used is `go1.19.4 darwin/amd64 `.\r\n\r\nUsing `which go`, it told me that the `go` in the path was a softlink at\r\n`/Users/travis/gopath/bin/go1.23.1 `. However, this was not true: using\r\n`command -v go`, it told me that the actual `go` that was used is a\r\nsoftlink at `/usr/local/bin/go`.\r\n\r\nThis change rewrites the `/usr/local/bin/go` softlink to point to the\r\nbinary at `/Users/travis/gopath/bin/go1.23.1`, so we get the right\r\ngo-version."
        },
        {
            "date": "2024-09-20 00:00:00",
            "message": "beacon, core, eth, miner: integrate witnesses into production Geth (#30069)\n\nThis PR integrates witness-enabled block production, witness-creating\r\npayload execution and stateless cross-validation into the `engine` API.\r\nThe purpose of the PR is to enable the following use-cases (for API\r\ndetails, please see next section):\r\n\r\n- Cross validating locally created blocks:\r\n- Call `forkchoiceUpdatedWithWitness` instead of `forkchoiceUpdated` to\r\ntrigger witness creation too.\r\n- Call `getPayload` as before to retrieve the new block and also the\r\nabove created witness.\r\n- Call `executeStatelessPayload` against another client to\r\ncross-validate the block.\r\n\r\n- Cross validating locally processed blocks:\r\n- Call `newPayloadWithWitness` instead of `newPayload` to trigger\r\nwitness creation too.\r\n- Call `executeStatelessPayload` against another client to\r\ncross-validate the block.\r\n\r\n- Block production for stateless clients (local or MEV builders):\r\n- Call `forkchoiceUpdatedWithWitness` instead of `forkchoiceUpdated` to\r\ntrigger witness creation too.\r\n- Call `getPayload` as before to retrieve the new block and also the\r\nabove created witness.\r\n- Propagate witnesses across the consensus libp2p network for stateless\r\nEthereum.\r\n\r\n- Stateless validator validation:\r\n- Call `executeStatelessPayload` with the propagated witness to\r\nstatelessly validate the block.\r\n\r\n*Note, the various `WithWitness` methods could also *just be* an\r\nadditional boolean flag on the base methods, but this PR wanted to keep\r\nthe methods separate until a final consensus is reached on how to\r\nintegrate in production.*\r\n\r\n---\r\n\r\nThe following `engine` API types are introduced:\r\n\r\n```go\r\n// StatelessPayloadStatusV1 is the result of a stateless payload execution.\r\ntype StatelessPayloadStatusV1 struct {\r\n\tStatus          string      `json:\"status\"`\r\n\tStateRoot       common.Hash `json:\"stateRoot\"`\r\n\tReceiptsRoot    common.Hash `json:\"receiptsRoot\"`\r\n\tValidationError *string     `json:\"validationError\"`\r\n}\r\n```\r\n\r\n- Add `forkchoiceUpdatedWithWitnessV1,2,3` with same params and returns\r\nas `forkchoiceUpdatedV1,2,3`, but triggering a stateless witness\r\nbuilding if block production is requested.\r\n- Extend `getPayloadV2,3` to return `executionPayloadEnvelope` with an\r\nadditional `witness` field of type `bytes` iff created via\r\n`forkchoiceUpdatedWithWitnessV2,3`.\r\n- Add `newPayloadWithWitnessV1,2,3,4` with same params and returns as\r\n`newPayloadV1,2,3,4`, but triggering a stateless witness creation during\r\npayload execution to allow cross validating it.\r\n- Extend `payloadStatusV1` with a `witness` field of type `bytes` if\r\nreturned by `newPayloadWithWitnessV1,2,3,4`.\r\n- Add `executeStatelessPayloadV1,2,3,4` with same base params as\r\n`newPayloadV1,2,3,4` and one more additional param (`witness`) of type\r\n`bytes`. The method returns `statelessPayloadStatusV1`, which mirrors\r\n`payloadStatusV1` but replaces `latestValidHash` with `stateRoot` and\r\n`receiptRoot`."
        },
        {
            "date": "2024-09-20 00:00:00",
            "message": "build: fix macos builds by working around travis osx flaw (#30479)\n\nThis should fix https://github.com/ethereum/go-ethereum/issues/30471.\r\nSee investigation in https://github.com/ethereum/go-ethereum/pull/30478\r\nfor more background."
        },
        {
            "date": "2024-09-19 00:00:00",
            "message": ".github: add release maintainers to params/ CODEOWNERS (#30458)"
        },
        {
            "date": "2024-09-19 00:00:00",
            "message": "ethdb/pebble: handle errors (#30367)"
        },
        {
            "date": "2024-09-19 00:00:00",
            "message": "core: minor fix for the log wrapper with debug purpose (#30454)\n\nAfter this PR, https://github.com/ethereum/go-ethereum/pull/28187, the\r\nway to set the default logger is different. This PR only updates the way\r\nto set logger in some test cases' comments that existed in the codebase\r\n(since this commit\r\nhttps://github.com/ethereum/go-ethereum/commit/b63e3c37a6). Although I\r\nam not sure if it a good way to leave the code in the comment, it truly\r\nmakes me more efficiently to debug and fix the failing test cases."
        },
        {
            "date": "2024-09-19 00:00:00",
            "message": "genesis: fix dev mode alloc (#30460)\n\nBalance being null causes `getGenesisState` to fail as the balance field\r\nis required in json marshaling of an account."
        },
        {
            "date": "2024-09-18 00:00:00",
            "message": "params: begin v1.14.10 release cycle (#30457)"
        },
        {
            "date": "2024-09-18 00:00:00",
            "message": "params: release go-ethereum v1.14.9 stable (#30455)"
        },
        {
            "date": "2024-09-18 00:00:00",
            "message": "Revert \"core/rawdb: remove unused transition status state accessors\" (#30449)\n\nReverts ethereum/go-ethereum#30433"
        },
        {
            "date": "2024-09-17 00:00:00",
            "message": "core/tracing: add verkle gas change reasons to changelog (#30444)\n\nAdd changes from #30409 and #29338 to changelog.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>\r\nCo-authored-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>"
        },
        {
            "date": "2024-09-16 00:00:00",
            "message": "core/tracing: fix typo in comment (#30443)\n\nminor fix"
        },
        {
            "date": "2024-09-16 00:00:00",
            "message": "core, trie: prealloc capacity for maps (#30437)\n\n- preallocate capacity for map\r\n- avoid `reinject` adding empty value\r\n- use `maps.Copy`"
        },
        {
            "date": "2024-09-16 00:00:00",
            "message": "core/types: more easily extensible tx signing (#30372)\n\nThis change makes the code slightly easier for downstream-projects to extend with more signer-types, but if functionalily equivalent to the previous code."
        },
        {
            "date": "2024-09-16 00:00:00",
            "message": "internal: run tests in parallel (#30381)\n\nContinuation of https://github.com/ethereum/go-ethereum/pull/28546"
        },
        {
            "date": "2024-09-15 00:00:00",
            "message": "core/rawdb: remove unused transition status state accessors (#30433)"
        },
        {
            "date": "2024-09-14 00:00:00",
            "message": "core/txpool/blobpool: avoid possible zero index panic (#30430)\n\nThis situation(`len(txs) == 0`) rarely occurs, but if it does, it will\r\npanic.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-09-14 00:00:00",
            "message": "core/tracing: fix copy/paste error+comments in reason listing (#30431)\n\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>"
        },
        {
            "date": "2024-09-13 00:00:00",
            "message": "p2p/enode: add quic ENR entry (#30283)\n\nAdd `quic` entry to the ENR as proposed in\r\nhttps://github.com/ethereum/consensus-specs/pull/3644\r\n\r\n---------\r\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2024-09-13 00:00:00",
            "message": "core/state, core/vm: Nyota contract create init simplification (#30409)\n\nImplementation of [this EIP-4762\r\nupdate](https://github.com/ethereum/EIPs/pull/8867).\r\n\r\n---------\r\n\r\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\r\nCo-authored-by: Tanishq Jasoria <jasoriatanishq@gmail.com>"
        },
        {
            "date": "2024-09-13 00:00:00",
            "message": "core/rawdb: more accurate description of freezer in docs (#30393)\n\nfixes https://github.com/ethereum/go-ethereum/issues/29793"
        },
        {
            "date": "2024-09-13 00:00:00",
            "message": "eth/filters: prevent concurrent access in test (#30401)\n\nuse a mutex to prevent concurrent access to the api.filters map during `TestPendingTxFilterDeadlock` test"
        },
        {
            "date": "2024-09-12 00:00:00",
            "message": "beacon/light/api: fixed blsync update query (#30421)\n\nThis PR fixes what https://github.com/ethereum/go-ethereum/pull/30306/\r\nbroke. Escaping the `?` in the event sub query was fixed in that PR but\r\nit was still escaped in the `updates` request. This PR adds a URL params\r\nargument to `httpGet` and fixes `updates` query formatting."
        },
        {
            "date": "2024-09-11 00:00:00",
            "message": "core/vm: remove panic when address is not present (#30414)\n\nRemove redundant address presence check in `makeGasSStoreFunc`.\r\n\r\nThis PR simplifies the `makeGasSStoreFunc` function by removing the\r\nredundant check for address presence in the access list. The updated\r\ncode now only checks for slot presence, streamlining the logic and\r\neliminating unnecessary panic conditions.\r\n\r\nThis change removes the unnecessary address presence check, simplifying\r\nthe code and improving maintainability without affecting functionality.\r\nThe previous panic condition was intended as a canary during the testing\r\nphases (i.e. _YOLOv2_) and is no longer needed."
        },
        {
            "date": "2024-09-10 00:00:00",
            "message": "beacon/engine/types: remove PayloadV4 (#30415)\n\nh/t @MariusVanDerWijden for finding and fixing this on devnet 3.\r\n\r\nI made the mistake of thinking `PayloadVersion` was correlated with the\r\n`GetPayloadVX` method, but it actually tracks which version of\r\n`PayloadAttributes` were passed to `forkchoiceUpdated`. So far, Prague\r\ndoes not necessitate a new version of fcu, so there is no need for\r\n`PayloadV4`.\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2024-09-06 00:00:00",
            "message": "core/state/snapshot: port changes from 29995 (#30040)\n\n#29995 has been reverted due to an unexpected flaw in the state snapshot\r\nprocess.\r\n\r\nSpecifically, it attempts to stop the state snapshot generation, which\r\ncould potentially\r\ncause the system to halt if the generation is not currently running.\r\n\r\nThis pull request ports the changes made in #29995 and fixes the flaw."
        },
        {
            "date": "2024-09-06 00:00:00",
            "message": "eth/fetcher: fix blob transaction propagation (#30125)\n\nThis PR fixes an issue with blob transaction propagation due to the blob\r\ntransation txpool rejecting transactions with gapped nonces. The\r\nspecific changes are:\r\n\r\n- fetch transactions from a peer in the order they were announced to\r\nminimize nonce-gaps (which cause blob txs to be rejected\r\n\r\n- don't wait on fetching blob transactions after announcement is\r\nreceived, since they are not broadcast\r\n\r\nTesting:\r\n- unit tests updated to reflect that fetch order should always match tx\r\nannouncement order\r\n- unit test added to confirm blob transactions are scheduled immediately\r\nfor fetching\r\n  - running the PR on an eth mainnet full node without incident so far\r\n\r\n---------\r\n\r\nSigned-off-by: Roberto Bayardo <bayardo@alum.mit.edu>\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-09-06 00:00:00",
            "message": "internal/ethapi: eth_multicall (#27720)\n\nThis is a successor PR to #25743. This PR is based on a new iteration of\r\nthe spec: https://github.com/ethereum/execution-apis/pull/484.\r\n\r\n`eth_multicall` takes in a list of blocks, each optionally overriding\r\nfields like number, timestamp, etc. of a base block. Each block can\r\ninclude calls. At each block users can override the state. There are\r\nextra features, such as:\r\n\r\n- Include ether transfers as part of the logs\r\n- Overriding precompile codes with evm bytecode\r\n- Redirecting accounts to another address\r\n\r\n## Breaking changes\r\n\r\nThis PR includes the following breaking changes:\r\n\r\n- Block override fields of eth_call and debug_traceCall have had the\r\nfollowing fields renamed\r\n  - `coinbase` -> `feeRecipient`\r\n  - `random` -> `prevRandao`\r\n  - `baseFee` -> `baseFeePerGas`\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-09-06 00:00:00",
            "message": "build: upgrade -dlgo version to Go 1.23.1 (#30404)\n\nNew security fix:\r\nhttps://groups.google.com/g/golang-announce/c/K-cEzDeCtpc"
        },
        {
            "date": "2024-09-06 00:00:00",
            "message": "core/state: get rid of field pointer in journal (#30361)\n\nThis pull request replaces the field pointer in journal entry with the\r\nfield itself, specifically the address of mutated account.\r\n\r\nWhile it will introduce the extra allocation cost, but it's easier for\r\ncode reading. Let's measure the overhead overall to see if the change is\r\nacceptable or not."
        },
        {
            "date": "2024-09-05 00:00:00",
            "message": "core/state: state reader abstraction (#29761)\n\nThis pull request introduces a state.Reader interface for state\r\naccessing.\r\n\r\nThe interface could be implemented in various ways. It can be pure trie\r\nonly reader, or the combination of trie and state snapshot. What's more,\r\nthis interface allows us to have more flexibility in the future, e.g.\r\nthe\r\narchive reader (for accessing archive state).\r\n\r\nAdditionally, this pull request removes the following metrics\r\n\r\n- `chain/snapshot/account/reads`\r\n- `chain/snapshot/storage/reads`"
        },
        {
            "date": "2024-09-05 00:00:00",
            "message": "build: increase go test timeout (#30398)\n\nThis increases the timeout for the go tests on ci, this should prevent\r\ntravis from erroring.\r\n\r\nsee:\r\nhttps://app.travis-ci.com/github/ethereum/go-ethereum/jobs/625803693"
        },
        {
            "date": "2024-09-04 00:00:00",
            "message": "node: fix flaky jwt-test (#30388)\n\nThis PR fixes a flaky jwt-test. \r\n\r\nThe test is a jwt \"from one second in the future\". The test passes; the\r\nreason for this is that the CI-system is slow, and by the time the jwt\r\nis actually evaluated, that second has passed, and it's no longer\r\nfuture.\r\n\r\nAlternative to #30380"
        },
        {
            "date": "2024-09-04 00:00:00",
            "message": "all: remove funding verifier (#30391)\n\nNow that verification is done, we can remove the funding information."
        },
        {
            "date": "2024-09-04 00:00:00",
            "message": "core: fix compilation error (#30394)\n\nun-borks a compilation error from a recent merge to master"
        },
        {
            "date": "2024-09-04 00:00:00",
            "message": "all: remove forkchoicer and reorgNeeded (#29179)\n\nThis PR changes how sidechains are handled. \r\n\r\nBefore the merge, it was possible to import a chain with lower td and not set it as canonical. After the merge, we expect every chain that we get via InsertChain to be canonical. Non-canonical blocks can still be inserted\r\nwith InsertBlockWIthoutSetHead.\r\n\r\nIf during the InsertChain, the existing chain is not canonical anymore, we mark it as a sidechain and send the SideChainEvents normally."
        },
        {
            "date": "2024-09-04 00:00:00",
            "message": "all: implement EIP-6110, execution layer triggered deposits (#29431)\n\nThis PR implements EIP-6110: Supply validator deposits on chain. It also sketches\r\nout the base for Prague in the engine API types."
        },
        {
            "date": "2024-09-03 00:00:00",
            "message": "funding.json: add funding information file (#30385)\n\nAdds a list of funding identifiers."
        },
        {
            "date": "2024-09-02 00:00:00",
            "message": "core/state: pull the verkle trie from prefetcher for empty storage root (#30369)\n\nThis pull request fixes a flaw in prefetcher.\r\n\r\nIn verkle tree world, both accounts and storage slots are committed into\r\na single tree instance for state hashing. If the prefetcher is activated, we will\r\ntry to pull the trie for the prefetcher for performance speedup. \r\n\r\nHowever, we had a special logic to skip pulling storage trie if the\r\nstorage root is empty. While it's true for merkle as we have nothing to\r\ndo with an empty storage trie, it's totally wrong for verkle. The consequences\r\nfor skipping pulling is the storage changes are committed into trie A, while the\r\naccount changes are committed into trie B (pulled from the prefetcher), boom."
        },
        {
            "date": "2024-09-02 00:00:00",
            "message": "Include tracerConfig in created tracing test (#30364)\n\nFixes the tracer test filler for when there is tracerConfig."
        },
        {
            "date": "2024-08-30 00:00:00",
            "message": "trie, core/state: Nyota EIP-6800 & EIP-4762 spec updates (#30357)\n\nThis PR implements changes related to\r\n[EIP-6800](https://eips.ethereum.org/EIPS/eip-6800) and\r\n[EIP-4762](https://eips.ethereum.org/EIPS/eip-4762) spec updates.\r\n\r\nA TL;DR of the changes is that `Version`, `Balance`, `Nonce` and\r\n`CodeSize` are encoded in a single leaf named `BasicData`. For more\r\ndetails, see the [_Header Values_ table in\r\nEIP-6800](https://eips.ethereum.org/EIPS/eip-6800#header-values).\r\n\r\nThe motivation for this was simplifying access event patterns, reducing\r\ncode complexity, and, as a side effect, saving gas since fewer leaf\r\nnodes must be accessed.\r\n\r\n---------\r\n\r\nCo-authored-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-08-29 00:00:00",
            "message": "consensus/beacon, core/types: add verkle witness builder (#30129)\n\nThis PR adds the bulk verkle witness+proof production at the end of block\r\nproduction. It reads all data from the tree in one swoop and produces\r\na verkle proof.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-08-28 00:00:00",
            "message": "signer/core/apitypes: support fixed size arrays for EIP-712 typed data (#30175)\n\nWhen attempting to hash a typed data struct that includes a type\r\nreference with a fixed-size array, the validation process fails.\r\nAccording to EIP-712, arrays can be either fixed-size or dynamic,\r\ndenoted by `Type[n]` or `Type[]` respectively, although it appears this\r\ncurrently isn't supported.\r\n\r\nThis change modifies  the validation logic to accommodate types\r\ncontaining fixed-size arrays."
        },
        {
            "date": "2024-08-28 00:00:00",
            "message": "core/state: semantic journalling (part 1) (#28880)\n\nThis is a follow-up to #29520, and a preparatory PR to a more thorough\r\nchange in the journalling system.\r\n\r\n### API methods instead of `append` operations\r\n\r\nThis PR hides the journal-implementation details away, so that the\r\nstatedb invokes methods like `JournalCreate`, instead of explicitly\r\nappending journal-events in a list. This means that it's up to the\r\njournal whether to implement it as a sequence of events or\r\naggregate/merge events.\r\n\r\n### Snapshot-management inside the journal \r\n\r\nThis PR also makes it so that management of valid snapshots is moved\r\ninside the journal, exposed via the methods `Snapshot() int` and\r\n`RevertToSnapshot(revid int, s *StateDB)`.\r\n\r\n\r\n### SetCode\r\n\r\nJournalSetCode journals the setting of code: it is implicit that the\r\nprevious values were \"no code\" and emptyCodeHash. Therefore, we can\r\nsimplify the setCode journal.\r\n\r\n### Selfdestruct\r\n\r\nThe self-destruct journalling is a bit strange: we allow the\r\nselfdestruct operation to be journalled several times. This makes it so\r\nthat we also are forced to store whether the account was already\r\ndestructed.\r\n\r\nWhat we can do instead, is to only journal the first destruction, and\r\nafter that only journal balance-changes, but not journal the\r\nselfdestruct itself.\r\n\r\nThis simplifies the journalling, so that internals about state\r\nmanagement does not leak into the journal-API.\r\n\r\n### Preimages\r\n\r\nPreimages were, for some reason, integrated into the journal management,\r\ndespite not being a consensus-critical data structure. This PR undoes\r\nthat.\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-08-27 00:00:00",
            "message": "accounts/abi/bind, ethclient/simulated: check SendTransaction error in tests (#30349)\n\nIn few tests the returned error from `SendTransaction` is not being\r\nchecked. This PR checks the returned err in tests.\r\n\r\nReturning errors also revealed tx in `TestCommitReturnValue` is not\r\nactually being sent, and returns err ` only replay-protected (EIP-155)\r\ntransactions allowed over RPC`. Fixed the transaction by using the\r\n`testTx` function."
        },
        {
            "date": "2024-08-27 00:00:00",
            "message": "p2p/discover: fix Write method in metered connection (#30355)\n\n`WriteToUDP` was never called, since `meteredUdpConn` exposed directly\r\nall the methods from the underlying `UDPConn` interface.\r\n\r\nThis fixes the `discover/egress` metric never being updated."
        },
        {
            "date": "2024-08-26 00:00:00",
            "message": "core/state: fix trie prefetcher for verkle (#30354)\n\nThis pull request fixes the panic issue in prefetcher once the verkle is\r\nactivated."
        },
        {
            "date": "2024-08-26 00:00:00",
            "message": "core: add metrics for state access (#30353)\n\nThis pull request adds a few more performance metrics, specifically:\r\n\r\n- The average time cost of an account read\r\n- The average time cost of a storage read\r\n- The rate of account reads\r\n- The rate of storage reads"
        },
        {
            "date": "2024-08-26 00:00:00",
            "message": "core: implement EIP-2935 (#29465)\n\nhttps://eips.ethereum.org/EIPS/eip-2935\r\n\r\n---------\r\n\r\nCo-authored-by: Guillaume Ballet <gballet@gmail.com>\r\nCo-authored-by: Ignacio Hagopian <jsign.uy@gmail.com>\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-08-26 00:00:00",
            "message": "doc: update 2021-08-22-split-postmortem (#30351)\n\nUpdate 2021-08-22-split-postmortem"
        },
        {
            "date": "2024-08-23 00:00:00",
            "message": "gitignore: ignore build signatures (#30346)\n\nIgnore files are generated during signing of download-binaries, which 'dirty' the vcs for subsequent builds."
        },
        {
            "date": "2024-08-23 00:00:00",
            "message": "build: debug travis build (#30344)\n\ndebugging travis build pipeline"
        },
        {
            "date": "2024-08-23 00:00:00",
            "message": "beacon/light/sync: basic tests for rangeLock (#30269)\n\nadds simple tests for lock and firstUnlocked method from rangeLock\r\ntype\r\n\r\n---------\r\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2024-08-23 00:00:00",
            "message": "beacon/blsync: better error information in test (#30336)\n\nthis change reports the error instead of ignoring it"
        },
        {
            "date": "2024-08-23 00:00:00",
            "message": "trie: avoid un-needed map copy (#30343)\n\nThis change avoids the an unnecessary map copy if the preimage recording is not enabled."
        },
        {
            "date": "2024-08-23 00:00:00",
            "message": "build: make go buildid static (#30342)\n\nThe previous clearing of buildid did fully work, turns out we need to\r\nset it in `ldflags`\r\n\r\nThe go buildid is the only remaining hurdle for reproducible builds, see\r\nhttps://github.com/ethereum/go-ethereum/issues/28987#issuecomment-2306412590\r\n\r\nThis PR changes the go build id application note to say literally `none`\r\n\r\nhttps://github.com/golang/go/issues/33772#issuecomment-528176001:\r\n\r\n> This difference is due to the .note.go.buildid section added by the\r\nlinker. It can be set to something static e.g. -ldflags=-buildid= (empty\r\nstring) to gain reproducibility."
        },
        {
            "date": "2024-08-22 00:00:00",
            "message": "build: fix hash for go1.23.0.linux-riscv64.tar.gz (#30335)\n\nbuild: fix hash for go1.23.0.linux-riscv64.tar.gz"
        },
        {
            "date": "2024-08-21 00:00:00",
            "message": "eth/tracers: avoid panic in state test runner (#30332)\n\nMake tracers more robust by handling `nil` receipt as input. \r\nAlso pass in a receipt with gas used in the state test runner.\r\nCloses https://github.com/ethereum/go-ethereum/issues/30117.\r\n\r\n---------\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2024-08-21 00:00:00",
            "message": "eth/protocols/eth: handle zero-count header requests (#30305)\n\nProper fix for handling `count=0` get header requests. \r\n\r\nhttps://en.wikipedia.org/wiki/Count_Zero"
        },
        {
            "date": "2024-08-21 00:00:00",
            "message": "trie: use go-verkle helper for speedier (*VerkleTrie).RollBackAccount (#30242)\n\nThis is a performance improvement on the account-creation rollback code\r\nrequired for the archive node to support verkle. It uses the utility\r\nfunction `DeleteAtStem` to remove code and account data per-group\r\ninstead of doing it leaf by leaf.\r\n\r\nIt also fixes an index bug, as code is chunked in 31-byte chunks, so\r\ncomparing with the code size should use 31 as its stride.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-08-20 00:00:00",
            "message": "travis.yml: use focal for builds (#30319)"
        },
        {
            "date": "2024-08-20 00:00:00",
            "message": "cmd/utils,p2p: enable discv5 by default (#30327)"
        },
        {
            "date": "2024-08-20 00:00:00",
            "message": "all: clean up goerli flag and config (#30289)\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2024-08-20 00:00:00",
            "message": "cmd/devp2p: require dns:read, dns:edit permissions for cloudflare deploy  (#30326)\n\nThis PR adds the `dns:read` and `dns:edit` permissions to the required\r\nset of permissions checked before deploying an ENR tree to Cloudflare.\r\nThese permissions are necessary for a successful publish.\r\n\r\n**Background**:\r\nThe current logic for `devp2p dns to-cloudflare` checks for `zone:edit`\r\nand `zone:read` permissions. However, when running the command with only\r\nthese two permissions, the following error occurs:\r\n```\r\nwrong permissions on zone REMOVED-ZONE: map[#zone:edit:false #zone:read:true]\r\n```\r\n\r\nAdding `zone:read` and `zone:edit` to the API token led to a different\r\nerror:\r\n```\r\nINFO [08-19|14:06:16.782] Retrieving existing TXT records on pos-nodes.hardfork.dev\r\nAuthentication error (10000)\r\n```\r\n\r\nThis suggested that additional permissions were required. I added\r\n`dns:read`, but encountered another error:\r\n```\r\nINFO [08-19|14:11:42.342] Retrieving existing TXT records on pos-nodes.hardfork.dev\r\nINFO [08-19|14:11:42.851] Updating DNS entries\r\nfailed to publish REMOVED.pos-nodes.hardfork.dev: Authentication error (10000)\r\n```\r\n\r\nFinally, after adding both `dns:read` and `dns:edit` permissions, the\r\ncommand executed successfully with the following output:\r\n```\r\nINFO [08-19|14:13:07.677] Checking Permissions on zone REMOVED-ZONE\r\nINFO [08-19|14:13:08.014] Retrieving existing TXT records on pos-nodes.hardfork.dev\r\nINFO [08-19|14:13:08.440] Updating DNS entries\r\nINFO [08-19|14:13:08.440] \"Updating pos-nodes.hardfork.dev from \\\"enrtree-root:v1 e=FSED3EDKEKRDDFMCLP746QY6CY l=FDXN3SN67NA5DKA4J2GOK7BVQI seq=1 sig=Glja2c9RviRqOpaaHR0MnHsQwU76nJXadJwFeiXpp8MRTVIhvL0LIireT0yE3ETZArGEmY5Ywz3FVHZ3LR5JTAE\\\" to \\\"enrtree-root:v1 e=AB66M4ULYD5OYN4XFFCPVZRLUM l=FDXN3SN67NA5DKA4J2GOK7BVQI seq=1 sig=H8cqDzu0FAzBplK4g3yudhSaNtszIebc2aj4oDm5a5ZE5PAg-xpCnQgVE_53CsgsqQpalD9byafx_FrUT61sagA\\\"\"\r\nINFO [08-19|14:13:16.932] Updated DNS entries                      new=32 updated=1 untouched=100\r\nINFO [08-19|14:13:16.932] Deleting stale DNS entries\r\nINFO [08-19|14:13:24.663] Deleted stale DNS entries                count=31\r\n```\r\n\r\nWith this PR, the required permissions for deploying an ENR tree to\r\nCloudflare now include `zone:read`, `zone:edit`, `dns:read`, and\r\n`dns:edit`. The initial check now includes all of the necessary\r\npermissions and indicates in the error message which permissions are\r\nmissing:\r\n```\r\nINFO [08-19|14:17:20.339] Checking Permissions on zone REMOVED-ZONE\r\nwrong permissions on zone REMOVED-ZONE: map[#dns_records:edit:false #dns_records:read:false #zone:edit:false #zone:read:true]\r\n```"
        },
        {
            "date": "2024-08-20 00:00:00",
            "message": "rpc: add timeout to rpc client Unsubscribe (#30318)\n\nFixes #30156\r\n\r\nThis adds a repro of the linked issue. I fixed it by adding a timeout\r\nwhen issuing the call to unsubscribe."
        },
        {
            "date": "2024-08-20 00:00:00",
            "message": "all: update to go version 1.23.0 (#30323)\n\nThis PR updates the version of go used in builds and docker to\r\n1.23.0. Release notes: https://go.dev/doc/go1.23\r\n\r\nMore importantly, following our policy of maintaining the last two\r\nversions (which now becomes 1.23 and 1.22), we can now make use of\r\nthe things that were introduced in 1.22: https://go.dev/doc/go1.22\r\n\r\nGo 1.22 makes two changes to \u201cfor\u201d loops.\r\n- each iteration creates new variables, \r\n- for loops may range over integers\r\n\r\nOther than that, some interesting library changes and other stuff."
        },
        {
            "date": "2024-08-20 00:00:00",
            "message": "build: attempt at reproducible builds (#30321)\n\nThis PR implements the conclusions from\r\nhttps://github.com/ethereum/go-ethereum/issues/28987#issuecomment-2296075028,\r\nthat is:\r\n\r\nBuilding with `--strip-all` as a ld-flag to the cgo linker, to remove\r\nsymbols. Without that, some spurious reference to a temporary file is\r\nincluded into the kzg-related library.\r\n\r\nBuilding with `--build-id=none`, to avoid putting a `build id` into the file."
        },
        {
            "date": "2024-08-20 00:00:00",
            "message": "core/vm: reuse Memory instances (#30137)\n\nThis PR adds a sync.Pool to reuse instances of Memory in EVMInterpreter."
        },
        {
            "date": "2024-08-20 00:00:00",
            "message": "core/rawdb: drop MigrateTable (#30331)\n\nThese are the leftovers from #24028."
        },
        {
            "date": "2024-08-20 00:00:00",
            "message": "accounts/abi: handle ABIs with contract type parameter (#30315)\n\nconvert parameter of type contract to the basic `address` type\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-08-19 00:00:00",
            "message": "eth/catalyst: ensure period zero mode leaves no pending txs in pool (#30264)\n\ncloses #29475, replaces #29657, #30104 \r\n\r\nFixes two issues. First is a deadlock where the txpool attempts to reorg, but can't complete because there are no readers left for the new txs subscription. Second, resolves a problem with on demand mode where txs may be left pending when there are more pending txs than block space.\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-08-19 00:00:00",
            "message": "gitignore: ignore upload-artefacts (#30325)\n\nOur `WriteArchive`, used by ci builder, creates files in the repo root,in order to upload. After we've built the amd64-builds, we create the uploads, and cause the repo to be flagged as dirty for the remaining builds.\r\n\r\nThis change fixes it by adding the artefacts to gitignore. Closes #30324"
        },
        {
            "date": "2024-08-19 00:00:00",
            "message": "build: remove mantic from ppa builds (#30322)\n\nremoves ppa-build for ubuntu `mantic`"
        },
        {
            "date": "2024-08-19 00:00:00",
            "message": "internal/build: include git-date on detached head (#30320)\n\nWhen we are building in detached head, we cannot easily obtain the same information as we can if we're in non-detached head.\r\n\r\nHowever, one thing we _can_ obtain is the git-hash and git-date. Currently, we omit to include the git-date into the build-info, which causes problem for reproducable builds which are on a detached head.\r\n\r\nThis change fixes it to include the date-info always."
        },
        {
            "date": "2024-08-16 00:00:00",
            "message": "vm: simplify error handling in `vm.EVM.create()` (#30292)\n\nTo allow all error paths in `vm.EVM.create()` to consume the necessary\r\ngas, there is currently a pattern of gating code on `if err == nil`\r\ninstead of returning as soon as the error occurs. The same behaviour can\r\nbe achieved by abstracting the gated code into a method that returns\r\nimmediately on error, improving readability and thus making it easier to\r\nunderstand and maintain."
        },
        {
            "date": "2024-08-16 00:00:00",
            "message": "core: remove withdrawal length check for state processor (#30286)\n\nThe withdrawal length is already verified by the beacon consensus package, so the check in the state processor is a duplicate."
        },
        {
            "date": "2024-08-16 00:00:00",
            "message": "beacon/light: handle endpoint URL more gracefully (#30306)\n\nblsync was failing if the light endpoint it was provided ended with a\n`/`. This change should handle the joining more gracefully."
        },
        {
            "date": "2024-08-15 00:00:00",
            "message": "eth: dial nodes from discv5 (#30302)\n\nHere I am adding a discv5 nodes source into the p2p dial iterator. It's\r\nan improved version of #29533.\r\n\r\nUnlike discv4, the discv5 random nodes iterator will always provide full\r\nENRs. This means we can apply filtering to the results and will only try\r\ndialing nodes which explictly opt into the eth protocol with a matching\r\nchain.\r\n\r\nI have also removed the dial iterator from snap. We don't have an\r\nofficial DNS list for snap anymore, and I doubt anyone else is running\r\none. While we could potentially filter for snap on discv5, there will be\r\nvery few nodes announcing it, and the extra iterator would just stall\r\nthe dialer.\r\n\r\n---------\r\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2024-08-15 00:00:00",
            "message": "eth/tracers/js: add coinbase addr to ctx (#30231)\n\nAdd coinbase address to javascript tracer context.\r\n\r\nThis PR adds the `coinbase` address to `jsTracer.ctx`, allowing access\r\nto the coinbase address (fee receipient) in custom JavaScript tracers.\r\n\r\nExample usage:\r\n\r\n```javascript\r\nresult: function(ctx) {\r\n  return toAddress(ctx.coinbase);\r\n}\r\n```\r\n\r\nThis change enables custom tracers to access coinbase address,\r\npreviously unavailable, enhancing their capabilities to match built-in\r\ntracers."
        },
        {
            "date": "2024-08-15 00:00:00",
            "message": "eth/ethconfig: remove LES server config (#30298)"
        },
        {
            "date": "2024-08-15 00:00:00",
            "message": "eth/fetcher: always expect transaction metadata in announcement (#30288)\n\nThis pull request drops the legacy transaction retrieval support from before\r\neth68, adding the restrictions that transaction metadata must be provided\r\nalong with the transaction announment."
        },
        {
            "date": "2024-08-15 00:00:00",
            "message": ".golangci.yml: remove lint warning for TxLookupLimit"
        },
        {
            "date": "2024-08-15 00:00:00",
            "message": "core: only compute state root once (#30299)\n\nThis PR refactors the genesis initialization a bit, s.th. we only\r\ncompute the blockhash once instead of twice as before (during hashAlloc\r\nand flushAlloc)\r\n\r\nThis will significantly reduce the amount of memory allocated during\r\ngenesis init\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-08-14 00:00:00",
            "message": "go.mod: upgrade to pebble v1.1.2 (#30297)\n\nIncludes a fix for MIPS32 support.\r\n\r\nPebble release:\r\nhttps://github.com/cockroachdb/pebble/releases/tag/v1.1.2\r\nKey fix for mips32:\r\nhttps://github.com/cockroachdb/pebble/commit/9f3904a705d60b9832febb6c6494183d92c8f556\r\n(also the only change from v1.1.1."
        },
        {
            "date": "2024-08-13 00:00:00",
            "message": "core/txpool/blobpool: fix error message (#30247)\n\nthe validation process only checks for 'less than', which is\r\ninconsistent with the error output"
        },
        {
            "date": "2024-08-12 00:00:00",
            "message": "build: run 'go mod tidy' check as part of lint (#30291)"
        },
        {
            "date": "2024-08-12 00:00:00",
            "message": "go.mod: remove github.com/julienschmidt/httprouter (#30290)"
        },
        {
            "date": "2024-08-12 00:00:00",
            "message": "params: begin v1.14.9 release cycle"
        },
        {
            "date": "2024-08-12 00:00:00",
            "message": "params: release go-ethereum v1.14.8 stable"
        },
        {
            "date": "2024-08-12 00:00:00",
            "message": "eth/protocols/snap: cleanup dangling account trie nodes due to incomplete storage (#30258)\n\nThis pull request fixes #30229.\r\n \r\nDuring snap sync, large storage will be split into several pieces and\r\nsynchronized concurrently. Unfortunately, the tradeoff is that the respective\r\nmerkle trie of each storage chunk will be incomplete due to the incomplete\r\nboundaries. The trie nodes on these boundaries will be discarded, and any\r\ndangling nodes on disk will also be removed if they fall on these paths,\r\nensuring the state healer won't be blocked.\r\n\r\nHowever, the dangling account trie nodes on the path from the root to the\r\nassociated account are left untouched. This means the dangling account trie\r\nnodes could potentially stop the state healing and break the assumption that the\r\nentire subtrie should exist if the subtrie root exists. We should consider the\r\naccount trie node as the ancestor of the corresponding storage trie node.\r\n\r\nIn the scenarios described in the above ticket, the state corruption could occur\r\nif there is a dangling account trie node while some storage trie nodes are\r\nremoved due to synchronization redo.\r\n\r\nThe fixing idea is pretty straightforward, the trie nodes on the path from root\r\nto account should all be explicitly removed if an incomplete storage trie\r\noccurs. Therefore, a `delete` operation has been added into `gentrie` to\r\nexplicitly clear the account along with all nodes on this path. The special\r\nthing is that it's a cross-trie clearing. In theory, there may be a dangling\r\nnode at any position on this account key and we have to clear all of them."
        },
        {
            "date": "2024-08-12 00:00:00",
            "message": "p2p/simulations: remove packages (#30250)\n\nLooking at the history of these packages over the past several years, there\r\nhaven't been any meaningful contributions or usages:\r\nhttps://github.com/ethereum/go-ethereum/commits/master/p2p/simulations?before=de6d5976794a9ed3b626d4eba57bf7f0806fb970+35\r\n\r\nAlmost all of the commits are part of larger refactors or low-hanging-fruit contributions.\r\nSeems like it's not providing much value and taking up team + contributor time."
        },
        {
            "date": "2024-08-10 00:00:00",
            "message": "beacon/engine, consensus/beacon: use params.MaximumExtraDataSize instead of hard-coded value (#29721)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2024-08-09 00:00:00",
            "message": "go.mod: update uint256 to 1.3.1 (#30280)\n\nRelease notes: https://github.com/holiman/uint256/releases/tag/v1.3.1"
        },
        {
            "date": "2024-08-08 00:00:00",
            "message": "cmd/evm: fix evm basefee (#30281)\n\nfixes #30279 -- previously we did not use the basefee from the genesis, and instead the defaults were used from `runtime.go/setDefaults`-function"
        },
        {
            "date": "2024-08-08 00:00:00",
            "message": "eth/downloader, core/types: take withdrawals-size into account in downloader queue (#30276)\n\nFixes a slight miscalculation in the downloader queue, which was not accurately taking block withdrawals into account when calculating the size of the items in the queue"
        },
        {
            "date": "2024-08-08 00:00:00",
            "message": "tests: fix TransactionTest to actually run (#30272)\n\nDue to https://github.com/ethereum/tests/releases/tag/v10.1, the format\r\nof the TransactionTest changed, but it was not properly addressed, causing the test\r\nto pass unexpectedly.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-08-08 00:00:00",
            "message": "build: upgrade -dlgo version to Go 1.22.6 (#30273)"
        },
        {
            "date": "2024-08-08 00:00:00",
            "message": "core/vm: use uint64 in memory for indices everywhere (#30252)\n\nConsistently use `uint64` for indices in `Memory` and drop lots of type\r\nconversions from `uint64` to `int64`.\r\n\r\n---------\r\n\r\nCo-authored-by: lmittmann <lmittmann@users.noreply.github.com>"
        },
        {
            "date": "2024-08-08 00:00:00",
            "message": "signer/core: improve performance of isPrimitiveTypeValid function (#30274) (#30277)\n\nPrecomputes valid primitive types into a map to use for validation, thus removing sprintf."
        },
        {
            "date": "2024-08-06 00:00:00",
            "message": "core/vm: improved stack swap performance (#30249)\n\nThis PR adds the methods `Stack.swap1..16()` that faster than `Stack.swap(1..16)`. \r\n\r\nCo-authored-by: lmittmann <lmittmann@users.noreply.github.com>"
        },
        {
            "date": "2024-08-06 00:00:00",
            "message": "ethclient: support networkID in hex format (#30263)\n\nSome chains\u2019 network IDs use hexadecimal such as Optimism (\"0xa\" instead\r\nof \"10\"), so when converting the string to big.Int, we cannot specify\r\nbase 10; otherwise, it will encounter errors with hexadecimal network\r\nIDs."
        },
        {
            "date": "2024-08-06 00:00:00",
            "message": "core/vm/runtime: ensure tracer benchmark calls `OnTxStart` (#30257)\n\nThe struct-based tracing added in #29189 seems to have caused an issue\r\nwith the benchmark `BenchmarkTracerStepVsCallFrame`. On master we see\r\nthe following panic:\r\n\r\n```console\r\nBenchmarkTracerStepVsCallFrame\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x2 addr=0x40 pc=0x1019782f0]\r\n\r\ngoroutine 37 [running]:\r\ngithub.com/ethereum/go-ethereum/eth/tracers/js.(*jsTracer).OnOpcode(0x140004c4000, 0x0, 0x10?, 0x989680, 0x1, {0x101ea2298, 0x1400000e258}, {0x1400000e258?, 0x14000155928?, 0x10173020c?}, ...)\r\n        /Users/matt/dev/go-ethereum/eth/tracers/js/goja.go:328 +0x140\r\ngithub.com/ethereum/go-ethereum/core/vm.(*EVMInterpreter).Run(0x14000307da0, 0x140003cc0d0, {0x0, 0x0, 0x0}, 0x0)\r\n ...\r\nFAIL    github.com/ethereum/go-ethereum/core/vm/runtime 0.420s\r\nFAIL\r\n```\r\n\r\nThe issue seems to be that `OnOpcode` expects that `OnTxStart` has\r\nalready been called to initialize the `env` value in the tracer. The JS\r\ntracer uses it in `OnOpcode` for the `GetRefund()` method.\r\n\r\nThis patch resolves the issue by reusing the `Call` method already\r\ndefined in `runtime_test.go` which correctly calls `OnTxStart`."
        },
        {
            "date": "2024-08-06 00:00:00",
            "message": "params: remove unused les parameters (#30268)"
        },
        {
            "date": "2024-08-05 00:00:00",
            "message": "eth/catalyst: get params.ExcessBlobGas but check with params.BlobGasUsed (#30267)\n\nSeems it is checked with the wrong argument\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2024-08-02 00:00:00",
            "message": "cmd/evm: don't overwrite sender account (#30259)\n\nFixes #30254 \r\n\r\nIt seems like the removed CreateAccount call is very old and not needed anymore.\r\nAfter removing it, setting a sender that does not exist in the state doesn't seem to cause\r\nan issue."
        },
        {
            "date": "2024-08-02 00:00:00",
            "message": "eth/downloader: gofmt (#30261)\n\nFixes a regression introduced in\r\nhttps://github.com/ethereum/go-ethereum/pull/30219"
        },
        {
            "date": "2024-08-02 00:00:00",
            "message": "internal/debug: remove memsize (#30253)\n\nRemoving because memsize will very likely be broken by Go 1.23. See\nhttps://github.com/fjl/memsize/issues/4"
        },
        {
            "date": "2024-08-01 00:00:00",
            "message": "accounts/abi/bind: add accessList support to base bond contract (#30195)\n\nAdding the correct accessList parameter when calling a contract can\r\nreduce gas consumption. However, the current version only allows adding\r\nthe accessList manually when constructing the transaction. This PR can\r\nprovide convenience for saving gas."
        },
        {
            "date": "2024-08-01 00:00:00",
            "message": "all: remove deprecated protobuf dependencies (#30232)\n\nThe package `github.com/golang/protobuf/proto` is deprecated in favor\r\n`google.golang.org/protobuf/proto`. We should update the codes to\r\nrecommended package.\r\n\r\nSigned-off-by: Icarus Wu <icaruswu66@qq.com>"
        },
        {
            "date": "2024-08-01 00:00:00",
            "message": "eth/downloader: correct sync mode logging to show old mode (#30219)\n\nThis PR fixes an issue in the setMode method of beaconBackfiller where the\r\nlog message was not displaying the previous mode correctly. The log message\r\nnow shows both the old and new sync modes."
        },
        {
            "date": "2024-08-01 00:00:00",
            "message": "miner: remove outdated comment (#30248)"
        },
        {
            "date": "2024-07-31 00:00:00",
            "message": "p2p/discover: schedule revalidation also when all nodes are excluded (#30239)\n\n## Issue\n\nIf `nextTime` has passed, but all nodes are excluded, `get` would return\n`nil` and `run` would therefore not invoke `schedule`. Then, we schedule\na timer for the past, as neither `nextTime` value has been updated. This\ncreates a busy loop, as the timer immediately returns.\n\n## Fix\n\nWith this PR, revalidation will be also rescheduled when all nodes are\nexcluded.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2024-07-30 00:00:00",
            "message": "p2p: fix flaky test TestServerPortMapping (#30241)\n\nThe test specifies `ListenAddr: \":0\"`, which means a random ephemeral\r\nport will be chosen for the TCP listener by the OS. Additionally, since\r\nno `DiscAddr` was specified, the same port that is chosen automatically\r\nby the OS will also be used for the UDP listener in the discovery UDP\r\nsetup. This sometimes leads to test failures if the TCP listener picks a\r\nfree TCP port that is already taken for UDP. By specifying `DiscAddr:\r\n\":0\"`, the UDP port will be chosen independently from the TCP port,\r\nfixing the random failure.\r\n\r\nSee issue #29830.\r\n\r\nVerified using\r\n```\r\ncd p2p\r\ngo test -c -race\r\nstress ./p2p.test -test.run=TestServerPortMapping\r\n...\r\n5m0s: 4556 runs so far, 0 failures\r\n```\r\n\r\nThe issue described above can technically lead to sporadic failures on\r\nsystems that specify a listen address via the `--port` flag of 0 while\r\nnot setting `--discovery.port`. Since the default is using port `30303`\r\nand using a random ephemeral port is likely not used much to begin with,\r\nnot addressing the root cause might be acceptable."
        },
        {
            "date": "2024-07-27 00:00:00",
            "message": "p2p/nat: return correct port for ExtIP NAT (#30234)\n\nReturn the actually requested external port instead of 0 in the\r\nAddMapping implementation for `--nat extip:<IP>`."
        },
        {
            "date": "2024-07-26 00:00:00",
            "message": "internal/ethapi: fix state override test (#30228)\n\nLooks like #30094 became a bit stale after #30185 was merged and now we\r\nhave a stale ref to a state override object causing CI to fail on\r\nmaster."
        },
        {
            "date": "2024-07-24 00:00:00",
            "message": "eth/tracers, internal/ethapi: remove unnecessary map pointer in state override (#30094)"
        },
        {
            "date": "2024-07-24 00:00:00",
            "message": "beacon/types, cmd/devp2p, p2p/enr: clean up uses of fmt.Errorf (#30182)"
        },
        {
            "date": "2024-07-24 00:00:00",
            "message": "triedb/pathdb: print out all trie owner and hash information (#30200)\n\nThis pull request explicitly prints out the full hash for debugging\r\npurpose."
        },
        {
            "date": "2024-07-23 00:00:00",
            "message": "core/state: fix SetStorage override behavior (#30185)\n\nThis pull request fixes the broken feature where the entire storage set is overridden.\r\n\r\nOriginally, the storage set override was achieved by marking the associated account\r\nas deleted, preventing access to the storage slot on disk. However, since #29520, this\r\nflag is also checked when accessing the account, rendering the account unreachable.\r\n\r\nA fix has been applied in this pull request, which re-creates a new state object with all\r\naccount metadata inherited."
        },
        {
            "date": "2024-07-23 00:00:00",
            "message": "cmd/utils: allow configurating blob pool from flags (#30203)\n\nCurrently, we have 3 flags to configure blob pool. However, we don't\r\nread these flags and set the blob pool configuration in eth config\r\naccordingly. This commit adds a function to check if these flags are\r\nprovided and set blob pool configuration based on them."
        },
        {
            "date": "2024-07-23 00:00:00",
            "message": "core/state: check db error after intermediate call (#30171)\n\nThis pull request adds an additional error check after statedb.IntermediateRoot,\r\nensuring that no errors occur during this call. This step is essential, as the call might\r\nencounter database errors."
        },
        {
            "date": "2024-07-23 00:00:00",
            "message": "core/txpool: use the cached address in ValidateTransactionWithState (#30208)\n\nThe address recover is executed and cached in ValidateTransaction already. It's\r\nexpected that the cached one is returned in ValidateTransaction. However,\r\ncurrently, we use the wrong function signer.Sender instead of types.Sender which\r\nwill do all the address recover again."
        },
        {
            "date": "2024-07-23 00:00:00",
            "message": "core/tracing: update latest release version (#30211)"
        },
        {
            "date": "2024-07-23 00:00:00",
            "message": "rpc: show more error detail for `invalidMessageError` (#30191)\n\nHere we add distinct error messages for network timeouts and JSON parsing errors.\r\nNote this specifically applies to HTTP connections serving a single RPC request.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-07-22 00:00:00",
            "message": "core/state: remove useless metrics (#30184)\n\nOriginally, these metrics were added to track the largest storage wiping.\r\nSince account self-destruction was deprecated with the Cancun fork,\r\nthese metrics have become meaningless."
        },
        {
            "date": "2024-07-22 00:00:00",
            "message": "rpc: use stable object in notifier test (#30193)\n\nThis makes the test resilient to changes of types.Header -- otherwise the test needs to be\r\nupdated each time the header structure is modified."
        },
        {
            "date": "2024-07-22 00:00:00",
            "message": "eth/gasprice: remove default from config (#30080)\n\n* eth/gasprice: remove default from config\r\n\r\n* eth/gasprice: sanitize startPrice"
        },
        {
            "date": "2024-07-22 00:00:00",
            "message": "ethdb: remove snapshot (#30189)"
        }
    ],
    "ethereum/go-ethereum_2024-07-31_2025-07-21": [
        {
            "date": "2025-07-21 10:29:55",
            "message": "core/vm: triple modexp cost post-cancun (#32231)\n\nhttps://github.com/ethereum/EIPs/pull/9969/files"
        },
        {
            "date": "2025-07-21 08:30:43",
            "message": "triedb/pathdb: fix incorrect address length in history searching (#32248)\n\nWe should use account length to check address, else OOB maybe occured\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-07-18 10:36:10",
            "message": "core/txpool/blobpool: remove unused `txValidationFn` from BlobPool (#32237)\n\nThis PR removes the now\u2011unused `txValidationFn` field from BlobPool.\nIt became obsolete after a PR\u00a0 https://github.com/ethereum/go-ethereum/pull/31202 \nwas merged.\n\nResolves https://github.com/ethereum/go-ethereum/issues/32236"
        },
        {
            "date": "2025-07-18 05:22:59",
            "message": "params: update tx gas limit cap (#32230)\n\nUpdates the tx gas limit cap to the new parameter (2^24)\nhttps://github.com/ethereum/EIPs/pull/9986/files"
        },
        {
            "date": "2025-07-17 03:19:20",
            "message": "all: define constructor for BlobSidecar (#32213)\n\nThe main purpose of this change is to enforce the version setting when\nconstructing the blobSidecar, avoiding creating sidecar with wrong/default \nversion tag."
        },
        {
            "date": "2025-07-17 03:07:22",
            "message": "triedb/pathdb: improve the performance of parse index block (#32219)\n\nThe implementation of `parseIndexBlock` used a reverse loop with slice\nappends to build the restart points, which was less cache-friendly and\ninvolved unnecessary allocations and operations. In this PR we change\nthe implementation to read and validate the restart points in one single\nforward loop.\n\nHere is the benchmark test:\n\n```bash\ngo test -benchmem -bench=BenchmarkParseIndexBlock ./triedb/pathdb/\n```\n\nThe result as below:\n\n```\nbenchmark                      old ns/op     new ns/op     delta\nBenchmarkParseIndexBlock-8     52.9          37.5          -29.05%\n```\n\nabout 29% improvements\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-07-17 02:59:47",
            "message": "eth/protocols/snap: fix negative eta in state progress logging (#32225)"
        },
        {
            "date": "2025-07-17 02:44:35",
            "message": "triedb/pathdb: avoid duplicate metadata reads (#32226)"
        },
        {
            "date": "2025-07-16 21:26:33",
            "message": "eth/tracers: apply block header overrides correctly (#32183)\n\nFixes #32175.\n\nThis fixes the scenario where the blockhash opcode would return 0x0\nduring RPC simulations when using BlockOverrides with a future block\nnumber. The root cause was that BlockOverrides.Apply() only modified the\nvm.BlockContext, but GetHashFn() depends on the actual\ntypes.Header.Number to resolve valid historical block hashes. This\ncaused a mismatch and resulted in incorrect behavior during trace and\ncall simulations.\n\n---------\n\nCo-authored-by: shantichanal <158101918+shantichanal@users.noreply.github.com>\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-07-16 13:36:44",
            "message": "account/abi/bind/v2: fix TestDeploymentWithOverrides (#32212)\n\nThe root cause of the flaky test was a nonce conflict caused by async\ncontract deployments.\n\nThis solution defines a custom deployer with automatic nonce management."
        },
        {
            "date": "2025-07-16 13:11:10",
            "message": "eth/downloader: improve nil pointer protection (#32222)\n\nFix #32221\n\n---------\n\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-07-16 13:00:39",
            "message": "trie: avoid spawning goroutines for empty children (#32220)"
        },
        {
            "date": "2025-07-15 13:48:36",
            "message": "core/rawdb: reduce allocations in rawdb.ReadHeaderNumber (#31913)\n\nThis is something interesting I came across during my benchmarks, we\nspent ~3.8% of all allocations allocating the header number on the heap.\n\n```\n(pprof) list GetHeaderByHash\nTotal: 38197204475\nROUTINE ======================== github.com/ethereum/go-ethereum/core.(*BlockChain).GetHeaderByHash in github.com/ethereum/go-ethereum/core/blockchain_reader.go\n         0 5786566117 (flat, cum) 15.15% of Total\n         .          .     79:func (bc *BlockChain) GetHeaderByHash(hash common.Hash) *types.Header {\n         . 5786566117     80: return bc.hc.GetHeaderByHash(hash)\n         .          .     81:}\n         .          .     82:\n         .          .     83:// GetHeaderByNumber retrieves a block header from the database by number,\n         .          .     84:// caching it (associated with its hash) if found.\n         .          .     85:func (bc *BlockChain) GetHeaderByNumber(number uint64) *types.Header {\nROUTINE ======================== github.com/ethereum/go-ethereum/core.(*HeaderChain).GetHeaderByHash in github.com/ethereum/go-ethereum/core/headerchain.go\n         0 5786566117 (flat, cum) 15.15% of Total\n         .          .    404:func (hc *HeaderChain) GetHeaderByHash(hash common.Hash) *types.Header {\n         . 1471264309    405: number := hc.GetBlockNumber(hash)\n         .          .    406: if number == nil {\n         .          .    407:  return nil\n         .          .    408: }\n         . 4315301808    409: return hc.GetHeader(hash, *number)\n         .          .    410:}\n         .          .    411:\n         .          .    412:// HasHeader checks if a block header is present in the database or not.\n         .          .    413:// In theory, if header is present in the database, all relative components\n         .          .    414:// like td and hash->number should be present too.\n(pprof) list GetBlockNumber\nTotal: 38197204475\nROUTINE ======================== github.com/ethereum/go-ethereum/core.(*HeaderChain).GetBlockNumber in github.com/ethereum/go-ethereum/core/headerchain.go\n  94438817 1471264309 (flat, cum)  3.85% of Total\n         .          .    100:func (hc *HeaderChain) GetBlockNumber(hash common.Hash) *uint64 {\n  94438817   94438817    101: if cached, ok := hc.numberCache.Get(hash); ok {\n         .          .    102:  return &cached\n         .          .    103: }\n         . 1376270828    104: number := rawdb.ReadHeaderNumber(hc.chainDb, hash)\n         .          .    105: if number != nil {\n         .     554664    106:  hc.numberCache.Add(hash, *number)\n         .          .    107: }\n         .          .    108: return number\n         .          .    109:}\n         .          .    110:\n         .          .    111:type headerWriteResult struct {\n(pprof) list ReadHeaderNumber\nTotal: 38197204475\nROUTINE ======================== github.com/ethereum/go-ethereum/core/rawdb.ReadHeaderNumber in github.com/ethereum/go-ethereum/core/rawdb/accessors_chain.go\n 204606513 1376270828 (flat, cum)  3.60% of Total\n         .          .    146:func ReadHeaderNumber(db ethdb.KeyValueReader, hash common.Hash) *uint64 {\n 109577863 1281242178    147: data, _ := db.Get(headerNumberKey(hash))\n         .          .    148: if len(data) != 8 {\n         .          .    149:  return nil\n         .          .    150: }\n  95028650   95028650    151: number := binary.BigEndian.Uint64(data)\n         .          .    152: return &number\n         .          .    153:}\n         .          .    154:\n         .          .    155:// WriteHeaderNumber stores the hash->number mapping.\n         .          .    156:func WriteHeaderNumber(db ethdb.KeyValueWriter, hash common.Hash, number uint64) {\n```\n\nOpening this to discuss the idea, I know that rawdb.EmptyNumber is not a\ngreat name for the variable, open to suggestions"
        },
        {
            "date": "2025-07-15 12:24:17",
            "message": "all: update dead wiki links (#32215)\n\n---\n\n\n**Description:**  \n- Replaced outdated GitHub wiki links with current, official\ndocumentation URLs.\n- Removed links that redirect or are no longer relevant.\n- Ensured all references point to up-to-date and reliable sources.\n\n\n---"
        },
        {
            "date": "2025-07-15 06:20:45",
            "message": "eth/protocols/snap, p2p/discover: improve zero time checks (#32214)"
        },
        {
            "date": "2025-07-15 05:50:52",
            "message": "core/rawdb: change the mechanism to schedule freezer sync (#32135)\n\nThis pull request slightly improves the freezer fsync mechanism by scheduling \nthe Sync operation based on the number of uncommitted items and original\ntime interval.\n\nOriginally, freezer.Sync was triggered every 30 seconds, which worked well during\nactive chain synchronization. However, once the initial state sync is complete, \nthe fixed interval causes Sync to be scheduled too frequently.\n\nTo address this, the scheduling logic has been improved to consider both the time \ninterval and the number of uncommitted items. This additional condition helps \navoid unnecessary Sync operations when the chain is idle."
        },
        {
            "date": "2025-07-15 03:45:20",
            "message": "triedb/pathdb: introduce file-based state journal (#32060)\n\nIntroduce file-based state journal in path database, fixing\nthe Pebble restriction when the journal size exceeds 4GB.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-07-15 01:07:23",
            "message": "core/types: fix CellProofsAt method (#32198)"
        },
        {
            "date": "2025-07-14 22:08:06",
            "message": "all: fix outdated ethereum wiki json-rpc json-rpc doc links (#32209)\n\nReplace outdated wiki reference with ethereum.org\ndocumentation links"
        },
        {
            "date": "2025-07-14 14:06:57",
            "message": "miner: set sidecar version when recomputing proofs (#32199)\n\n- If the block number is `osaka` fork and needs to recompute some `blob\nproofs` to `cell proofs`, here also needs to set version to `1`."
        },
        {
            "date": "2025-07-14 13:33:24",
            "message": "eth/fetcher: fix announcement drop logic (#32210)\n\nThis PR fixes an issue in the tx_fetcher DoS prevention logic where the\ncode keeps the overflow amount (`want - maxTxAnnounces`) instead of the\nallowed amount (`maxTxAnnounces - used`). The specific changes are:\n\n- Correct slice indexing in the announcement drop logic\n- Extend the overflow test case to cover the inversion scenario"
        },
        {
            "date": "2025-07-14 12:07:43",
            "message": "params: EIP-7892 - Blob Parameter Only Hardforks (#32193)\n\nThis is a resubmit of https://github.com/ethereum/go-ethereum/pull/31820\nagainst the `master` branch.\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-07-14 09:27:42",
            "message": "ethclient/gethclient: remove race condition in tests (#32206)\n\nalternative to https://github.com/ethereum/go-ethereum/pull/32200\n\nThe race condition is not happening yet, since there is only a single\ncall to `newTestBackend`, but there might be more in the future"
        },
        {
            "date": "2025-07-14 07:15:18",
            "message": "accounts/keystore: update links to documenation (#32194)\n\n---\n\n\n**Description:**  \n- Replaced outdated GitHub wiki links with the official Ethereum\ndocumentation for Web3 Secret Storage.\n- Updated references in `keystore.go` and `passphrase.go` for improved\naccuracy and reliability.\n\n\n---"
        },
        {
            "date": "2025-07-14 07:07:47",
            "message": "signer/core/apitypes: require blob txs to have tx.to set (#32197)\n\nCheck the `to` address before building the blob tx.\n\n---------\n\nCo-authored-by: jwasinger <j-wasinger@hotmail.com>"
        },
        {
            "date": "2025-07-11 19:55:18",
            "message": "cmd/geth: update vcheck testdata, add docs on generating signatures (#32121)\n\nFixed typo in security release URL by replacing:\nOld: https://blog.ethereum.org/2020/11/12/geth_security_release/\nNew: https://blog.ethereum.org/2020/11/12/geth-security-release/\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-07-11 12:58:21",
            "message": ".github: remove karalabe from CODEOWNERS"
        },
        {
            "date": "2025-07-11 11:56:16",
            "message": "eth/downloader: fix ancient limit in snap sync (#32188)\n\nThis pull request fixes an issue in disabling direct-ancient mode in\nsnap sync.\n\nSpecifically, if `origin >= frozen && origin != 0`, it implies a part of\nchain data has been written into the key-value store, all the following \nwrites into ancient store scheduled by downloader will be rejected \nwith error \n\n`ERROR[07-10|03:46:57.924] Error importing chain data to ancients\nerr=\"can't add block 1166 hash: the append operation is out-order: have\n1166 want 0\"`.\n\nThis issue is detected by the https://github.com/ethpandaops/kurtosis-sync-test, \nwhich initiates the first snap sync cycle without the finalized header and\nimplicitly disables the direct-ancient mode. A few seconds later the second \nsnap sync cycle is initiated with the finalized information and direct-ancient mode\nis enabled incorrectly."
        },
        {
            "date": "2025-07-11 11:51:04",
            "message": "core/types:  add block-level access list structures with encoding/decoding (#31948)\n\nThis adds the SSZ types from the \n[EIP-7928](https://eips.ethereum.org/EIPS/eip-7928) and also adds\nencoder/decoder generation using https://github.com/ferranbt/fastssz.\n\nThe fastssz dependency is updated because the generation will not work\nproperly with the master branch version due to a bug in fastssz.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-07-09 20:09:11",
            "message": "cmd/clef: update Safe API documentation links in changelog (#32136)\n\nThis PR updates the outdated documentation URL from docs.gnosis.io to\nthe new official docs.safe.global domain. The change reflects the\nrebranding from Gnosis Safe to Safe and ensures that users are directed\nto the current API documentation for transaction service reference."
        },
        {
            "date": "2025-07-09 16:49:06",
            "message": "cmd/utils: add the missing check for the HoodiFlag in blsync (#32179)\n\nHoodi network flag should be exclusive to other network flags for both blysnc standalone and integrated mode."
        },
        {
            "date": "2025-07-09 09:24:44",
            "message": "core,miner: implement EIP-7934 - RLP Execution Block Size Limit (#31990)\n\nThis PR adds a block validation check for the maximum block size, as required by\nEIP-7934, and also applies a slightly lower size limit during block building.\n\n---------\n\nCo-authored-by: spencer-tb <spencer@spencertaylorbrown.uk>\nCo-authored-by: Felix Lange <fjl@twurst.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-07-09 00:46:59",
            "message": "core/vm: update gas cost of CLZ to five (#32172)\n\nhttps://github.com/ethereum/EIPs/commit/a794de3fcf71bb8c71e8bafdba11f63133ce4516"
        },
        {
            "date": "2025-07-08 13:23:22",
            "message": "miner, core, core/txpool: implement EIP 7825 - TX Gas Limit Cap (#31824)\n\nImplements EIP-7825\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\nCo-authored-by: lightclient <lightclient@protonmail.com>\nCo-authored-by: MariusVanDerWijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-07-08 13:15:53",
            "message": "eth/catalyst:  abort dev mode block commit if shut down is triggered (#32166)\n\nalternate approach to https://github.com/ethereum/go-ethereum/pull/31328\nsuggested by @MariusVanDerWijden . This prevents Geth from outputting a\nlot of logs when trying to commit on-demand dev mode blocks while the\nclient is shutting down.\n\nThe issue is hard to reproduce, but I've seen it myself and it is\nannoying when it happens. I think this is a reasonable simple solution,\nand we can revisit if we find that the output is still too large (i.e.\nthere is a large delay between initiating shut down and the simulated\nbeacon receiving the signal, while in this loop).\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-07-08 07:51:08",
            "message": "cmd, eth/catalyst: exit geth only if exitWhenSynced is specified (#32149)\n\nThis pull request modifies the behavior of `--synctarget` to terminate\nthe node only when `--exitWhenSynced` is explicitly specified."
        },
        {
            "date": "2025-07-07 18:59:45",
            "message": "core/vm: implement EIP-7951 - precompile for secp256r1 (#31991)\n\nhttps://github.com/ethereum/EIPs/pull/9833\n\nBased on #27540, #30043\n\n---------\n\nCo-authored-by: Ula\u015f Erdo\u011fan <uerdogan2001@hotmail.com>"
        },
        {
            "date": "2025-07-07 14:17:25",
            "message": "consensus/misc/eip4844: implement EIP-7918  (#31965)\n\nhttps://eips.ethereum.org/EIPS/eip-7918\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-07-07 11:26:11",
            "message": ".github, internal/flags: improve actions test runs (#32150)\n\nThis change enables more tests to run on GitHub actions. First, it\nremoves the `-short` flag passed to `go test`, unskipping some longer\nrunning tests. We also enable the full consensus tests to run by\nenabling submodules during git clone.\n\nThe EF now operates org wide runners with the `self-hosted-ghr` label.\nThese are auto-scaling runners which should ideally allow us to process\nany amount of testing load we throw at them. The new runners have `HOME`\nconfigured differently from the actual user home directory, so our\ninternal test for resolving `~` had to be adapted to work in this scenario."
        },
        {
            "date": "2025-07-07 11:00:34",
            "message": "core/txpool/blobpool: lower log level for warnings (#32142)\n\n- Change the log level to `warning`, during syncing blocks, the `final\n== nil` is normal.\n- Change to log tx hash."
        },
        {
            "date": "2025-07-07 09:19:33",
            "message": "core/vm: implement EIP-7939 - CLZ opcode (#31989)\n\nhttps://eips.ethereum.org/EIPS/eip-7939\n\n---------\n\nCo-authored-by: spencer-tb <spencer@spencertaylorbrown.uk>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-07-07 08:01:29",
            "message": "core/vm: move nil-check out of the interpreter loop (#32068)\n\nMoves the jumptable nil check our of the interpreter loop.\nBenchmarks show a 2-10% improvement."
        },
        {
            "date": "2025-07-04 11:45:29",
            "message": ".gitea: fix typo in windows workflow"
        },
        {
            "date": "2025-07-04 11:42:55",
            "message": "gitea: set PATH in script"
        },
        {
            "date": "2025-07-04 11:38:26",
            "message": "gitea: try with cmd"
        },
        {
            "date": "2025-07-04 11:25:40",
            "message": ".gitea: set PATH"
        },
        {
            "date": "2025-07-04 10:42:01",
            "message": ".gitea: update PATH"
        },
        {
            "date": "2025-07-04 11:02:57",
            "message": ".gitea: add workflow_dispatch for release build"
        },
        {
            "date": "2025-07-04 10:17:44",
            "message": "cmd/utils: update flag description of gcmode (#32145)"
        },
        {
            "date": "2025-07-04 01:40:16",
            "message": "cmd/utils: show full deprecated flags (#32141)\n\nThis is a follow up PR after #32128 , Seems I've missed to add\n--txlookuplimit as hidden. In hte meanwhile, I also add the other \ndeprecated flags into the output of `show-deprecated-flags`"
        },
        {
            "date": "2025-07-03 13:07:22",
            "message": ".gitea: add windows build (experimental)"
        },
        {
            "date": "2025-07-03 05:23:00",
            "message": "cmd/utils, internal/debug: hide the deprecated flags (#32128)\n\nSome of the flags were deprecated, so try to hide them in the help\nmessage. And move the `--vmodule` and `--logjson` flags to the\nDeprecatedCategory."
        },
        {
            "date": "2025-07-03 05:19:34",
            "message": "core/state: add GetStateAndCommittedState (#31585)\n\nImproves the SSTORE gas calculation a bit. Previously we would pull up\nthe state object twice. This is okay for existing objects, since they\nare cached, however non-existing objects are not cached, thus we needed\nto go through all 128 diff layers as well as the disk layer twice, just\nfor the gas calculation\n\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/ethereum/go-ethereum/core/vm\ncpu: AMD Ryzen 9 5900X 12-Core Processor            \n               \u2502 /tmp/old.txt \u2502            /tmp/new.txt             \u2502\n               \u2502    sec/op    \u2502   sec/op     vs base                \u2502\nInterpreter-24   1118.0n \u00b1 2%   602.8n \u00b1 1%  -46.09% (p=0.000 n=10)\n```\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-07-02 11:39:44",
            "message": "cmd/workload: rework tracegen to run tracing at block level (#32092)\n\nThis PR changes the trace test to block level, aiming for better\nexecution performance.\n\n---------\n\nCo-authored-by: zsfelfoldi <zsfelfoldi@gmail.com>"
        },
        {
            "date": "2025-07-02 10:39:21",
            "message": "beacon/blsync: update logs for blsync (Fixes #31968 ) (#32046)\n\nSmall update for logs when syncing with blsync. Downgrades the \"latest\nfilled block is not available\" to warn.\n\nCo-authored-by: shantichanal <158101918+shantichanal@users.noreply.github.com>"
        },
        {
            "date": "2025-07-02 08:12:55",
            "message": "version: begin v1.16.2 release cycle"
        },
        {
            "date": "2025-07-02 08:12:04",
            "message": "version: release go-ethereum v1.16.1 stable"
        },
        {
            "date": "2025-07-02 06:16:54",
            "message": "accounts/abi: generate TryPack* methods for abigen v2 bindings (#31692)\n\n1. Fix the error return format.\n**todo**: ~~`bindtype` needs more complex logic to fix it.~~\n`\nif err != nil {\n  return nil, err\n}\nif err == nil {\n  return obj, nil\n}\n`\n2. ~~Return pointer type object to avoid copying the whole struct\ncontent.~~\n3. Give the panic decision to the user.\n4. Fix empty line at the end of function.\n\n**TODO**: ~~fix some related test cases.~~\n\n---------\n\nCo-authored-by: Jared Wasinger <j-wasinger@hotmail.com>"
        },
        {
            "date": "2025-07-02 05:50:18",
            "message": "eth/catalyst: fix edge case in simulated backend (#31871)\n\ngeth cmd: `geth --dev --dev.period 5`\ncall: `debug.setHead` to rollback several blocks.\n\nIf the `debug.setHead` call is delayed, it will trigger a panic with a\nsmall probability, due to using the null point of\n`fcResponse.PayloadID`.\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-07-02 00:46:03",
            "message": "core/rawdb, triedb/pathdb: fix two inaccurate comments (#32130)"
        },
        {
            "date": "2025-07-01 14:53:10",
            "message": "core/types: blockTimestamp in logs is hex-encoded (#32129)\n\ncloses #32120"
        },
        {
            "date": "2025-07-01 14:31:09",
            "message": "core/filtermaps: define APIs for map, epoch calculation (#31659)\n\nThis pull request refines the filtermap implementation, defining key\nAPIs for map and\nepoch calculations to improve readability.\n\nThis pull request doesn't change any logic, it's a pure cleanup.\n\n---------\n\nCo-authored-by: zsfelfoldi <zsfelfoldi@gmail.com>"
        },
        {
            "date": "2025-07-01 11:51:16",
            "message": "internal: remove unused shh and swarm modules from console (#32073)\n\nSimilar to https://github.com/ethereum/go-ethereum/pull/31856, remove\nthe not availabe shh, swarm modules in the console.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-07-01 07:18:49",
            "message": "ethapi: reduce some of the wasted effort in GetTransactionReceipt (#32021)\n\nTowards https://github.com/ethereum/go-ethereum/issues/26974\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-07-01 07:07:33",
            "message": "internal/ethapi: prealloc map for the txpool api (#32110)\n\nuse `make(map, len(txpool))` to prealloc the map for the txpool content,\nto avoid the map growing in the loop."
        },
        {
            "date": "2025-07-01 07:04:05",
            "message": "eth/catalyst: fix the log message in newPayloadV4 (#32125)\n\nIt should be `newPayloadV4 must only be called for prague payloads` for\nthe V4 payload error"
        },
        {
            "date": "2025-07-01 07:00:33",
            "message": "core/filtermaps: clean up log format of unindexing message (#32123)\n\nSorry for not fully fixed in https://github.com/ethereum/go-ethereum/pull/31761, now the log \nformat of unindexing message is cleaned up, to make it consistent with the indexing message."
        },
        {
            "date": "2025-07-01 06:50:02",
            "message": "Fix log indexer noise after debug_setHead operations (#31934)\n\n## Summary\nThis PR resolves Issue #31929 by reducing log noise generated by the log\nindexer after `debug_setHead` operations.\n\n## Problem Description\nWhen `debug_setHead` is called to rewind the blockchain, blocks are\nremoved from the database. However, the log indexer's `ChainView`\nobjects may still hold references to these deleted blocks. When\n`extendNonCanonical()` attempts to access these missing headers, it\nresults in:\n\n1. **Repeated ERROR logs**: `Header not found number=X hash=0x...`\n2. **Log noise** that can mask other important errors  \n3. **User confusion** about whether this indicates a real problem\n\n## Root Cause Analysis\nThe issue occurs because:\n- `debug_setHead` removes blocks from the blockchain database\n- Log indexer's `ChainView` may still reference deleted block hashes\n- `extendNonCanonical()` in `core/filtermaps/chain_view.go` tries to\nfetch these missing headers\n- The existing `return false` logic properly handles the error, but logs\nat ERROR level\n\n## Solution\nThis is a **logging improvement only** - no functional logic changes:\n\n### Changes Made\n1. **Log level**: Changed from `ERROR` to `DEBUG` \n2. **Log message**: Enhanced with descriptive context about chain view\nextension\n3. **Comments**: Added explanation for when this situation occurs\n4. **Behavior**: Maintains existing error handling (`return false` was\nalready present)\n\n### Code Changes\n```go\n// Before\nlog.Error(\"Header not found\", \"number\", number, \"hash\", hash)\nreturn false\n\n// After  \n// Header not found - this can happen after debug_setHead operations\n// where blocks have been deleted. Return false to indicate the chain view\n// is no longer valid rather than logging repeated errors.\nlog.Debug(\"Header not found during chain view extension\", \"number\", number, \"hash\", hash)\nreturn false\n```\n\n## Testing\n\n### Automated Tests\n- \u2705 All existing filtermaps tests pass: `go test ./core/filtermaps -v`\n- \u2705 No regressions in related functionality\n\n### Manual Verification\n1. **Before fix**: Started geth in dev mode, generated blocks, called\n`debug_setHead(3)` \u2192 **5 repeated ERROR logs**\n2. **After fix**: Same scenario \u2192 **4 DEBUG logs, no ERROR noise**\n\n### Test Environment\n```bash\n# Setup test environment\nrm -rf ./dev-test-data\n./build/bin/geth --dev --datadir ./dev-test-data --http --http.api debug,eth,net,web3 --verbosity 4\n\n# Generate test blocks and trigger issue\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"jsonrpc\":\"2.0\",\"method\":\"debug_setHead\",\"params\":[\"0x3\"],\"id\":1}' http://localhost:8545\n```\n\n\n## Related Issues\n- Fixes #31929\n\n## Additional Context\nThis issue was reported as spurious error messages appearing after\n`debug_setHead` operations. The investigation revealed that while the\nerror handling was functionally correct, the ERROR log level was\ninappropriate for this expected scenario in development/debugging\nworkflows.\n\nThe fix maintains full compatibility while significantly improving the\ndebugging experience for developers using `debug_setHead`.\n\n---------\n\nCo-authored-by: Sun Tae, Kim <38067691+humblefirm@users.noreply.github.com>\nCo-authored-by: zsfelfoldi <zsfelfoldi@gmail.com>"
        },
        {
            "date": "2025-07-01 06:13:19",
            "message": "eth/filters: add address limit to filters (#31876)\n\nThe address filter was never checked against a maximum limit, which can\nbe somewhat abusive for API nodes. This PR adds a limit similar to\ntopics\n\n## Description (AI generated)\n\nThis pull request introduces a new validation to enforce a maximum limit\non the number of addresses allowed in filter criteria for Ethereum logs.\nIt includes updates to the `FilterAPI` and `EventSystem` logic, as well\nas corresponding test cases to ensure the new constraint is properly\nenforced.\n\n### Core functionality changes:\n\n* **Validation for maximum addresses in filter criteria**:\n- Added a new constant, `maxAddresses`, set to 100, to define the\nmaximum allowable addresses in a filter.\n- Introduced a new error, `errExceedMaxAddresses`, to handle cases where\nthe number of addresses exceeds the limit.\n- Updated the `GetLogs` method in `FilterAPI` to validate the number of\naddresses against `maxAddresses`.\n- Modified the `UnmarshalJSON` method to return an error if the number\nof addresses in the input JSON exceeds `maxAddresses`.\n- Added similar validation to the `SubscribeLogs` method in\n`EventSystem`.\n\n### Test updates:\n\n* **New test cases for address limit validation**:\n- Added a test in `TestUnmarshalJSONNewFilterArgs` to verify that\nexceeding the maximum number of addresses triggers the\n`errExceedMaxAddresses` error.\n- Updated `TestInvalidLogFilterCreation` to include a test case for an\ninvalid filter with more than `maxAddresses` addresses.\n- Updated `TestInvalidGetLogsRequest` to test for invalid log requests\nwith excessive addresses.\n\nThese changes ensure that the system enforces a reasonable limit on the\nnumber of addresses in filter criteria, improving robustness and\npreventing potential performance issues.\n\n---------\n\nCo-authored-by: zsfelfoldi <zsfelfoldi@gmail.com>"
        },
        {
            "date": "2025-07-01 03:35:22",
            "message": "triedb: reset state indexer after snap synced (#32104)\n\nFix the issue after initial snap sync with `gcmode=archive` enabled.\n\n```\nNewPayload: inserting block failed       error=\"history indexing is out of order, last: null, requested: 1\"\n```\n\n---------\n\nSigned-off-by: Delweng <delweng@gmail.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-06-30 15:24:52",
            "message": ".gitea: disable cron schedule"
        },
        {
            "date": "2025-06-30 08:17:59",
            "message": ".gitea: fix 386 upload"
        },
        {
            "date": "2025-06-30 07:53:52",
            "message": ".gitea: switch release builds to static linking (#32118)\n\nThis is to avoid compatibility issues with mismatched glibc versions\nbetween the builder and deployment target.\n\nFixes #32102"
        },
        {
            "date": "2025-06-27 22:56:20",
            "message": "eth: correct tracer initialization in BlockchainConfig (#32107)\n\ncore.BlockChainConfig.VmConfig is not a pointer, so setting the Tracer\non the `vmConfig` object after it was passed to options does *not* apply\nit to options.VmConfig\n\nThis fixes the issue by setting the value directly inside the `options`\nobject and removing the confusing `vmConfig` variable to prevent further\nmistakes."
        },
        {
            "date": "2025-06-27 07:27:52",
            "message": "node: do not double-wrap KV stores (#32089)\n\nFor no apparent reason, KV stores were getting wrapped in `nofreezedb`\nfirst and then in `freezerdb`."
        },
        {
            "date": "2025-06-27 07:18:05",
            "message": "all: replace override.prague with osaka (#32093)\n\nreplace `--override.prague` with `--override.osaka`\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-06-26 20:02:50",
            "message": ".travis.yml: remove travis configuration"
        },
        {
            "date": "2025-06-26 19:29:59",
            "message": ".gitea: trigger PPA upload on tag"
        },
        {
            "date": "2025-06-26 18:58:52",
            "message": "version: begin v1.16.1 release cycle"
        },
        {
            "date": "2025-06-26 18:54:41",
            "message": "version: release go-ethereum v1.16.0 stable"
        },
        {
            "date": "2025-06-26 15:20:20",
            "message": "all: incorporate state history indexing status into eth_syncing response (#32099)\n\nThis pull request tracks the state indexing progress in eth_syncing\nRPC response, i.e. we will return non-null syncing status until indexing\nhas finished."
        },
        {
            "date": "2025-06-26 15:19:02",
            "message": "triedb/pathdb: fix journal resolution in pathdb (#32097)\n\nThis pull request fixes a flaw in the PBSS state iterator, which\ncould return empty account or storage data.\n\nIn PBSS, multiple in-memory diff layers and a write buffer are\nmaintained. These layers are persisted to the database and reloaded after\nnode restarts. However, since the state data is encoded using RLP, the\ndistinction between nil and an empty byte slice is lost during the encode/decode\nprocess. As a result, invalid state values such as `[]byte{}` can appear in PBSS\nand ultimately be returned by the state iterator.\n\n\nCheckout\nhttps://github.com/ethereum/go-ethereum/blob/master/triedb/pathdb/iterator_fast.go#L270\nfor more iterator details.\n\nIt's a long-term existent issue and now be activated since the snapshot\nintegration.\nThe error `err=\"range contains deletion\"` will occur when Geth tries to\nserve other\npeers with SNAP protocol request.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-25 08:50:54",
            "message": "core, eth, triedb: serve historical states over RPC (#31161)\n\nThis is the part-2 for archive node over path mode, which ultimately\nships the functionality to serve the historical states"
        },
        {
            "date": "2025-06-25 08:49:09",
            "message": "eth, triedb/pathdb: permit write buffer allowance in PBSS archive mode (#32091)\n\nThis pull request fixes a flaw in PBSS archive mode that significantly\ndegrades performance when the mode is enabled.\n\nOriginally, in hash mode, the dirty trie cache is completely disabled\nwhen archive mode is active, in order to disable the in-memory garbage \ncollection mechanism. However, the internal logic in path mode differs \nsignificantly, and the dirty trie node cache is essential for maintaining\nchain insertion performance. Therefore, the cache is now retained in\npath mode."
        },
        {
            "date": "2025-06-25 02:42:45",
            "message": "cmd/utils: fix formatting for beacon flag errors to fit Fatalf form (#32090)\n\nNoticed that the errors for the blsync flags were not formatted\ncorrectly for `Fatalf(..)`."
        },
        {
            "date": "2025-06-25 01:42:11",
            "message": "core, consensus/beacon: defer trie resolution (#31725)\n\nPreviously, the account trie for a given state root was resolved immediately \nwhen the stateDB was created, implying that the trie was always required\nby the stateDB.\n\nHowever, this assumption no longer holds, especially for path archive nodes, \nwhere historical states can be accessed even if the corresponding trie data \ndoes not exist."
        },
        {
            "date": "2025-06-24 13:06:20",
            "message": "cmd/geth, triedb: add pathdb state verification (#32086)\n\nThis pull request ports the snapshot iteration logic from the legacy\nimplementation."
        },
        {
            "date": "2025-06-24 12:36:12",
            "message": "core/rawdb, triedb/pathdb: implement history indexer (#31156)\n\nThis pull request is part-1 for shipping the core part of archive node\nin PBSS mode."
        },
        {
            "date": "2025-06-24 11:17:41",
            "message": "miner: default gaslimit 45M (#32087)\n\nWe believe it is safe to raise the gaslimit to 45M before the Fusaka\nfork. So this PR changes the default to 45M."
        },
        {
            "date": "2025-06-24 07:12:11",
            "message": "cmd/geth: era-download logic fix (#32081)\n\nDownloading from a range was failing because it would return and error\nearly with an error misinterpreting \"start-end\".\n\n---------\n\nCo-authored-by: shantichanal <158101918+shantichanal@users.noreply.github.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-06-24 05:52:18",
            "message": "eth/tracers: prestate lookup EIP7702 delegation account (#32080)\n\nImplement https://github.com/ethereum/go-ethereum/issues/32078 \nParse and lookup the delegation account if EIP7702 is enabled.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-06-23 07:13:48",
            "message": "cmd/clef: update readme (#32070)\n\nReplaced the outdated and broken link to the Web3 Secret Storage\nDefinition with the current official URL from ethereum.org in the Clef\nREADME. This ensures users have access to up-to-date and accurate\ndocumentation for the keystore file format."
        },
        {
            "date": "2025-06-23 06:04:21",
            "message": "eth: quick canceling block inserting when debug_setHead is invoked (#32067)\n\nIf Geth is engaged in a long-run block synchronization, such as a full\nsyncing over a large number of blocks, invoking `debug_setHead` will\ncause `downloader.Cancel` to wait for all fetchers to stop first.\nThis can be time-consuming, particularly for the block processing\nthread.\n\nTo address this, we manually call `blockchain.StopInsert` to interrupt\nthe blocking processing thread and allow it to exit immediately, and\nafter that call `blockchain.ResumeInsert` to resume the block\ndownloading process.\n\nAdditionally, we add a sanity check for the input block number of\n`debug_setHead` to ensure its validity.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-06-22 12:40:54",
            "message": "triedb/pathdb, eth: use double-buffer mechanism in pathdb (#30464)\n\nPreviously, PathDB used a single buffer to aggregate database writes,\nwhich needed to be flushed atomically. However, flushing large amounts\nof data (e.g., 256MB) caused significant overhead, often blocking the\nsystem for around 3 seconds during the flush.\n\nTo mitigate this overhead and reduce performance spikes, a double-buffer\nmechanism is introduced. When the active buffer fills up, it is marked\nas frozen and a background flushing process is triggered. Meanwhile, a\nnew buffer is allocated for incoming writes, allowing operations to\ncontinue uninterrupted.\n\nThis approach reduces system blocking times and provides flexibility in\nadjusting buffer parameters for improved performance."
        },
        {
            "date": "2025-06-22 12:28:29",
            "message": "core/state: fix prefetch on single core CPU (#32075)\n\nWe need at least one prefetch goroutine. SetLimit(0) would block\nprefetch.\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>"
        },
        {
            "date": "2025-06-21 05:00:32",
            "message": "core/state: improve the prefetcher concurrency allowance (#32071)\n\nImprove the prefetcher concurrency allowance."
        },
        {
            "date": "2025-06-21 04:58:04",
            "message": "core/state: expose the state reader stats (#31998)\n\nThis pull request introduces a mechanism to expose statistics from the\nstate reader, specifically related to cache utilization during state prefetching.\n\nTo improve state access performance, a pair of state readers is constructed \nwith a shared local cache. One reader to execute transactions  ahead of time\nto warm up the cache. The other reader is used by the actual chain processing \nlogic, which can benefit from the prefetched states.\n\nThis PR adds visibility into how effective the cache is by exposing relevant \nusage statistics.\n\n---------\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>\nCo-authored-by: Csaba Kiraly <csaba.kiraly@gmail.com>"
        },
        {
            "date": "2025-06-20 11:40:41",
            "message": "ethdb: Implement DeleteRange in batch (#31947)\n\nimplement #31945\n\n---------\n\nCo-authored-by: prpeh <prpeh@proton.me>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-06-20 11:18:20",
            "message": "crypto/bn256: add documentation on subgroup checks for G2 (#32066)\n\nThis PR improves the IsOnCurve methods for BN254 G2 points by:\n\n* Clarifying its behavior the docstring, making it explicit that it\nverifies both the point being on the curve and in the correct subgroup.\n\n* Adding an in-line comment explaining the subgroup membership check\n(c.Mul(Order)).\n\n * Minor wording adjustments for readability and consistency."
        },
        {
            "date": "2025-06-20 10:47:48",
            "message": "crypto/bn256/gnark: align marshaling behavior (#32065)\n\nAligns the marshaling behavior of gnark to google and cloudflare\n\nCo-authored-by: kevaundray <kevtheappdev@gmail.com>"
        },
        {
            "date": "2025-06-19 18:37:02",
            "message": ".gitea: show environment in release-ppa.yml"
        },
        {
            "date": "2025-06-19 14:19:54",
            "message": "trie: delete secKeyCacheOwner (#31785)\n\nThe optimization tried to defer allocating the cache map until it was used for the\nfirst time. It's a relic from earlier times, when tries were copied often. This seems\nunnecessary now, so we can just create the map when the trie is created.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-19 12:56:12",
            "message": ".gitea: touch cron workflow files"
        },
        {
            "date": "2025-06-19 10:21:15",
            "message": "core: consolidate BlockChain constructor options (#31925)\n\nIn this pull request, the original `CacheConfig` has been renamed to `BlockChainConfig`.\n\nOver time, more fields have been added to `CacheConfig` to support\nblockchain configuration. Such as `ChainHistoryMode`, which clearly extends\nbeyond just caching concerns.\n\nAdditionally, adding new parameters to the blockchain constructor has\nbecome increasingly complicated, since it\u2019s initialized across multiple\nplaces in the codebase. A natural solution is to consolidate these arguments \ninto a dedicated configuration struct.\n\nAs a result, the existing `CacheConfig` has been redefined as `BlockChainConfig`.\nSome parameters, such as `VmConfig`, `TxLookupLimit`, and `ChainOverrides`\nhave been moved into `BlockChainConfig`. Besides, a few fields in `BlockChainConfig`\nwere renamed, specifically:\n\n- `TrieCleanNoPrefetch` -> `NoPrefetch`\n- `TrieDirtyDisabled` -> `ArchiveMode`\n\nNotably, this change won't affect the command line flags or the toml\nconfiguration file. It's just an internal refactoring and fully backward-compatible.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-19 09:43:24",
            "message": "core: simplify effectiveTip calculation (#31771)\n\nSince we have the effective gas price in the message, we can compute tip by\nsimply subtracting the basefee. No need to recompute the effective price.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-19 02:05:32",
            "message": "core/rawdb: don't decode the full block body in ReadTransaction (#32027)\n\nReading a single transaction out of a block shouldn't need decoding the\nentire body\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-06-19 01:44:39",
            "message": "eth,core: terminate the downloader immediately when shutdown signal is received (#32062)\n\nCloses https://github.com/ethereum/go-ethereum/issues/32058"
        },
        {
            "date": "2025-06-18 12:17:30",
            "message": "crypto/bn256/cloudflare: pull in upstream fix for R27 and R29 usage (#32057)\n\nPulls in https://github.com/cloudflare/bn256/pull/48 to remove usage of\nR27 and R29 [which are reserved](https://go.dev/doc/asm#arm64)."
        },
        {
            "date": "2025-06-18 07:29:14",
            "message": "all: reuse the global hash buffer (#31839)\n\nAs https://github.com/ethereum/go-ethereum/pull/31769 defined a global\nhash pool, so we can reuse it, and also remove the unnecessary\nKeccakState buffering\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-06-18 07:06:49",
            "message": "eth/catalyst: fetch header on forkchoiceUpdated (#31928)\n\ncloses https://github.com/ethereum/go-ethereum/issues/31254\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-06-17 21:42:06",
            "message": "build: upgrade -dlgo version to Go 1.24.4 (#31978)"
        },
        {
            "date": "2025-06-17 21:02:36",
            "message": "tests/fuzzers: added bn marshaling fuzzers (#32053)\n\nAdds marshaling fuzzing for G1 and G2 to oss-fuzz. \n\nAlso aligns the behavior of the google library to that of gnark and\ncloudflare, which only ever read the first 64 / 128 bytes of the input,\nregardless of how long the input is"
        },
        {
            "date": "2025-06-17 19:58:31",
            "message": "crypto/bn256: fix gnark deserialisation (#32055)\n\nfixes the gnark deserialisation\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-17 12:59:37",
            "message": "go.mod: bump golang.org/x/net from 0.36.0 to 0.38.0 (#31658)"
        },
        {
            "date": "2025-06-17 12:44:51",
            "message": "accounts: fix data race when closing manager (#31982)\n\nFixes a data race on the `wallets` slice when closing account Manager.\n\nAt the moment, there is a data race between a go-routine calling the\nManager's `Close` function and the background go-routine handling most\noperations on the `Manager`. The `Manager`'s `wallets` field is accessed\nwithout proper synchronization.\n\nBy moving the closing of wallets from the `Close()` function into the\nbackground thread, this issue can be resolved."
        },
        {
            "date": "2025-06-17 12:23:45",
            "message": "ethdb/pebble: lower the compaction debt (#31988)\n\nThis pull request reduces the threshold for triggering compaction at\nlevel0, leading to less compaction debt. This change is helpful in the\ncase of heavy write-load, mitigating the case of heavy write stalls\ncaused by compaction.\n\ncloses https://github.com/ethereum/go-ethereum/issues/31830"
        },
        {
            "date": "2025-06-17 12:13:03",
            "message": "fix: skip storage entries with missing preimage keys (#32051)\n\nWhen `GetKey`  is called, a missing preimage can cause the function to return a `nil`\nkey. This, in turn, makes `account.Storage` persist an incorrect value."
        },
        {
            "date": "2025-06-16 22:42:07",
            "message": "Revert \"crypto/bn256: default to gnark (#32024)\"\n\nThis reverts commit e0cf89ecfaa29b40dc548eec16e071242b40eedd."
        },
        {
            "date": "2025-06-16 16:44:18",
            "message": "node: fix data race on httpConfig.prefix (#32047)\n\nThis fixes a data race when accessing the `httpConfig.prefix` field.\nThis field can be modified while the server is running through\n`enableRPC`. The fix is storing the prefix in the handler, which is\naccessed through the atomic pointer.\n\nalternative to #32035\nfixes https://github.com/ethereum/go-ethereum/issues/32019"
        },
        {
            "date": "2025-06-16 13:34:48",
            "message": "tracers/prestate: always remove empty accounts from pre-state (#31427)\n\nThe prestateTracer had the intention of excluding accounts that were\nempty prior to execution from the prestate. This was being done only for\ncreated contracts. This PR makes it so all such empty accounts are\nexcluded. This behavior is configurable using the `includeEmpty: true`\nflag introduced in #31855.\n\n---------\n\nSigned-off-by: Ignacio Hagopian <jsign.uy@gmail.com>\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2025-06-16 11:23:10",
            "message": "go.mod: update gnark-crypto to v0.18.0 (#32034)\n\nmainly to pull in https://github.com/Consensys/gnark-crypto/pull/693"
        },
        {
            "date": "2025-06-16 11:10:14",
            "message": "crypto/bn256: default to gnark (#32024)"
        },
        {
            "date": "2025-06-16 10:31:09",
            "message": "eth/tracers: flag for empty acounts in prestateTracer (#31855)\n\nThis PR introduces a flag that enables returning of newly created state\nobjects in the prestateTracer.\n\n**Rationale**\nHaving this information is useful because local execution can more\neasily distinguish between newly created objects and system contracts.\n\n---------\n\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2025-06-13 14:16:49",
            "message": "Makefile: add make evm (#32029)"
        },
        {
            "date": "2025-06-13 12:01:50",
            "message": "core/vm: implement updates to modexp gas cost changes in EIP-7883 (#32015)\n\nImplements the updated gas cost changes introduced in\nhttps://github.com/ethereum/EIPs/commit/5cdd75157d78522bde8dc58977717c14cd7f2789"
        },
        {
            "date": "2025-06-13 11:47:26",
            "message": "metrics: remove use of reflect in metrics registration code (#31962)\n\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-06-13 07:04:24",
            "message": "trie: no need to store preimage if not enabled (#32012)\n\nAs the preimage will only be stored if `t.preimages != nil`, so no need\nto save them into local cache if not enabled. This will reduce the memory \nwasted to copy the bytes\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-06-12 12:30:54",
            "message": "metrics: add chain/gas for cumulative gas usage (#32004)\n\nThis is a followup to #31753.\n\nA cumulative counter is more useful when we need to measure / aggregate\nthe metric over a longer period of time. It also means we won't miss data,\ne.g. our prometheus scrapes every 30 seconds, and so may miss a transient \nspike in the pre-aggregated mgas/s.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-06-12 09:53:16",
            "message": "crypto/kzg4844: remove kzg initialization (#32017)\n\nThis fixes a regression in the state tests where we always initialized\nthe KZG library. This was added to test some stuff in #31791"
        },
        {
            "date": "2025-06-11 12:50:46",
            "message": "core/vm, cmd/evm: remove EOF (#32000)\n\nWith EOF removed from the Osaka fork, and no longer being tested, the\nimplementation will now just be bitrotting. I'm opting to remove it so\nit doesn't get in the way of other changes."
        },
        {
            "date": "2025-06-10 09:52:02",
            "message": "eth/filters: add timestamp to derived logs (#31887)\n\nThe block timestamp field is now added to the logs returned\nby eth_getLogs."
        },
        {
            "date": "2025-06-09 14:44:42",
            "message": "params: enable osaka fork in MergedTestChainConfig (#31993)"
        },
        {
            "date": "2025-06-09 14:36:24",
            "message": "cmd/workload: introduce transaction-trace test (#31288)\n\nThis pull request introduces a new test suite in workload framework, for\ntransaction tracing.\n\n**test generation**\n`go run . tracegen --trace-tests trace-test.json http://host:8545`\n\nand you can choose to store the trace result in a specific folder\n`go run . tracegen --trace-tests trace-test.json --trace-output\n./trace-result http://host:8545`\n\n**test run**\n`./workload test -run Trace/Transaction --trace-invalid ./trace-invalid\nhttp://host:8545`\n\nThe mismatched trace result will be saved in the specific folder for\nfurther investigation."
        },
        {
            "date": "2025-06-09 13:16:06",
            "message": "eth: initialize blobTxPool (#31992)\n\nFixes a regression introduced in #31791, see\nhttps://github.com/ethereum/go-ethereum/pull/31791#issuecomment-2955554641"
        },
        {
            "date": "2025-06-09 10:01:38",
            "message": "ethdb/pebble: adjust the number of memory tables (#31970)\n\nThis pull request adjusts the number of allowed memory tables in Pebble.\n\nPebble allows configuring an arbitrary number of memory tables to hold \nunflushed data. When the current memtable becomes full, it is scheduled \nfor flushing, and a new memtable is allocated to accept subsequent\nwrites. However, if too many memtables accumulate and are waiting to be \nflushed, subsequent writes will stall.\n\nOriginally, only two memtables were configured, each with a size of 512\nMB for Ethereum mainnet. While this setup works well under normal\nconditions, it becomes problematic under heavy write loads. In such scenarios,\nflushing is only triggered when more than 512 MB of data is pending, which may\nnot be responsive enough. Even worse, if compactions are running\nconcurrently, flushing memtables can become slow due to the heavy IO \noverhead, leading to write stalls across the system.\n\nThis pull request tries to mitigate the performance degradation by having \nmore memory tables but with a smaller size. In this case, the pending\nwrites can be flushed more smoothly and responsively."
        },
        {
            "date": "2025-06-09 09:34:24",
            "message": "eth/catalyst: implement getBlobsV2 (#31791)\n\nImplements `engine_getBlobsV2` which is needed for PeerDAS.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-05 14:47:49",
            "message": "core/vm: implement EIP 7883 - ModExp Gas Cost Increase (#31606)\n\nhttps://eips.ethereum.org/EIPS/eip-7883\n\n---------\n\nCo-authored-by: MariusVanDerWijden <m.vanderwijden@live.de>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-05 14:19:47",
            "message": "cmd/geth: fix era1 download location to match store (#31951)\n\nThis changes the era1 downloader to place the files into the correct\nlocation where geth will actually use them. Also adds integration with\nthe new --datadir.era flag."
        },
        {
            "date": "2025-06-05 10:14:35",
            "message": "eth, p2p: improve dial speed by pre-fetching dial candidates (#31944)\n\nThis PR improves the speed of Disc/v4 and Disc/v5 based discovery by\nadding a prefetch buffer to discovery sources, eliminating slowdowns\ndue to timeouts and rate mismatch between the two processes.\n\nSince we now want to filter the discv4 nodes iterator, it is being removed\nfrom the default discovery mix in p2p.Server. To keep backwards-compatibility,\nthe default unfiltered discovery iterator will be utilized by the server when\nno protocol-specific discovery is configured.\n\n---------\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-04 18:52:27",
            "message": "crypto/kzg4844: avoid copying blobs for marshaling (#31911)\n\nLLVM is not able to handle large arrays on stack"
        },
        {
            "date": "2025-06-04 16:19:11",
            "message": "core/vm: implement EIP 7823 - Set upper bounds for MODEXP (#31818)"
        },
        {
            "date": "2025-06-04 14:07:16",
            "message": "eth/downloader: fix missing receipt (#31952)\n\nThis fixes a regression introduced by #29158 where receipts of empty blocks\nwere stored into the database as an empty byte array, instead of an RLP empty list.\n\nFixes #31938\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-04 13:07:15",
            "message": "cmd/utils: update SepoliaFlag usage (#31961)\n\nThe Sepolia testnet has transitioned to pos following The Merge."
        },
        {
            "date": "2025-06-04 12:47:01",
            "message": "accounts/abi:  error when packing negative values in unsigned types (#31790)\n\nThis is an alternative approach to\nhttps://github.com/ethereum/go-ethereum/pull/31607 , that doesn't break\nbackwards-compatibility with abigen.\n\nNote that this does change the behavior of `Argument.Pack`: previously,\npacking negative values for a `uint` parameter would cause them to be\nrepresented in signed binary representation via two's complement. Now,\nit will fail explicitly in this case.\n\nHowever, I don't see a reason to support this functionality. The ABI\nalready explicitly supports signed integers. There's no reason that a\nsmart contract author would choose to store signed values in a `uint`\nafaict.\n\n---------\n\nCo-authored-by: MariusVanDerWijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-06-04 04:18:20",
            "message": "eth/catalyst: use atomics instead of locks (#31955)"
        },
        {
            "date": "2025-06-03 22:19:23",
            "message": "metrics: disable CPU metrics on tinygo (#31953)"
        },
        {
            "date": "2025-06-03 15:13:35",
            "message": "eth/filters: fix pruned history error for genesis block (#31941)\n\nFixes an issue where querying logs for block ranges starting from 0 would fail with an irrelevant\nerror on a pruned node. Now the correct \"history is pruned\" error will be returned."
        },
        {
            "date": "2025-06-03 12:36:00",
            "message": "eth/catalyst: change warning to error for 'too many bad block attempts' (#31940)\n\nThis situation was failing quietly for me recently when I had a partial\ndata corruption issue. Changing the log level to Error would increase\nvisibility for me."
        },
        {
            "date": "2025-06-03 10:54:13",
            "message": "core/filtermaps: remove filter base row cache, add group read (#31852)\n\nThis PR changes the database access of the base part of filter rows that\nare stored in groups of 32 adjacent maps for improved database storage\nsize and data access efficiency.\nBefore this grouped storage was introduced, filter rows were not cached\nbecause the access pattern of either the index rendering or the search\ndoes not really benefit from caching. Also no mutex was necessary for\nfilter row access. Storing adjacent rows in groups complicated the\nsituation as a search typically required reading all or most of adjacent\nrows of a group, so in order to implement the single row read operation\nwithout having to read the entire group up to 32 times, a cache for the\nbase row groups was added. This also introduced data race issues for\nconcurrenct read/write in the same group which was avoided by locking\nthe `indexLock` mutex. Unfortunately this also led to slowed down or\ntemporarily blocked search operations when indexing was in progress.\nThis PR returns to the original concept of uncached, no-mutex filter map\naccess by increasing read efficiency in a better way; similiarly to\nwrite operations that already operate on groups of filter maps, now\n`getFilterMapRow` is also replaced by `getFilterMapRows` that accepts a\nsingle `rowIndex` and a list of `mapIndices`. It slightly complicates\n`singleMatcherInstance.getMatchesForLayer` which now has to collect\ngroups of map indices accessed in the same row, but in exchange it\nguarantees maximum read efficiency while avoiding read/write mutex\ninterference.\n\nNote: a follow-up refactoring is WIP that further changes the database\naccess scheme by prodiving an immutable index view to the matcher, makes\nthe whole indexer more straightforward with no callbacks, and entirely\nremoves the concept of matcher syncing with `validBlocks` and the\nresulting multiple retry logic in `eth/filters/filter.go`. This might\ntake a bit longer to finish though and in the meantime this change could\nhopefully already solve the blocked request issues."
        },
        {
            "date": "2025-06-03 08:47:38",
            "message": "core/rawdb: integrate eradb backend for RPC (#31604)\n\nThis implements a backing store for chain history based on era1 files.\nThe new store is integrated with the freezer. Queries for blocks and receipts\nbelow the current freezer tail are handled by the era store.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-06-02 14:11:19",
            "message": "eth: return null for not-found in BlockByNumberOrHash (#31949)\n\nThis changes the API backend to return null for not-found blocks. This behavior\nis required by the RPC When `BlockByNumberOrHash` always returned an error\nfor this case ever since being added in https://github.com/ethereum/go-ethereum/pull/19491.\nThe backend method has a couple of call sites, and all of them handle a `nil`\nblock result because `BlockByNumber` returns `nil` for not-found.\n\nThe only case where this makes a real difference is for `eth_getBlockReceipts`,\nwhich was changed in #31361 to actually forward the error from `BlockByNumberOrHash`\nto the caller."
        },
        {
            "date": "2025-06-02 11:00:58",
            "message": ".gitea: modify scheduled workflow times (#31946)"
        },
        {
            "date": "2025-05-29 10:26:50",
            "message": "go.mod: bump flock package version (#31909)\n\nThe newer version has a stub implementation for unsupported targets,\nwhich allows us to compile to more exotic targets."
        },
        {
            "date": "2025-05-29 10:23:38",
            "message": ".travis.yml: remove master branch push builds (#31927)\n\nRelease artefact building has been migrated to another system (Gitea),\nso we can finally stop using Travis CI. However, in order to have a\nfail-safe for the release, I'm leaving the config in and it will still\ntrigger builds on Travis for tagged releases. That way, if our new\nsystem fails to work for the next release, we will still have the option\nof using Travis."
        },
        {
            "date": "2025-05-29 04:20:39",
            "message": "cmd/geth, cmd/utils: log prefunded account/key in ephemeral development mode (#31898)\n\nThis PR modifies the disclaimer/banner that is printed when starting up\nGeth in dev mode:\n* if the client is spun up in ephemeral dev mode with a keystore\noverride, the address of the first (prefunded) account is printed.\n* if the client is spun up in ephemeral mode without a keystore\noverride, the genesis allocation contains a single static prefunded EOA\naccount. It's address and private key are logged.\n* the banner is printed at the end of client initialization to make it\nmore prominent. Previously, it was logged towards the beginning of\nclient initialization and subsequent logging from startup filled the\nterminal, pushing it out of view of the user.\n\nOther change is that we now use a static prefunded dev account instead\nof generating a random one when instantiating a new dev mode chain.\n\nThis is an example of what the banner looks like:\n```\nWARN [05-28|23:05:16.475] You are running Geth in --dev mode. Please note the following:\nWARN [05-28|23:05:16.475] \nWARN [05-28|23:05:16.475]   1. This mode is only intended for fast, iterative development without assumptions on\nWARN [05-28|23:05:16.475]      security or persistence.\nWARN [05-28|23:05:16.475]   2. The database is created in memory unless specified otherwise. Therefore, shutting down\nWARN [05-28|23:05:16.475]      your computer or losing power will wipe your entire block data and chain state for\nWARN [05-28|23:05:16.475]      your dev environment.\nWARN [05-28|23:05:16.475]   3. A random, pre-allocated developer account will be available and unlocked as\nWARN [05-28|23:05:16.475]      eth.coinbase, which can be used for testing. The random dev account is temporary,\nWARN [05-28|23:05:16.475]      stored on a ramdisk, and will be lost if your machine is restarted.\nWARN [05-28|23:05:16.475]   4. Mining is enabled by default. However, the client will only seal blocks if transactions\nWARN [05-28|23:05:16.475]      are pending in the mempool. The miner's minimum accepted gas price is 1.\nWARN [05-28|23:05:16.475]   5. Networking is disabled; there is no listen-address, the maximum number of peers is set\nWARN [05-28|23:05:16.475]      to 0, and discovery is disabled.\nWARN [05-28|23:05:16.475] \nWARN [05-28|23:05:16.475] \nWARN [05-28|23:05:16.475]  Running in ephemeral mode.  The following account has been prefunded in the genesis:\nWARN [05-28|23:05:16.475] \nWARN [05-28|23:05:16.475]        Account\nWARN [05-28|23:05:16.475]        ------------------\nWARN [05-28|23:05:16.475]        0x71562b71999873db5b286df957af199ec94617f7 (10^49 ETH)\nWARN [05-28|23:05:16.475]  \nWARN [05-28|23:05:16.475]        Private Key\nWARN [05-28|23:05:16.475]        ------------------\nWARN [05-28|23:05:16.475]        0xb71c71a67e1177ad4e901695e1b4b9ee17ae16c6668d313eac2f96dbcda3f291\nWARN [05-28|23:05:16.475] \n```\n\ncloses #31796\n\n---------\n\nCo-authored-by: jwasinger <j-wasinger@hotmail.com>"
        },
        {
            "date": "2025-05-28 21:19:13",
            "message": ".gitea: run release build on tag push (#31924)"
        },
        {
            "date": "2025-05-28 21:16:51",
            "message": ".gitea: fix arm64 build (#31923)"
        },
        {
            "date": "2025-05-28 20:57:58",
            "message": ".gitea: fix archive uploads and run PPA upload on release push (#31922)"
        },
        {
            "date": "2025-05-28 20:40:26",
            "message": ".gitea: fix apt update (#31921)"
        },
        {
            "date": "2025-05-28 18:14:48",
            "message": ".gitea: fix secrets passing (#31920)"
        },
        {
            "date": "2025-05-28 17:01:33",
            "message": ".gitea: port more builds from travis and fix PPA env (#31919)"
        },
        {
            "date": "2025-05-28 16:24:43",
            "message": ".gitea: add env to scheduled builds (#31918)"
        },
        {
            "date": "2025-05-28 15:51:47",
            "message": ".gitea: adjust cron schedule (#31915)\n\nThis should make the scheduled build actually run."
        },
        {
            "date": "2025-05-28 11:31:42",
            "message": "triedb/pathdb: introduce lookup structure to optimize state access (#30971)\n\nThis pull request introduces a mechanism to improve state lookup\nefficiency in pathdb by maintaining a lookup structure that eliminates\nunnecessary iteration over diff layers.\n\nThe core idea is to track a mutation history for each dirty state entry\nresiding in the diff layers. This history records the state roots of all layers\nin which the entry was modified, sorted from oldest to newest.\n\nDuring state lookup, this mutation history is queried to find the most\nrecent layer whose state root either matches the target root or is a\ndescendant of it. This allows us to quickly identify the layer containing\nthe relevant data, avoiding the need to iterate through all diff layers from\ntop to bottom.\n\nBesides, the overhead for state lookup is constant, no matter how many\ndiff layers are retained in the pathdb, which unlocks the potential to hold\nmore diff layers.\n\nOf course, maintaining this lookup structure introduces some overhead.\nFor each state transition, we need to:\n(a) update the mutation records for the modified state entries, and\n(b) remove stale mutation records associated with outdated layers.\n\nOn our benchmark machine, it will introduce around 1ms overhead which is\nacceptable."
        },
        {
            "date": "2025-05-26 08:45:41",
            "message": "core/vm: fix bls benchmark (#31896)\n\nFixes #31893"
        },
        {
            "date": "2025-05-23 15:50:25",
            "message": "core: remove unused queued import status (#31870)"
        },
        {
            "date": "2025-05-23 15:48:15",
            "message": "internal/build: add support for Github Actions CI environment (#31891)\n\nThis adds support for the Github actions environment in the build tool.\nInformation from environment variables, like the build number and\nbranch/tag name, is used to make decisions about uploads and package\nfilenames."
        },
        {
            "date": "2025-05-23 14:21:08",
            "message": ".gitea: add cron build script (#31890)\n\nAlso swaps the push build scripts and adds environment output."
        },
        {
            "date": "2025-05-23 11:10:10",
            "message": "core/state: fix copy of storageChange (#31874)\n\nMissing field origvalue when copying storageChange."
        },
        {
            "date": "2025-05-23 10:44:30",
            "message": ".gitea: update release build actions (#31886)\n\nTrying to make the docker build work."
        },
        {
            "date": "2025-05-23 10:33:43",
            "message": ".gitea: add initial workflow file (#31885)"
        },
        {
            "date": "2025-05-23 09:29:01",
            "message": "consensus: remove clique RPC APIs (#31875)"
        },
        {
            "date": "2025-05-23 09:14:40",
            "message": "crypto: use pure Go signature implementation in tinygo (#31878)\n\ntinygo is having problems compiling the C implementation"
        },
        {
            "date": "2025-05-23 07:21:03",
            "message": "internal/era: update link to documentation (#31879)\n\nUpdated reference URL in accumulator.go comment to point to the correct\nlocation of the historical-hashes-accumulator documentation in the\nEthereum portal network specs"
        },
        {
            "date": "2025-05-22 21:49:11",
            "message": "build: Update EEST to v4.5.0 (#31880)\n\nWe deleted outdated pectra-devnet-6@v1.0.0 release by mistake, so this\nPR updates the referenced EEST release to the correct latest version.\n\n@s1na I removed the TODO comment because I think this solves it, unless\nit meant something else.\n\n---------\n\nCo-authored-by: MariusVanDerWijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-05-22 09:30:20",
            "message": "core/txpool: add explicit max blob count limit (#31837)\n\nFixes #31792.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-05-21 12:20:36",
            "message": "eth/tracers: Improve test coverage for toWord (#31846)"
        },
        {
            "date": "2025-05-21 09:53:29",
            "message": "eth/catalyst: move witness methods from engine api (#31867)\n\nNo functional changes, just moves the witness methods into its own file"
        },
        {
            "date": "2025-05-20 16:31:01",
            "message": "core/state: reduce allocation in updateStateObject (#31861)\n\nOptimize updateStateObject to reduce an allocation."
        },
        {
            "date": "2025-05-20 13:38:33",
            "message": "eth/tracers/native: add erc7562 tracer (#31006)\n\nThis PR introduces a new native tracer for AA bundlers. Bundlers participating in the alternative\nmempool will need to validate userops. This tracer will return sufficient information for them to\ndecide whether griefing is possible. Resolves #30546\n\n---------\n\nCo-authored-by: Sina M <1591639+s1na@users.noreply.github.com>"
        },
        {
            "date": "2025-05-20 12:57:01",
            "message": "core/txpool/legacypool: fix flaky test TestAllowedTxSize #30975 (#31836)\n\nSome tests involving transactions near the txMaxSize limit were flaky.\nThis was due to ECDSA signatures occasionally having leading zeros,\nwhich are omitted during RLP encoding \u2014 making the final transaction\nsize 1 byte smaller than expected.\n\nTo address this, a new helper function pricedDataTransactionWithFixedSignature\nwas added. It ensures both r and s are exactly 32 bytes (i.e., no leading zeros),\nproducing transactions with deterministic size."
        },
        {
            "date": "2025-05-20 08:04:37",
            "message": "README: update broken JSON-RPC API documentation link (#31860)\n\nI've updated the broken link to point to the current official Ethereum\nJSON-RPC API documentation at\nhttps://ethereum.org/en/developers/docs/apis/json-rpc/. This is the\ncorrect and up-to-date location for the Ethereum Execution Layer APIs\ndocumentation. The link should now work properly."
        },
        {
            "date": "2025-05-20 07:58:00",
            "message": "internal/reexec: fix broken link to Docker/Moby in comment (#31859)\n\nHey team\u2014noticed a dead link, replaced it with a working URL\n\nhttps://github.com/moby/moby/blob/master/pkg/reexec/reexec.go - old link\n\nhttps://github.com/moby/moby/blob/master/pkg/reexec/reexec_deprecated.go\n- new link"
        },
        {
            "date": "2025-05-19 13:55:17",
            "message": "internal: remove eth_{compile,getWork,submitWork} from console (#31856)\n\nThe `compile` and `eth_getWork` `eth_submitWork` apis were not available\nanymore, so try to remove them"
        },
        {
            "date": "2025-05-19 10:56:12",
            "message": "cmd/utils: remove duplicate code for influxDB tags (#31854)\n\nremove duplicate code\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>"
        },
        {
            "date": "2025-05-19 02:03:59",
            "message": "trie: use common.Hash as the key in secKeyCache map (#31786)"
        },
        {
            "date": "2025-05-19 01:59:35",
            "message": "core: don't emit the warning of log indexing if the db was not initialized (#31845)"
        },
        {
            "date": "2025-05-18 08:25:16",
            "message": "cmd/devp2p/internal/ethtest: tests for BlockRangeUpdate (#31843)\n\nI added a test for BlockRangeUpdate in #29158 but forgot to enable it.\nHere I'm adding two more tests for it. Also applied a small refactoring\nto combine calls to `dial()` and `peer()` into a single function, since\nthese two calls are duplicated in each test."
        },
        {
            "date": "2025-05-16 17:35:17",
            "message": "eth: use headers in debug.GetModifiedAccountsBy* (#31765)\n\nSmall optimization in debug_getModifiedAccountsBy* to avoid fetching block body."
        },
        {
            "date": "2025-05-16 15:10:47",
            "message": "eth/protocols/eth: implement eth/69 (#29158)\n\nThis PR implements eth/69. This protocol version drops the bloom filter\nfrom receipts messages, reducing the amount of data needed for a sync\nby ~530GB (2.3B txs * 256 byte) uncompressed. Compressed this will\nbe reduced to ~100GB\n\nThe new version also changes the Status message and introduces the\nBlockRangeUpdate message to relay information about the available history\nrange.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-05-16 10:29:38",
            "message": "core, triedb/pathdb: final integration (snapshot integration pt 5) (#30661)\n\nIn this pull request, snapshot generation in pathdb has been ported from \nthe legacy state snapshot implementation. Additionally, when running in \npath mode, legacy state snapshot data is now managed by the pathdb\nbased snapshot logic.\n\nNote: Existing snapshot data will be re-generated, regardless of whether \nit was previously fully constructed."
        },
        {
            "date": "2025-05-16 08:20:36",
            "message": "cmd/utils: remove deprecated LES flags (#31838)\n\nThey were not widely used in users setups."
        },
        {
            "date": "2025-05-15 20:54:18",
            "message": "build: upgrade -dlgo version to Go 1.24.3 (#31774)\n\nNew security fix: https://groups.google.com/g/golang-announce/c/UZoIkUT367A"
        },
        {
            "date": "2025-05-15 20:53:26",
            "message": "cmd/geth, internal/era/eradl: add era1 downloader tool (#31823)\n\nThis adds a geth subcommand for downloading era1 files and placing them into\nthe correct location. The tool can be used even while geth is already running\non the datadir. Downloads are checked against a hard-coded list of checksums\nfor mainnet and sepolia.\n\n```\n./geth download-era --server $SERVER --block 333333\n./geth download-era --server $SERVER --block 333333-444444\n./geth download-era --server $SERVER --epoch 0-10\n./geth download-era --server $SERVER --all\n```\n\nThe implementation reuses the file downloader we already had for\nfetching build tools. I've done some refactoring on it to make sure it\ncan support the new use case, and there are some changes to the build\nhere as well."
        },
        {
            "date": "2025-05-15 19:55:38",
            "message": "AUTHORS, .mailmap: update name and email attribution (#31624)"
        },
        {
            "date": "2025-05-15 12:43:52",
            "message": "core/state, core/vm: update stateless gas costs to follow the verkle-gen-7 testnet (#31014)\n\nAdding values to the witness introduces a new class of issues for\ncomputing gas: if there is not enough gas to cover adding an item to the\nwitness, then the item should not be added to the witness.\n\nThe problem happens when several items are added together, and that\nprocess runs out of gas. The witness gas computation needs a way to\nsignal that not enough gas was provided. These values can not be\nhardcoded, however, as they are context dependent, i.e. two calls to the\nsame function with the same parameters can give two different results.\n\nThe approach is to return both the gas that was actually consumed, and\nthe gas that was necessary. If the values don't match, then a witness\nupdate OOG'd. The caller should then charge the `consumed` value\n(remaining gas will be 0) and error out.\n\nWhy not return a boolean instead of the wanted value? Because when\nseveral items are touched, we want to distinguish which item lacked gas.\n\n---------\n\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>"
        },
        {
            "date": "2025-05-15 12:17:58",
            "message": "p2p/enode: add support for naming iterator sources (#31779)\n\nThis adds support for naming the source iterators of FairMix, like so:\n\n  mix.AddSource(enode.WithSourceName(\"mySource\", iter))\n\nThe source that produced the latest node is returned by the new NodeSource method."
        },
        {
            "date": "2025-05-15 07:32:20",
            "message": "cmd/utils: always record preimages in dev mode (#31821)\n\nFix a todo: force-enable this in --dev mode\n\n---------\n\nCo-authored-by: jwasinger <j-wasinger@hotmail.com>"
        },
        {
            "date": "2025-05-14 14:50:02",
            "message": "eth/catalyst: refactor engine api checks (#31182)\n\nThis PR contains three refactors:\n- refactor the latest fork check that we use quite extensively \n- refactor the nil checks in NewPayloads\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-05-14 01:26:08",
            "message": "core: use unix time to check fork readiness (#31800)"
        },
        {
            "date": "2025-05-13 13:28:16",
            "message": "eth: fix returned blockContext for empty blocks in stateAtTransaction (#31768)\n\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-05-13 12:11:27",
            "message": "crypto/kzg4844: use package github.com/crate-crypto/go-eth-kzg (#31806)\n\nI saw in https://github.com/ethereum/go-ethereum/pull/31378 introduced\ngithub.com/crate-crypto/go-eth-kzg to calculate the kzg hash, and\ngithub.com/crate-crypto/go-kzg-4844 was only used in the test files, so\npropose to drop it with go-eth-kzg instead"
        },
        {
            "date": "2025-05-12 09:31:48",
            "message": "accounts/abi/abigen: remove unnecessary test files (#31804)\n\nfix #31793: resolve conflict markers in structs-abi.go.txt"
        },
        {
            "date": "2025-05-12 07:41:24",
            "message": "core/state: fix incorrect description of function behavior (#31809)"
        },
        {
            "date": "2025-05-12 06:37:01",
            "message": "ethdb/pebble: expose stall counter of pebble (#31782)\n\nThis pull request adds a more Pebble metrics, tracking the amount of\nwrite stalls with specific reasons"
        },
        {
            "date": "2025-05-10 00:27:27",
            "message": "metrics: add chain/mgasps to track gas usage rate (#31753)\n\nThis adds a metric called `chain/mgasps`, which records how many million\ngas per second are being used during block insertion.\n\nThe value is calculated as `usedGas * 1000 / elapsed`, and it's updated\nin the `insertStats.report` method. Also cleaned up the log output to\nreuse the same value instead of recalculating it.\n\nUseful for monitoring block processing throughput.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-05-09 10:56:00",
            "message": "core/types: reduce allocations in tx.EffectiveGasTip (#31598)\n\nThis PR introduces an allocation-free version of the\nTransaction.EffectiveGasTip method to improve performance by reducing\nmemory allocations.\n\n## Changes\n- Added a new `EffectiveGasTipInto` method that accepts a destination\nparameter to avoid memory allocations\n- Refactored the existing `EffectiveGasTip` method to use the new\nallocation-free implementation\n- Updated related methods (`EffectiveGasTipValue`, `EffectiveGasTipCmp`,\n`EffectiveGasTipIntCmp`) to use the allocation-free approach\n- Added tests and benchmarks to verify correctness and measure\nperformance improvements\n\n## Motivation\nIn high-transaction-volume environments, the `EffectiveGasTip` method is\ncalled frequently. Reducing memory allocations in this method decreases\ngarbage collection pressure and improves overall system performance.\n\n## Benchmark Results\n\nAs-Is\nBenchmarkEffectiveGasTip/Original-10 42089140 27.45 ns/op 8 B/op 1\nallocs/op\n\nTo-Be\nBenchmarkEffectiveGasTip/IntoMethod-10 72353263 16.73 ns/op 0 B/op 0\nallocs/op\n\n\n## Summary of Improvements\n- **Performance**: ~39% faster execution (27.45 ns/op \u2192 16.73 ns/op)\n- **Memory**: Eliminated all allocations (8 B/op \u2192 0 B/op)\n- **Allocation count**: Reduced from 1 to 0 allocations per operation\n\nThis optimization follows the same pattern successfully applied to other\nmethods in the codebase, maintaining API compatibility while improving\nperformance.\n\n## Safety & Compatibility\nThis optimization has no side effects or adverse impacts because:\n- It maintains functional equivalence as confirmed by comprehensive\ntests\n- It preserves API compatibility with existing callers\n- It follows clear memory ownership patterns with the destination\nparameter\n- It maintains thread safety by only modifying the caller-provided\ndestination parameter\n\nThis optimization follows the same pattern successfully applied to other\nmethods in the codebase, providing better performance without\ncompromising stability or correctness.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-05-09 05:52:40",
            "message": "all: create global hasher pool (#31769)\n\nThis PR creates a global hasher pool that can be used by all packages.\nIt also removes a bunch of the package local pools.\n\nIt also updates a few locations to use available hashers or the global\nhashing pool to reduce allocations all over the codebase.\nThis change should reduce global allocation count by ~1%\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-05-08 14:28:16",
            "message": "core: implement in-block prefetcher (#31557)\n\nThis pull request enhances the block prefetcher by executing transactions \nin parallel to warm the cache alongside the main block processor.\n\nUnlike the original prefetcher, which only executes the next block and\nis limited to chain syncing, the new implementation can be applied to any \nblock. This makes it useful not only during chain sync but also for regular \nblock insertion after the initial sync.\n\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-05-08 14:27:01",
            "message": "core, triedb/pathdb: bail out error if write state history fails (#31781)\n\nThis PR fixes an issue that could lead to data corruption.\n\nWriting the state history may fail due to insufficient disk space or\nother potential errors. With this change, the entire state insertion \nwill be aborted instead of silently ignoring the error.\n\nWithout this fix, state transitions would continue while the associated\nstate history is lost. After a restart, the resulting gap would be detected, \nmaking recovery impossible."
        },
        {
            "date": "2025-05-08 13:21:48",
            "message": "core/types: delete unused test variable (#31776)\n\nDelete the unused `Account.PrivateKey` variable."
        },
        {
            "date": "2025-05-08 13:15:36",
            "message": "cmd/geth, internal: fix flaky console tests (#31784)\n\nThis pull request bumps the timeout for flaky console tests on appveyor."
        },
        {
            "date": "2025-05-08 11:10:26",
            "message": "core, ethdb: introduce database sync function (#31703)\n\nThis pull request introduces a SyncKeyValue function to the\nethdb.KeyValueStore\ninterface, providing the ability to forcibly flush all previous writes\nto disk.\n\nThis functionality is critical for go-ethereum, which internally uses\ntwo independent\ndatabase engines: a key-value store (such as Pebble, LevelDB, or\nmemoryDB for\ntesting) and a flat-file\u2013based freezer. To ensure write-order\nconsistency between\nthese engines, the key-value store must be explicitly synced before\nwriting to the\nfreezer and vice versa.\n\nFixes \n- https://github.com/ethereum/go-ethereum/issues/31405\n- https://github.com/ethereum/go-ethereum/issues/29819"
        },
        {
            "date": "2025-05-08 06:57:17",
            "message": "internal/web3ext: remove the legacy backtraceAt method (#31783)\n\nThe function `BacktraceAt` has been removed in #28187 . But the API\nend-point `debug_backtraceAt` is not removed from the file\n`internal/web3ext/web3ext.go`."
        },
        {
            "date": "2025-05-07 13:34:52",
            "message": "p2p: add metrics for inbound connection errors (#31652)\n\nAdd metics detailing reasons we reject inbound connections for, and\nreasons these connections fail during the handshake."
        },
        {
            "date": "2025-05-07 10:53:45",
            "message": "beacon/blsync: fix requests encoding in engine_newPayloadV4 (#31775)\n\nThis fixes an issue where blocks containing CL requests triggered an\nerror in the engine API. The encoding of requests used base64 instead of\nhex."
        },
        {
            "date": "2025-05-06 04:40:03",
            "message": "cmd/utils:  don't allow network ID override if a preset network is specified (#31630)"
        },
        {
            "date": "2025-05-06 03:30:19",
            "message": "go.mod: update pebble to v1.1.5 to reduce clutter in go.sum (#31541)\n\n```\ngo get github.com/cockroachdb/pebble@v1.1.5\ngo mod tidy\n```\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-05-05 14:20:38",
            "message": "version: begin v1.15.12 release cycle"
        },
        {
            "date": "2025-05-05 14:19:58",
            "message": "version: release go-ethereum v1.15.11 stable"
        },
        {
            "date": "2025-05-05 14:15:59",
            "message": "eth/tracers: fix `standardTraceBlockToFile` (#31763)\n\nFixes methods debug_standardTraceBlockToFile\nand debug_standardTraceBadBlockToFile which were\noutputting empty files.\n\n---------\n\nCo-authored-by: maskpp <maskpp266@gmail.com>\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2025-05-05 12:43:47",
            "message": "rpc: add method name length limit (#31711)\n\nThis change adds a limit for RPC method names to prevent potential abuse\nwhere large method names could lead to large response sizes.\n\nThe limit is enforced in:\n- handleCall for regular RPC method calls\n- handleSubscribe for subscription method calls\n\nAdded tests in websocket_test.go to verify the length limit\nfunctionality for both regular method calls and subscriptions.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-05-05 10:42:19",
            "message": "internal/ethapi: fix tx.from in eth_simulateV1 (#31480)\n\nIssue statement: when user requests eth_simulateV1 to return full\ntransaction objects, these objects always had an empty `from` field. The\nreason is we lose the sender when translation the message into a\ntypes.Transaction which is then later on serialized.\n\nI did think of an alternative but opted to keep with this approach as it\nkeeps complexity at the edge. The alternative would be to pass down a\nsigner object to RPCMarshal* methods and define a custom signer which\nkeeps the senders in its state and doesn't attempt the signature\nrecovery."
        },
        {
            "date": "2025-05-05 06:01:53",
            "message": "triedb: add test suite for preimage store (#31574)"
        },
        {
            "date": "2025-05-05 02:09:58",
            "message": "logs(indexer)Clean up log format in head index progress messages (#31761)\n\nupdates the log entries in `core/filtermaps/indexer.go` to remove double\nquotes around keys like \"first block\" and \"last block\", changing them to\n`firstblock` and `lastblock`. This brings them in line with the general\nlogging style used across the codebase, where log keys are unquoted\nsingle words.\n\nFor example, the log:\n`  INFO [...] \"first block\"=..., \"last block\"=...`\n\nIs now rendered as:\n`  INFO [...] firstblock=..., lastblock=...`\n\nThis change improves readability and maintains consistency with logs\nsuch as:\n`  INFO [...] number=2 sealhash=... uncles=0 txs=0 ...`\n\nNo functional behavior is changed \u2014 this is purely a formatting cleanup\nfor better developer experience."
        },
        {
            "date": "2025-05-05 02:07:55",
            "message": "core: reduce load on txindexer from API (#31752)\n\nFixes https://github.com/ethereum/go-ethereum/issues/31732.\n\nThis logic was removed in the recent refactoring in the txindexer to\nhandle history cutoff (#31393). It was first introduced in this PR:\nhttps://github.com/ethereum/go-ethereum/pull/28908.\n\nI have tested it and it works as an alternative to #31745.\n\nThis PR packs 3 changes to the flow of fetching txs from the API:\n\n- It caches the indexer tail after each run is over to avoid hitting the\ndb all the time as was done originally in #28908.\n\n- Changes `backend.GetTransaction`. It doesn't return an error anymore\nwhen tx indexer is in progress. It shifts the responsibility to the\ncaller to check the progress. The reason is that in most cases we anyway\ncheck the txpool for the tx. If it was indeed a pending tx we can avoid\nthe indexer progress check.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-05-04 12:40:31",
            "message": "params: fix comment for `DefaultBlobSchedule` (#31760)\n\n`DefaultBlobSchedule` is actually used downstream to calculate blob fees\n(e.g.,\n[src](https://github.com/ethereum-optimism/optimism/blob/601a380e47853c2922ea1f8944cda05f0eac16f4/op-service/eth/blob.go#L301)),\nthis PR makes it explicit that these params are for `Ethereum prod`\ninstead of `test chains`."
        },
        {
            "date": "2025-05-04 02:16:33",
            "message": "core/txpool/legacypool: fix data race of pricedList access (#31758)"
        },
        {
            "date": "2025-05-03 16:40:24",
            "message": "core/filtermaps: fix log index initialization (#31750)\n\nThis PR fixes an initialization bug that in some cases caused the map\nrenderer to leave the last, partially rendered map as is and resume\nrendering from the next map. At initialization we check whether the\nexisting rendered maps are consistent with the current chain view and\nrevert them if necessary. Until now this happened through an ugly hacky\nsolution, a \"limited\" chain view that was supposed to trigger a rollback\nof some maps in the renderer logic if necessary. This whole setup worked\nunder assumptions that just weren't true any more. As a result it always\ntried to revert the last map but also it did not shorten the indexed\nrange, only set `headIndexed` to false which indicated to the renderer\nlogic that the last map is fully populated (which it wasn't).\nNow an explicit rollback of any unusable (reorged) maps happens at\nstartup, which also means that no hacky chain view is necessary, as soon\nas the new `FilterMaps` is returned, the indexed range and view are\nconsistent with each other.\n\nIn the first commit an extra check is also added to `writeFinishedMaps`\nso that if there is ever again a bug that would result in a gapped index\nthen it will not break the db with writing the incomplete data. Instead\nit will return an indexing error which causes the indexer to revert to\nunindexed mode and print an error log instantly. Hopefully this will not\never happen in the future, but in order to test this safeguard check I\nmanually triggered the bug with only the first commit enabled, which\ncaused an indexing error as expected. With the second commit added (the\nactual fix) the same operation succeeded without any issues.\n\nNote that the database version is also bumped in this PR in order to\nenforce a full reindexing as any existing database might be potentially\nbroken.\n\nFixes https://github.com/ethereum/go-ethereum/issues/31729"
        },
        {
            "date": "2025-05-02 15:50:22",
            "message": "core/filtermaps: fix log value search range (#31734)\n\nThis PR fixes the out-of-range block number logic of `getBlockLvPointer`\nwhich sometimes caused searches to fail if the head was updated in the\nwrong moment. This logic ensures that querying the pointer of a future\nblock returns the pointer after the last fully indexed block (instead of\nfailing) and therefore an async range update will not cause the search\nto fail. Earier this behaviour only worked when `headIndexed` was true\nand `headDelimiter` pointed to the end of the indexed range. Now it also\nworks for an unfinished index.\n\nThis logic is also moved from `FilterMaps.getBlockLvPointer` to\n`FilterMapsMatcherBackend.GetBlockLvPointer` because it is only required\nby the search anyways. `FilterMaps.getBlockLvPointer` now only returns a\npointer for existing blocks, consistently with how it is used in the\nindexer/renderer.\n\nNote that this unhandled case has been present in the code for a long\ntime but went unnoticed because either one of two previously fixed bugs\ndid prevent it from being triggered; the incorrectly positive\n`tempRange.headIndexed` (fixed in\nhttps://github.com/ethereum/go-ethereum/pull/31680), though caused other\nproblems, prevented this one from being triggered as with a positive\n`headIndexed` no database read was triggered in `getBlockLvPointer`.\nAlso, the unnecessary `indexLock` in `synced()` (fixed in\nhttps://github.com/ethereum/go-ethereum/pull/31708) usually did prevent\nthe search seeing the temp range and therefore avoided noticeable\nissues."
        },
        {
            "date": "2025-05-02 15:43:06",
            "message": "core, eth/gasestimator: introduce MaxGasUsed for estimation (#31735)\n\nThis PR improves gas estimation for data-heavy transactions which hit the floor data gas cost."
        },
        {
            "date": "2025-05-02 15:21:17",
            "message": "node: avoid double close resp.Body (#31710)\n\nThe functions `rpcRequest` and `batchRpcRequest` call `baseRpcRequest`.\nAnd `resp.Body` will be closed in the function `baseRpcRequest` later by\n`t.Cleanup`:\n\n```go\nfunc baseRpcRequest(t *testing.T, url, bodyStr string, extraHeaders ...string) *http.Response {\n        // ......\n\tt.Cleanup(func() { resp.Body.Close() })\n\treturn resp\n}\n```"
        },
        {
            "date": "2025-05-02 14:31:50",
            "message": "cmd/devp2p: test for non-existent block request (#31506)\n\nAdd tests for GetBlockHeaders that verify client does not disconnect when unlikely block numbers are requested, e.g. max uint64.\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-05-02 13:19:54",
            "message": "ethclient: fix retrieval of pending block (#31504)\n\nSince the block hash is not returned for pending blocks, ethclient cannot unmarshal into RPC block. This makes hash optional on rpc block and compute the hash locally for pending blocks to correctly key the tx sender cache.\n\n\nhttps://github.com/ethereum/go-ethereum/blob/a82303f4e3cedcebe31540a53dde4f24fc93da80/internal/ethapi/api.go#L500-L504\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-04-30 10:37:48",
            "message": "cmd/geth: fix compatErr in initGenesis (#31746)"
        },
        {
            "date": "2025-04-30 07:23:08",
            "message": "core/filtermaps: do not derive full receipts during rendering (#31716)\n\nThis changes the filtermaps to only pull up the raw receipts, not the\nderived receipts which saves a lot of allocations.\n\nDuring normal execution this will reduce the allocations of the whole\ngeth node by ~15%."
        },
        {
            "date": "2025-04-30 03:02:11",
            "message": "eth/fetcher: define BatchSize as a constant (#31742)"
        },
        {
            "date": "2025-04-30 03:00:17",
            "message": "cmd/geth: print crit log if chain config is not compatible (#31743)"
        },
        {
            "date": "2025-04-29 12:42:17",
            "message": "crypto/kzg4844: add ComputeCells functionality (#31378)\n\nFor PeerDAS, we need to compute cell proofs. Both ckzg and gokzg support\ncomputing these cell proofs.\nThis PR does the following:\n\n- Update the go-kzg library from \"github.com/crate-crypto/go-kzg-4844\"\nto \"github.com/crate-crypto/go-eth-kzg\" which will be the new upstream\nfor go-kzg moving forward\n- Update ckzg from v1.0.0 to v2.0.1 and switch to /v2\n- Updates the trusted setup to contain the g1 points both in lagrange\nand monomial form\n- Expose `ComputeCells` to compute the cell proofs"
        },
        {
            "date": "2025-04-29 11:21:18",
            "message": "beacon/engine: omit empty witness in payload response (#31739)\n\nFixes https://github.com/ethereum/go-ethereum/issues/31737"
        },
        {
            "date": "2025-04-29 06:29:56",
            "message": "core: apply overrides to mainnet chainconfig (#31733)\n\nThis PR applies the config overrides to the new config as well,\notherwise they will not be applied to defined configs, making\nshadowforks impossible.\n\nTo test:\n```\n>  ./build/bin/geth --override.prague 123 --dev --datadir /tmp/geth\nINFO [04-28|21:20:47.009]  - Prague:                      @123\n> ./build/bin/geth --override.prague 321 --dev --datadir /tmp/geth\nINFO [04-28|21:23:59.760]  - Prague:                      @321\n``"
        },
        {
            "date": "2025-04-28 06:37:02",
            "message": "trie: add edgecase for rangeproof correctness (#31667)\n\nThis PR adds checking for an edgecase which theoretically can happen in\nthe range-prover. Right now, we check that a key does not overwrite a\nprevious one by checking that the key is increasing. However, if keys\nare of different lengths, it is possible to create a key which is\nincreasing _and_ overwrites the previous key. Example: `0xaabbcc`\nfollowed by `0xaabbccdd`.\n\nThis can not happen in go-ethereum, which always uses fixed-size paths\nfor accounts and storage slot paths in the trie, but it might happen if\nthe range prover is used without guaranteed fixed-size keys.\n\nThis PR also adds some testcases for the errors that are expected."
        },
        {
            "date": "2025-04-28 06:26:27",
            "message": "core/txpool/legacypool: refactor truncatePending (#31715)\n\nTruncatePending shows up bright red on our nodes, because it computes\nthe length of a map multiple times.\nI don't know why this is so expensive, but around 20% of our time is\nspent on this, which is super weird.\n\n```\n//PR: BenchmarkTruncatePending-24    \t   17498\t     69397 ns/op\t   32872 B/op\t       3 allocs/op\n//Master: BenchmarkTruncatePending-24    \t    9960\t    123954 ns/op\t   32872 B/op\t       3 allocs/op\n```\n\n```\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkTruncatePending-24     123954        69397         -44.01%\n\nbenchmark                       old allocs     new allocs     delta\nBenchmarkTruncatePending-24     3              3              +0.00%\n\nbenchmark                       old bytes     new bytes     delta\nBenchmarkTruncatePending-24     32872         32872         +0.00%\n```\nThis simple PR is a 44% improvement over the old state\n\n\n``` \nOUTINE ======================== github.com/ethereum/go-ethereum/core/txpool/legacypool.(*LegacyPool).truncatePending in github.com/ethereum/go-ethereum/core/txpool/legacypool/legacypool.go\n     1.96s     18.02s (flat, cum) 19.57% of Total\n         .          .   1495:func (pool *LegacyPool) truncatePending() {\n         .          .   1496:\tpending := uint64(0)\n      60ms      2.99s   1497:\tfor _, list := range pool.pending {\n     250ms      5.48s   1498:\t\tpending += uint64(list.Len())\n         .          .   1499:\t}\n         .          .   1500:\tif pending <= pool.config.GlobalSlots {\n         .          .   1501:\t\treturn\n         .          .   1502:\t}\n         .          .   1503:\n         .          .   1504:\tpendingBeforeCap := pending\n         .          .   1505:\t// Assemble a spam order to penalize large transactors first\n         .      510ms   1506:\tspammers := prque.New[int64, common.Address](nil)\n     140ms      2.50s   1507:\tfor addr, list := range pool.pending {\n         .          .   1508:\t\t// Only evict transactions from high rollers\n      50ms      5.08s   1509:\t\tif uint64(list.Len()) > pool.config.AccountSlots {\n         .          .   1510:\t\t\tspammers.Push(addr, int64(list.Len()))\n         .          .   1511:\t\t}\n         .          .   1512:\t}\n         .          .   1513:\t// Gradually drop transactions from offenders\n         .          .   1514:\toffenders := []common.Address{}\n```\n\n```go\n// Benchmarks the speed of batch transaction insertion in case of multiple accounts.\nfunc BenchmarkTruncatePending(b *testing.B) {\n\t// Generate a batch of transactions to enqueue into the pool\n\tpool, _ := setupPool()\n\tdefer pool.Close()\n\tb.ReportAllocs()\n\tbatches := make(types.Transactions, 4096+1024+1)\n\tfor i := range len(batches) {\n\t\tkey, _ := crypto.GenerateKey()\n\t\taccount := crypto.PubkeyToAddress(key.PublicKey)\n\t\tpool.currentState.AddBalance(account, uint256.NewInt(1000000), tracing.BalanceChangeUnspecified)\n\t\ttx := transaction(uint64(0), 100000, key)\n\t\tbatches[i] = tx\n\t}\n\tfor _, tx := range batches {\n\t\tpool.addRemotesSync([]*types.Transaction{tx})\n\t}\n\tb.ResetTimer()\n\t// benchmark truncating the pending\n\tfor range b.N {\n\t\tpool.truncatePending()\n\t}\n}\n```"
        },
        {
            "date": "2025-04-25 11:27:24",
            "message": "version: begin v1.15.11 release cycle"
        },
        {
            "date": "2025-04-25 10:44:25",
            "message": "version: release go-ethereum v1.15.10 stable"
        },
        {
            "date": "2025-04-25 09:57:38",
            "message": "core/filtermaps: fix deadlock in filtermap callback (#31708)\n\nThis PR fixes a deadlock situation is deleteTailEpoch that might arise\nwhen\nrange delete is running in iterator based fallback mode (either using\nleveldb\ndatabase or the hashdb state storage scheme). \n\nIn this case a stopCb callback is called periodically that does check\nevents,\nincluding matcher sync requests, in which case it tries to acquire\nindexLock\nfor read access, while deleteTailEpoch already held it for write access.\n\nThis pull request removes the indexLock acquiring in\n`FilterMapsMatcherBackend.synced`\nas this function is only called in the indexLoop.\n\nFixes https://github.com/ethereum/go-ethereum/issues/31700"
        },
        {
            "date": "2025-04-24 19:40:12",
            "message": "beacon/params: add mainnet electra config (#31706)\n\nThis PR adds the electra beacon chain configuration for mainnet."
        },
        {
            "date": "2025-04-24 16:19:10",
            "message": "miner: increase default gas limit to 36M (#31705)"
        },
        {
            "date": "2025-04-23 19:01:03",
            "message": "ethclient: allow passing AuthorizationList to calls (#31198)\n\nThis PR adds the `AuthorizationList` field to the `CallMsg` interface to support `eth_call`\nand `eth_estimateGas` of set-code transactions.\n\n---------\n\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2025-04-22 04:57:17",
            "message": "internal/debug: add debug_setMemoryLimit (#31441)"
        },
        {
            "date": "2025-04-21 12:57:25",
            "message": "version: begin v1.15.10 release cycle"
        },
        {
            "date": "2025-04-21 12:56:16",
            "message": "version: release go-ethereum v1.15.9 stable"
        },
        {
            "date": "2025-04-21 07:27:24",
            "message": "core/filtermaps: clone cached slices, fix tempRange (#31680)\n\nThis PR ensures that caching a slice or a slice of slices will never\naffect the original version by always cloning a slice fetched from cache\nif it is not used in a guaranteed read only way."
        },
        {
            "date": "2025-04-20 10:54:40",
            "message": "beacon/params, core/filtermaps: update checkpoints (#31674)\n\nThis PR updates checkpoints for blsync and filtermaps."
        },
        {
            "date": "2025-04-20 07:48:49",
            "message": "eth/filters, core/filtermaps: safe chain view update (#31590)\n\nThis PR changes the chain view update mechanism of the log filter.\nPreviously the head updates were all wired through the indexer, even in\nunindexed mode. This was both a bit weird and also unsafe as the\nindexer's chain view was updates asynchronously with some delay, making\nsome log related tests flaky. Also, the reorg safety of the indexed\nsearch was integrated with unindexed search in a weird way, relying on\n`syncRange.ValidBlocks` in the unindexed case too, with a special\ncondition added to only consider the head of the valid range but not the\ntail in the unindexed case.\n\nIn this PR the current chain view is directly accessible through the\nfilter backend and unindexed search is also chain view based, making it\ninherently safe. The matcher sync mechanism is now only used for indexed\nsearch as originally intended, removing a few ugly special conditions.\n\nThe PR is currently based on top of\nhttps://github.com/ethereum/go-ethereum/pull/31642\nTogether they fix https://github.com/ethereum/go-ethereum/issues/31518\nand replace https://github.com/ethereum/go-ethereum/pull/31542\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-04-19 14:02:31",
            "message": "eth/gasprice: fix eth_feeHistory blobGasUsedRatio divide zero (#31663)\n\nThe API `eth_feeHistory` returns\n`{\"jsonrpc\":\"2.0\",\"id\":1,\"error\":{\"code\":-32603,\"message\":\"json:\nunsupported value: NaN\"}}`, when we query `eth_feeHistory` with a old\nblock that without a blob, or when the field\n`config.blobSchedule.cancun.max` in genesis.config is 0 (that happens\nfor some projects fork geth but they don't have blob).\n\nSo here we specially handle the case when maxBlobGas == 0 to prevent\nthis issue from happening."
        },
        {
            "date": "2025-04-19 11:42:54",
            "message": "core: fail execution if system call fails to execute (#31639)\n\nsee: https://github.com/ethereum/pm/issues/1450#issuecomment-2800911584"
        },
        {
            "date": "2025-04-18 12:00:11",
            "message": "core/filtermaps: make ChainView thread safe (#31671)\n\nThis PR makes `filtermaps.ChainView` thread safe because it is used\nconcurrently both by the indexer and multiple matcher threads. Even\nthough it represents an immutable view of the chain, adding a mutex lock\nto the `blockHash` function is necessary because it does so by extending\nits list of non-canonical hashes if the underlying blockchain is\nchanged.\n\nThe unsafe concurrency did cause a panic once after running the unit\ntests for several hours and it could also happen during live operation."
        },
        {
            "date": "2025-04-18 11:39:11",
            "message": "core/filtermaps: only use common ancestor snapshots (#31668)\n\nThis PR makes the conditions for using a map rendering snapshot stricter\nso that whenever a reorg happens, only a snapshot of a common ancestor\nblock can be used. The issue fixed in\nhttps://github.com/ethereum/go-ethereum/pull/31642 originated from using\na snapshot that wasn't a common ancestor. For example in the following\nreorg scenario: `A->B`, then `A->B2`, then `A->B2->C2`, then `A->B->C`\nthe last reorg triggered a render from snapshot `B` saved earlier. Now\nthis is possible under certain conditions but extra care is needed, for\nexample if block `B` crosses a map boundary then it should not be\nallowed. With the latest fix the checks are sufficient but I realized I\nwould just feel safer if we disallowed this rare and risky scenario\naltogether and just render from snapshot `A` after the last reorg in the\nexample above. The performance difference if a few milliseconds and it\noccurs rarely (about once a day on Holesky, probably much more rare on\nMainnet).\nNote that this PR only makes the snapshot conditions stricter and\n`TestIndexerRandomRange` does check that snapshots are still used\nwhenever it's obviously possible (adding blocks after the current head\nwithout a reorg) so this change can be considered safe. Also I am\nrunning the unit tests and the fuzzer and everything seems to be fine."
        },
        {
            "date": "2025-04-17 19:27:48",
            "message": "eth: add tx to locals only if it has a chance of acceptance (#31618)\n\nThis pull request improves error handling for local transaction submissions.\n\nSpecifically, if a transaction fails with a temporary error but might be\naccepted later, the error will not be returned to the user; instead, the\ntransaction will be tracked locally for resubmission. \n\nHowever, if the transaction fails with a permanent error (e.g., invalid\ntransaction or insufficient balance), the error will be propagated to the user.\n\nThese errors returned in the legacyPool are regarded as temporary failure:\n\n- `ErrOutOfOrderTxFromDelegated`\n- `txpool.ErrInflightTxLimitReached`\n- `ErrAuthorityReserved`\n- `txpool.ErrUnderpriced`\n- `ErrTxPoolOverflow`\n- `ErrFutureReplacePending`\n\nNotably, InsufficientBalance is also treated as a permanent error, as\nit\u2019s highly unlikely that users will transfer funds into the sender account\nafter submitting the transaction. Otherwise, users may be confused\u2014seeing\ntheir transaction submitted but unaware that the sender lacks sufficient funds\u2014and\ncontinue waiting for it to be included.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-04-17 12:23:31",
            "message": "eth/catalyst: sanitize simulated beacon period to avoid overflowing time.Duration (#31407)\n\ncloses #31401\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\nCo-authored-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-04-17 08:46:47",
            "message": "core,params: add fork readiness indicator in logs (#31340)\n\ncloses #31310 \n\nThis has been requested a few times in the past and I think it is a nice\nquality-of-life improvement for users. At a predetermined interval,\nthere will now be a \"Fork ready\" log when a future fork is scheduled,\nbut not yet active.\n\nIt can only possibly print after block import, which kinda avoids the\nscenario where the client isn't progressing or is syncing and the user\nthinks it's \"ready\" because it sees a ready log.\n\nNew output:\n\n```console\nINFO [03-08|21:32:57.472] Imported new potential chain segment     number=7 hash=aa24ee..f09e62 blocks=1 txs=0 mgas=0.000 elapsed=\"874.916\u00b5s\" mgasps=0.000 snapdiffs=973.00B triediffs=7.05KiB triedirty=0.00B\nINFO [03-08|21:32:57.473] Ready for fork activation                fork=Prague date=\"18 Mar 25 19:29 CET\" remaining=237h57m0s timestamp=1,742,322,597\nINFO [03-08|21:32:57.475] Chain head was updated                   number=7 hash=aa24ee..f09e62 root=19b0de..8d32f2 elapsed=\"129.125\u00b5s\"\n```\n\nEasiest way to verify this behavior is to apply this patch and run `geth\n--dev --dev.period=12`\n\n```patch\ndiff --git a/params/config.go b/params/config.go\nindex 9c7719d901..030c4f80e7 100644\n--- a/params/config.go\n+++ b/params/config.go\n@@ -174,7 +174,7 @@ var (\n                ShanghaiTime:            newUint64(0),\n                CancunTime:              newUint64(0),\n                TerminalTotalDifficulty: big.NewInt(0),\n-               PragueTime:              newUint64(0),\n+               PragueTime:              newUint64(uint64(time.Now().Add(time.Hour * 300).Unix())),\n                BlobScheduleConfig: &BlobScheduleConfig{\n                        Cancun: DefaultCancunBlobConfig,\n                        Prague: DefaultPragueBlobConfig,\n```"
        },
        {
            "date": "2025-04-17 08:46:00",
            "message": "params: add prague timestamp for mainnet (#31535)\n\nhttps://eips.ethereum.org/EIPS/eip-7600#activation\n\nTimestamp: `1746612311`\nFork id: `0xc376cf8b`"
        },
        {
            "date": "2025-04-17 08:33:59",
            "message": "eth: fix transaction sender cache miss before broadcast (#31657)\n\nBroadcastTransactions needs the Sender address to route message flows\nfrom the same Sender address consistently to the same random subset of\npeers. It however spent considerable time calculating the Sender\naddresses, even if the Sender address was already calculated and cached\nin other parts of the code.\n\nSince we only need the mapping, we can use any signer, and the one that\nhad already been used is a better choice because of cache reuse."
        },
        {
            "date": "2025-04-17 08:32:40",
            "message": "core: fix sync reset in pruned nodes (#31638)\n\nThis is an attempt at fixing #31601. I think what happens is the startup\nlogic will try to get the full block body (it's `bc.loadLastState`) and\nfail because genesis block has been pruned from the freezer. This will\ncause it to keep repeating the reset logic, causing a deadlock.\n\nThis can happen when due to an unsuccessful sync we don't have the state\nfor the head (or any other state) fully, and try to redo the snap sync.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-04-17 02:39:21",
            "message": "core: fix history pruning initialization for empty DB (#31656)\n\nThis fixes an issue where running geth with `--history.chain postmerge`\nwould not work on an empty database.\n\n```\nERROR[04-16|23:11:12.913] Chain history database is pruned to unknown block tail=0\nFatal: Failed to register the Ethereum service: unexpected database tail\n```"
        },
        {
            "date": "2025-04-17 02:36:53",
            "message": "core/txpool/legacypool: fix data race of txlookup access (#31641)"
        },
        {
            "date": "2025-04-16 21:46:38",
            "message": "core/state: fix log format (#31610)\n\nLog `key` in hexadecimal string format."
        },
        {
            "date": "2025-04-16 21:30:13",
            "message": "core/filtermaps: fix map renderer reorg issue (#31642)\n\nThis PR fixes a bug in the map renderer that sometimes used an obsolete\nblock log value pointer to initialize the iterator for rendering from a\nsnapshot. This bug was triggered by chain reorgs and sometimes caused\nindexing errors and invalid search results. A few other conditions are\nalso made safer that were not reported to cause issues yet but could\npotentially be unsafe in some corner cases. A new unit test is also\nadded that reproduced the bug but passes with the new fixes.\n\nFixes https://github.com/ethereum/go-ethereum/issues/31593\nMight also fix https://github.com/ethereum/go-ethereum/issues/31589\nthough this issue has not been reproduced yet, but it appears to be\nrelated to a log index database corruption around a specific block,\nsimilarly to the other issue.\n\nNote that running this branch resets and regenerates the log index\ndatabase. For this purpose a `Version` field has been added to\n`rawdb.FilterMapsRange` which will also make this easier in the future\nif a breaking database change is needed or the existing one is\nconsidered potentially broken due to a bug, like in this case."
        },
        {
            "date": "2025-04-16 07:50:05",
            "message": "cmd/geth: remove the unused bloomfilter.size flag (#31646)"
        },
        {
            "date": "2025-04-15 18:40:30",
            "message": "p2p: fix dial metrics not picking up the right error (#31621)\n\nOur metrics related to dial errors were off. The original error was not\nwrapped, so the caller function had no chance of picking it up.\nTherefore the most common error, which is \"TooManyPeers\", was not\ncorrectly counted.\n\nThe metrics were originally introduced in\nhttps://github.com/ethereum/go-ethereum/pull/27621\n\nI was thinking of various possible solutions.\n- the one proposed here wraps both the new error and the origial error.\nIt is not a pattern we use in other parts of the code, but works. This\nis maybe the smallest possible change.\n- as an alternate, I could write a proper `errProtoHandshakeError` with\nit's own wrapped error\n- finally, I'm not even sure we need `errProtoHandshakeError`, maybe we\ncould just pass up the original error.\n\n---------\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-04-15 12:34:34",
            "message": "all: remove martin from CODEOWNERS (#31637)\n\nThank you, @holiman, for being an integral part of the Go-Ethereum \nand for your invaluable contributions over the years.\n\nThis will always be your home and you're welcome back anytime!"
        },
        {
            "date": "2025-04-15 12:32:46",
            "message": "core: initialize history pruning in BlockChain (#31636)\n\nI added the history mode configuration in eth/ethconfig initially, since\nit seemed like the logical place. But it turns out we need access to the\nintended pruning setting at a deeper level, and it actually needs to be\nintegrated with the blockchain startup procedure.\n\nWith this change applied, if a node previously had its history pruned,\nand is subsequently restarted **without** the `--history.chain\npostmerge` flag, the `BlockChain` initialization code will now verify\nthe freezer tail against the known pruning point of the predefined\nnetwork and will restore pruning status. Note that this logic is quite\nrestrictive, we allow non-zero tail only for known networks, and only\nfor the specific pruning point that is defined."
        },
        {
            "date": "2025-04-14 10:45:27",
            "message": "eth: add logic to drop peers randomly when saturated (#31476)\n\nAs of now, Geth disconnects peers only on protocol error or timeout,\nmeaning once connection slots are filled, the peerset is largely fixed.\n\nAs mentioned in https://github.com/ethereum/go-ethereum/issues/31321,\nGeth should occasionally disconnect peers to ensure some churn.\nWhat/when to disconnect could depend on:\n- the state of geth (e.g. sync or not)\n- current number of peers\n- peer level metrics\n\nThis PR adds a very slow churn using a random drop.\n\n---------\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-04-14 08:13:45",
            "message": "p2p: better dial/serve success metrics (#31629)\n\nOur previous success metrics gave success even if a peer disconnected\nright after connection. These metrics only count peers that stayed\nconnected for at least 1 min. The 1 min limit is an arbitrary choice. We do\nnot use this for decision logic, only statistics."
        },
        {
            "date": "2025-04-11 09:31:56",
            "message": "version: begin v1.15.9 release cycle"
        },
        {
            "date": "2025-04-11 09:31:16",
            "message": "version: release go-ethereum v1.15.8 stable"
        },
        {
            "date": "2025-04-11 09:28:14",
            "message": "build: upgrade -dlgo version to Go 1.24.2 (#31538)"
        },
        {
            "date": "2025-04-10 21:54:44",
            "message": "tests/testdata: revert to v17.0\n\nThe submodule was accidentally updated to another commit by f64aa6eaf7."
        },
        {
            "date": "2025-04-10 16:21:32",
            "message": "internal/testlog: fix log output from sub-loggers (#31539)\n\nWhen we instantiate a sub-logger via\n`go-ethereum/internal/testlog/logger.With`, we copy the reference to the\n`bufHandler` from the parent logger. However, internally,\n`go-ethereum/internal/testlog/logger.With` calls `log/slog/Logger.With`\nwhich creates a new handler instance (via\n`internal/bufHandler.WithAttrs`).\n\nThis PR modifies sub-logger instantiation to use the newly-instantiated\nhandler, instead of copying the reference from the parent instance. The\ntype cast from `slog.Handler` to `*bufHandler` in\n`internal/testlog/Logger.With` is safe here because a\n`internal/testlog/Logger` can only be instantiated with a `*bufHandler`\nas the underlying handler type.\n\nNote, that I've also removed a pre-existing method that broke the above\nassumption. However, this method is not used in our codebase.\n\nI'm not sure if the assumption holds for forks of geth (e.g. optimism\nhas modified the testlogger somewhat allowing test loggers to accept\narbitrary handler types), but it seems okay to break API compatibility\ngiven that this is in the `internal` package.\n\ncloses https://github.com/ethereum/go-ethereum/issues/31533"
        },
        {
            "date": "2025-04-10 11:49:54",
            "message": "eth/catalyst:  in tests, manually sync txpool after initial chain insertion to prevent race between txpool head reset and promotion of txs that will be subsequently added (#31595)\n\nbefore this changes, this will result in numerous test failures:\n```\n> go test -run=Eth2AssembleBlock -c\n> stress ./catalyst.test\n```\n\nThe reason is that after creating/inserting the test chain, there is a\nrace between the txpool head reset and the promotion of txs added from\ntests.\n\nEnsuring that the txpool state is up to date with the head of the chain\nbefore proceeding fixes these flaky tests."
        },
        {
            "date": "2025-04-10 10:46:54",
            "message": "accounts/usbwallet: full 32bit chainId support for Trezor (#17439)\n\nThis fix allows Trezor to support full 32bit chainId in geth, with the\nnext version of firmware.\n\nFor `chainId > 2147483630` case, Trezor returns signature bit only.\n- Trezor returns only signature parity for `chainId > 2147483630` case.\n- for `chainId == 2147483630` case, Trezor returns `MAX_UINT32` or `0`,\nbut it doesn't matter.\n  (`2147483630 * 2 + 35` = `4294967295`(`MAX_UINT32`))\n\nchainId | returned signature_v | compatible issue\n---------|------------------------|--------------------\n0 < chainId <= 255 | chainId * 2 + 35 + v | no issue (firmware `1.6.2`\nfor Trezor one)\n255 < chainId <= 2147483630 | chainId * 2 + 35 + v | ***fixed.***\n*firmware `1.6.3`*\nchainId > 2147483630 | v | *firmware `1.6.3`*\n\nPlease see also: full 32bit chainId support for Trezor\n- Trezor one: https://github.com/trezor/trezor-mcu/pull/399 ***merged***\n- Trezor model T: https://github.com/trezor/trezor-core/pull/311\n***merged***\n\n---------\n\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\nCo-authored-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>"
        },
        {
            "date": "2025-04-10 09:26:35",
            "message": "eth/fetcher: Fix flaky TestTransactionForgotten test using mock clock (#31468)\n\nFixes #31169\n\nThe TestTransactionForgotten test was flaky due to real time\ndependencies. This PR:\n\n- Replaces real time with mock clock for deterministic timing control\n- Adds precise state checks at timeout boundaries\n- Verifies underpriced cache states and cleanup\n- Improves test reliability by controlling transaction timestamps\n- Adds checks for transaction re-enqueueing behavior\n\nThe changes ensure consistent test behavior without timing-related\nflakiness.\n\n---------\n\nCo-authored-by: Zsolt Felfoldi <zsfelfoldi@gmail.com>"
        },
        {
            "date": "2025-04-10 01:11:24",
            "message": "core/txpool: allow tx and authority regardless of admission order (#31373)\n\nThis PR proposes a change to the authorizations' validation introduced\nin commit cdb66c8. These changes make the expected behavior independent\nof the order of admission of authorizations, improving the\npredictability of the resulting state and the usability of the system\nwith it.\n\nThe current implementation behavior is dependent on the transaction\nsubmission order: This issue is related to authorities and the sender of\na transaction, and can be reproduced respecting the normal nonce rules.\n\nThe issue can be reproduced by the two following cases:\n**First case**\n- Given an empty pool.\n- Submit transaction `{ from: B, auths [ A ] }`: is accepted.\n- Submit transaction `{ from: A }`: Is accepted: it becomes the one\nin-flight transaction allowed.\n\n**Second case**\n- Given an empty pool.\n- Submit transaction `{ from: A }`:  is accepted\n- Submit transaction `{ from: B, auths [ A ] }`: is rejected since there\nis already a queued/pending transaction from A.\n\nThe expected behavior is that both sequences of events would lead to the\nsame sets of accepted and rejected transactions.\n\n**Proposed changes** \nThe queued/pending transactions issued from any authority of the\ntransaction being validated have to be counted, allowing one transaction\nfrom accounts submitting an authorization.\n\n- Notice that the expected behavior was explicitly forbidden in the case\n\"reject-delegation-from-pending-account\", I believe that this behavior\nconflicts to the definition of the limitation, and it is removed in this\nPR. The expected behavior is tested in\n\"accept-authorization-from-sender-of-one-inflight-tx\".\n- Replacement tests have been separated to improve readability of the\nacceptance test.\n- The test \"allow-more-than-one-tx-from-replaced-authority\" has been\nextended with one extra transaction, since the system would always have\naccepted one transaction (but not two).\n- The test \"accept-one-inflight-tx-of-delegated-account\" is extended to\nclean-up state, avoiding leaking the delegation used into the other\ntests. Additionally, replacement check is removed to be tested in its\nown test case.\n\n**Expected behavior** \nThe expected behavior of the authorizations' validation shall be as\nfollows:\n\n![image](https://github.com/user-attachments/assets/dbde7a1f-9679-4691-94eb-c197a0cbb823)\nNotice that replacement shall be allowed, and behavior shall remain\ncoherent with the table, according to the replaced transaction.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-04-09 20:19:28",
            "message": "core/txpool: add notice to` Clear` that is not meant for production code (#31567)\n\nThe `Sync(..)` function explicitly says not to rely on in production\ncode, but it is used in `Clear(..)` so should add a similar mention."
        },
        {
            "date": "2025-04-09 09:28:29",
            "message": "p2p/nat: fix UPnP port reset (#31566)\n\nMake UPnP more robust\n\n- Once a random port was mapped, we try to stick to it even if a UPnP\nrefresh fails. Previously we were immediately moving back to try the\ndefault port, leading to frequent ENR changes.\n\n- We were deleting port mappings before refresh as a possible\nworkaround. This created issues in some UPnP servers. The UPnP (and PMP)\nspecification is explicit about the refresh requirements, and delete is\nclearly not needed (see\nhttps://github.com/ethereum/go-ethereum/pull/30265#issuecomment-2766987859).\nFrom now on we only delete when closing.\n\n- We were trying to add port mappings only once, and then moved on to\nrandom ports. Now we insist a bit more, so that a simple failed request\nwon't lead to ENR changes.\n\nFixes https://github.com/ethereum/go-ethereum/issues/31418\n\n---------\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-04-08 17:57:45",
            "message": "core/vm: optimize push2 opcode (#31267)\n\nDuring my benchmarks on Holesky, around 10% of all CPU time was spent in\nPUSH2\n```\nROUTINE ======================== github.com/ethereum/go-ethereum/core/vm.newFrontierInstructionSet.makePush.func1 in github.com/ethereum/go-ethereum/core/vm/instructions.go\n    16.38s     20.35s (flat, cum) 10.31% of Total\n     740ms      740ms    976:\treturn func(pc *uint64, interpreter *EVMInterpreter, scope *ScopeContext) ([]byte, error) {\n         .          .    977:\t\tvar (\n      40ms       40ms    978:\t\t\tcodeLen = len(scope.Contract.Code)\n     970ms      970ms    979:\t\t\tstart   = min(codeLen, int(*pc+1))\n     200ms      200ms    980:\t\t\tend     = min(codeLen, start+pushByteSize)\n         .          .    981:\t\t)\n     670ms      2.39s    982:\t\ta := new(uint256.Int).SetBytes(scope.Contract.Code[start:end])\n         .          .    983:\n         .          .    984:\t\t// Missing bytes: pushByteSize - len(pushData)\n     410ms      410ms    985:\t\tif missing := pushByteSize - (end - start); missing > 0 {\n         .          .    986:\t\t\ta.Lsh(a, uint(8*missing))\n         .          .    987:\t\t}\n    12.69s     14.94s    988:\t\tscope.Stack.push2(*a)\n      10ms       10ms    989:\t\t*pc += size\n     650ms      650ms    990:\t\treturn nil, nil\n         .          .    991:\t}\n         .          .    992:}\n```\n\nWhich is quite crazy. We have a handwritten encoder for PUSH1 already,\nthis PR adds one for PUSH2.\n\nPUSH2 is the second most used opcode as shown here:\nhttps://gist.github.com/shemnon/fb9b292a103abb02d98d64df6fbd35c8 since\nit is used by solidity quite significantly. Its used ~20 times as much\nas PUSH20 and PUSH32.\n\n# Benchmarks\n\n```\nBenchmarkPush/makePush-14         \t94196547\t        12.27 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkPush/push-14             \t429976924\t         2.829 ns/op\t       0 B/op\t       0 allocs/op\n``` \n\n---------\n\nCo-authored-by: jwasinger <j-wasinger@hotmail.com>"
        },
        {
            "date": "2025-04-08 13:46:27",
            "message": "core/txpool: add 7702 protection to blobpool (#31526)\n\nThis pull request introduces two constraints in the blobPool:\n\n(a) If the sender has a pending authorization or delegation, only one\nin-flight\nexecutable transaction can be cached.\n(b) If the authority address in a SetCode transaction is already\nreserved by\nthe blobPool, the transaction will be rejected.\n\nThese constraints mitigate an attack where an attacker spams the pool\nwith\nnumerous blob transactions, evicts other transactions, and then cancels\nall\npending blob transactions by draining the sender\u2019s funds if they have a\ndelegation.\n\nNote, because there is no exclusive lock held between different subpools\nwhen processing transactions, it's totally possible the SetCode\ntransaction\nand blob transactions with conflict sender and authorities are accepted\nsimultaneously. I think it's acceptable as it's very hard to be\nexploited.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-04-08 12:44:13",
            "message": "eth/remotedb: improve error handling (#31331)\n\nThis PR improves error handling in the remotedb package by fixing two\nissues:\n\n1. In the `Has` method, we now properly propagate errors instead of\nsilently returning false. This makes the behavior more predictable and\nhelps clients better understand when there are connection issues.\n\n2. In the `New` constructor, we add a nil check for the client parameter\nto prevent potential panics. This follows Go best practices for\nconstructor functions.\n\nThese changes make the code more robust and follow Go's error handling\nidioms without requiring any changes to other parts of the codebase.\n\nChanges:\n- Modified `Has` method to return errors instead of silently returning\nfalse\n- Added nil check in `New` constructor\n- Fixed field name in constructor to match struct definition"
        },
        {
            "date": "2025-04-07 05:16:26",
            "message": "cmd/geth: set trie,gc and other cache flags for import chain (#31577)\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-04-04 12:07:46",
            "message": "internal/era: random access to header and receipts (#31544)\n\nCo-authored-by: lightclient <lightclient@protonmail.com>\n\nAdd GetHeaderByNumber and GetReceiptsByNumber to allow more efficient API request filling from Era files."
        },
        {
            "date": "2025-04-04 08:56:55",
            "message": "p2p/nat: remove forceful port mapping in upnp (#30265)\n\nHere we are modifying the port mapping logic so that existing port\nmappings will only be removed when they were previously created by geth.\n\nThe AddAnyPortMapping functionality has been adapted to work consistently\nbetween the IGDv1 and IGDv2 backends."
        },
        {
            "date": "2025-04-03 14:04:11",
            "message": "beacon/blsync: add checkpoint import/export file feature (#31469)\n\nThis PR adds a new `--beacon.checkpoint.file` config flag to geth and\nblsync which specifies a checkpoint import/export file. If a file with\nan existing checkpoint is specified, it is used for initialization\ninstead of the hardcoded one (except when `--beacon.checkpoint` is also\nspecified simultaneously). Whenever the client encounters a new valid\nfinality update with a suitable finalized beacon block root at an epoch\nboundary, it saves the block root in hex format to the checkpoint file."
        },
        {
            "date": "2025-04-03 14:03:03",
            "message": "core, eth, node: use sync write option in pebble (#31519)\n\nFixes #31499"
        },
        {
            "date": "2025-04-03 13:58:37",
            "message": "cmd/devp2p/internal/v5test: log test descriptions (#31551)\n\nThis adds the test description text to the output, instead of keeping it\nas a Go comment. Logs are visible in the hive UI where these tests run,\nwhile Go comments are not."
        },
        {
            "date": "2025-04-03 13:44:07",
            "message": "eth: fix calls to HistoryPruningCutoff (#31552)\n\nThese were caused by crossed merges of recent PRs #31414 and #31361"
        },
        {
            "date": "2025-04-03 13:18:35",
            "message": "build: upgrade to golangci-lint v2 (#31530)"
        },
        {
            "date": "2025-04-03 13:16:35",
            "message": "core, eth/downloader: implement pruning mode sync (#31414)\n\nThis pull request introduces new sync logic for pruning mode. The downloader will now skip\ninsertion of block bodies and receipts before the configured history cutoff point.\n\nOriginally, in snap sync, the header chain and other components (bodies and receipts) were\ninserted separately. However, in Proof-of-Stake, this separation is unnecessary since the\nsync target is already verified by the CL.\n\nTo simplify the process, this pull request modifies `InsertReceiptChain` to insert headers\nalong with block bodies and receipts together. Besides, `InsertReceiptChain` doesn't have\nthe notion of reorg, as the common ancestor is always be found before the sync and extra\nside chain is truncated at the beginning if they fall in the ancient store. The stale\ncanonical chain flags will always be rewritten by the new chain. Explicit reorg logic is\nno longer required in `InsertReceiptChain`."
        },
        {
            "date": "2025-04-03 04:35:52",
            "message": "eth/protocols/eth: improve over/underflow handling in  `GetBlockHeaders` (#31522)"
        },
        {
            "date": "2025-04-02 19:52:40",
            "message": "all: fix typos in docs and comments (#31548)\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-04-02 17:19:25",
            "message": "README: fixup typos (#31540)\n\nFixes a few typos in readme."
        },
        {
            "date": "2025-04-02 12:56:21",
            "message": "p2p/discover: pass node instead of node ID to TALKREQ handler (#31075)\n\nThis is for the implementation of Portal Network in the Shisui client.\nTheir handler needs access to the node object in order to send further\ncalls to the requesting node. This is a breaking API change but it\nshould be fine, since there are basically no known users of TALKREQ\noutside of Portal network.\n\n---------\n\nSigned-off-by: thinkAfCod <q315xia@163.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-04-02 11:47:44",
            "message": "p2p/discover: repeat exact encoding when resending WHOAREYOU packet (#31543)\n\nWhen resending the WHOAREYOU packet, a new nonce and random IV should not\nbe generated. The sent packet needs to match the previously-sent one exactly\nin order to make the handshake retry work.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-04-02 07:47:56",
            "message": "core/txpool: add GetMetadata to transaction pool (#31433)\n\nThis is an alternative to #31309\n\nWith eth/68, transaction announcement must have transaction type and\nsize. So in announceTransactions, we need to query the transaction from\ntransaction pool with its hash. This creates overhead in case of blob\ntransaction which needs to load data from billy and RLP decode. This\ncommit creates a lightweight lookup from transaction hash to transaction\nsize and a function GetMetadata to query transaction type and\ntransaction size given the transaction hash.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-04-02 07:06:54",
            "message": "triedb/pathdb: improve perf by separating nodes map (#31306)\n\nThis PR refactors the `nodeSet` structure in the path database to use\nseparate maps for account and storage trie nodes, resulting in\nperformance improvements. The change maintains the same API while\noptimizing the internal data structure."
        },
        {
            "date": "2025-04-01 14:13:37",
            "message": "accounts/abi/abigen: fix a flaky bind test case `NewSingleStructArgument` (#31501)\n\nfound the failed testcase here\nhttps://ci.appveyor.com/project/ethereum/go-ethereum/builds/51767091/job/rbjke432c05pufja\n\nadd a timeout to wait the tx to be mined.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>\nCo-authored-by: Jared Wasinger <j-wasinger@hotmail.com>"
        },
        {
            "date": "2025-04-01 12:29:20",
            "message": "core/filtermaps: add metrics (#31511)\n\nThis PR adds metrics related to map rendering and pattern matching to\nthe `core/filtermaps` package."
        },
        {
            "date": "2025-04-01 12:10:22",
            "message": "cmd: apply snapshot cache flag in the MakeChain (#31534)"
        },
        {
            "date": "2025-04-01 12:07:47",
            "message": "p2p/nat: improve AddMapping code (#31486)\n\nIt introduces a new variable to store the external port returned by the\naddAnyPortMapping function and ensures that the correct external port is\nreturned even in case of an error.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-04-01 11:42:01",
            "message": "eth, eth/filters: implement API error code for pruned blocks (#31361)\n\nImplements #31275\n\n---------\n\nCo-authored-by: Jared Wasinger <j-wasinger@hotmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-31 16:29:33",
            "message": "version: begin v1.15.8 release cycle reloaded"
        },
        {
            "date": "2025-03-31 16:27:43",
            "message": ".travis.yml: remove macos build"
        },
        {
            "date": "2025-03-31 16:26:56",
            "message": "version: back to v1.15.7, to fix the build"
        },
        {
            "date": "2025-03-31 13:30:31",
            "message": "version: begin v1.15.8 release cycle"
        },
        {
            "date": "2025-03-31 13:29:03",
            "message": "version: release go-ethereum v1.15.7 stable"
        },
        {
            "date": "2025-03-31 12:47:56",
            "message": "core/filtermaps: hashdb safe delete range (#31525)\n\nThis PR adds `rawdb.SafeDeleteRange` and uses it for range deletion in\n`core/filtermaps`. This includes deleting the old bloombits database,\nresetting the log index database and removing index data for unindexed\ntail epochs (which previously weren't properly implemented for the\nfallback case).\n`SafeDeleteRange` either calls `ethdb.DeleteRange` if the node uses the\nnew path based state scheme or uses an iterator based fallback method\nthat safely skips trie nodes in the range if the old hash based state\nscheme is used. Note that `ethdb.DeleteRange` also has its own iterator\nbased fallback implementation in `ethdb/leveldb`. If a path based state\nscheme is used and the backing db is pebble (as it is on the majority of\nnew nodes) then `rawdb.SafeDeleteRange` uses the fast native range\ndelete.\nAlso note that `rawdb.SafeDeleteRange` has different semantics from\n`ethdb.DeleteRange`, it does not automatically return if the operation\ntakes a long time. Instead it receives a `stopCallback` that can\ninterrupt the process if necessary. This is because in the safe mode\npotentially a lot of entries are iterated without being deleted (this is\ndefinitely the case when deleting the old bloombits database which has a\nsingle byte prefix) and therefore restarting the process every time a\nfixed number of entries have been iterated would result in a quadratic\nrun time in the number of skipped entries.\n\nWhen running in safe mode, unindexing an epoch takes about a second,\nremoving bloombits takes around 10s while resetting a full log index\nmight take a few minutes. If a range delete operation takes a\nsignificant amount of time then log messages are printed. Also, any\nrange delete operation can be interrupted by shutdown (tail uinindexing\ncan also be interrupted by head indexing, similarly to how tail indexing\nworks). If the last unindexed epoch might have \"dirty\" index data left\nthen the indexed map range points to the first valid epoch and\n`cleanedEpochsBefore` points to the previous, potentially dirty one. At\nstartup it is always assumed that the epoch before the first fully\nindexed one might be dirty. New tail maps are never rendered and also no\nfurther maps are unindexed before the previous unindexing is properly\ncleaned up.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-31 07:49:19",
            "message": ".gitignore: ignore binaries (#31531)\n\nIgnores all hand-built binaries (built with go build, everything built\nwith make is already ignored)"
        },
        {
            "date": "2025-03-28 15:17:28",
            "message": "core/filtermaps: revert to unindexed mode in case of indexing error (#31500)\n\nThis PR changes log indexer error handling so that if an indexing error\nhappens then it disables the indexer and reverts to unindexed more\nwithout resetting the database (except in case of a failed database\ninit).\nResetting the database on the first error would probably be overkill as\na client update might fix this without having to reindex the entire\nhistory. It would also make debugging very hard. On the other hand,\nthese errors do not resolve themselves automatically so constantly\nretrying makes no sense either. With these changes a new attempt to\nresume indexing is made every time the client is restarted.\nThe PR also fixes https://github.com/ethereum/go-ethereum/issues/31491\nwhich originated from the tail indexer trying to resume processing a\nfailed map renderer.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-28 11:32:24",
            "message": "core/txpool: fix nonce assignment in local tracker (#31496)\n\nFixes #31494"
        },
        {
            "date": "2025-03-28 07:16:37",
            "message": "core/txpool/legacypool: fix data race in checkDelegationLimit (#31475)"
        },
        {
            "date": "2025-03-28 07:15:13",
            "message": "cmd/geth: update geth subcommand arguments (#31293)"
        },
        {
            "date": "2025-03-27 17:40:15",
            "message": "Merge pull request #31228 from curvegrid/fix-sim-rollback\n\neth/catalyst: force sync of txpool before clearing subpools in Rollback"
        },
        {
            "date": "2025-03-27 11:22:17",
            "message": "internal/ethapi: CreateAccessList with stateOverrides (#31497)\n\nAdd support for state overrides in eth_createAccessList. This will make the method consistent\nwith other execution methods.\n\n---------\n\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2025-03-26 15:14:17",
            "message": "accounts/abi: include access-list in gas estimation (#31394)\n\nSimple bugfix to include the access-list in the gas-estimation step of\nthe ABI bindings code."
        },
        {
            "date": "2025-03-26 11:57:08",
            "message": "eth: downgrade peer removal error to warning level (#31492)"
        },
        {
            "date": "2025-03-26 11:48:04",
            "message": "core/rawdb: remove LES database stats (#31495)\n\nThis removes DB schema for LES related db entries. LES has been non-functional\nsince the merge."
        },
        {
            "date": "2025-03-26 04:59:40",
            "message": "core/state: fix double-increment of accountLoaded counter (#31493)"
        },
        {
            "date": "2025-03-25 14:01:21",
            "message": "internal/ethapi: exclude 7702 authorities from result in eth_createAccessList (#31336)\n\ncloses https://github.com/ethereum/go-ethereum/issues/31335\n\n---------\n\nCo-authored-by: sashabeton <sashabeton2007@gmail.com>"
        },
        {
            "date": "2025-03-25 13:59:44",
            "message": "trie: optimize memory allocation (#30932)\n\nThis pull request removes the node copy operation to reduce memory\nallocation. Key Changes as below:\n\n**(a) Use `decodeNodeUnsafe` for decoding nodes retrieved from the trie\nnode reader**\n\nIn the current implementation of the MPT, once a trie node blob is\nretrieved, it is passed to `decodeNode` for decoding. However,\n`decodeNode` assumes the supplied byte slice might be mutated later, so\nit performs a deep copy internally before parsing the node.\n\nGiven that the node reader is implemented by the path database and the\nhash database, both of which guarantee the immutability of the returned\nbyte slice. By restricting the node reader interface to explicitly\nguarantee that the returned byte slice will not be modified, we can\nsafely replace `decodeNode` with `decodeNodeUnsafe`. This eliminates the\nneed for a redundant byte copy during each node resolution.\n\n**(b) Modify the trie in place**\n\nIn the current implementation of the MPT, a copy of a trie node is\ncreated before any modifications are made. These modifications include:\n- Node resolution: Converting the value from a hash to the actual node.\n- Node hashing: Tagging the hash into its cache.\n- Node commit: Replacing the children with its hash.\n- Structural changes: For example, adding a new child to a fullNode or\nreplacing a child of a shortNode.\n\nThis mechanism ensures that modifications only affect the live tree,\nleaving all previously created copies unaffected.\n\nUnfortunately, this property leads to a huge memory allocation\nrequirement. For example, if we want to modify the fullNode for n times,\nthe node will be copied for n times.\n\nIn this pull request, all the trie modifications are made in place. In\norder to make sure all previously created copies are unaffected, the\n`Copy` function now will deep-copy all the live nodes rather than the\nroot node itself.\n\nWith this change, while the `Copy` function becomes more expensive, it's\ntotally acceptable as it's not a frequently used one. For the normal\ntrie operations (Get, GetNode, Hash, Commit, Insert, Delete), the node\ncopy is not required anymore."
        },
        {
            "date": "2025-03-25 13:53:02",
            "message": "all: use fmt.Appendf instead of fmt.Sprintf where possible (#31301)"
        },
        {
            "date": "2025-03-25 13:13:05",
            "message": "core: process EL requests in GenerateVerkleChain (#31175)"
        },
        {
            "date": "2025-03-25 11:26:15",
            "message": "version: begin v1.15.7 release cycle"
        },
        {
            "date": "2025-03-25 10:30:13",
            "message": "version: release v1.15.6 stable"
        },
        {
            "date": "2025-03-25 10:16:26",
            "message": "core/txpool: reject stale transaction for local tracking (#31473)\n\nFixes https://github.com/ethereum/go-ethereum/issues/31451"
        },
        {
            "date": "2025-03-24 18:08:53",
            "message": "internal/ethapi: support for beacon root and withdrawals in simulate api (#31304)\n\nAdds block override fields for beacon block root and withdrawals to the eth_simulateV1.\nAddresses https://github.com/ethereum/go-ethereum/issues/31264"
        },
        {
            "date": "2025-03-24 14:19:14",
            "message": "tests: update test submodule (#31479)\n\nThis commit upgrades the test submodule to latest version:\n\nLatest:\nhttps://github.com/ethereum/tests/commit/81862e4848585a438d64f911a19b3825f0f4cd95\nOld:\nhttps://github.com/ethereum/tests/commit/faf33b471465d3c6cdc3d04fbd690895f78d33f2"
        },
        {
            "date": "2025-03-24 11:27:40",
            "message": "beacon/params: new checkpoints (#31470)\n\nThis PR updates beacon checkpoints. The checkpoints are now stored as\nembedded hex files, in the same format that\nhttps://github.com/ethereum/go-ethereum/pull/31469 uses."
        },
        {
            "date": "2025-03-24 11:27:11",
            "message": "core/filtermaps: fix log indexer init conditions (#31455)\n\nThis PR adds an extra condition to the log indexer initialization in\norder to avoid initializing with block 0 as target head. Previously this\ncaused the indexer to initialize without a checkpoint. Later, when the\nreal chain head was set, it indexed the entire history, then unindexed\nmost of it if only the recent history was supposed to be indexed. Now\nthe init only happens when there is an actual synced chain head and\ntherefore the index is initialized at the most recent checkpoint and\nonly the last year is indexed according to the default parameters.\nDuring checkpoint initialization the best available checkpoint is also\nchecked against the history cutoff point and fails if the indexing would\nhave to start from a block older than the cutoff. If initialization\nfails then the indexer reverts to unindexed mode instead of retrying\nbecause the the failure conditions cannot be expected to recover later."
        },
        {
            "date": "2025-03-24 09:07:38",
            "message": "core/rawdb: improve database stats output (#31463)\n\nInstead of reporting all filtermaps stuff in one line, I'm breaking it\ndown into the three separate kinds of entries here.\n\n```\n+-----------------------+-----------------------------+------------+------------+\n|       DATABASE        |          CATEGORY           |    SIZE    |   ITEMS    |\n+-----------------------+-----------------------------+------------+------------+\n| Key-Value store       | Log index filter-map rows   | 59.21 GiB  |  616077345 |\n| Key-Value store       | Log index last-block-of-map | 12.35 MiB  |     269755 |\n| Key-Value store       | Log index block-lv          | 421.70 MiB |   22109169 |\n```\n\nAlso added some other changes to make it easier to debug:\n\n- restored bloombits into the inspect output, so we notice if it doesn't\nget deleted for some reason\n- tracking of unaccounted key examples"
        },
        {
            "date": "2025-03-23 16:38:26",
            "message": "internal/ethapi: return code 3 from call/estimateGas even if a revert reason was not returned (#31456)"
        },
        {
            "date": "2025-03-21 13:08:51",
            "message": "eth/filter: downgrade log level (#31450)"
        },
        {
            "date": "2025-03-21 12:12:56",
            "message": "cmd/geth: add prune history command (#31384)\n\nThis adds a new subcommand 'geth prune-history' that removes the pre-merge history\non supported networks. Geth is not fully ready to work in this mode, please do not run\nthis command on your production node.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-21 10:29:51",
            "message": "core: respect history cutoff in txindexer (#31393)\n\nIn #31384 we unindex TXes prior to the merge block. However when the\nnode starts up it will try to re-index those back if the config is to index the\nwhole chain. This change makes the indexer aware of the history cutoff block,\navoiding reindexing in that segment.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-21 09:47:58",
            "message": "core/bloombits: remove old bloombits logic and chain indexer (#31081)\n\nThis PR is #3 of a 3-part series that implements the new log index\nintended to replace core/bloombits.\nBased on https://github.com/ethereum/go-ethereum/pull/31079 and\nhttps://github.com/ethereum/go-ethereum/pull/31080\nReplaces https://github.com/ethereum/go-ethereum/pull/30370\n\nThis part removes the old bloombits package and the chain indexer that\nwas only used by bloombits. Deletes the old bloombits database.\n\nFilterMaps data structure explanation:\nhttps://gist.github.com/zsfelfoldi/a60795f9da7ae6422f28c7a34e02a07e\n\nLog index generator code overview:\nhttps://gist.github.com/zsfelfoldi/97105dff0b1a4f5ed557924a24b9b9e7\n\nSearch pattern matcher code overview:\nhttps://gist.github.com/zsfelfoldi/5981735641c956afb18065e84f8aff34\n\nNote that the possibility of a tree hashing scheme and remote proof\nprotocol are mentioned in the documents above but they are not exactly\nspecified yet. These specs are WIP and will be finalized after the local\nlog indexer/filter code is finalized and merged.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-20 21:05:15",
            "message": "core/txpool/legacypool: reject gapped tx from delegated account (#31430)\n\nThis pull request improves the protection mechanism in the txpool for \nsenders with delegation. A sender with either delegation or pending \ndelegation is now limited to a maximum of one in-flight executable \ntransaction, while gapped transactions will be rejected.\n\nReason:\nIf nonce-gapped transaction from delegated/pending-delegated senders\ncan be acceptable, then it's no-longer possible to send another\n\"executable\" transaction with correct nonce due to the policy of at most\none inflight tx. The gapped transaction will be stuck in the txpool, with no\nmeaningful way to unlock the sender.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-03-20 16:11:40",
            "message": "p2p/discover: repeat WHOAREYOU challenge when handshake in progress (#31356)\n\nThis fixes the handshake in a scenario where the remote end sends two unknown\npackets in a row. When this happens, we would previously respond to both with\na WHOAREYOU challenge, but keep only the latest sent challenge. Transmission is\nassumed to be unreliable, so any client that sends two request packets simultaneously\nhas to be prepared to follow up on whichever request leads to a handshake. With\nthis fix, we force them to do the handshake that we can actually complete.\n\nFixes #30581"
        },
        {
            "date": "2025-03-20 13:13:58",
            "message": "core/filtermaps: allow log search while head indexing (#31429)\n\nThis PR changes the matcher syncing conditions so that it is possible to\nrun a search while head indexing is in progress. Previously it was a\nrequirement to have the head indexed in order to perform matcher sync\nbefore and after a search. This was unnecessarily strict as the purpose\nwas just to avoid syncing the valid range with the temporary shortened\nindexed range applied while updating existing head maps. Now the sync\ncondition explicitly checks whether the indexer has a temporary indexed\nrange with some head maps being partially updated.\nIt also fixes a deadlock that happened when matcher synchronization was\nattempted in the event handler called from the `writeFinishedMaps`\nperiodical callback."
        },
        {
            "date": "2025-03-20 12:33:13",
            "message": "eth/tracers: fix test (#31445)\n\nThis pull request fixes a broken unit test\n\n```\n=== CONT  TestTracingWithOverrides\n    api_test.go:1012: result: {\"gas\":21167,\"failed\":false,\"returnValue\":\"0x0000000000000000000000000000000000000000000000000000000000000002\",\"structLogs\":[{\"pc\":0,\"op\":\"PUSH1\",\"gas\":24978860,\"gasCost\":3,\"depth\":1,\"stack\":[]},{\"pc\":2,\"op\":\"CALLDATALOAD\",\"gas\":24978857,\"gasCost\":3,\"depth\":1,\"stack\":[\"0x0\"]},{\"pc\":3,\"op\":\"PUSH1\",\"gas\":24978854,\"gasCost\":3,\"depth\":1,\"stack\":[\"0x1\"]},{\"pc\":5,\"op\":\"ADD\",\"gas\":24978851,\"gasCost\":3,\"depth\":1,\"stack\":[\"0x1\",\"0x1\"]},{\"pc\":6,\"op\":\"PUSH1\",\"gas\":24978848,\"gasCost\":3,\"depth\":1,\"stack\":[\"0x2\"]},{\"pc\":8,\"op\":\"MSTORE\",\"gas\":24978845,\"gasCost\":6,\"depth\":1,\"stack\":[\"0x2\",\"0x0\"]},{\"pc\":9,\"op\":\"PUSH1\",\"gas\":24978839,\"gasCost\":3,\"depth\":1,\"stack\":[]},{\"pc\":11,\"op\":\"PUSH1\",\"gas\":24978836,\"gasCost\":3,\"depth\":1,\"stack\":[\"0x20\"]},{\"pc\":13,\"op\":\"RETURN\",\"gas\":24978833,\"gasCost\":0,\"depth\":1,\"stack\":[\"0x20\",\"0x0\"]}]}\n    api_test.go:1013: test 10, result mismatch, have\n        {21167 false 0x0000000000000000000000000000000000000000000000000000000000000002}\n        , want\n        {21167 false 0000000000000000000000000000000000000000000000000000000000000002}\n    api_test.go:1012: result: {\"gas\":25664,\"failed\":false,\"returnValue\":\"0x000000000000000000000000c6e93f4c1920eaeaa1e699f76a7a8c18e3056074\",\"structLogs\":[]}\n    api_test.go:1013: test 11, result mismatch, have\n        {25664 false 0x000000000000000000000000c6e93f4c1920eaeaa1e699f76a7a8c18e3056074}\n        , want\n        {25664 false 000000000000000000000000c6e93f4c1920eaeaa1e699f76a7a8c18e3056074}\n\n```"
        },
        {
            "date": "2025-03-20 09:20:51",
            "message": "eth/tracers: hex-encode returnValue (#31216)\n\nThis is a **breaking change** to the opcode tracer. The top-level\n`returnValue` field of a trace will be now hex-encoded. If the return\ndata is empty, this field will contain \"0x\".\n\nFixes #31196"
        },
        {
            "date": "2025-03-20 08:23:10",
            "message": "cmd/workload: fixed filter test request error handling (#31424)\n\nThis PR fixes the broken request error handling of the workload filter\ntests. Until now `validateHistoryPruneErr` was invoked with `fq.Err` as\nan input which was always nil and a timeout or http error was reported\nas a result content mismatch.\nAlso, in case of `errPrunedHistory` it is wrong to return here without\nsetting an error because then it will look like a valid empty result and\nthe check will later fail. So instead `errPrunedHistory` is always\nreturned now (without printing an error message) and the callers of\n`run` should handle this special case (typically ignore silently)."
        },
        {
            "date": "2025-03-20 05:14:13",
            "message": "cmd/utils: force hash scheme for archive mode (#31439)"
        },
        {
            "date": "2025-03-19 15:05:44",
            "message": "core/types: cleanup tx signer logic (#31434)\n\nThis removes the signer type-train in favor of defining a single object\nthat can handle all tx types. Supported types are enabled via a map.\nNotably, the new signer also supports disabling legacy transactions."
        },
        {
            "date": "2025-03-19 06:21:40",
            "message": "core/types: reduce allocs in transaction signing (#31258)\n\nThis PR roughly halves the number of allocations needed to compute the\nsigHash for a transaction.\n\nThis sigHash is used whenever we recover a signature of a transaction,\nso quite often. During a recent benchmark full syncing on Holesky,\nroughly 2.8% of all allocations were happening here because the fields\nfrom the transaction would be copied multiple times.\n\n```\n66168733  153175654 (flat, cum)  2.80% of Total\n         .          .    368:func (s londonSigner) Hash(tx *Transaction) common.Hash {\n         .          .    369:\tif tx.Type() != DynamicFeeTxType {\n         .          .    370:\t\treturn s.eip2930Signer.Hash(tx)\n         .          .    371:\t}\n         .   19169966    372:\treturn prefixedRlpHash(\n         .          .    373:\t\ttx.Type(),\n  26442187   26442187    374:\t\t[]interface{}{\n         .          .    375:\t\t\ts.chainId,\n   6848616    6848616    376:\t\t\ttx.Nonce(),\n         .   19694077    377:\t\t\ttx.GasTipCap(),\n         .   18956774    378:\t\t\ttx.GasFeeCap(),\n   6357089    6357089    379:\t\t\ttx.Gas(),\n         .   12321050    380:\t\t\ttx.To(),\n         .   16865054    381:\t\t\ttx.Value(),\n  13435187   13435187    382:\t\t\ttx.Data(),\n  13085654   13085654    383:\t\t\ttx.AccessList(),\n         .          .    384:\t\t})\n         .          .    385:}\n```\n\nThis PR reduces the allocations and speeds up the computation of the\nsigHash by ~22%, which is quite significantly given that this operation\ninvolves a call to Keccak\n```\n// BenchmarkHash-8   \t  440082\t      2639 ns/op\t     384 B/op\t      13 allocs/op\n// BenchmarkHash-8   \t  493566\t      2033 ns/op\t     240 B/op\t       6 allocs/op\n```\n\n```\nHash-8   2.691\u00b5 \u00b1 8%   2.097\u00b5 \u00b1 9%  -22.07% (p=0.000 n=10)\n```\n\nIt also kinda cleans up stuff in my opinion, since the transaction\nshould itself know best how to compute the sighash\n\n\n\n\n![Screenshot_2025-02-25_13-52-41](https://github.com/user-attachments/assets/e2b268aa-e137-417d-926b-f3619daef748)\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-03-19 06:20:50",
            "message": "core/txpool, eth: add GetRLP to transaction pool (#31307)\n\nCurrently, when answering GetPooledTransaction request, txpool.Get() is\nused. When the requested hash is blob transaction, blobpool.Get() is\ncalled. This function loads the RLP-encoded transaction from limbo then\ndecodes and returns. Later, in answerGetPooledTransactions, we need to\nRLP encode again. This decode then encode is wasteful. This commit adds\nGetRLP to transaction pool interface so that answerGetPooledTransactions\ncan use the RLP-encoded from limbo directly.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-03-18 14:41:34",
            "message": "ethclient: Add EstimateGasAtBlock[Hash] to estimate against a specific block (#27508)\n\nThe main use case I see of this is that it allows users to estimate gas\nagainst the same state that they query for their nonce, and the same\nstate they base the data of their transaction against. This helps ensure\nthat gas estimation won't fail and the transaction won't revert on-chain\nbecause of a mismatch between the state used for gas estimation and the\nstate used to generate the inputs to gas estimation or the transaction's\nnonce when submitted to the mempool.\n\nThis PR also updates the EstimateGas comment based on the new geth\n`eth_estimateGas` default of using latest state as of v1.12.0:\nhttps://github.com/ethereum/go-ethereum/pull/24363\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-18 13:32:29",
            "message": "cmd: set name to chaindata for all the opened db (#31352)\n\nWhen I'm running `geth import --metrics`, the metrics is different to\nnormal `geth --metrics`, so the grafana dashboard needs to be updated,\neg: `eth_db_chaindata_disk_read` vs `disk_read`.\n\nSo I think we should always set the name to `eth/db/chaindata` for more\nconvenient.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-03-18 12:46:23",
            "message": "core/filtermaps: fixed indexer checkpoint initialization (#31419)\n\nThis PR fixes a bug in the `lastMapBoundaryBefore` logic that resulted\nin incorrect checkpoint initialization (started rendering from the\nprevious epoch boundary which caused the `needTailEpoch` check to fail).\nApparently the bug was present before but went unnoticed because\n`needTailEpoch` behaved differently.\nFixes https://github.com/ethereum/go-ethereum/issues/31413"
        },
        {
            "date": "2025-03-18 11:40:38",
            "message": "internal/ethapi: fix logs bloom in eth_simulateV1 (#31411)\n\nGeth was returning empty logsBloom for the simulated block."
        },
        {
            "date": "2025-03-18 11:07:49",
            "message": "params: add hoodi testnet definition (#31406)\n\nAdds support for the new hoodi testnet. Hoodi is meant for stakers to test\ntheir setup. For more info please refer to https://hoodi.ethpandaops.io/."
        },
        {
            "date": "2025-03-18 11:05:12",
            "message": "eth/tracers: fix precompile move feat for debug_traceCall (#31348)\n\n`debug_traceCall` was ignoring the override `movePrecompileToAddress`. Now it is\nat feature-parity with eth_call."
        },
        {
            "date": "2025-03-17 17:59:04",
            "message": "eth/filters: implement log filter using new log index (#31080)\n\nThis PR is #2 of a 3-part series that implements the new log index\nintended to replace core/bloombits.\nBased on https://github.com/ethereum/go-ethereum/pull/31079\nReplaces https://github.com/ethereum/go-ethereum/pull/30370\n\nThis part replaces the old bloombits based log search logic in\n`eth/filters` to use the new `core/filtermaps` logic.\n\nFilterMaps data structure explanation:\nhttps://gist.github.com/zsfelfoldi/a60795f9da7ae6422f28c7a34e02a07e\n\nLog index generator code overview:\nhttps://gist.github.com/zsfelfoldi/97105dff0b1a4f5ed557924a24b9b9e7\n\nSearch pattern matcher code overview:\nhttps://gist.github.com/zsfelfoldi/5981735641c956afb18065e84f8aff34\n\nNote that the possibility of a tree hashing scheme and remote proof\nprotocol are mentioned in the documents above but they are not exactly\nspecified yet. These specs are WIP and will be finalized after the local\nlog indexer/filter code is finalized and merged.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-17 15:01:37",
            "message": "core/rawdb: allow for truncation in the freezer (#31362)\n\nHere we add the notion of prunable tables for the `TruncateTail` operation\nin the freezer. TruncateTail for the chain freezer now only truncates the body and\nreceipts tables, leaving headers and hashes as-is.\n\nThis change also requires changing the validation/repair at startup to allow for\ntables with different tail. For the header and hash tables, we now require them to start\nat number zero.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-03-17 14:56:55",
            "message": "cmd/abigen, accounts/abi/bind: implement abigen version 2 (#31379)\n\nThis PR implements a new version of the abigen utility (v2) which exists\nalong with the pre-existing v1 version.\n\nAbigen is a utility command provided by go-ethereum that, given a\nsolidity contract ABI definition, will generate Go code to transact/call\nthe contract methods, converting the method parameters/results and\nstructures defined in the contract into corresponding Go types. This is\nuseful for preventing the need to write custom boilerplate code for\ncontract interactions.\n\nMethods in the generated bindings perform encoding between Go types and\nSolidity ABI-encoded packed bytecode, as well as some action (e.g.\n`eth_call` or creating and submitting a transaction). This limits the\nflexibility of how the generated bindings can be used, and prevents\neasily adding new functionality, as it will make the generated bindings\nlarger for each feature added.\n\nAbigen v2 was conceived of by the observation that the only\nfunctionality that generated Go bindings ought to perform is conversion\nbetween Go types and ABI-encoded packed data. Go-ethereum already\nprovides various APIs which in conjunction with conversion methods\ngenerated in v2 bindings can cover all functionality currently provided\nby v1, and facilitate all other previously-desired use-cases.\n\n## Generating Bindings\n\nTo generate contract bindings using abigen v2, invoke the `abigen`\ncommand with the `--v2` flag. The functionality of all other flags is\npreserved between the v2 and v1 versions.\n\n## What is Generated in the Bindings\n\nThe execution of `abigen --v2` generates Go code containing methods\nwhich convert between Go types and corresponding ABI-encoded data\nexpected by the contract. For each input-accepting contract method and\nthe constructor, a \"packing\" method is generated in the binding which\nconverts from Go types to the corresponding packed solidity expected by\nthe contract. If a method returns output, an \"unpacking\" method is\ngenerated to convert this output from ABI-encoded data to the\ncorresponding Go types.\n\nFor contracts which emit events, an unpacking method is defined for each\nevent to unpack the corresponding raw log to the Go type that it\nrepresents.\n\nLikewise, where custom errors are defined by contracts, an unpack method\nis generated to unpack raw error data into a Go type.\n\n## Using the Generated Bindings\n\nFor a smooth user-experience, abigen v2 comes with a number of utility\nfunctions to be used in conjunction with the generated bindings for\nperforming common contract interaction use-cases. These include:\n\n* filtering for historical logs of a given topic\n* watching the chain for emission of logs with a given topic\n* contract deployment methods\n* Call/Transact methods\n\nhttps://geth.ethereum.org will be updated to include a new tutorial page\nfor abigen v2 with full code examples. The page currently exists in a\nPR: https://github.com/ethereum/go-ethereum/pull/31390 .\n\nThere are also extensive examples of interactions with contract bindings\nin [test\ncases](https://github.com/ethereum/go-ethereum/blob/cc855c7ede460270ae9c83bba278b23cb4f26a00/accounts/abi/bind/v2/lib_test.go)\nprovided with this PR.\n\n---------\n\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-17 08:32:44",
            "message": "eth/catalyst: set FeeRecipient in dev mode (#31316)\n\nthis adds 2 features to improve `geth --dev` experience.\n\n1. we don't need to use `dev_SetFeeRecipient` to set initial coinbase\naddress. it was a pain.\n2. we don't need to unlock keystore if we don't use it. we had it\nbecause of clique."
        },
        {
            "date": "2025-03-17 08:22:12",
            "message": "go.mod: bump golang.org/x/net from 0.34.0 to 0.36.0 (#31369)\n\nBumps [golang.org/x/net](https://github.com/golang/net) from 0.34.0 to\n0.36.0.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a\nhref=\"https://github.com/golang/net/commit/85d1d54551b68719346cb9fec24b911da4e452a1\"><code>85d1d54</code></a>\ngo.mod: update golang.org/x dependencies</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/cde1dda944dcf6350753df966bb5bda87a544842\"><code>cde1dda</code></a>\nproxy, http/httpproxy: do not mismatch IPv6 zone ids against hosts</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/fe7f0391aa994a401c82d829183c1efab7a64df4\"><code>fe7f039</code></a>\npublicsuffix: spruce up code gen and speed up PublicSuffix</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/459513d1f8abff01b4854c93ff0bff7e87985a0a\"><code>459513d</code></a>\ninternal/http3: move more common stream processing to genericConn</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/aad0180cad195ab7bcd14347e7ab51bece53f61d\"><code>aad0180</code></a>\nhttp2: fix flakiness from t.Log when GOOS=js</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/b73e5746f64471c22097f07593643a743e7cfb0f\"><code>b73e574</code></a>\nhttp2: don't log expected errors from writing invalid trailers</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/5f45c776a9c4d415cbe67d6c22c06fd704f8c9f1\"><code>5f45c77</code></a>\ninternal/http3: make read-data tests usable for server handlers</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/43c2540165a4d1bc9a81e06a86eb1e22ece64145\"><code>43c2540</code></a>\nhttp2, internal/httpcommon: reject userinfo in :authority</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/1d78a085008d9fedfe3f303591058325f99727d7\"><code>1d78a08</code></a>\nhttp2, internal/httpcommon: factor out server header logic for\nh2/h3</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/0d7dc54a591c12b4bd03bcd745024178d03d9218\"><code>0d7dc54</code></a>\nquic: add Conn.ConnectionState</li>\n<li>Additional commits viewable in <a\nhref=\"https://github.com/golang/net/compare/v0.34.0...v0.36.0\">compare\nview</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=golang.org/x/net&package-manager=go_modules&previous-version=0.34.0&new-version=0.36.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't\nalter it yourself. You can also trigger a rebase manually by commenting\n`@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits\nthat have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after\nyour CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge\nand block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating\nit. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all\nof the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop\nDependabot creating any more for this major version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop\nDependabot creating any more for this minor version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop\nDependabot creating any more for this dependency (unless you reopen the\nPR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the\n[Security Alerts\npage](https://github.com/ethereum/go-ethereum/network/alerts).\n\n</details>\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
        },
        {
            "date": "2025-03-17 06:13:12",
            "message": "eth/catalyst: fix flaky test (#31403)\n\nThis pull request enhances the unit test, avoiding unnecessary failure\nin CI.\n\n```\n--- FAIL: TestSimulatedBeaconSendWithdrawals (12.08s)\n    simulated_beacon_test.go:139: timed out without including all withdrawals/txs\nFAIL\n```"
        },
        {
            "date": "2025-03-17 01:48:08",
            "message": "metrics: spin up meter ticker routine when enabling metric system (#31400)\n\nAddresses https://github.com/ethereum/go-ethereum/issues/31244"
        },
        {
            "date": "2025-03-15 17:35:10",
            "message": "cmd/utils: fix geth test issue on OpenBSD (#31357)"
        },
        {
            "date": "2025-03-14 17:53:05",
            "message": "tests: update ethereum/tests to v17.0 (#31381)\n\nGet the re-filled tests (plus removal of outdated EIP-2537 tests)"
        },
        {
            "date": "2025-03-14 16:56:24",
            "message": "cmd/evm: fix statetest with multi-fork statetest fixtures (#31374)\n\nFixes `evm statetest` for state test fixtures with multiple fork entries\nin their `post` field (e.g.,\n[chainId.json](https://github.com/ethereum/tests/blob/81862e4848585a438d64f911a19b3825f0f4cd95/GeneralStateTests/stChainId/chainId.json#L39)).\n\nWhen these re-activated flags aren't exposed, `statetest` only executes\nthe fixture for a single fork entry instead of all of the forks as\nexpected.\n\nThis only affects ethereum/tests state test fixtures, not\nethereum/execution-spec-tests (EEST) state tests. EEST writes a separate\nfixture/test case (i.e. a separate top-level dict entry in the .json)\nfor each fork configuration as apposed to combining multiple forks in\none fixture test case: New EEST state tests targeting Prague behavior\nare not affected."
        },
        {
            "date": "2025-03-14 15:56:53",
            "message": "log: fix SetDefault for custom loggers (#31368)\n\nCurrently, even though it takes in a `Logger` interface,\n`log.SetDefualt` enforces that the concrete type of the provided logger\nis `*logger` because:\n1. in `init` `root.Store` is called with a `*logger`\n2. `atomic.Value` panics if the concrete type provided in `Store` is not\nconsistent across calls.\n([ref](https://pkg.go.dev/sync/atomic#Value.Store))\n\n> All calls to Store for a given Value must use values of the same\nconcrete type.\n\nThis PR changes to use `sync.RWMutex` and adds a test that panics on\n`master`."
        },
        {
            "date": "2025-03-14 14:27:38",
            "message": "accounts/abi: improve unpack performance (#31387)\n\nSlightly improves performance of abi.Unpack\n\n```\nBefore\nBenchmarkUnpack/0-14   5965714       210.9 ns/op     280 B/op       5 allocs/op\nBenchmarkUnpack/1-14   2148283       569.7 ns/op     688 B/op      16 allocs/op\n\nAfter:\nBenchmarkUnpack/0-14  \t 7693365\t       151.2 ns/op\t     136 B/op\t       4 allocs/op\nBenchmarkUnpack/1-14  \t 2261294\t       508.9 ns/op\t     544 B/op\t      15 allocs/op\n```\n\nreplaces https://github.com/ethereum/go-ethereum/pull/31292 since I was\nunable to push to your branch @Exca-DK\n\n---------\n\nCo-authored-by: Exca-DK <dawidk.info@gmail.com>"
        },
        {
            "date": "2025-03-13 18:04:16",
            "message": "core/filtermaps: FilterMaps log index generator and search logic (#31079)\n\nThis PR is #1 of a 3-part series that implements the new log index\nintended to replace core/bloombits.\nReplaces https://github.com/ethereum/go-ethereum/pull/30370\n\nThis part implements the new data structure, the log index generator and\nthe search logic. This PR has most of the complexity but it does not\naffect any existing code yet so maybe it is easier to review separately.\n\nFilterMaps data structure explanation:\nhttps://gist.github.com/zsfelfoldi/a60795f9da7ae6422f28c7a34e02a07e\n\nLog index generator code overview:\nhttps://gist.github.com/zsfelfoldi/97105dff0b1a4f5ed557924a24b9b9e7\n\nSearch pattern matcher code overview:\nhttps://gist.github.com/zsfelfoldi/5981735641c956afb18065e84f8aff34\n\nNote that the possibility of a tree hashing scheme and remote proof\nprotocol are mentioned in the documents above but they are not exactly\nspecified yet. These specs are WIP and will be finalized after the local\nlog indexer/filter code is finalized and merged.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-13 17:54:20",
            "message": "eth/ethconfig: fix history prune blocks (#31383)"
        },
        {
            "date": "2025-03-13 14:21:47",
            "message": "cmd/workload: implement checks for history-pruned node (#31355)\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-13 14:16:01",
            "message": "p2p/discover: expose discv5 functions for portal JSON-RPC interface (#31117)\n\nFixes #31093\n\nHere we add some API\u00a0functions on the UDPv5 object for the purpose of implementing\nthe Portal Network JSON-RPC API in the shisui client.\n\n---------\n\nSigned-off-by: Chen Kai <281165273grape@gmail.com>"
        },
        {
            "date": "2025-03-13 11:35:10",
            "message": "core: update blockProcFeed in insertChain (#31065)\n\nThis PR moves the updating of the `blockProcFeed` event feed from\n`InsertChain` to `insertChain` in order to ensure that the feed\nsubscribers are notified whenever block processing happens.\nNote that this event is not subscribed to anywhere in our codebase at\nthe moment, earlier it was used by the LES server to avoid slowing down\nblock processing. Now I want to do the same with the log indexer, the\nproblem is that back then every block insertion was done by\n`InsertChain`, now the regular payload insertion is done by\n`InsertBlockWithoutSetHead`. Both of these (and also `SetCanonical` if\nneeded) calls `insertChain` so I moved the feed update there."
        },
        {
            "date": "2025-03-11 09:26:16",
            "message": "Update core/txpool/txpool.go\n\nCo-authored-by: jwasinger <j-wasinger@hotmail.com>"
        },
        {
            "date": "2025-03-13 10:43:00",
            "message": "eth/ethconfig: add HistoryMode (#31365)\n\nHere I am adding a config option and geth flag (`--history.chain`) for\nconfiguring history pruning. There are two options available:\n\n- `--history.chain all` is the default and will keep all history like\nbefore.\n- `--history.chain postmerge` will configure the history cutoff point to\nthe merge block.\n\nThe option doesn't actually do anything right now, but we need it as a\nprecursor for other history pruning changes."
        },
        {
            "date": "2025-03-12 11:21:50",
            "message": "crypto/secp256k1: update libsecp256k1 (#31242)\n\nUpdates the libsecp256k1 dependency to commit:\nc0d9480fbbf8eccbd4be23ed27f6f2af6f3b211e\n\nPR:\n```\nBenchmarkSign-24    \t   57756\t     21214 ns/op\t     164 B/op\t       3 allocs/op\nBenchmarkRecover-24    \t   37156\t     33044 ns/op\t      80 B/op\t       1 allocs/op\nBenchmarkEcrecoverSignature-24    \t   36889\t     32935 ns/op\t      80 B/op\t       1 allocs/op\nBenchmarkVerifySignature-24    \t   41163\t     29207 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkDecompressPubkey-24    \t  318624\t      4062 ns/op\t     304 B/op\t       6 allocs/op\n```\n\nMaster:\n```\nBenchmarkSign-24    \t   34509\t     35330 ns/op\t     164 B/op\t       3 allocs/op\nBenchmarkRecover-24    \t   25418\t     47725 ns/op\t      80 B/op\t       1 allocs/op\nBenchmarkEcrecoverSignature-24    \t   25735\t     47591 ns/op\t      80 B/op\t       1 allocs/op\nBenchmarkVerifySignature-24    \t   29108\t     41097 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkDecompressPubkey-24    \t  294747\t      4143 ns/op\t     304 B/op\t       6 allocs/op\n```\n\nPerformance seems to be improved significantly:\n```\nSign-24      34.86\u00b5 \u00b1 3%   21.66\u00b5 \u00b1 2%  -37.86% (p=0.000 n=10)\nRecover-24   46.14\u00b5 \u00b1 3%   33.24\u00b5 \u00b1 2%  -27.95% (p=0.000 n=10)\n```"
        },
        {
            "date": "2025-03-12 11:20:40",
            "message": "cmd: ctrl-c to halt the whole import process (#31360)\n\nWhen I press Ctrl-C during the import of multiple files, the import\nprocess will still attempt to import the subsequent files. However, in\nnormal circumstances, users would expect the import to stop immediately\nupon pressing Ctrl-C.\n\nAnd because the current file was not finished importing, subsequent\nimport tasks often fail due to an `unknown ancestor` error.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-11 21:30:45",
            "message": "go.mod: update crypto to remove dependency warning (#31334)"
        },
        {
            "date": "2025-03-11 21:30:02",
            "message": "ethdb: no need to check the metric nilness (#31353)\n\nThe metric always has a value, no need to check for the nil. \n\nSeems this code was first introduced here\nhttps://github.com/ethereum/go-ethereum/blob/054412e33528e53f6deae940c870217b614707b9/metrics/meter.go#L45-L48\n\nAs the `nilMeter` was removed, so this check seems is useless.\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-03-11 16:17:47",
            "message": "beacon/types, beacon/blsync: update for electra (#31243)\n\nThis updates the blsync base types for the Electra fork. I've been\ntesting, and it doesn't seem to make blsync fully work on Electra. But\nI'd still like to get this in to make some progress.\n\n---------\n\nCo-authored-by: Zsolt Felfoldi <zsfelfoldi@gmail.com>"
        },
        {
            "date": "2025-03-11 15:15:07",
            "message": "core: prefund pectra precompiles in developer genesis (#31342)\n\nPrefund the precompile addresses for the new precompiles in the\ndeveloper genesis block."
        },
        {
            "date": "2025-03-11 15:00:50",
            "message": "core/txpool: demote error log to warn (#31332)\n\nThis error log in `legacypool.go` isn't necessary, since even though the\nbehavior is unexpected, it is handled correctly. A discussion on issue\n#22301 concluded that this should instead be a warning log."
        },
        {
            "date": "2025-03-10 13:10:16",
            "message": "cmd,eth,les: replace Cancun override flag with Prague (#31341)\n\nIt's that time of the cycle, should have this ready to go for mainnet\nPrague release."
        },
        {
            "date": "2025-03-07 10:23:19",
            "message": "core/rawdb,state: add preimage miss metric (#31295)\n\n1. The metric of preimage/hits are always the same as preimage/total, prefer to replace\n   the hits with miss instead.\n2. For the state/read/accounts metric, follow the same naming of others,\n  change into singuar."
        },
        {
            "date": "2025-03-05 11:51:53",
            "message": "build: fix execution-spec-tests sanitycheck URL (#31314)"
        },
        {
            "date": "2025-03-05 10:57:18",
            "message": "version: begin v1.15.6 release cycle"
        },
        {
            "date": "2025-03-05 10:55:17",
            "message": "version: release v1.15.5 stable"
        },
        {
            "date": "2025-03-05 10:04:24",
            "message": "core: match on deposit contract log topic (#31317)\n\nThis resolves a situation on the Sepolia testnet, which has a different\ndeposit contract. The contract on that network emits two kinds of logs,\ninstead of only deposit events like the deposit contract on mainnet. So\nwe need to skip events with mismatched topics."
        },
        {
            "date": "2025-03-05 10:02:18",
            "message": "build: upgrade to Go 1.24.1 and golangci-lint 1.64.4 (#31313)\n\n- upgrade -dlgo version to Go 1.24.1\n- upgrade golangci-lint version to 1.64.6"
        },
        {
            "date": "2025-03-04 08:30:03",
            "message": "eth/tracers: fix omitempty for memory and storage (#31289)\n\nThis fixes a regression in the opcode tracer API where we would log\nempty memory and storage fields."
        },
        {
            "date": "2025-03-01 20:40:14",
            "message": "version: begin v1.15.5 release cycle"
        },
        {
            "date": "2025-03-01 20:37:47",
            "message": "version: release go-ethereum v1.15.4 stable"
        },
        {
            "date": "2025-03-01 13:11:51",
            "message": "ethclient: add BlobBaseFee method (#31290)"
        },
        {
            "date": "2025-03-01 13:10:38",
            "message": "eth: check blob transaction validity on the peer goroutine when received (#31219)\n\nThis ensures that if we receive a blob transaction announcement where we cannot\nlink the tx to the sidecar commitments, we will drop the sending peer. This check\nis added in the protocol handler for the PooledTransactions message.\n\nTests for this have also been added in the cross-client \"eth\" protocol test suite.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-01 12:58:57",
            "message": "eth: do not add failed tx to localTxTracker (#31202)\n\nIn transaction-sending APIs such as `eth_sendRawTransaction`, a submitted transaction \nfailing the configured txpool validation rules (i.e. fee too low) would cause an error to be\nreturned, even though the transaction was successfully added into the locals tracker.\nOnce added there, the transaction may even be included into the chain at a later time,\nwhen fee market conditions change.\n\nThis change improves on this by performing the validation in the locals tracker, basically\nskipping some of the validation rules for local transactions. We still try to add the tx to the\nmain pool immediately, but an error will only be returned for transactions which are \nfundamentally invalid.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-02-28 12:07:21",
            "message": "eth: remove EventMux accessors (#30017)\n\nHi, it seems these methods in the `backend.go` and `api_backend.go`\nfiles are not used that expose the eventMux, but that is not needed."
        },
        {
            "date": "2025-02-28 11:53:56",
            "message": "core/tracing: stringer for gas and nonce change reasons (#31234)"
        },
        {
            "date": "2025-02-27 16:52:22",
            "message": "build/deb: add step for new Go bootstrap to debian rules (#31283)\n\nNext attempt at fixing the build on launchpad.net"
        },
        {
            "date": "2025-02-27 14:53:52",
            "message": "all: drop x/exp direct dependency (#30558)\n\nThis is a not-particularly-important \"cleanliness\" PR. It removes the\nlast remnants of the `x/exp` package, where we used the `maps.Keys`\nfunction.\n\nThe original returned the keys in a slice, but when it became 'native'\nthe signature changed to return an iterator, so the new idiom is\n`slices.Collect(maps.Keys(theMap))`, unless of course the raw iterator\ncan be used instead.\n\nIn some cases, where we previously collect into slice and then sort, we\ncan now instead do `slices.SortXX` on the iterator instead, making the\ncode a bit more concise.\n\nThis PR might be _slighly_ less optimal, because the original `x/exp`\nimplementation allocated the slice at the correct size off the bat,\nwhich I suppose the new code won't.\n\nPutting it up for discussion.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-02-27 14:52:00",
            "message": "build: simplify go mod tidy check (#31266)\n\nThis changes the go mod tidy check to use the go mod tidy -diff command,\nremoving the custom diffing for go.mod. The check for go.mod/go.sum is now\nperformed in the check_generate action.\n\nAlso included is a change where check_generate and check_baddeps will now\nrun on the GitHub Actions lint step.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-02-27 11:07:36",
            "message": "build: update PPA Go bootstrap version to 1.23 (#31282)\n\nThis is for fixing the PPA build, which has been failing since the\nupdate to Go 1.24. In Go 1.24, the required Go version for bootstrapping\nwas updated to 1.22. In general, they are following through with always\ndepending on the Go version two releases ago for bootstrapping.\n\nSince we still support Ubuntu Xenial (16.04) until its EOL date of\n04/2026, and Xenial only has golang 1.10 as a package, we now need to\nbuild Go a total of four times to get the most recent version. I'm adding a step\nfor Go 1.23 here. This should last us until Go 1.25, which should be out around\n04/2026, and we can hopefully drop the first bootstrapping step at that time."
        },
        {
            "date": "2025-02-27 09:08:33",
            "message": "core/txpool: fix error logs flood caused by removeAuthorities (#31249)\n\nwhen remove an non-SetCodeTxType transaction, error logs flood\n```\nt=2025-02-25T03:11:06+0000 lvl=error msg=\"Authority with untracked tx\" addr=0xD5bf9221fCB1C31Cd1EE477a60c148d40dD63DC1 hash=0x626fdf205a5b1619deb2f9e51fed567353f80acbd522265b455daa0821c571d9\n```\n\nin this PR, only try to removeAuthorities for txs with SetCodeTxType\n\nin addition, the performance of removeAuthorities improved a lot,\nbecause no need range all `t.auths` now.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-02-27 07:40:35",
            "message": "eth/gasprice: sanity check ratio values (#31270)\n\nFollow on to #31246. Adds a sanity check in the test to make sure the\nratio value never goes over 1. Would have avoided the issue in #31245."
        },
        {
            "date": "2025-02-26 23:07:14",
            "message": "cmd/workload: RPC workload tests for filters and history (#31189)\n\n\nCo-authored-by: Felix Lange <fjl@twurst.com>\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2025-02-26 18:24:14",
            "message": "eth/gasprice: fix eth_feeHistory blobGasRatio (#31246)\n\nThis change divides BlobGasUsed by MaxBlobGasPerBlock instead of\nMaxBlobsPerBlock. Dividing by MaxBlobsPerBlock\nmeant the blobGasUsedRatio was an incorrect large number. This bug was\nintroduced by a typo\n[here](https://github.com/ethereum/go-ethereum/commit/e6f3ce7b168b8f346de621a8f60d2fa57c2ebfb0#diff-3357b2399699d7cf954c543cbfb02ff442eb24491e55f5e813e3cc85829b3e8dR110)\n\nFixes https://github.com/ethereum/go-ethereum/issues/31245"
        },
        {
            "date": "2025-02-26 10:49:02",
            "message": "build: filter out .git folder for go generate check (#31265)\n\nFixes lint issue\n\n    >>> /home/appveyor/.gvm/gos/go1.24.0/bin/go generate ./...\n    ci.go:404: File changed: .git/index\n    ci.go:407: One or more generated files were updated by running 'go generate ./...'\n    exit status 1"
        },
        {
            "date": "2025-02-25 15:20:50",
            "message": "version: begin v1.15.4 release cycle"
        },
        {
            "date": "2025-02-25 15:18:34",
            "message": "version: release go-ethereum v1.15.3 stable"
        },
        {
            "date": "2025-02-25 12:40:57",
            "message": "eth/protocols/eth: fix loading \"eth\" ENR key in dial filter (#31251)\n\nThis fixes an issue where dial candidates from discv5 would be ignored\nbecause the \"eth\" ENR entry was not loaded correctly."
        },
        {
            "date": "2025-02-25 11:21:35",
            "message": "ethclient/simulated: add goroutine leak test  (#31033)\n\nAdds a basic sanity test case to catch any go-routines leaked from\ninstantiation/closing of a simulated backend."
        },
        {
            "date": "2025-02-21 02:28:11",
            "message": "Fix flakey behavior in simulated backend Rollback"
        },
        {
            "date": "2025-02-24 23:42:00",
            "message": "params: add deposit contract addresses (#31247)\n\nWe forgot to add the deposit contract address for holesky, causing\ndeposits to not be flagged correctly\n\n---------\n\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>"
        },
        {
            "date": "2025-02-24 21:17:21",
            "message": "core/txpool: move setcode tx validation into legacyPool (#31209)\n\nIn this PR, several improvements have been made:\n\nAuthorization-related validations have been moved to legacyPool. \nPreviously, these checks were part of the standard validation procedure,\nwhich applies common validations across different pools. Since these \nchecks are specific to SetCode transactions, relocating them to\nlegacyPool\nis a more reasonable choice.\n\nAdditionally, authorization conflict checks are now performed regardless\nof whether the transaction is a replacement or not.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-02-24 11:23:25",
            "message": "crypto: add comment to FromECDSAPub (#31241)\n\ncloses https://github.com/ethereum/go-ethereum/issues/26240"
        },
        {
            "date": "2025-02-24 09:31:33",
            "message": "go.mod: update cloudflare-go (#31240)\n\nUpdates cloudflare-go from v0.79.0 to v0.114.0 which also gets rid of a\ndependency to `github.com/hashicorp/go-retryablehttp` which had a\nsecurity flaw.\n\nDiff:\nhttps://github.com/cloudflare/cloudflare-go/compare/v0.79.0...v0.114.0\n\nI did a quick sanity check on the diff on all methods that we use and\nwent through the release notes, there was nothing related to how we use\nit afaict"
        },
        {
            "date": "2025-02-23 16:38:32",
            "message": "eth: report error from setupDiscovery at startup (#31233)\n\nI ran into this while trying to debug a discv5 thing. I tried to disable\nDNS discovery using `--discovery.dns=false`, which doesn't work.\nAnnoyingly, geth started anyway and discarded the error silently. I\neventually found my mistake, but it took way longer than it should have.\n\nAlso including a small change to the error message for invalid DNS URLs\nhere. The user actually needs to see the URL to make sense of the error."
        },
        {
            "date": "2025-02-21 12:36:18",
            "message": "build: replace `tenv` linter with `usetesting` (#31172)"
        },
        {
            "date": "2025-02-21 10:45:02",
            "message": "cmd/clef: improve documentation in readme (#31218)\n\nFixed broken or outdated links and improved documentation formatting to\nensure consistency and correct references.\n\n---------\n\nCo-authored-by: Sina M <1591639+s1na@users.noreply.github.com>"
        },
        {
            "date": "2025-02-21 08:52:55",
            "message": "internal/ethapi: fix prev hashes in eth_simulate (#31122)\n\nShout-out to @Gabriel-Trintinalia for discovering this issue. The gist\nof it as follows:\n\nWhen processing a block, we should provide the parent block as well as\nthe last 256 block hashes. Some of these parents data (specifically the\nhash) was incorrect because even though during the processing of the\nparent block we have updated the header, that header was not updating\nthe TransactionsRoot and ReceiptsRoot fields (types.NewBlock makes a new\ncopy of the header and changes it only on that instance).\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-02-21 08:48:24",
            "message": "signer/core:  fix encoding of `bytes` nested within array (#31049)\n\nFixes an incorrect encoding of recursive bytes types.\ncloses https://github.com/ethereum/go-ethereum/issues/30979"
        },
        {
            "date": "2025-02-21 05:45:29",
            "message": "core/types: remove unneeded todo marker (#31179)"
        },
        {
            "date": "2025-02-21 02:42:54",
            "message": "p2p/nat: remove test with default servers (#31225)\n\nThe test occasionally fails when network connectivity is bad or if it\nhits the wrong server. We usually don't add tests with external network\ndependency so I'm removing them.\n\nFixes #31220"
        },
        {
            "date": "2025-02-20 17:46:25",
            "message": "oss-fuzz: remove deprecated targets (#31224)\n\nFixes https://github.com/ethereum/go-ethereum/issues/31223\n\n(sorry, I thought the fork fork would be created on my repo, not\nupstream, when I used the GH editor)"
        },
        {
            "date": "2025-02-20 14:04:35",
            "message": "eth/tracers: refactor block context in test runner (#29450)\n\nThis commit contains a minor refactoring of the block context\nused within the test runners.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-02-20 13:30:55",
            "message": "internal/ethapi: handle prague system calls in eth_simulate (#31176)\n\neth_simulate was not processing prague system calls for history contract and EL\nrequests resulting in inaccurate stateRoot and requestsRoot fields in the block."
        },
        {
            "date": "2025-02-20 12:11:48",
            "message": "core/txpool/legacypool: add setCodeTx reorg test (#31206)\n\nThis PR adds a test that makes sure that a node can send multiple\ntransactions again once a authorization is removed"
        },
        {
            "date": "2025-02-20 09:27:13",
            "message": ".github: downgrade go for lint step (#31217)"
        },
        {
            "date": "2025-02-19 13:57:08",
            "message": "core/asm: delete assembler/disassembler (#31211)\n\nI maintain an improved version of the go-ethereum assembler at\nhttps://github.com/fjl/geas. We don't really use core/asm in our tests,\nand it has some bugs that prevent it from being useful, so I'm removing\nthe package."
        },
        {
            "date": "2025-02-19 10:21:22",
            "message": "build: upgrade -dlgo version to Go 1.24.0 (#31159)\n\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-02-18 20:08:43",
            "message": "eth/catalyst: support earlier forks in SimulatedBeacon (#31084)\n\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-02-18 14:03:48",
            "message": "params: add osaka blob schedule (#31174)\n\nPrevents crashes when running execution spec tests for osaka"
        },
        {
            "date": "2025-02-18 13:53:33",
            "message": "core/vm: clean up EVM environmental structure (#31061)\n\nThis PR does a few things including:\r\n\r\n- Remove `ContractRef` interface\r\n- Remove `vm.AccountRef` which implements `ContractRef` interface\r\n- Maintain the `jumpDests` struct in EVM for sharing between call frames\r\n- Simplify the delegateCall context initialization"
        },
        {
            "date": "2025-02-18 10:15:36",
            "message": "ethclient: add comment describing block number tags (#30984)\n\nAdds a comment on how to use rpc.*BlockNumber and the explanation of the block number tags\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-02-18 05:50:19",
            "message": "utils: clarify description for history.state flag (#31164)"
        },
        {
            "date": "2025-02-18 02:48:42",
            "message": "trie: do not expect ordering in stacktrie during fuzzing (#31170)\n\nThis PR removes the assumption of the stacktrie and trie to have the\r\nsame ordering. This was hit by the fuzzers on oss-fuzz\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-02-17 11:01:20",
            "message": "version: begin v1.15.3 release cycle"
        },
        {
            "date": "2025-02-17 10:59:48",
            "message": "version: release go-ethereum v1.15.2 stable"
        },
        {
            "date": "2025-02-17 09:12:03",
            "message": "eth/protocols/eth: add discovery iterator to protocol (#31185)\n\nWe somehow forgot to add this in #30302, so discv5 and DNS have actually\nbeen disabled since then.\n\nFixes #31168"
        },
        {
            "date": "2025-02-17 08:47:12",
            "message": "p2p: fix marshaling of NAT in TOML (#31192)\n\nThis fixes an issue where a nat.Interface unmarshaled from the TOML\nconfig file could not be re-marshaled to TOML correctly.\n\nFixes #31183"
        },
        {
            "date": "2025-02-17 06:30:06",
            "message": "consensus/beacon: fix isPostMerge for mainnet (#31191)\n\nThis fixes a regression introduced in #31153 where we didn't consider\r\nmainnet to be in PoS, causing #31190.\r\nThe problem is, `params.MainnetChainConfig` does not have a defined\r\n`MergeNetsplitBlock`, so it isn't considered to be in PoS in\r\n`CalcDifficulty`."
        },
        {
            "date": "2025-02-13 17:05:58",
            "message": "core/types: create block's bloom by merging receipts' bloom (#31129)\n\nCurrently, when calculating block's bloom, we loop through all the\r\nreceipt logs to calculate the hash value. However, normally, after going\r\nthrough applyTransaction, the receipt's bloom is already calculated\r\nbased on the receipt log, so the block's bloom can be calculated by just\r\nORing these receipt's blooms.\r\n```\r\ngoos: darwin\r\ngoarch: arm64\r\npkg: github.com/ethereum/go-ethereum/core/types\r\ncpu: Apple M1 Pro\r\nBenchmarkCreateBloom\r\nBenchmarkCreateBloom/small\r\nBenchmarkCreateBloom/small-10             810922              1481 ns/op             104 B/op          5 allocs/op\r\nBenchmarkCreateBloom/large\r\nBenchmarkCreateBloom/large-10               8173            143764 ns/op            9614 B/op        401 allocs/op\r\nBenchmarkCreateBloom/small-mergebloom\r\nBenchmarkCreateBloom/small-mergebloom-10                 5178918               232.0 ns/op             0 B/op          0 allocs/op\r\nBenchmarkCreateBloom/large-mergebloom\r\nBenchmarkCreateBloom/large-mergebloom-10                   54110             22207 ns/op               0 B/op          0 allocs/op\r\n```\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\r\nCo-authored-by: Zsolt Felfoldi <zsfelfoldi@gmail.com>"
        },
        {
            "date": "2025-02-13 15:26:36",
            "message": "version: begin v1.15.2 release cycle"
        },
        {
            "date": "2025-02-13 15:21:36",
            "message": "version: release go-ethereum v1.15.1 stable"
        },
        {
            "date": "2025-02-13 13:48:03",
            "message": "core/rawdb: skip setting flushOffset in read-only mode (#31173)\n\nThis PR addresses a flaw in the freezer table upgrade path.\n\nIn v1.15.0, freezer table v2 was introduced, including an additional \nfield (`flushOffset`) maintained in the metadata file. To ensure \nbackward compatibility, an upgrade path was implemented for legacy\nfreezer tables by setting `flushOffset` to the size of the index file.\n\nHowever, if the freezer table is opened in read-only mode, this file \nwrite operation is rejected, causing Geth to shut down entirely.\n\nGiven that invalid items in the freezer index file can be detected and \ntruncated, all items in freezer v0 index files are guaranteed to be\ncomplete. Therefore, when operating in read-only mode, it is safe to\nuse the  freezer data without performing an upgrade."
        },
        {
            "date": "2025-02-13 12:05:05",
            "message": "core: sanity-check fork configuration in genesis (#31171)\n\nThis is to prevent a crash on startup with a custom genesis configuration.\nWith this change in place, upgrading a chain created by geth v1.14.x and\nbelow will now print an error instead of crashing:\n\n    Fatal: Failed to register the Ethereum service: invalid chain configuration: missing entry for fork \"cancun\" in blobSchedule\n\nArguably this is not great, and it should just auto-upgrade the config.\nWe'll address this in a follow-up PR for geth v1.15.2"
        },
        {
            "date": "2025-02-13 08:45:27",
            "message": "go.mod: update blst to v0.3.14 (#31165)\n\ncloses https://github.com/ethereum/go-ethereum/issues/31072\r\n\r\nBLST released their newest version which includes a fix for go v.1.24:\r\nhttps://github.com/supranational/blst/releases/tag/v0.3.14\r\n\r\nI went through all commits between 0.3.14 and 0.3.13 for a sanity check"
        },
        {
            "date": "2025-02-12 01:55:00",
            "message": "trie: copy preimage store pointer in StateTrie.Copy (#31158)\n\nThis fixes an error where executing `evm run --dump ...` omits preimages\r\nfrom the dump (because the statedb used for execution is a copy of\r\nanother instance)."
        },
        {
            "date": "2025-02-11 15:02:30",
            "message": "internal/ethapi: fix panic in debug methods (#31157)\n\nFixes an error when the block is not found in debug methods."
        },
        {
            "date": "2025-02-11 13:15:04",
            "message": "core/txpool/legacypool: add support for SetCode transactions (#31073)\n\nThe new SetCode transaction type introduces some additional complexity\nwhen handling the transaction pool.\n\nThis complexity stems from two new account behaviors:\n\n1. The balance and nonce of an account can change during regular\n   transaction execution *when they have a deployed delegation*.\n2. The nonce and code of an account can change without any EVM execution\n   at all. This is the \"set code\" mechanism introduced by EIP-7702.\n\nThe first issue has already been considered extensively during the design\nof ERC-4337, and we're relatively confident in the solution of simply\nlimiting the number of in-flight pending transactions an account can have\nto one. This puts a reasonable bound on transaction cancellation. Normally\nto cancel, you would need to spend 21,000 gas. Now it's possible to cancel\nfor around the cost of warming the account and sending value\n(`2,600+9,000=11,600`). So 50% cheaper.\n\nThe second issue is more novel and needs further consideration.\nSince authorizations are not bound to a specific transaction, we\ncannot drop transactions with conflicting authorizations. Otherwise,\nit might be possible to cherry-pick authorizations from txs and front\nrun them with different txs at much lower fee amounts, effectively DoSing\nthe authority. Fortunately, conflicting authorizations do not affect the\nunderlying validity of the transaction so we can just accept both.\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-02-11 12:52:43",
            "message": "p2p/discover: make discv5 response timeout configurable (#31119)"
        },
        {
            "date": "2025-02-11 12:45:44",
            "message": "p2p/discover: remove unused parameter in revalidationList.get (#31155)"
        },
        {
            "date": "2025-02-11 12:44:25",
            "message": "consensus/beacon: remove TestingTTDBlock (#31153)\n\nThis removes the method `TestingTTDBlock` introduced by #30744. It was\nadded to make the beacon consensus engine aware of the merge block in\ntests without relying on the total difficulty. However, tracking the\nmerge block this way is very annoying. We usually configure forks in the\n`ChainConfig`, but the method is on the consensus engine, which isn't\nalways created in the same place. By sidestepping the `ChainConfig` we\ndon't get the usual fork-order checking, so it's possible to enable the\nmerge before the London fork, for example. This in turn can lead to very\nhard-to-debug outputs and validation errors.\n\nSo here I'm changing the consensus engine to check the\n`MergeNetsplitBlock` instead. Alternatively, we assume a network is\nmerged if it has a `TerminalTotalDifficulty` of zero, which is a very\ncommon configuration in tests."
        },
        {
            "date": "2025-02-08 12:26:15",
            "message": "params,core/forkid: enable prague on holesky and sepolia (#31139)\n\nAgreed to the following fork dates for Holesky and Sepolia on ACDC 150\n\nHolesky slot: 3710976\t(Mon, Feb 24 at 21:55:12 UTC)\nSepolia slot: 7118848\t(Wed, Mar 5 at 07:29:36 UTC)"
        },
        {
            "date": "2025-02-07 01:59:12",
            "message": "cmd/devp2p/internal/ethtest: remove TD from status validation (#31137)\n\nAfter recent changes in Geth (removing TD):\r\n\r\nhttps://github.com/ethereum/go-ethereum/commit/39638c81c56db2b2dfe6f51999ffd3029ee212cb#diff-d70a44d4b7a0e84fe9dcca25d368f626ae6c9bc0b8fe9690074ba92d298bcc0d\r\n\r\nNon-Geth clients are failing many devp2p tests with an error:\r\n`peering failed: status exchange failed: wrong TD in status: have 1 want 0`\r\n\r\nRight now only Geth is passing it - all other clients are affected by\r\nthis change. I think there should be no validation of TD when checking `Status`\r\nmessage in hive tests. Now Geth has 0 (and hive tests requires 0) and\r\nall other clients have actual TD. And on real networks there is no validation\r\nof TD when peering"
        },
        {
            "date": "2025-02-06 14:06:46",
            "message": "version: begin v1.15.1 release cycle"
        },
        {
            "date": "2025-02-06 14:05:41",
            "message": "version: release go-ethereum v1.15.0"
        },
        {
            "date": "2025-02-06 11:33:40",
            "message": "build: update EEST fixtures to prague devnet-6 (#31088)\n\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-02-05 22:19:09",
            "message": "build: update to Go 1.23.6 (#31130)\n\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-02-05 22:01:17",
            "message": "all: update license comments and AUTHORS (#31133)"
        },
        {
            "date": "2025-02-05 12:58:25",
            "message": "core/tracing: state journal wrapper (#30441)\n\nHere we add some more changes for live tracing API v1.1:\n\n- Hook `OnSystemCallStartV2` was introduced with `VMContext` as parameter.\n- Hook `OnBlockHashRead` was introduced.\n- `GetCodeHash` was added to the state interface\n- The new `WrapWithJournal` construction helps with tracking EVM reverts in the tracer.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-02-05 09:35:03",
            "message": "consensus/misc/eip4844: more changes for blob gas calculation (#31128)\n\nThis PR changes the signature of `CalcExcessBlobGas` to take in just\nthe header timestamp instead of the whole object. It also adds a sanity\ncheck for the parent->child block order to `VerifyEIP4844Header`."
        },
        {
            "date": "2025-02-04 20:43:18",
            "message": "consensus/misc/eip4844: use head's target blobs, not parent (#31101)\n\nA clarification was made to EIP-7691 stating that at the fork boundary\nit is required to use the target blob count associated with the head\nblock, rather than the parent as implemented here.\n\nSee for more: https://github.com/ethereum/EIPs/pull/9249"
        },
        {
            "date": "2025-02-04 17:10:40",
            "message": "core/txpool/blobpool: fix incorrect arguments in test (#31127)\n\nFixes the linter on master which was broken by\r\nhttps://github.com/ethereum/go-ethereum/pull/30559"
        },
        {
            "date": "2025-02-04 16:23:01",
            "message": "core/txpool: remove locals-tracking from txpools (#30559)\n\nReplaces  #29297, descendant from #27535\r\n\r\n---------\r\n\r\nThis PR removes `locals` as a concept from transaction pools. Therefore,\r\nthe pool now acts as very a good simulation/approximation of how our\r\npeers' pools behave. What this PR does instead, is implement a\r\nlocals-tracker, which basically is a little thing which, from time to\r\ntime, asks the pool \"did you forget this transaction?\". If it did, the\r\ntracker resubmits it.\r\n\r\nIf the txpool _had_ forgotten it, chances are that the peers had also\r\nforgotten it. It will be propagated again.\r\n\r\nDoing this change means that we can simplify the pool internals, quite a\r\nlot.\r\n\r\n### The semantics of `local` \r\n\r\nHistorically, there has been two features, or usecases, that has been\r\ncombined into the concept of `locals`.\r\n\r\n1. \"I want my local node to remember this transaction indefinitely, and\r\nresubmit to the network occasionally\"\r\n2. \"I want this (valid) transaction included to be top-prio for my\r\nminer\"\r\n\r\n\r\nThis PR splits these features up, let's call it `1: local` and `2:\r\nprio`. The `prio` is not actually individual transaction, but rather a\r\nset of `address`es to prioritize.\r\nThe attribute `local` means it will be tracked, and `prio` means it will\r\nbe prioritized by miner.\r\n\r\nFor `local`: anything transaction received via the RPC is marked as\r\n`local`, and tracked by the tracker.\r\nFor `prio`: any transactions from this sender is included first, when\r\nbuilding a block. The existing commandline-flag `--txpool.locals` sets\r\nthe set of `prio` addresses.\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-02-04 16:16:26",
            "message": "core: assign default difficulty to zero for chain without ethash (#31067)\n\nI hit this case while trying something with the simulated backend. The\nEVM only enables instruction set forks after the merge when 'Random' is\nset. In the simulated backend, the random value will be set via the\nengine API for all blocks after genesis. But for the genesis block\nitself, the random value will not be assigned in the vm.BlockContext\nbecause the genesis has a non-zero difficulty. For my case, this meant\nthat estimateGas did not work for the first transaction sent on the\nsimulated chain, since the contract contained a PUSH0 instruction.\n\nThis could also be fixed by explicitly configuring a zero difficulty in\nthe simulated backend. However, I think that zero difficulty is a better\ndefault these days.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-02-04 14:43:18",
            "message": "params,core: add max and target value to chain config (#31002)\n\nImplements [EIP-7840](https://github.com/ethereum/EIPs/pull/9129) and\r\n[EIP-7691](https://github.com/ethereum/EIPs/blob/d96625a4dcbbe2572fa006f062bd02b4582eefd5/EIPS/eip-7691.md).\r\n\r\n---------\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-02-04 14:29:51",
            "message": "params: start osaka fork (#31125)\n\nThis PR defines the Osaka fork. An easy first step to start our work on\nthe next hardfork\n\n(This is needed for EOF testing as well)\n\n---------\n\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>"
        },
        {
            "date": "2025-02-04 13:22:30",
            "message": "core: copy genesis before modifying (#31097)\n\nThis PR fixes a data race in SetupGenesisWithOverride."
        },
        {
            "date": "2025-02-04 10:45:45",
            "message": "core/rawdb: introduce flush offset in freezer (#30392)\n\nThis is a follow-up PR to #29792 to get rid of the data file sync.\n\n**This is a non-backward compatible change, which increments the\ndatabase version from 8 to 9**.\n\nWe introduce a flushOffset for each freezer table, which tracks the position\nof the most recently fsync\u2019d item in the index file. When this offset moves\nforward, it indicates that all index entries below it, along with their corresponding\ndata items, have been properly persisted to disk. The offset can also be moved\nbackward when truncating from either the head or tail of the file.\n\nPreviously, the data file required an explicit fsync after every mutation, which\nwas highly inefficient. With the introduction of the flush offset, the synchronization\nstrategy becomes more flexible, allowing the freezer to sync every 30 seconds\ninstead.\n\nThe data items above the flush offset are regarded volatile and callers must ensure\nthey are recoverable after the unclean shutdown, or explicitly sync the freezer\nbefore any proceeding operations.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-02-04 06:09:06",
            "message": "tests/fuzzers/bls12381: fix error message in fuzzCrossG2Add (#31113)\n\nFixes a typo in the error message within the `fuzzCrossG2Add`\r\nfunction. The panic message incorrectly references \"G1 point addition\r\nmismatch\" when it should be \"G2 point addition mismatch,\" as the\r\nfunction deals with G2 points.\r\n\r\nThis doesn't affect functionality but could cause confusion during\r\ndebugging. I've updated the message to reflect the correct curve."
        },
        {
            "date": "2025-02-03 17:44:26",
            "message": "core/vm: simplify tracer hook invocation in interpreter loop (#31074)\n\nRemoves duplicate code in the interpreter loop."
        },
        {
            "date": "2025-01-31 17:34:22",
            "message": "eth/catalyst: fix validation of type 0 request (#31103)\n\nI caught this error on Hive. It was introduced by\nhttps://github.com/ethereum/go-ethereum/pull/31071 because after adding\nthe equality check the request type 0 will be rejected."
        },
        {
            "date": "2025-01-31 09:36:49",
            "message": "params: update system contract addresses for devnet-6 (#31102)\n\nFinalize Prague system contract addresses. Reference:\n\n* https://github.com/ethereum/EIPs/pull/9287\n* https://github.com/ethereum/EIPs/pull/9288\n* https://github.com/ethereum/EIPs/pull/9289"
        },
        {
            "date": "2025-01-30 16:08:42",
            "message": "core/vm: EXTCODE* return delegation designator for 7702 (#31089)\n\nImplements https://github.com/ethereum/EIPs/pull/9248"
        },
        {
            "date": "2025-01-30 16:07:45",
            "message": "core: implement eip-7623 floor data gas (#30946)\n\nThis PR builds on #29040 and updates it to the new version of the spec.\nI filled the EEST tests and they pass.\n\nLink to spec: https://eips.ethereum.org/EIPS/eip-7623\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-01-30 15:58:53",
            "message": "all: add build tags for wasip1 (#31090)"
        },
        {
            "date": "2025-01-30 14:00:50",
            "message": "version: begin v1.15.0 release cycle"
        },
        {
            "date": "2025-01-30 13:52:02",
            "message": "build: provide a flag to disable publishing in dockerx build (#31098)\n\nThis changes the `-upload` flag to just toggle the upload. The remote\nimage name is now configured using the `-hub` flag."
        },
        {
            "date": "2025-01-30 13:10:36",
            "message": "crypto: add IsOnCurve check (#31100)"
        },
        {
            "date": "2025-01-30 13:06:50",
            "message": "build: retry PPA upload up to three times (#31099)"
        },
        {
            "date": "2025-01-30 10:21:23",
            "message": "Revert \".travis.yml: change arch for Docker build to arm64 (#31096)\"\n\nThis reverts commit 7b96ec4dae8d4ddeffc761c7757c12e2d2b8bf74."
        },
        {
            "date": "2025-01-30 10:10:45",
            "message": ".travis.yml: change arch for Docker build to arm64 (#31096)\n\nThis is an attempt to work around a gcc issue in the Docker build."
        },
        {
            "date": "2025-01-30 09:58:44",
            "message": "build: bump test timeout (#31095)\n\nTravis often fails because the test times out."
        },
        {
            "date": "2025-01-29 13:31:25",
            "message": "core/{.,state,vm},miner,eth/tracers,tests: implement 7709 with a syscall flag (#31036)\n\nSame as #31015 but requires the contract to exist. Not compatible with\nany verkle testnet up to now.\n\nThis adds a `isSytemCall` flag so that it is possible to detect when a\nsystem call is executed, so that the code execution and other locations\nare not added to the witness.\n\n---------\n\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\nCo-authored-by: Ignacio Hagopian <jsign.uy@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-01-28 17:56:20",
            "message": ".github: add lint step (#31068)"
        },
        {
            "date": "2025-01-28 17:55:41",
            "message": "all: nuke total difficulty (#30744)\n\nThe total difficulty is the sum of all block difficulties from genesis\nto a certain block. This value was used in PoW for deciding which chain\nis heavier, and thus which chain to select. Since PoS has a different\nfork selection algorithm, all blocks since the merge have a difficulty\nof 0, and all total difficulties are the same for the past 2 years.\n\nWhilst the TDs are mostly useless nowadays, there was never really a\nreason to mess around removing them since they are so tiny. This\nreasoning changes when we go down the path of pruned chain history. In\norder to reconstruct any TD, we **must** retrieve all the headers from\nchain head to genesis and then iterate all the difficulties to compute\nthe TD.\n\nIn a world where we completely prune past chain segments (bodies,\nreceipts, headers), it is not possible to reconstruct the TD at all. In\na world where we still keep chain headers and prune only the rest,\nreconstructing it possible as long as we process (or download) the chain\nforward from genesis, but trying to snap sync the head first and\nbackfill later hits the same issue, the TD becomes impossible to\ncalculate until genesis is backfilled.\n\nAll in all, the TD is a messy out-of-state, out-of-consensus computed\nfield that is overall useless nowadays, but code relying on it forces\nthe client into certain modes of operation and prevents other modes or\nother optimizations. This PR completely nukes out the TD from the node.\nIt doesn't compute it, it doesn't operate on it, it's as if it didn't\neven exist.\n\nCaveats:\n\n- Whenever we have APIs that return TD (devp2p handshake, tracer, etc.)\nwe return a TD of 0.\n- For era files, we recompute the TD during export time (fairly quick)\nto retain the format content.\n- It is not possible to \"verify\" the merge point (i.e. with TD gone, TTD\nis useless). Since we're not verifying PoW any more, just blindly trust\nit, not verifying but blindly trusting the many year old merge point\nseems just the same trust model.\n- Our tests still need to be able to generate pre and post merge blocks,\nso they need a new way to split the merge without TTD. The PR introduces\na settable ttdBlock field on the consensus object which is used by tests\nas the block where originally the TTD happened. This is not needed for\nlive nodes, we never want to generate old blocks.\n- One merge transition consensus test was disabled. With a\nnon-operational TD, testing how the client reacts to TTD is useless, it\ncannot react.\n\nQuestions:\n\n- Should we also drop total terminal difficulty from the genesis json?\nIt's a number we cannot react on any more, so maybe it would be cleaner\nto get rid of even more concepts.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-01-28 15:56:23",
            "message": "chore: fix various comments (#31082)"
        },
        {
            "date": "2025-01-25 23:53:14",
            "message": "fix README.md (#31076)\n\nHi\nI fixed 2 minor spelling issues.\n\n---------\n\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>"
        },
        {
            "date": "2025-01-24 15:16:02",
            "message": "p2p/nat: add stun protocol (#31064)\n\nThis implements a basic mechanism to query the node's external IP using\na STUN server. There is a built-in list of public STUN servers for convenience.\nThe new detection mechanism must be selected explicitly using `--nat=stun` \nand is not enabled by default in Geth.\n\nFixes #30881\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-01-24 14:38:17",
            "message": "core/vm: implement EIP-2537 spec updates (#30978)\n\nReference:\n\n- Remove MUL precompiles: https://github.com/ethereum/EIPs/pull/8945\n- Pricing change for pairing operation:\nhttps://github.com/ethereum/EIPs/pull/9098\n- Pricing change for add, mapping and mul operations:\nhttps://github.com/ethereum/EIPs/pull/9097\n- Pricing change for MSM operations:\nhttps://github.com/ethereum/EIPs/pull/9116\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-01-24 09:59:33",
            "message": "accounts/usbwallet: fix ledger access for latest firmware and add Ledger Flex (#31004)\n\nThe latest firmware for Ledger Nano S Plus now returns `0x5000` for it's\nproduct ID, which doesn't match any of the product IDs enumerated in\n`hub.go`.\n\nThis PR removes the assumption about the interfaces exposed, and simply\nchecks the upper byte for a match.\n\nAlso adds support for the `0x0007` / `0x7000` product ID (Ledger Flex)."
        },
        {
            "date": "2025-01-23 19:38:09",
            "message": "eth/catalyst: fail on duplicate request types (#31071)\n\nRefer to: https://github.com/ethereum/execution-apis/pull/623"
        },
        {
            "date": "2025-01-23 09:17:12",
            "message": "trie: reduce allocations in stacktrie (#30743)\n\nThis PR uses various tweaks and tricks to make the stacktrie near\nalloc-free.\n\n```\n[user@work go-ethereum]$ benchstat stacktrie.1 stacktrie.7\ngoos: linux\ngoarch: amd64\npkg: github.com/ethereum/go-ethereum/trie\ncpu: 12th Gen Intel(R) Core(TM) i7-1270P\n             \u2502 stacktrie.1  \u2502             stacktrie.7              \u2502\n             \u2502    sec/op    \u2502    sec/op     vs base                \u2502\nInsert100K-8   106.97m \u00b1 8%   88.21m \u00b1 34%  -17.54% (p=0.000 n=10)\n\n             \u2502   stacktrie.1    \u2502             stacktrie.7              \u2502\n             \u2502       B/op       \u2502     B/op      vs base                \u2502\nInsert100K-8   13199.608Ki \u00b1 0%   3.424Ki \u00b1 3%  -99.97% (p=0.000 n=10)\n\n             \u2502  stacktrie.1   \u2502             stacktrie.7             \u2502\n             \u2502   allocs/op    \u2502 allocs/op   vs base                 \u2502\nInsert100K-8   553428.50 \u00b1 0%   22.00 \u00b1 5%  -100.00% (p=0.000 n=10)\n```\nAlso improves derivesha:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/ethereum/go-ethereum/core/types\ncpu: 12th Gen Intel(R) Core(TM) i7-1270P\n                          \u2502 derivesha.1 \u2502             derivesha.2              \u2502\n                          \u2502   sec/op    \u2502    sec/op     vs base                \u2502\nDeriveSha200/stack_trie-8   477.8\u00b5 \u00b1 2%   430.0\u00b5 \u00b1 12%  -10.00% (p=0.000 n=10)\n\n                          \u2502 derivesha.1  \u2502             derivesha.2              \u2502\n                          \u2502     B/op     \u2502     B/op      vs base                \u2502\nDeriveSha200/stack_trie-8   45.17Ki \u00b1 0%   25.65Ki \u00b1 0%  -43.21% (p=0.000 n=10)\n\n                          \u2502 derivesha.1 \u2502            derivesha.2             \u2502\n                          \u2502  allocs/op  \u2502 allocs/op   vs base                \u2502\nDeriveSha200/stack_trie-8   1259.0 \u00b1 0%   232.0 \u00b1 0%  -81.57% (p=0.000 n=10)\n\n```\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-01-22 13:06:36",
            "message": "triedb/pathdb: fix state revert on v2 history (#31060)\n\nState history v2 has been shipped and will take effect after the Cancun fork.\r\nHowever, the state revert function does not differentiate between v1 and v2,\r\ninstead blindly using the storage map key for state reversion. \r\n\r\nThis mismatch between the keys of the live state set and the state history\r\ncan trigger a panic: `non-existent storage slot for reverting`.\r\n\r\nThis flaw has been fixed in this PR."
        },
        {
            "date": "2025-01-22 12:53:01",
            "message": "go.mod: gencodec stable v0.1.0 (#31062)"
        },
        {
            "date": "2025-01-22 08:29:34",
            "message": "p2p: support configuring NAT in TOML file (#31041)\n\nThis is an alternative for #27407 with a solution based on gencodec.\nWith the PR, one can now configure like this:\n\n```\n# config.toml\n[Node.P2P]\nNAT = \"extip:33.33.33.33\"\n```\n\n```shell\n$ geth --config config.toml\n...\nINFO [01-17|16:37:31.436] Started P2P networking      self=enode://2290...ab@33.33.33.33:30303\n```"
        },
        {
            "date": "2025-01-21 22:02:17",
            "message": "cmd/evm: restore --bench flag to evm statetest (#31055)\n\nRefactoring of the `evm` command moved where some commands were valid.\nOne command, `--bench`, used to work in `evm statetest`. The pluming is\nstill in place. This PR puts the `--bench` flag in the place the trace\nflags were moved, and adds tests to validate the bench flag operates in\n`run` and `statetest`\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-01-21 21:23:46",
            "message": "go.mod: remove toolchain line (#31057)\n\nWe have our own system for downloading the toolchain, and really don't\nwant Go's to get in the way of that. We may switch to Go's builtin\ntoolchain support, but not now."
        },
        {
            "date": "2025-01-21 12:11:05",
            "message": "eth/filters: ensure API timeoutLoop terminates with event system (#31056)\n\nDiscovered from failing test introduced\nhttps://github.com/ethereum/go-ethereum/pull/31033 . We should ensure\n`timeoutLoop` terminates if the filter event system is terminated."
        },
        {
            "date": "2025-01-21 07:35:03",
            "message": "cmd/evm: refactor handling output-files for `t8n` (#30854)\n\nAs part of trying to make the inputs and outputs of the evm subcommands\r\nmore streamlined and aligned, this PR modifies how `evm t8n` manages\r\noutput-files.\r\n\r\nPreviously, we do a kind of wonky thing where between each transaction,\r\nwe invoke a `getTracer` closure. In that closure, we create a new\r\noutput-file, a tracer, and then make the tracer stream output to the\r\nfile. We also fiddle a bit to ensure that the file becomes properly\r\nclosed.\r\n\r\nIt is a kind of hacky solution we have in place. This PR changes it, so\r\nthat from the execution-pipeline point of view, we have just a regular\r\ntracer. No fiddling with re-setting it or closing files.\r\n\r\nThat particular tracer, however, is a bit special: it takes care of\r\ncreating new files per transaction (in the tx-start-hook) and closing\r\n(on tx-end-hook). Also instantiating the right type of underlying\r\ntracer, which can be a json-logger or a custom tracer.\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-01-21 03:42:05",
            "message": "core/txpool:  terminate subpool reset goroutine if pool was closed (#31030)\n\nif the pool terminates before `resetDone` can be read, then the\r\ngo-routine will hang."
        },
        {
            "date": "2025-01-20 16:06:39",
            "message": "core/types: initialize ChainID in SetCodeTx copy method (#31054)"
        },
        {
            "date": "2025-01-20 16:04:29",
            "message": "build: upgrade -dlgo version to Go 1.23.5 (#31037)"
        },
        {
            "date": "2025-01-20 09:12:36",
            "message": "core/types: correct chainId check for pragueSigner (#31032)\n\nUse zero value check for the pragueSigner\n\nThis aligns with cancunSigner and londonSigner as well."
        },
        {
            "date": "2025-01-20 07:39:55",
            "message": "cmd/abigen: require either `--abi` or `--combined-json` (#31045)\n\nThis PR addresses issue #30768 , which highlights that running\r\ncmd/abigen/abigen --pkg my_package example.json (erroneously omitting\r\nthe --abi flag) generates an empty binding, when it should fail\r\nexplicitly.\r\n\r\n---------\r\n\r\nCo-authored-by: jwasinger <j-wasinger@hotmail.com>"
        },
        {
            "date": "2025-01-17 15:54:19",
            "message": "ethdb/memorydb: faster DeleteRange (#31038)\n\nThis PR replaces the iterator based DeleteRange implementation of\nmemorydb with a simpler and much faster loop that directly deletes keys\nin the order of iteration instead of unnecessarily collecting keys in\nmemory and sorting them.\n\n---------\n\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2025-01-17 01:59:02",
            "message": "all: implement state history v2 (#30107)\n\nThis pull request delivers the new version of the state history, where\r\nthe raw storage key is used instead of the hash.\r\n\r\nBefore the cancun fork, it's supported by protocol to destruct a\r\nspecific account and therefore, all the storage slot owned by it should\r\nbe wiped in the same transition.\r\n\r\nTechnically, storage wiping should be performed through storage\r\niteration, and only the storage key hash will be available for traversal\r\nif the state snapshot is not available. Therefore, the storage key hash\r\nis chosen as the identifier in the old version state history.\r\n\r\nFortunately, account self-destruction has been deprecated by the\r\nprotocol since the Cancun fork, and there are no empty accounts eligible\r\nfor deletion under EIP-158. Therefore, we can conclude that no storage\r\nwiping should occur after the Cancun fork. In this case, it makes no\r\nsense to keep using hash.\r\n\r\nBesides, another big reason for making this change is the current format\r\nstate history is unusable if verkle is activated. Verkle tree has a\r\ndifferent key derivation scheme (merkle uses keccak256), the preimage of\r\nkey hash must be provided in order to make verkle rollback functional.\r\nThis pull request is a prerequisite for landing verkle.\r\n\r\nAdditionally, the raw storage key is more human-friendly for those who\r\nwant to manually check the history, even though Solidity already\r\nperforms some hashing to derive the storage location.\r\n\r\n---\r\n\r\nThis pull request doesn't bump the database version, as I believe the\r\ndatabase should still be compatible if users degrade from the new geth\r\nversion to old one, the only side effect is the persistent new version\r\nstate history will be unusable.\r\n\r\n---------\r\n\r\nCo-authored-by: Zsolt Felfoldi <zsfelfoldi@gmail.com>"
        },
        {
            "date": "2025-01-16 14:58:16",
            "message": "core/tracing: document `OnCodeChange` now being called from SelfDestruct (#31007)\n\nCo-authored-by: Sina M <1591639+s1na@users.noreply.github.com>"
        },
        {
            "date": "2025-01-16 13:40:15",
            "message": "core/txpool/legacypool: ensure pending nonces are reset by SubPool.Clear (#31020)\n\ncloses https://github.com/ethereum/go-ethereum/issues/30842"
        },
        {
            "date": "2025-01-16 13:36:45",
            "message": "core: use sync.Once for SenderCacher initialization (#31029)\n\nThis changes the SenderCacher so its goroutines will only be started on first use.\nAvoids starting them when package core is just imported but core.BlockChain isn't used."
        },
        {
            "date": "2025-01-15 18:45:20",
            "message": "beacon/engine: check for empty requests (#31010)\n\nAccording to\nhttps://github.com/ethereum/execution-apis/blob/main/src/engine/prague.md#engine_newpayloadv4:\n\n> Elements of the list MUST be ordered by request_type in ascending\norder. Elements with empty request_data MUST be excluded from the list.\n\n---------\n\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>"
        },
        {
            "date": "2025-01-14 15:26:24",
            "message": "eth/gasprice: ensure cache purging goroutine terminates with subscription (#31025)"
        },
        {
            "date": "2025-01-14 13:42:18",
            "message": "core/types: change SetCodeTx.ChainID to uint256 (#30982)\n\nWe still need to decide how to handle non-specfic `chainId` in the JSON\nencoding of authorizations. With `chainId` being a uint64, the previous\nimplementation just used value zero. However, it might actually be more\ncorrect to use the value `null` for this case."
        },
        {
            "date": "2025-01-14 13:16:15",
            "message": "all: fix some typos in comments and names (#31023)"
        },
        {
            "date": "2025-01-14 10:49:30",
            "message": "cmd, core, miner: rework genesis setup (#30907)\n\nThis pull request refactors the genesis setup function, the major\nchanges are highlighted here:\n\n**(a) Triedb is opened in verkle mode if `EnableVerkleAtGenesis` is\nconfigured in chainConfig or the database has been initialized previously with\n`EnableVerkleAtGenesis` configured**.\n\nA new config field `EnableVerkleAtGenesis` has been added in the\nchainConfig. This field must be configured with True if Geth wants to initialize \nthe genesis in Verkle mode.\n\nIn the verkle devnet-7, the verkle transition is activated at genesis.\nTherefore, the verkle rules should be used since the genesis. In production\nnetworks (mainnet and public testnets), verkle activation always occurs after\nthe genesis block. Therefore, this flag is only made for devnet and should be\ndeprecated later. Besides, verkle transition at non-genesis block hasn't been\nimplemented yet, it should be done in the following PRs.\n\n**(b) The genesis initialization condition has been simplified**\nThere is a special mode supported by the Geth is that: Geth can be\ninitialized with an existing chain segment, which can fasten the node sync\nprocess by retaining the chain freezer folder.\n\nOriginally, if the triedb is regarded as uninitialized and the genesis block can\nbe found in the chain freezer, the genesis block along with genesis state will be\ncommitted. This condition has been simplified to checking the presence of chain\nconfig in key-value store. The existence of chain config can represent the genesis\nhas been committed."
        },
        {
            "date": "2025-01-13 18:35:49",
            "message": "core: remove unused function parameters (#31001)"
        },
        {
            "date": "2025-01-13 18:33:49",
            "message": "core/txpool/legacypool: fix flaky test TestAllowedTxSize (#30975)\n\n- it was failing because the maximum data length (previously `dataSize`)\nwas set to `txMaxSize - 213` but should had been `txMaxSize - 103` and\nthe last call `dataSize+1+uint64(rand.Intn(10*txMaxSize)))` would\nsometimes fail depending on rand.Intn.\n- Maximal transaction data size comment (invalid) replaced by code logic\nto find the maximum tx length without its data length\n- comments and variable naming improved for clarity\n- 3rd pool add test replaced to add just 1 above the maximum length,\nwhich is important to ensure the logic is correct"
        },
        {
            "date": "2025-01-13 17:00:25",
            "message": "cmd/devp2p/internal/ethtest: using slices.SortFunc to simplify the code (#31012)\n\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-01-13 15:12:15",
            "message": "eth/tracers/logger: return revert reason (#31013)\n\nFix the error comparison in tracer to prevent dropping revert reason data\r\n\r\n---------\r\n\r\nCo-authored-by: Martin <mrscdevel@gmail.com>\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-01-13 07:26:10",
            "message": "build: upgrade golangci-lint to v1.63.4 (#31019)\n\nThis PR upgrades `golangci-lint` to v1.63.4 and fixes a warn message\r\nwhich is reported by v1.63.4:\r\n\r\n```text\r\nWARN [config_reader] The configuration option `run.skip-dirs-use-default` is deprecated, please use `issues.exclude-dirs-use-default`.\r\n```\r\n\r\nAlso fixes 2 warnings which are reported by v1.63.4:\r\n\r\n```text\r\ncore/txpool/blobpool/blobpool.go:1754:12: S1005: unnecessary assignment to the blank identifier (gosimple)\r\n        for acct, _ := range p.index {\r\n                  ^\r\ncore/txpool/legacypool/legacypool.go:1989:19: S1005: unnecessary assignment to the blank identifier (gosimple)\r\n        for localSender, _ := range pool.locals.accounts {\r\n                         ^\r\n```"
        },
        {
            "date": "2025-01-10 12:51:19",
            "message": "triedb/pathdb: configure different node hasher in pathdb (#31008)\n\nAs the node hash scheme in verkle and merkle are totally different, the\r\noriginal default node hasher in pathdb is no longer suitable. Therefore,\r\nthis pull request configures different node hasher respectively."
        },
        {
            "date": "2025-01-08 13:22:37",
            "message": "README: remove private network section from readme (#31005)"
        },
        {
            "date": "2025-01-07 10:49:13",
            "message": "triedb/pathdb: fix tester generator (#30972)\n\nThis change fixes is a rare bug in test generator: If the run is very unlucky it\r\ncan use `modifyAccountOp` / `deleteAccountOp` without creating any\r\naccount, leading to have a trie root same as the parent.\r\n\r\nThis change makes the first operation always be a creation."
        },
        {
            "date": "2025-01-07 09:31:10",
            "message": "cmd/clef: fix JS issues in documentation (#30980)\n\nFixes a couple of js-flaws in the docs"
        },
        {
            "date": "2025-01-06 15:31:53",
            "message": "eth/protocols/eth: prevent hanging dispatch (#30918)\n\nThis PR attempts to fix a strange test-failure (timeout) observed on a\nwindows-32 platform.\n\nhttps://ci.appveyor.com/project/ethereum/go-ethereum/builds/51174391/job/d8ascanwwltrlqd5\n\nA goroutine is stuck trying to deliver a response:\n```\ngoroutine 9632 [select, 29 minutes]:\ngithub.com/ethereum/go-ethereum/eth/protocols/eth.(*Peer).dispatchResponse(0x314f100, 0x3e5f6d0, 0x3acbb84)\n\tC:/projects/go-ethereum/eth/protocols/eth/dispatcher.go:172 +0x2a5\ngithub.com/ethereum/go-ethereum/eth/protocols/eth.handleBlockHeaders({0x12abe68, 0x30021b8}, {0x12a815c, 0x40b41c0}, 0x314f100)\n\tC:/projects/go-ethereum/eth/protocols/eth/handlers.go:301 +0x173\ngithub.com/ethereum/go-ethereum/eth/protocols/eth.handleMessage({0x12abe68, 0x30021b8}, 0x314f100)\n\tC:/projects/go-ethereum/eth/protocols/eth/handler.go:205 +0x4f6\ngithub.com/ethereum/go-ethereum/eth/protocols/eth.Handle({0x12abe68, 0x30021b8}, 0x314f100)\n\tC:/projects/go-ethereum/eth/protocols/eth/handler.go:149 +0x33\ngithub.com/ethereum/go-ethereum/eth.testSnapSyncDisabling.func1(0x314f100)\n\tC:/projects/go-ethereum/eth/sync_test.go:65 +0x33\ngithub.com/ethereum/go-ethereum/eth.(*handler).runEthPeer(0x30021b8, 0x314f100, 0x427f648)\n\tC:/projects/go-ethereum/eth/handler.go:355 +0xe65\ncreated by github.com/ethereum/go-ethereum/eth.testSnapSyncDisabling in goroutine 11\n\tC:/projects/go-ethereum/eth/sync_test.go:64 +0x54f\nFAIL\tgithub.com/ethereum/go-ethereum/eth\t1800.138s\n\n```\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-01-06 15:28:28",
            "message": "core/types: improve printList in DeriveSha test (#30969)"
        },
        {
            "date": "2025-01-06 06:52:01",
            "message": "core/rawdb: fix panic in freezer (#30973)\n\nFixes an issue where the node panics when an LStat fails with something \r\nother than os.ErrNotExist\r\n\r\ncloses https://github.com/ethereum/go-ethereum/issues/30968"
        },
        {
            "date": "2025-01-03 12:15:06",
            "message": "internal/ethapi: update default simulation timestamp increment to 12 (#30981)\n\nUpdate the default timestamp increment to 12s for `eth_simulate` endpoint"
        },
        {
            "date": "2025-01-02 17:37:58",
            "message": "eth/tracers/logger: skip system calls (#30923)\n\nThis commit makes it so that the struct logger will not emit logs while\nsystem calls are being executed. This will make it consistent with\nthe JSON and MD loggers. It is as it stands hard to distinguish when\nsystem calls are being processed vs when a tx is being processed.\n\n---------\n\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2025-01-02 13:06:47",
            "message": "all: use cmp.Compare (#30958)"
        },
        {
            "date": "2025-01-02 13:04:06",
            "message": "crypto/bn256: fix MulScalar (#30974)\n\nThe `a` parameter should be used in the `MulScalar` function. The\nupstream cloudflare and google repos have already merged fixes.\n\nReference:\n*\nhttps://cs.opensource.google/go/x/crypto/+/8d7daa0c54b357f3071e11eaef7efc4e19a417e2\n* https://github.com/cloudflare/bn256/pull/33"
        },
        {
            "date": "2025-01-02 01:48:25",
            "message": "internal/flags: update copyright year to 2025 (#30976)"
        },
        {
            "date": "2024-12-19 15:03:05",
            "message": "params: update system contracts for prague devnet-5 (#30938)"
        },
        {
            "date": "2024-12-19 09:06:33",
            "message": "core, core/types: rename AuthList to SetCodeAuthorizations (#30935)\n\nAs a follow-up to #30933, I propose to also use the SetCode prefix in\r\nour internal APIs for the authorization list."
        },
        {
            "date": "2024-12-18 19:17:49",
            "message": "cmd/evm: update tests for SetCodeAuthorization JSON encoding change (#30936)\n\nFixing a regression introduced by 73a4ecf675f6, which I accidentally\r\npushed to the master branch directly."
        },
        {
            "date": "2024-12-18 18:46:15",
            "message": "core/types: rename SetCodeAuthorization 'v' to 'yParity'\n\nThe API spec requires the name yParity."
        },
        {
            "date": "2024-12-18 18:10:53",
            "message": "core/types: updates for EIP-7702 API functions (#30933)\n\nHere I am proposing two small changes to the exported API for EIP-7702:\r\n\r\n(1) `Authorization` has a very generic name, but it is in fact only used\r\nfor one niche use case: authorizing code in a `SetCodeTx`. So I propose\r\ncalling it `SetCodeAuthorization` instead. The signing function is\r\nrenamed to `SignSetCode` instead of `SignAuth`.\r\n   \r\n(2) The signing function for authorizations should take key as the first\r\nparameter, and the authorization second. The key will almost always be\r\nin a variable, while the authorization can be given as a literal."
        },
        {
            "date": "2024-12-17 23:18:36",
            "message": "cmd/evm: make evm statetest accept non-json files (#30927)\n\nThis fixes a regression introduced recently. Without this fix, it's not\r\npossible to use statetests without `.json` suffix. This is problematic for\r\ngoevmlab `minimizer`, which appends the suffix `.min` during processing."
        },
        {
            "date": "2024-12-17 18:47:10",
            "message": "core/types, internal/ethapi: fixes for prague RPC encoding (#30926)\n\nFixing some issues I found while regenerating RPC tests for Prague:\r\n\r\n- Authorization signature values were not encoded as hex\r\n- `requestsRoot` in block should be `requestsHash`\r\n- `authorizationList` should work for `eth_call`"
        },
        {
            "date": "2024-12-17 17:37:29",
            "message": "core/vm: make all opcodes proper type (#30925)\n\nNoticed this omission while doing some work on goevmlab. We don't\r\nproperly type some of the opcodes, but apparently implicit casting works\r\nin all the internal usecases."
        },
        {
            "date": "2024-12-17 14:26:03",
            "message": "build(deps): bump golang.org/x/crypto from 0.26.0 to 0.31.0 (#30921)\n\nBumps [golang.org/x/crypto](https://github.com/golang/crypto) from\r\n0.26.0 to 0.31.0.\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
        },
        {
            "date": "2024-12-17 14:16:17",
            "message": "core: fixes for Prague fork in GenerateChain (#30924)\n\nAdding some missing functionality I noticed while updating the hivechain\r\ntool for the Prague fork:\r\n\r\n- we forgot to process the parent block hash\r\n- added `ConsensusLayerRequests` to get the requests list of the block"
        },
        {
            "date": "2024-12-17 08:12:10",
            "message": "accounts/abi/bind: make it possible to wait for tx hash (#30079)\n\nThis change adds methods which makes it possible for to wait for a transaction with a specific hash when deploying contracts during abi bind interaction.\r\n\r\n---------\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2024-12-17 07:58:26",
            "message": "core/vm, go.mod: update uint256 and use faster method to write to memory (#30868)\n\nUpdates geth to use the latest uint256, and use faster memory-writer"
        },
        {
            "date": "2024-12-16 13:10:08",
            "message": "trie/pathdb: state iterator (snapshot integration pt 4) (#30654)\n\nIn this pull request, the state iterator is implemented. It's mostly a copy-paste\r\nfrom the original state snapshot package, but still has some important changes\r\nto highlight here:\r\n\r\n(a) The iterator for the disk layer consists of a diff iterator and a disk iterator.\r\n\r\nOriginally, the disk layer in the state snapshot was a wrapper around the disk, \r\nand its corresponding iterator was also a wrapper around the disk iterator.\r\nHowever, due to structural differences, the disk layer iterator is divided into\r\ntwo parts:\r\n\r\n- The disk iterator, which traverses the content stored on disk.\r\n- The diff iterator, which traverses the aggregated state buffer.\r\n\r\nCheckout `BinaryIterator` and `FastIterator` for more details.\r\n\r\n(b) The staleness management is improved in the diffAccountIterator and\r\ndiffStorageIterator\r\n\r\nOriginally, in the `diffAccountIterator`, the layer\u2019s staleness had to be checked \r\nwithin the Next function to ensure the iterator remained usable. Additionally, \r\na read lock on the associated diff layer was required to first retrieve the account \r\nblob. This read lock protection is essential to prevent concurrent map read/write. \r\nAfterward, a staleness check was performed to ensure the retrieved data was \r\nnot outdated.\r\n\r\nThe entire logic can be simplified as follows: a loadAccount callback is provided \r\nto retrieve account data. If the corresponding state is immutable (e.g., diff layers\r\nin the path database), the staleness check can be skipped, and a single account \r\ndata retrieval is sufficient. However, if the corresponding state is mutable (e.g., \r\nthe disk layer in the path database), the callback can operate as follows:\r\n\r\n```go\r\nfunc(hash common.Hash) ([]byte, error) {\r\n    dl.lock.RLock()\r\n    defer dl.lock.RUnlock()\r\n\r\n    if dl.stale {\r\n        return nil, errSnapshotStale\r\n    }\r\n    return dl.buffer.states.mustAccount(hash)\r\n}\r\n```\r\n\r\nThe callback solution can eliminate the complexity for managing\r\nconcurrency with the read lock for atomic operation."
        },
        {
            "date": "2024-12-16 10:29:37",
            "message": "all: implement eip-7702 set code tx (#30078)\n\nThis PR implements EIP-7702: \"Set EOA account code\". \r\nSpecification: https://eips.ethereum.org/EIPS/eip-7702\r\n\r\n> Add a new transaction type that adds a list of `[chain_id, address,\r\nnonce, y_parity, r, s]` authorization tuples. For each tuple, write a\r\ndelegation designator `(0xef0100 ++ address)` to the signing account\u2019s\r\ncode. All code reading operations must load the code pointed to by the\r\ndesignator.\r\n\r\n---------\r\n\r\nCo-authored-by: Mario Vega <marioevz@gmail.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-12-13 11:46:12",
            "message": "p2p: DNS resolution for static nodes (#30822)\n\nCloses #23210 \r\n\r\n# Context \r\nWhen deploying Geth in Kubernetes with ReplicaSets, we encountered two\r\nDNS-related issues affecting node connectivity. First, during startup,\r\nGeth tries to resolve DNS names for static nodes too early in the config\r\nunmarshaling phase. If peer nodes aren't ready yet (which is common in\r\nKubernetes rolling deployments), this causes an immediate failure:\r\n\r\n\r\n```\r\nINFO [11-26|10:03:42.816] Starting Geth on Ethereum mainnet...\r\nINFO [11-26|10:03:42.817] Bumping default cache on mainnet         provided=1024 updated=4096\r\nFatal: config.toml, line 81: (p2p.Config.StaticNodes) lookup idontexist.geth.node: no such host\r\n``` \r\n\r\nThe second issue comes up when pods get rescheduled to different nodes -\r\ntheir IPs change but peers keep using the initially resolved IP, never\r\nupdating the DNS mapping.\r\n\r\nThis PR adds proper DNS support for enode:// URLs by deferring resolution\r\nto connection time. It also handles DNS failures gracefully instead of failing\r\nfatally during startup, making it work better in container environments where\r\nIPs are dynamic and peers come and go during rollouts.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-12-12 11:39:03",
            "message": "internal/ethapi: add block override to estimateGas (#30695)\n\nAdd block overrides to `eth_estimateGas` to align consistency with\r\n`eth_call`.\r\n\r\n\r\nhttps://github.com/ethereum/go-ethereum/issues/27800#issuecomment-1658186166\r\n\r\nFixes https://github.com/ethereum/go-ethereum/issues/28175\r\n\r\n---------\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2024-12-12 11:33:42",
            "message": "p2p: fix DiscReason encoding/decoding (#30855)\n\nThis fixes an issue where the disconnect message was not wrapped in a list.\r\nThe specification requires it to be a list like any other message.\r\n\r\nIn order to remain compatible with legacy geth versions, we now accept both\r\nencodings when parsing a disconnect message.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-12-11 10:05:59",
            "message": "core/state: remove pointless wrapper functions (#30891)"
        },
        {
            "date": "2024-12-10 13:30:24",
            "message": "accounts/abi: support unpacking solidity errors (#30738)\n\nThis PR adds the error fragments to `func (abi ABI) getArguments` which\r\nallows typed decoding of errors."
        },
        {
            "date": "2024-12-10 13:22:43",
            "message": "build: update to Go 1.23.4 (#30872)"
        },
        {
            "date": "2024-12-10 12:27:29",
            "message": "metrics, cmd/geth: change init-process of metrics (#30814)\n\nThis PR modifies how the metrics library handles `Enabled`: previously,\r\nthe package `init` decided whether to serve real metrics or just\r\ndummy-types.\r\n\r\nThis has several drawbacks: \r\n- During pkg init, we need to determine whether metrics are enabled or\r\nnot. So we first hacked in a check if certain geth-specific\r\ncommandline-flags were enabled. Then we added a similar check for\r\ngeth-env-vars. Then we almost added a very elaborate check for\r\ntoml-config-file, plus toml parsing.\r\n\r\n- Using \"real\" types and dummy types interchangeably means that\r\neverything is hidden behind interfaces. This has a performance penalty,\r\nand also it just adds a lot of code.\r\n\r\nThis PR removes the interface stuff, uses concrete types, and allows for\r\nthe setting of Enabled to happen later. It is still assumed that\r\n`metrics.Enable()` is invoked early on.\r\n\r\nThe somewhat 'heavy' operations, such as ticking meters and exp-decay,\r\nnow checks the enable-flag to prevent resource leak.\r\n\r\nThe change may be large, but it's mostly pretty trivial, and from the\r\nlast time I gutted the metrics, I ensured that we have fairly good test\r\ncoverage.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-12-10 12:10:17",
            "message": "core/vm: remove unnecessary comment (#30887)"
        },
        {
            "date": "2024-12-10 08:43:24",
            "message": "cmd/evm: consolidate evm output switches (#30849)\n\nThis PR attempts to clean up some ambiguities and quirks from recent\r\nchanges to evm flag handling.\r\n\r\nThis PR mainly focuses on `evm run` subcommand, to use the same flags\r\nfor configuring tracing/output options as `statetest/blocktest` does.\r\n\r\nAdditionally, it adds quite a lot of tests for expected outputs of the\r\nvarious subcommands, to avoid accidental changes.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-12-10 02:10:49",
            "message": "core/state: enable partial-functional reader (snapshot integration pt 3) (#30650)\n\nIt's a pull request based on https://github.com/ethereum/go-ethereum/pull/30643\r\n\r\nIn this pull request, the partial functional state reader is enabled if **legacy snapshot\r\nis not enabled**. The tracked flat states in pathdb will be used to serve the state\r\nretrievals, as the second implementation to fasten the state access.\r\n\r\nThis pull request should be a noop change in normal cases."
        },
        {
            "date": "2024-12-09 18:29:19",
            "message": "core/txpool: remove unused parameter `local`  (#30871)"
        },
        {
            "date": "2024-12-06 11:14:05",
            "message": "trie/utils: ensure master can generate a correct genesis for kaustinen7 (#30856)\n\nThis imports the following fixes:\r\n\r\n - update gnark to 1.1.0\r\n - update go-verkle to 0.2.2\r\n - fix: main storage offset bug (gballet/go-ethereum#329)\r\n - fix: tree key generation (gballet/go-ethereum#401)\r\n\r\n---------\r\n\r\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\r\nCo-authored-by: Ignacio Hagopian <jsign.uy@gmail.com>"
        },
        {
            "date": "2024-12-04 08:40:37",
            "message": "core/tracing: extends tracing.Hooks with OnSystemCallStartV2 (#30786)\n\nThis PR extends the Hooks interface with a new method,\r\n`OnSystemCallStartV2`, which takes `VMContext` as its parameter.\r\n\r\nMotivation\r\n\r\nBy including `VMContext` as a parameter, the `OnSystemCallStartV2` hook\r\nachieves parity with the `OnTxStart` hook in terms of provided insights.\r\nThis alignment simplifies the inner tracer logic, enabling consistent\r\nhandling of state changes and internal calls within the same framework.\r\n\r\n---------\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2024-12-04 07:52:59",
            "message": "cmd/evm, eth/tracers: refactor structlogger and make it streaming (#30806)\n\nThis PR refactors the structlog a bit, making it so that it can be used\r\nin a streaming mode.\r\n\r\n-------------\r\n\r\nOBS: this PR makes a change in the input `config` config, the third\r\ninput-parem field to `debug.traceCall`. Previously, seteting it to e.g.\r\n` {\"enableMemory\": true, \"limit\": 1024}` would mean that the response\r\nwas limited to `1024` items. Since an 'item' may include both memory and\r\nstorage, the actual size of the response was undertermined.\r\nAfter this change, the response will be limited to `1024` __`bytes`__\r\n(or thereabouts).\r\n\r\n\r\n\r\n-----------\r\n\r\n\r\nThe commandline usage of structlog now uses the streaming mode, leaving\r\nthe non-streaming mode of operation for the eth_Call.\r\n\r\nThere are two benefits of streaming mode \r\n1. Not have to maintain a long list of operations, \r\n2. Not have to duplicate / n-plicate data, e.g. memory / stack /\r\nreturndata so that each entry has their own private slice.\r\n\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-12-03 15:11:26",
            "message": "CODEOWNERS: add some more entries for auto assignment (#30851)"
        },
        {
            "date": "2024-12-03 08:30:26",
            "message": "eth/downloader: move SyncMode to package eth/ethconfig (#30847)\n\nLots of packages depend on eth/downloader just for the SyncMode type.\r\nSince we have a dedicated package for eth protocol configuration, it\r\nmakes more sense to define SyncMode there, turning eth/downloader into\r\nmore of a leaf package."
        },
        {
            "date": "2024-12-02 17:17:43",
            "message": "internal/debug: rename --trace to --go-execution-trace (#30846)\n\nThis flag is very rarely needed, so it's OK for it to have a verbose\r\nname. The name --trace also conflicts with the concept of EVM tracing,\r\nwhich is much more heavily used."
        },
        {
            "date": "2024-12-02 14:43:17",
            "message": "fuzzing: fix oss-fuzz fuzzer (#30845)\n\nThe fuzzer added recenly to fuzz the eth handler doesn't\r\nbuild on oss-fuzz, because it also has dependencies in the peer_test.go.\r\n\r\nThis change fixes it, I hope, by adding that file also for preprocessing."
        },
        {
            "date": "2024-12-02 14:18:02",
            "message": "cmd/evm: improve block/state test runner (#30633)\n\n* unify `staterunner` and `blockrunner` CLI flags, especially around\r\ntracing\r\n* added support for struct logger or json logging (although having issue\r\n#30658)\r\n* new --cross-check flag to validate the stateless witness collection\r\n  / execution matches stateful\r\n* adds support for tracing the stateless execution when a tracer is set\r\n  (to more easily debug differences)\r\n* --human for more readable test summary\r\n* directory or file input, so if you pass tests/spec-tests/fixtures/blockchain_tests it will execute all\r\nblockchain tests"
        },
        {
            "date": "2024-11-29 17:42:28",
            "message": "eth/tracers: fix state hooks in API (#30830)\n\nWhen a tx/block was being traced through the API the state hooks weren't\r\nbeing called as they should. This is due to #30745 moving the hooked\r\nstatedb one level up in the state processor. This PR fixes that.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-11-29 14:39:42",
            "message": "core: switch EVM tx context in ApplyMessage (#30809)\n\nThis change relocates the EVM tx context switching to the ApplyMessage function.\r\nWith this change, we can remove a lot of EVM.SetTxContext calls before\r\nmessage execution.\r\n\r\n### Tracing API changes\r\n\r\n- This PR replaces the `GasPrice` field of the `VMContext` struct with\r\n  `BaseFee`. Users may instead take the effective gas price from\r\n  `tx.EffectiveGasTipValue(env.BaseFee)`.\r\n\r\n---------\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2024-11-29 14:32:45",
            "message": "core/state: introduce code reader interface (#30816)\n\nThis PR introduces a `ContractCodeReader` interface with functions defined:\r\n\r\ntype ContractCodeReader interface {\r\n\tCode(addr common.Address, codeHash common.Hash) ([]byte, error)\r\n\tCodeSize(addr common.Address, codeHash common.Hash) (int, error)\r\n}\r\n\r\nThis interface can be implemented in various ways. Although the codebase\r\ncurrently includes only one implementation, additional implementations\r\ncould be created for different purposes and scenarios, such as a code\r\nreader designed for the Verkle tree approach or one that reads code from\r\nthe witness.\r\n\r\n*Notably, this interface modifies the function\u2019s semantics. If the\r\ncontract code is not found, no error will be returned. An error should\r\nonly be returned in the event of an unexpected issue, primarily for\r\nfuture implementations.*\r\n\r\nThe original state.Reader interface is extended with ContractCodeReader\r\nmethods, it gives us more flexibility to manipulate the reader with additional\r\nlogic on top, e.g. Hooks.\r\n\r\ntype Reader interface {\r\n\tContractCodeReader\r\n\tStateReader\r\n}\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-11-29 11:30:45",
            "message": "triedb/pathdb: track flat state changes in pathdb (snapshot integration pt 2) (#30643)\n\nThis pull request ports some changes from the main state snapshot\r\nintegration one, specifically introducing the flat state tracking in\r\npathdb.\r\n\r\nNote, the tracked flat state changes are only held in memory and won't\r\nbe persisted in the disk. Meanwhile, the correspoding state retrieval in\r\npersistent state is also not supported yet. The states management in\r\ndisk is more complicated and will be implemented in a separate pull\r\nrequest.\r\n\r\nPart 1: https://github.com/ethereum/go-ethereum/pull/30752"
        },
        {
            "date": "2024-11-28 17:43:39",
            "message": "core/types: add length check in CalcRequestsHash (#30829)\n\nThe existing implementation is correct when building and verifying\r\nblocks, since we will only collect non-empty requests into the block\r\nrequests list.\r\n\r\nBut it isn't correct for cases where a requests list containing empty\r\nitems is sent by the consensus layer on the engine API. We want to\r\nensure that empty requests do not cause a difference in validation\r\nthere, so the commitment computation should explicitly skip them."
        },
        {
            "date": "2024-11-28 13:37:36",
            "message": "cmd/bootnode: remove bootnode utility (#30813)\n\nSince we don't really support custom networks anymore, we don't need the\r\nbootnode utility. In case a discovery-only node is wanted, it can still be run using cmd/devp2p."
        },
        {
            "date": "2024-11-28 10:48:50",
            "message": "all: exclude empty outputs in requests commitment (#30670)\n\nImplements changes from these spec PRs:\r\n\r\n- https://github.com/ethereum/EIPs/pull/8989\r\n- https://github.com/ethereum/execution-apis/pull/599"
        },
        {
            "date": "2024-11-28 09:17:58",
            "message": "trie: combine validation loops in VerifyRangeProof (#30823)\n\nSmall optimization. It's guaranteed that `len(keys)` == `len(values)`,\r\nso we can combine the checks in a single loop rather than 2 separate\r\nloops."
        },
        {
            "date": "2024-11-28 03:21:31",
            "message": "core/state/snapshot: handle legacy journal (#30802)\n\nThis workaround is meant to minimize the possibility for snapshot generation\r\nonce the geth node upgrades to new version (specifically #30752 )\r\n\r\nIn #30752, the journal format in state snapshot is modified by removing\r\nthe destruct set. Therefore, the existing old format (version = 0) will be\r\ndiscarded and all in-memory layers will be lost. Unfortunately, the lost \r\nin-memory layers can't be recovered by some other approaches, and the \r\nentire state snapshot will be regenerated (it will last about 2.5 hours).\r\n\r\nThis pull request introduces a workaround to adopt the legacy journal if\r\nthe destruct set contained is empty. Since self-destruction has been\r\ndeprecated following the cancun fork, the destruct set is expected to be nil for\r\nlayers above the fork block. However, an exception occurs during contract \r\ndeployment: pre-funded accounts may self-destruct, causing accounts with \r\nnon-zero balances to be removed from the state. For example,\r\nhttps://etherscan.io/tx/0xa087333d83f0cd63b96bdafb686462e1622ce25f40bd499e03efb1051f31fe49).\r\n\r\n\r\nFor nodes with a fully synced state, the legacy journal is likely compatible with\r\nthe updated definition, eliminating the need for regeneration. Unfortunately,\r\nnodes performing a full sync of historical chain segments or encountering \r\npre-funded account deletions may face incompatibilities, leading to automatic \r\nsnapshot regeneration."
        },
        {
            "date": "2024-11-27 06:17:03",
            "message": "core: better document reason for dropping error on return (#30811)\n\nAdd a comment for error return of nil\r\n\r\nSigned-off-by: wangjingcun <wangjingcun@aliyun.com>"
        },
        {
            "date": "2024-11-26 15:12:38",
            "message": "cmd/evm: don't reuse state between iterations, show errors (#30780)\n\nReusing state between benchmark iterations resulted in inconsistent\r\nresults across runs, which surfaced in https://github.com/ethereum/go-ethereum/issues/30778 .\r\n\r\nIf these errors are triggered again, they will now trigger panic. \r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-11-26 10:33:59",
            "message": "Revert \"core/state/snapshot: simplify snapshot rebuild (#30772)\" (#30810)\n\nThis reverts commit 23800122b37695be50565f8221858a16ce1763db.\r\n\r\nThe original pull request introduces a bug and some flaky tests are\r\ndetected because of this flaw.\r\n\r\n```\r\n--- FAIL: TestRecoverSnapshotFromWipingCrash (0.27s)\r\n    blockchain_snapshot_test.go:158: The disk layer is not integrated snapshot is not constructed\r\n{\"pc\":0,\"op\":88,\"gas\":\"0x7148\",\"gasCost\":\"0x2\",\"memSize\":0,\"stack\":[],\"depth\":1,\"refund\":0,\"opName\":\"PC\"}\r\n{\"pc\":1,\"op\":255,\"gas\":\"0x7146\",\"gasCost\":\"0x1db0\",\"memSize\":0,\"stack\":[\"0x0\"],\"depth\":1,\"refund\":0,\"opName\":\"SELFDESTRUCT\"}\r\n{\"output\":\"\",\"gasUsed\":\"0x0\"}\r\n{\"output\":\"\",\"gasUsed\":\"0x1db2\"}\r\n{\"pc\":0,\"op\":116,\"gas\":\"0x13498\",\"gasCost\":\"0x3\",\"memSize\":0,\"stack\":[],\"depth\":1,\"refund\":0,\"opName\":\"PUSH21\"}\r\n```\r\n\r\nBefore the original PR, the snapshot would block the function until the\r\ndisk layer\r\nwas fully generated under the following conditions:\r\n\r\n(a) explicitly required by users with `AsyncBuild = false`.\r\n(b) the snapshot was being fully rebuilt or *the disk layer generation\r\nhad resumed*.\r\n\r\nUnfortunately, with the changes introduced in that PR, the snapshot no\r\nlonger waits\r\nfor disk layer generation to complete if the generation is resumed. It\r\nbrings lots of\r\nuncertainty and breaks this tiny debug feature."
        },
        {
            "date": "2024-11-26 07:16:00",
            "message": "core/tracing: add GetCodeHash to StateDB (#30784)\n\nThis PR extends the tracing.StateDB interface by adding a GetCodeHash function."
        },
        {
            "date": "2024-11-26 01:49:12",
            "message": "eth/ethconfig: improve error message if TTD missing (#30807)\n\nThis updates the message you get when trying to initialize Geth with\r\ngenesis.json that doesn't have `terminalTotalDifficulty`. The previous\r\nmessage was a bit obscure, I had to check the code to find out what the\r\nproblem was."
        },
        {
            "date": "2024-11-25 12:43:23",
            "message": "core/state/snapshot: simplify snapshot rebuild (#30772)\n\nThis PR is purely for improved readability; I was doing work involving\r\nthe file and think this may help others who are trying to understand\r\nwhat's going on.\r\n\r\n1. `snapshot.Tree.Rebuild()` now returns a function that blocks until\r\nregeneration is complete, allowing `Tree.waitBuild()` to be removed\r\nentirely as all it did was search for the `done` channel behind this new\r\nfunction.\r\n2. Its usage inside `New()` is also simplified by (a) only waiting if\r\n`!AsyncBuild`; and (b) avoiding the double negative of `if !NoBuild`.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-11-25 12:34:50",
            "message": "accounts/abi:  fix MakeTopics mutation of big.Int inputs (#30785)\n\n#28764 updated `func MakeTopics` to support negative `*big.Int`s.\r\nHowever, it also changed the behavior of the function from just\r\n_reading_ the input `*big.Int` via `Bytes()`, to leveraging\r\n`big.U256Bytes` which is documented as being _destructive_:\r\n\r\nThis change updates `MakeTopics` to not mutate the original, and \r\nalso applies the same change in signer/core/apitypes."
        },
        {
            "date": "2024-11-25 12:33:28",
            "message": "internal/ethapi: remove double map-clone (#30803)\n\nSimilar to https://github.com/ethereum/go-ethereum/pull/30788"
        },
        {
            "date": "2024-11-25 12:29:27",
            "message": "eth/tracers/logger: improve markdown logger (#30805)\n\nThis PR improves the output of the markdown logger a bit.\r\n\r\n- Remove `RStack` field, \r\n- Move `Stack` last, since it may have very large vertical expansion\r\n- Make the pre- and post-exec  metadata structured into a bullet-list"
        },
        {
            "date": "2024-11-25 09:07:50",
            "message": "eth/tracers/logger: fix json-logger output missing (#30804)\n\nFixes a flaw introduced in\r\nhttps://github.com/ethereum/go-ethereum/pull/29795 , discovered while\r\nreviewing https://github.com/ethereum/go-ethereum/pull/30633 ."
        },
        {
            "date": "2024-11-24 19:09:38",
            "message": "internal/flags: fix \"flag redefined\" bug for alias on custom flags (#30796)\n\nThis change fixes a bug on the `DirectoryFlag` and the `BigFlag`, which would trigger a `panic` with the message \"flag redefined\" in case an alias was added to such a flag."
        },
        {
            "date": "2024-11-22 08:55:43",
            "message": "core, triedb: remove destruct flag in state snapshot (#30752)\n\nThis pull request removes the destruct flag from the state snapshot to\r\nsimplify the code.\r\n\r\nPreviously, this flag indicated that an account was removed during a\r\nstate transition, making all associated storage slots inaccessible.\r\nBecause storage deletion can involve a large number of slots, the actual\r\ndeletion is deferred until the end of the process, where it is handled\r\nin batches.\r\n\r\nWith the deprecation of self-destruct in the Cancun fork, storage\r\ndeletions are no longer expected. Historically, the largest storage\r\ndeletion event in Ethereum was around 15 megabytes\u2014manageable in memory.\r\n\r\nIn this pull request, the single destruct flag is replaced by a set of\r\ndeletion markers for individual storage slots. Each deleted storage slot\r\nwill now appear in the Storage set with a nil value.\r\n\r\nThis change will simplify a lot logics, such as storage accessing,\r\nstorage flushing, storage iteration and so on."
        },
        {
            "date": "2024-11-22 08:16:42",
            "message": "trie: replace custom logic with bytes.HasPrefix (#30771)\n\nin `trie`\r\n- Replace custom logic with `bytes.HasPrefix`\r\n- Remove unnecessary code in `GetNode`"
        },
        {
            "date": "2024-11-22 08:02:45",
            "message": "all: typos in comments (#30779)\n\nfixes some typos"
        },
        {
            "date": "2024-11-22 07:21:20",
            "message": "internal/ethapi: remove double map-clone (#30788)\n\n`ActivePrecompiledContracts()` clones the precompiled contract map, thus\r\nits callsite does not need to clone it"
        },
        {
            "date": "2024-11-22 07:17:32",
            "message": "core, eth, internal, miner: remove unnecessary parameters (#30776)\n\nFollow-up to #30745 , this change removes some unnecessary parameters."
        },
        {
            "date": "2024-11-20 11:35:52",
            "message": "core, eth, internal, cmd: rework EVM constructor (#30745)\n\nThis pull request refactors the EVM constructor by removing the\r\nTxContext parameter.\r\n\r\nThe EVM object is frequently overused. Ideally, only a single EVM\r\ninstance should be created and reused throughout the entire state\r\ntransition of a block, with the transaction context switched as needed\r\nby calling evm.SetTxContext.\r\n\r\nUnfortunately, in some parts of the code, the EVM object is repeatedly\r\ncreated, resulting in unnecessary complexity. This pull request is the\r\nfirst step towards gradually improving and simplifying this setup.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-11-20 07:40:21",
            "message": "core/vm/program: evm bytecode-building utility (#30725)\n\nIn many cases, there is a need to create somewhat nontrivial bytecode. A\r\nrecent example is the verkle statetests, where we want a `CREATE2`- op\r\nto create a contract, which can then be invoked, and when invoked does a\r\nselfdestruct-to-self.\r\n\r\nIt is overkill to go full solidity, but it is also a bit tricky do\r\nassemble this by concatenating bytes. This PR takes an approach that\r\nhas been used in in goevmlab for several years.\r\n\r\nUsing this utility, the case can be expressed as: \r\n```golang\r\n\t// Some runtime code\r\n\truntime := program.New().Ops(vm.ADDRESS, vm.SELFDESTRUCT).Bytecode()\r\n\t// A constructor returning the runtime code\r\n\tinitcode := program.New().ReturnData(runtime).Bytecode()\r\n\t// A factory invoking the constructor\r\n\touter := program.New().Create2AndCall(initcode, nil).Bytecode()\r\n```\r\n\r\nWe have a lot of places in the codebase where we concatenate bytes, cast\r\nfrom `vm.OpCode` . By taking tihs approach instead, thos places can be made a\r\nbit more maintainable/robust."
        },
        {
            "date": "2024-11-19 15:58:52",
            "message": "version: fix typo in v1.14.13 release cycle name"
        },
        {
            "date": "2024-11-19 13:51:54",
            "message": "version: begin v1.14.13 release cycle"
        },
        {
            "date": "2024-11-19 13:46:38",
            "message": "version: go-ethereum v1.14.12 stable"
        },
        {
            "date": "2024-11-19 12:43:33",
            "message": "rpc: run tests in parallel (#30384)\n\nContinuation of https://github.com/ethereum/go-ethereum/pull/30381"
        },
        {
            "date": "2024-11-19 12:35:52",
            "message": "core/txpool, eth/catalyst: clear transaction pool in Rollback (#30534)\n\nThis adds an API method `DropTransactions` to legacy pool, blob pool and\r\ntxpool interface. This method removes all txs currently tracked in the\r\npools.\r\n\r\nIt modifies the simulated beacon to use the new method in `Rollback`\r\nwhich removes previous hacky implementation that also erroneously reset\r\nthe gas tip to 1 gwei.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-11-19 12:29:23",
            "message": "all: remove kilic dependency from bls12381 fuzzers (#30296)\n\nThe [kilic](https://github.com/kilic/bls12-381) bls12381 implementation\r\nhas been archived. It shouldn't be necessary to include it as a fuzzing\r\ntarget any longer.\r\n\r\nThis also adds fuzzers for G1/G2 mul that use inputs that are guaranteed\r\nto be valid. Previously, we just did random input fuzzing for these\r\nprecompiles."
        },
        {
            "date": "2024-11-19 06:26:39",
            "message": "core: fix typos (#30767)"
        },
        {
            "date": "2024-11-15 13:05:23",
            "message": "build: upgrade -dlgo version to Go 1.23.3 (#30742)\n\nNew release: https://groups.google.com/g/golang-announce/c/X5KodEJYuqI"
        },
        {
            "date": "2024-11-15 09:15:15",
            "message": "cmd/geth: remove unlock commandline flag (#30737)\n\nThis is one further step towards removing account management from\r\n`geth`. This PR deprecates the flag `unlock`, and makes the flag moot:\r\nunlock via geth is no longer possible."
        },
        {
            "date": "2024-11-15 06:59:06",
            "message": "core/state: tests on the binary iterator (#30754)\n\nFixes an error in the binary iterator, adds additional testcases\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-11-11 11:14:18",
            "message": "docs: fix typo (#30740)\n\nfixes a typo on one of the postmortems"
        },
        {
            "date": "2024-11-11 10:43:22",
            "message": "p2p/netutil: unittests for addrutil (#30439)\n\nadd unit tests for `p2p/addrutil`\r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-11-10 09:57:05",
            "message": "tests: fix test panic (#30741)\n\nFix panic in tests"
        },
        {
            "date": "2024-11-09 15:07:17",
            "message": "eth/protocols/eth: add ETH68 protocol handler fuzzers (#30417)\n\nAdds a protocol handler fuzzer to fuzz the ETH68 protocol handlers"
        },
        {
            "date": "2024-11-09 00:08:06",
            "message": "core/state, triedb/database: refactor state reader (#30712)\n\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-11-08 16:20:48",
            "message": "travis: build and upload RISC-V docker images too (#30739)\n\nRequested by @barnabasbusa"
        },
        {
            "date": "2024-11-08 14:28:42",
            "message": "trie/utils: remove unneeded initialization (#30472)"
        },
        {
            "date": "2024-11-08 14:25:30",
            "message": "core/state: invoke OnCodeChange-hook on selfdestruct (#30686)\n\nThis change invokes the OnCodeChange hook when selfdestruct operation is performed, and a contract is removed. This is an event which can be consumed by tracers."
        },
        {
            "date": "2024-11-08 14:21:00",
            "message": "beacon/blsync: remove cli dependencies (#30720)\n\nThis PR moves chain config related code (config file processing, fork\r\nlogic, network defaults) from `beacon/types` and `beacon/blsync` into\r\n`beacon/params` while the command line flag logic of the chain config is\r\nmoved into `cmd/utils`, thereby removing the cli dependencies from\r\npackage `beacon` and its sub-packages."
        },
        {
            "date": "2024-11-08 14:18:42",
            "message": "cmd/evm:  benchmarking via `statetest` command + filter by name, index and fork (#30442)\n\nWhen `evm statetest --bench` is specified, benchmark the execution\r\nsimilarly to `evm run`.\r\n\r\nAlso adds the ability to filter tests by name, index and fork. \r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-11-08 14:04:17",
            "message": "signer/core: extended support for EIP-712 array types (#30620)\n\nThis change updates the EIP-712 implementation to resolve [#30619](https://github.com/ethereum/go-ethereum/issues/30619).\r\n\r\nThe test cases have been repurposed from the ethers.js [repository](https://github.com/ethers-io/ethers.js/blob/main/testcases/typed-data.json.gz), but have been updated to remove tests that don't have a valid domain separator; EIP-712 messages without a domain separator are not supported by geth.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-11-08 13:57:29",
            "message": "accounts/usbwallet: support dynamic tx (#30180)\n\nAdds support non-legacy transaction-signing using ledger\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-11-08 12:33:43",
            "message": "internal/ethapi:  Set basefee for `AccessList` based on given block, not chain tip (#30538)"
        },
        {
            "date": "2024-11-08 12:28:16",
            "message": "ethclient/gethclient: testcase for createAccessList, make tabledriven (#30194)\n\nAdds testcase for createAccessList when user requested gasPrice is less than baseFee, also makes the tests tabledriven\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-11-07 19:26:02",
            "message": "ethclient: add RevertErrorData function and example (#30669)\n\nHere I'm adding a new helper function that extracts the revert reason of\r\na contract call. Unfortunately, this aspect of the API is underspecified.\r\nSee these spec issues for more detail:\r\n\r\n- https://github.com/ethereum/execution-apis/issues/232\r\n- https://github.com/ethereum/execution-apis/issues/463\r\n- https://github.com/ethereum/execution-apis/issues/523\r\n\r\nThe function added here only works with Geth-like servers that return\r\nerror code `3`. We will not be able to support all possible servers.\r\nHowever, if there is a specific server implementation that makes it\r\npossible to extract the same info, we could add it in the same function\r\nas well.\r\n\r\n---------\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2024-11-07 13:48:51",
            "message": "build(deps): bump github.com/golang-jwt/jwt/v4 from 4.5.0 to 4.5.1 (#30728)\n\nBumps [github.com/golang-jwt/jwt/v4](https://github.com/golang-jwt/jwt) from 4.5.0 to 4.5.1.\r\n\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
        },
        {
            "date": "2024-11-06 17:24:55",
            "message": "cmd/utils: change blssync.JWTSecretFlag to DirectoryFlag (#30729)\n\ncloses https://github.com/ethereum/go-ethereum/issues/30304\r\n\r\nWe already use `DirectoryFlag` for `authrpc.jwtsecret` which expands the\r\ntilde, so this should work out of the box"
        },
        {
            "date": "2024-11-05 17:29:37",
            "message": "core/state: small fix in hooked statedb (#30732)\n\nfixes a very tiny bug"
        },
        {
            "date": "2024-11-05 07:42:22",
            "message": "eth/tracers: fill the creationMethod in flatCall (#30539)\n\n`flatCallTracer` will now specify the type of a create in the action\r\nvia the `creationMethod` field.\r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2024-11-04 14:10:12",
            "message": "all: fix issues with benchmarks (#30667)\n\nThis PR fixes some issues with benchmarks\r\n\r\n- [x] Removes log output from a log-test\r\n- [x] Avoids a `nil`-defer in `triedb/pathdb`\r\n- [x] Fixes some crashes re tracers\r\n- [x] Refactors a very resource-expensive benchmark for blobpol.\r\n**NOTE**: this rewrite touches live production code (a little bit), as\r\nit makes the validator-function used by the blobpool configurable.\r\n- [x] Switch some benches over to use pebble over leveldb\r\n- [x] reduce mem overhead in the setup-phase of some tests\r\n- [x] Marks some tests with a long setup-phase to be skipped if `-short`\r\nis specified (where long is on the order of tens of seconds). Ideally,\r\nin my opinion, one should be able to run with `-benchtime 10ms -short`\r\nand sanity-check all tests very quickly.\r\n- [x]  Drops some metrics-bechmark which times the speed of `copy`.\r\n\r\n---------\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2024-11-04 13:19:50",
            "message": "core, trie: verkle state processor tests (#30672)\n\nTests that are crucial to for verifying the verkle testnet functions properly.\r\n\r\n---------\r\n\r\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\r\nCo-authored-by: Ignacio Hagopian <jsign.uy@gmail.com>\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-11-04 10:39:06",
            "message": "core/vm/runtime: invoke tx-end hook (#30711)\n\nWhen using the `core/vm/runtime` helpers to execute code, callbacks for the tx end were not invoked. This change fixes it by invoking them."
        },
        {
            "date": "2024-11-04 10:33:42",
            "message": "eth/catalyst: make engine api test time independent (#30713)\n\nThis test depends on a 100ms timer, which fails quite often, messing up\r\nour pipelines. Hook directly into the internal version of getPayload\r\nwhich has the capacity to wait for the full payload before returning.\r\nThis might not be absolutely correct from a test perspective, but it\r\nbeats failing ci. The alternative would be to expose the full build hook\r\ninto the outside, but it might be a bit overkill for this scenario."
        },
        {
            "date": "2024-11-04 10:32:41",
            "message": "core/txpool: improve error responses with wrapped errors (#30715)"
        },
        {
            "date": "2024-11-04 09:49:23",
            "message": "tests/fuzzers/bls12381: more verbose fuzzing-output (#30724)\n\nThis PR updates the fuzzing verbosity a bit, in case of mismatches"
        },
        {
            "date": "2024-11-03 20:05:44",
            "message": "build: use slices.Clone for copying slice (#30716)"
        },
        {
            "date": "2024-11-01 08:51:06",
            "message": "eth/tracers:  flatCallTracer error compatible with parity (#30497)\n\nCompatible error message in the flat call tracer with parity-style endpoints.\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2024-10-31 18:53:35",
            "message": "all: remove `personal` RPC namespace (#30704)\n\nThis PR is a first step towards removing account management from geth,\r\nand contains a lot of the user-facing changes.\r\n\r\nWith this PR, the `personal` namespace disappears. **Note**: `personal`\r\nnamespace has been deprecated for quite some time (since\r\nhttps://github.com/ethereum/go-ethereum/pull/26390 1 year and 8 months\r\nago), and users who have wanted to use it has been forced to used the\r\nflag `--rpc.enabledeprecatedpersonal`. So I think it's fairly\r\nnon-controversial to drop it at this point.\r\n\r\nSpecifically, this means: \r\n\r\n- Account/wallet listing\r\n  -`personal.getListAccounts`  \r\n  -`personal.listAccounts`     \r\n  -`personal.getListWallets`   \r\n  -`personal.listWallets`      \r\n- Lock/unlock\r\n  -`personal.lockAccount`      \r\n  -`personal.openWallet`       \r\n  -`personal.unlockAccount`\r\n- Sign ops\r\n  -`personal.sign`             \r\n  -`personal.sendTransaction`  \r\n  -`personal.signTransaction`  \r\n- Imports / inits\r\n  -`personal.deriveAccount`    \r\n  -`personal.importRawKey`     \r\n  -`personal.initializeWallet` \r\n  -`personal.newAccount`       \r\n  -`personal.unpair` \r\n- Other: \r\n  -`personal.ecRecover`        \r\n\r\n\r\nThe underlying keystores and account managent code is still in place,\r\nwhich means that `geth --dev` still works as expected, so that e.g. the\r\nexample below still works:\r\n\r\n```\r\n> eth.sendTransaction({data:\"0x6060\", value: 1, from:eth.accounts[0]})\r\n```\t\r\n\r\nAlso, `ethkey` and `clef` are untouched. \r\n\r\nWith the removal of `personal`, as far as I know we have no more API\r\nmethods which contain credentials, and if we want to implement\r\nlogging-capabilities of RPC ingress payload, it would be possible after\r\nthis.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-10-31 18:52:39",
            "message": "internal/flags: remove low-use type TextMarshalerFlag (#30707)\n\nCurrently we have a custom TextMarshalerFlag. It's a nice idea, allowing\r\nanything implementing text marshaller to be used as a flag. That said,\r\nwe only ever used it in one place because it's not that obvious how to\r\nuse and it needs some boilerplate on the type itself too, apart of the\r\nheavy boilerplate got the custom flag.\r\n\r\nAll in all there's no *need* to drop this feature just now, but while\r\nporting the cmds over to cli @v3, all other custom flags worker\r\nperfectly, whereas this one started crashing deep inside the cli\r\npackage. The flag handling in v3 got rebuild on generics and there are a\r\nnumber of new methods needed; and my guess is that maybe one of them\r\ndoesn't work like this flag currently is designed too.\r\n\r\nWe could definitely try and redesign this flag for cli v3... but all\r\nthat effort and boilerplate just to use it for 1 flag in 1 location,\r\nseems not worth it. So for now I'm suggesting removing it and maybe\r\nreconsider a similar feature in cli v3 with however it will work."
        },
        {
            "date": "2024-10-31 17:26:02",
            "message": "internal/flags: remove Merge, it's identical to slices.Concat (#30706)\n\nThis is a noop change to not have custom code for stdlib functionality."
        },
        {
            "date": "2024-10-31 15:03:47",
            "message": "cmd/utils, eth/ethconfig: remove some ancient leftover flag (#30705)\n\nThis is a flag leftover from the swarm era. No need to deprecate it,\r\nit's been useless/dead forever now."
        },
        {
            "date": "2024-10-31 10:19:01",
            "message": "core: add code to witness when state object is accessed (#30698)\n\nI think the core code should generally be agnostic about the witness and\r\nthe statedb layer should determine what elements need to be included in\r\nthe witness. Because code is accessed via `GetCode`, and\r\n`GetCodeLength`, the statedb will always know when it needs to add that\r\ncode into the witness.\r\n\r\nThe edge case is block hashes, so we continue to add them manually in\r\nthe implementation of `BLOCKHASH`.\r\n\r\nIt probably makes sense to refactor statedb so we have a wrapped\r\nimplementation that accumulates the witness, but this is a simpler\r\nchange that makes #30078 less aggressive."
        },
        {
            "date": "2024-10-30 17:01:47",
            "message": "core/vm: speed up push and interpreter loop (#30662)\n\nLooking at the cpu profile of a burntpix benchmark, I noticed that a lot\r\nof time was spent in gas-used, in the interpreter loop. It's an actual\r\ncall (not inlined), which explicitly wants to be ignored by tracing\r\n(\"tracing.GasChangeIgnored\"), so it can be safely and simply inlined.\r\n\r\nThe other change is in `pushX`. These also do a call to\r\n`common.RightPadBytes`. I replaced that by a doing a corresponding `Lsh`\r\non the `u256` if needed. Note: it's needed only to make the stack output\r\nlook right, for fuzzers. It technically doesn't matter what we put\r\nthere: if code ends on a pushdata immediate, nothing will consume the\r\nstack element. We could just as well just ignore it, if we didn't care\r\nabout fuzzers (which I do).\r\n\r\nSeems quite a lot faster on burntpix, according to my runs. \r\n\r\nThis PR:\r\n```\r\nEVM gas used:    5642735088\r\nexecution time:  34.84609475s\r\nallocations:     915683\r\nallocated bytes: 175334088\r\n```\r\n```\r\nEVM gas used:    5642735088\r\nexecution time:  36.671958278s\r\nallocations:     915701\r\nallocated bytes: 175340528\r\n```\r\n\r\nMaster\r\n```\r\nEVM gas used:    5642735088\r\nexecution time:  49.349209526s\r\nallocations:     915684\r\nallocated bytes: 175333368\r\n```\r\n```\r\nEVM gas used:    5642735088\r\nexecution time:  46.581006598s\r\nallocations:     915681\r\nallocated bytes: 175330728\r\n```\r\n\r\n---------\r\n\r\nCo-authored-by: Sina M <1591639+s1na@users.noreply.github.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-10-30 14:22:10",
            "message": "beacon/light: remove unused CommitteeChain.signerThreshold (#30484)\n\nThis field is a duplicate of UpdateScore.SignerCount and never referenced."
        },
        {
            "date": "2024-10-29 11:21:17",
            "message": "appveyor, build, internal: ci.go cleanups, add package dep checker (#30696)"
        },
        {
            "date": "2024-10-29 08:32:40",
            "message": "ethdb: refactor Database interface (#30693)"
        },
        {
            "date": "2024-10-29 08:31:04",
            "message": "core, eth, node: break rawdb -> {leveldb, pebble} dependency (#30689)"
        },
        {
            "date": "2024-10-29 06:35:06",
            "message": "eth/tracers: add disableCode/Storage options for prestateTracer (#30648)\n\nWhen using the prestateTracer, in some cases users are only concerned\r\nwith balances or nonce information, and are not interested in the lengthy\r\ncontract code or storage data.\r\n\r\nTherefore, this PR introduces two new configuration options in the\r\n`prestateTracerConfig` structure:\r\n- `disableCode`\r\n- `disableStorage`\r\n\r\nThese options allow users to control whether the tracer returns contract\r\ncode and storage data during execution tracing. By setting these\r\noptions, users can more flexibly customize their needs and focus on\r\nobtaining information that is more critical and relevant to their\r\nspecific use cases.\r\n\r\nThese options work with the default mode as well as `diffMode: true`.\r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\nCo-authored-by: Sina M <1591639+s1na@users.noreply.github.com>"
        },
        {
            "date": "2024-10-28 20:29:25",
            "message": "cmd/geth: avoid hard coding the IPC name (#30687)"
        },
        {
            "date": "2024-10-28 09:26:36",
            "message": "build: document doGoModTidy function in ci.go (#30685)"
        },
        {
            "date": "2024-10-25 15:33:46",
            "message": "ethdb: add DeleteRange feature (#30668)\n\nThis PR adds `DeleteRange` to `ethdb.KeyValueWriter`. While range\r\ndeletion using an iterator can be really slow, `DeleteRange` is natively\r\nsupported by pebble and apparently runs in O(1) time (typically 20-30ms\r\nin my tests for removing hundreds of millions of keys and gigabytes of\r\ndata). For leveldb and memorydb an iterator based fallback is\r\nimplemented. Note that since the iterator method can be slow and a\r\ndatabase function should not unexpectedly block for a very long time,\r\nthe number of deleted keys is limited at 10000 which should ensure that\r\nit does not block for more than a second. ErrTooManyKeys is returned if\r\nthe range has only been partially deleted. In this case the caller can\r\nrepeat the call until it finally succeeds."
        },
        {
            "date": "2024-10-25 11:20:18",
            "message": "beacon/blsync: add holesky config and update checkpoints (#30671)\n\nThis PR adds the beacon chain config for the holesky testnet. It also\r\nupdates beacon checkpoints for Mainnet and Sepolia."
        },
        {
            "date": "2024-10-24 07:13:01",
            "message": "core/vm: remove debug printout in eof test (#30665)"
        },
        {
            "date": "2024-10-24 07:11:47",
            "message": "core: fix tracing of system calls (#30666)\n\nThis change makes it so that the wrapped statedb with tracing-hooks is passed to the system call processing\r\n\r\nFixes #30658"
        },
        {
            "date": "2024-10-23 13:12:56",
            "message": "docs: update security policy (#30606)\n\nprevious key expired 2023-07-27, the new one expires 2026-02-22:\r\n\r\npub   rsa4096 2016-11-11 [SC] [expires: 2026-02-22]\r\n      AE96ED969E479B0084F3E17FE88D3334FA5F6A0A\r\nuid Ethereum Foundation Security Team <security@ethereum.org>\r\nuid Ethereum Foundation Bug Bounty <bounty@ethereum.org>\r\nsub   rsa4096 2016-11-11 [E] [expires: 2026-02-22]"
        },
        {
            "date": "2024-10-23 06:33:14",
            "message": "eth/tracers/internal/tracertest: add missing Random to call context (#30652)\n\nFixes a configuration issue in a test-helper, so that we can do call tracing-tests post-merge"
        },
        {
            "date": "2024-10-23 06:26:18",
            "message": "all: remove TerminalTotalDifficultyPassed (#30609)\n\nrebased https://github.com/ethereum/go-ethereum/pull/29766 . The\r\ndownstream branch appears to have been deleted and I don't have perms to\r\npush to that fork.\r\n\r\n`TerminalTotalDifficultyPassed` is removed. `TerminalTotalDifficulty`\r\nmust now be non-nil, and it is expected that networks are already\r\nmerged: we can only import PoW/Clique chains, not produce blocks on\r\nthem.\r\n\r\n---------\r\n\r\nCo-authored-by: stevemilk <wangpeculiar@gmail.com>"
        },
        {
            "date": "2024-10-23 06:11:25",
            "message": "crypto, tests/fuzzers: add gnark bn254 precompile methods for fuzzing (#30585)\n\nMakes the gnark precompile methods more amenable to fuzzing"
        },
        {
            "date": "2024-10-23 06:03:36",
            "message": "core/state: move state log mechanism to a separate layer (#30569)\n\nThis PR moves the logging/tracing-facilities out of `*state.StateDB`,\r\nin to a wrapping struct which implements `vm.StateDB` instead.\r\n\r\nIn most places, it is a pretty straight-forward change: \r\n- First, hoisting the invocations from state objects up to the statedb. \r\n- Then making the mutation-methods simply return the previous value, so\r\nthat the external logging layer could log everything.\r\n\r\nSome internal code uses the direct object-accessors to mutate the state,\r\nparticularly in testing and in setting up state overrides, which means\r\nthat these changes are unobservable for the hooked layer. Thus, configuring\r\nthe overrides are not necessarily part of the API we want to publish.\r\n\r\nThe trickiest part about the layering is that when the selfdestructs are\r\nfinally deleted during `Finalise`, there's the possibility that someone\r\nsent some ether to it, which is burnt at that point, and thus needs to\r\nbe logged. The hooked layer reaches into the inner layer to figure out\r\nthese events.\r\n\r\nIn package `vm`, the conversion from `state.StateDB + hooks` into a\r\nhooked `vm.StateDB` is performed where needed.\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-10-21 09:45:33",
            "message": "common: drop BigMin and BigMax, they pollute our dep graph (#30645)\n\nWay back we've added `common.math.BigMin` and `common.math.BigMax`.\r\nThese were kind of cute helpers, but unfortunate ones, because package\r\nall over out codebase added dependencies to this package just to avoid\r\nhaving to write out 3 lines of code.\r\n\r\nBecause of this, we've also started having package name clashes with the\r\nstdlib `math`, which got solves even more badly by moving some helpers\r\nover ***from*** the stdlib into our custom lib (e.g. MaxUint64). The\r\nlatter ones were nuked out in a previous PR and this PR nukes out BigMin\r\nand BigMax, inlining them at all call sites.\r\n\r\nAs we're transitioning to uint256, if need be, we can add a min and max\r\nto that."
        },
        {
            "date": "2024-10-21 06:24:28",
            "message": "consensus/clique, miner: remove clique -> accounts dependency (#30642)\n\nClique currently depends on the `accounts` package. This was a bit of a\r\nbig cannon even in the past, just to pass a signer \"account\" to the\r\nClique block producer. Either way, nowadays Geth does not support clique\r\nmining any more, so by removing that bit of functionality from our code,\r\nwe can also break this dependency.\r\n\r\nClique should ideally be further torn out, but this at least gets us one\r\nstep closer to cleanups."
        },
        {
            "date": "2024-10-20 16:36:51",
            "message": "eth/tracers/js: avoid compiling js bigint when not needed (#30640)\n\nWhile looking at some mem profiles from `evm` runs, I noticed that\r\n`goja` compilation of the bigint library was present. The bigint library\r\ncompilation happens in a package `init`, whenever the package\r\n`eth/tracers/js` is loaded. This PR changes it to load lazily when\r\nneeded.\r\n\r\nIt becomes slightly faster with this change, and slightly less alloc:y. \r\n\r\nNon-scientific benchmark with 100 executions: \r\n```\r\ntime for i in {1..100}; do ./evm --code 6040 run; done;\r\n ```\r\n\r\ncurrent `master`:\r\n\r\n```\r\nreal    0m6.634s\r\nuser    0m5.213s\r\nsys     0m2.277s\r\n```\r\nWithout compiling bigint\r\n```\r\nreal    0m5.802s\r\nuser    0m4.191s\r\nsys     0m1.965s\r\n```"
        },
        {
            "date": "2024-10-20 16:28:39",
            "message": "build, internal, version: break ci.go/version->common dependency (#30638)\n\nThis PR tries to break the ci.go to common dependency by moving the\r\nversion number out of params."
        },
        {
            "date": "2024-10-20 12:43:39",
            "message": "common/math: sigh, keep deleting dead code"
        },
        {
            "date": "2024-10-20 12:38:31",
            "message": "common/math: delete some further dead code (#30639)"
        },
        {
            "date": "2024-10-20 11:54:06",
            "message": "build: get rid of ci.go -> common direct dependency (#30637)"
        },
        {
            "date": "2024-10-20 11:41:51",
            "message": "all: get rid of custom MaxUint64 and MaxUint64 (#30636)"
        },
        {
            "date": "2024-10-20 10:25:15",
            "message": "core/state: fix runaway alloc caused by prefetcher heap escape (#30629)\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2024-10-18 15:06:31",
            "message": "core, trie, triedb: minor changes from snapshot integration (#30599)\n\nThis change ports some non-important changes from https://github.com/ethereum/go-ethereum/pull/30159, including interface renaming and some trivial refactorings."
        },
        {
            "date": "2024-10-18 11:49:27",
            "message": "build: reenable building arm64 concurrently (#30626)"
        },
        {
            "date": "2024-10-18 09:02:32",
            "message": "gitignore: get rid of some relics (#30623)\n\nClean out some ancient stuff from git ignore."
        },
        {
            "date": "2024-10-18 08:34:46",
            "message": "swarm: nuke this leftover (#30622)\n\nSwarm moved out more than 5 years ago, time to let it go."
        },
        {
            "date": "2024-10-17 16:27:35",
            "message": "beacon/engine, core/txpool, eth/catalyst: add engine_getBlobsV1 API (#30537)"
        },
        {
            "date": "2024-10-17 08:05:17",
            "message": "beacon/engine,eth/catalyst: hex marshal requests in engine api (#30603)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-10-17 08:04:20",
            "message": "miner: send full request when resolving full payload (#30615)\n\nFixes an issue missed in #30576 where we send empty requests for a full\r\npayload being resolved, causing hash mismatch later on when we get the\r\npayload back via `NewPayload`."
        },
        {
            "date": "2024-10-17 04:51:47",
            "message": "eth/tracers: various fixes (#30540)\n\nBreaking changes:\r\n\r\n- The ChainConfig was exposed to tracers via VMContext passed in\r\n`OnTxStart`. This is unnecessary specially looking through the lens of\r\nlive tracers as chain config remains the same throughout the lifetime of\r\nthe program. It was there so that native API-invoked tracers could\r\naccess it. So instead we moved it to the constructor of API tracers.\r\n\r\nNon-breaking:\r\n\r\n- Change the default config of the tracers to be `{}` instead of nil.\r\nThis way an extra nil check can be avoided.\r\n\r\nRefactoring:\r\n\r\n- Rename `supply` struct to `supplyTracer`.\r\n- Un-export some hook definitions."
        },
        {
            "date": "2024-10-16 16:46:40",
            "message": "core: reduce peak memory usage during reorg (#30600)\n\n~~Opening this as a draft to have a discussion.~~ Pressed the wrong\r\nbutton\r\nI had [a previous PR\r\n](https://github.com/ethereum/go-ethereum/pull/24616)a long time ago\r\nwhich reduced the peak memory used during reorgs by not accumulating all\r\ntransactions and logs.\r\nThis PR reduces the peak memory further by not storing the blocks in\r\nmemory.\r\nHowever this means we need to pull the blocks back up from storage\r\nmultiple times during the reorg.\r\nI collected the following numbers on peak memory usage: \r\n\r\n// Master: BenchmarkReorg-8 10000 899591 ns/op 820154 B/op 1440\r\nallocs/op 1549443072 bytes of heap used\r\n// WithoutOldChain: BenchmarkReorg-8 10000 1147281 ns/op 943163 B/op\r\n1564 allocs/op 1163870208 bytes of heap used\r\n// WithoutNewChain: BenchmarkReorg-8 10000 1018922 ns/op 943580 B/op\r\n1564 allocs/op 1171890176 bytes of heap used\r\n\r\nEach block contains a transaction with ~50k bytes and we're doing a 10k\r\nblock reorg, so the chain should be ~500MB in size\r\n\r\n---------\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
        },
        {
            "date": "2024-10-16 07:32:58",
            "message": "core, eth, ethstats: simplify chain head events (#30601)"
        },
        {
            "date": "2024-10-15 15:10:03",
            "message": "core, ethdb/pebble: run pebble in non-sync mode (#30573)\n\nImplements https://github.com/ethereum/go-ethereum/issues/29819"
        },
        {
            "date": "2024-10-15 14:00:14",
            "message": "ethdb/pebble: switch to increasing level sizes (#30602)"
        },
        {
            "date": "2024-10-15 08:51:20",
            "message": "beacon/engine: omit null witness field from payload envelope (#30597)\n\n## Description\r\n\r\nOmit null `witness` field from payload envelope.\r\n\r\n## Motivation\r\n\r\nCurrently, JSON encoded payload types always include `\"witness\": null`,\r\nwhich, I believe, is not intentional."
        },
        {
            "date": "2024-10-15 08:49:08",
            "message": "crypto: use decred secp256k1 directly (#30595)\n\nUse `github.com/decred/dcrd/dcrec/secp256k1/v4` directly rather than\r\n`github.com/btcsuite/btcd/btcec/v2` which is just a wrapper around the\r\nunderlying decred library. Inspired by\r\nhttps://github.com/cosmos/cosmos-sdk/pull/15018\r\n\r\n`github.com/btcsuite/btcd/btcec/v2` has a very annoying breaking change\r\nwhen upgrading from `v2.3.3` to `v2.3.4`. The easiest way to workaround\r\nthis is to just remove the wrapper.\r\n\r\nWould be very nice if you could backport this to the release branches.\r\n\r\nReferences:\r\n- https://github.com/btcsuite/btcd/issues/2221\r\n- https://github.com/cometbft/cometbft/pull/4294\r\n- https://github.com/cometbft/cometbft/pull/3728\r\n- https://github.com/zeta-chain/node/pull/2934"
        },
        {
            "date": "2024-10-15 08:02:02",
            "message": "internal/ethapi: refactor `TxArgs.setCancunFeeDefaults` (#30541)\n\ncalculating a reasonable tx blob fee cap (`max_blob_fee_per_gas *\r\ntotal_blob_gas`) only depends on the excess blob gas of the parent\r\nheader. The parent header is assumed to be correct, so the method should\r\nnot be able to fail and return an error."
        },
        {
            "date": "2024-10-14 19:43:35",
            "message": "beacon/engine: strip type byte in requests (#30576)\n\nThis change brings geth into compliance with the current engine API\nspecification for the Prague fork. I have moved the assignment of\nExecutionPayloadEnvelope.Requests into BlockToExecutableData to ensure\nthere is a single place where the type is removed.\n\nWhile doing so, I noticed that handling of requests in the miner was not\nquite correct for the empty payload. It would return `nil` requests for\nthe empty payload even for blocks after the Prague fork. To fix this, I\nhave added the emptyRequests field in miner.Payload."
        },
        {
            "date": "2024-10-14 17:25:22",
            "message": "build: update to golangci-lint 1.61.0 (#30587)\n\nChangelog: https://golangci-lint.run/product/changelog/#1610 \r\n\r\nRemoves `exportloopref` (no longer needed), replaces it with\r\n`copyloopvar` which is basically the opposite.\r\n\r\nAlso adds: \r\n- `durationcheck`\r\n- `gocheckcompilerdirectives`\r\n- `reassign`\r\n- `mirror`\r\n- `tenv`\r\n\r\n---------\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2024-10-14 11:32:15",
            "message": "trie: concurrent commit (#30545)\n\nThis change makes the trie commit operation concurrent, if the number of changes exceed 100. \r\n\r\nCo-authored-by: stevemilk <wangpeculiar@gmail.com>\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-10-13 16:51:51",
            "message": "core: enable EIP-2935 in chain maker (#30575)"
        },
        {
            "date": "2024-10-13 16:47:51",
            "message": "cmd/evm: fixup issues with requests in t8n (#30584)\n\nThis fixes a few issues missed in #29052:\r\n\r\n* `requests` must be hex encoded, so added a helper to marshal.\r\n* The statedb was committed too early and so the result of the system\r\ncalls was lost.\r\n* For devnet-4 we need to pull off the type byte prefix from the request\r\ndata."
        },
        {
            "date": "2024-10-12 09:25:58",
            "message": "build: add support for ubuntu 24.10 (#30580)"
        },
        {
            "date": "2024-10-11 19:36:13",
            "message": "all: implement EIP-7002 & EIP-7251 (#30571)\n\nThis is a redo of #29052 based on newer specs. Here we implement EIPs\r\nscheduled for the Prague fork:\r\n\r\n- EIP-7002: Execution layer triggerable withdrawals\r\n- EIP-7251: Increase the MAX_EFFECTIVE_BALANCE\r\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2024-10-10 11:03:03",
            "message": "core/tracing: add GetTransientState method to StateDB interface (#30531)\n\nAllows live custom tracers to access contract transient storage through the StateDB interface."
        },
        {
            "date": "2024-10-10 08:47:40",
            "message": "eth/protocols/eth: remove Requests in block body (#30562)\n\nBlock no longer has Requests. This PR just removes some code that wasn't removed in #30425."
        },
        {
            "date": "2024-10-10 05:54:07",
            "message": "eth/catalyst, core/txpool/blobpool: make tests output less logs (#30563)\n\nA couple of tests set the debug level to `TRACE` on stdout,\r\nand all subsequent tests in the same package are also affected\r\nby that, resulting in outputs of tens of megabytes. \r\n\r\nThis PR removes such calls from two packages where it was prevalent.\r\nThis makes getting a summary of failing tests simpler, and possibly\r\nreduces some strain from the CI pipeline."
        },
        {
            "date": "2024-10-09 12:45:14",
            "message": "eth/tracers: do system contract processing prior to parallel-tracing  (#30520)\n\nThis fixes `debug_traceBlock` methods for JS tracers in that it correctly\r\napplies the beacon block root processing to the state."
        },
        {
            "date": "2024-10-09 10:24:58",
            "message": "all: implement flat deposit requests encoding (#30425)\n\nThis implements recent changes to EIP-7685, EIP-6110, and\r\nexecution-apis.\r\n\r\n---------\r\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>\r\nCo-authored-by: Shude Li <islishude@gmail.com>"
        },
        {
            "date": "2024-10-08 11:30:07",
            "message": "log: remove unused parameter (#30432)"
        },
        {
            "date": "2024-10-04 10:53:06",
            "message": "build: upgrade -dlgo version to Go 1.23.2 (#30544)\n\nNew release: https://groups.google.com/g/golang-announce/c/NKEc8VT7Fz0"
        },
        {
            "date": "2024-10-02 14:00:36",
            "message": "beacon/light: optimize lock usage in `HeadTracker` (#30485)\n\nminimizes the time when the lock is held"
        },
        {
            "date": "2024-10-02 13:05:50",
            "message": "core/vm, cmd/evm: implement eof validation (#30418)\n\nThe bulk of this PR is authored by @lightclient , in the original\r\nEOF-work. More recently, the code has been picked up and reworked for the new EOF\r\nspecification, by @MariusVanDerWijden , in https://github.com/ethereum/go-ethereum/pull/29518, and also @shemnon has contributed with fixes.\r\n\r\nThis PR is an attempt to start eating the elephant one small bite at a\r\ntime, by selecting only the eof-validation as a standalone piece which\r\ncan be merged without interfering too much in the core stuff.\r\n\r\nIn this PR: \r\n\r\n- [x] Validation of eof containers, lifted from #29518, along with\r\ntest-vectors from consensus-tests and fuzzing, to ensure that the move\r\ndid not lose any functionality.\r\n- [x] Definition of eof opcodes, which is a prerequisite for validation\r\n- [x] Addition of `undefined` to a jumptable entry item. I'm not\r\nsuper-happy with this, but for the moment it seems the least invasive\r\nway to do it. A better way might be to go back and allowing nil-items or\r\nnil execute-functions to denote \"undefined\".\r\n- [x] benchmarks of eof validation speed \r\n\r\n\r\n---------\r\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\nCo-authored-by: Danno Ferrin <danno.ferrin@shemnon.com>"
        },
        {
            "date": "2024-10-01 16:27:25",
            "message": "internal/web3ext: rm unused modules (#30532)\n\nRemove console extensions for already deleted API namespaces (les, vflux and ethash)."
        },
        {
            "date": "2024-10-01 16:16:16",
            "message": "core/rawdb: freezer index repair (#29792)\n\nThis pull request removes the `fsync` of index files in freezer.ModifyAncients function for \r\nperformance gain.\r\n\r\nOriginally, fsync is added after each freezer write operation to ensure\r\nthe written data is truly transferred into disk. Unfortunately, it turns \r\nout `fsync` can be relatively slow, especially on\r\nmacOS (see https://github.com/ethereum/go-ethereum/issues/28754 for more\r\ninformation). \r\n\r\nIn this pull request, fsync for index file is removed as it turns out\r\nindex file can be recovered even after a unclean shutdown. But fsync for data file is still kept, as\r\nwe have no meaningful way to validate the data correctness after unclean shutdown.\r\n\r\n---\r\n\r\n**But why do we need the `fsync` in the first place?** \r\n\r\nAs it's necessary for freezer to survive/recover after the machine crash\r\n(e.g. power failure).\r\nIn linux, whenever the file write is performed, the file metadata update\r\nand data update are\r\nnot necessarily performed at the same time. Typically, the metadata will\r\nbe flushed/journalled\r\nahead of the file data. Therefore, we make the pessimistic assumption\r\nthat the file is first\r\nextended with invalid \"garbage\" data (normally zero bytes) and that\r\nafterwards the correct\r\ndata replaces the garbage. \r\n\r\nWe have observed that the index file of the freezer often contain\r\ngarbage entry with zero value\r\n(filenumber = 0, offset = 0) after a machine power failure. It proves\r\nthat the index file is extended\r\nwithout the data being flushed. And this corruption can destroy the\r\nwhole freezer data eventually.\r\n\r\nPerforming fsync after each write operation can reduce the time window\r\nfor data to be transferred\r\nto the disk and ensure the correctness of the data in the disk to the\r\ngreatest extent.\r\n\r\n---\r\n\r\n**How can we maintain this guarantee without relying on fsync?**\r\n\r\nBecause the items in the index file are strictly in order, we can\r\nleverage this characteristic to\r\ndetect the corruption and truncate them when freezer is opened.\r\nSpecifically these validation\r\nrules are performed for each index file:\r\n\r\nFor two consecutive index items:\r\n\r\n- If their file numbers are the same, then the offset of the latter one\r\nMUST not be less than that of the former.\r\n- If the file number of the latter one is equal to that of the former\r\nplus one, then the offset of the latter one MUST not be 0.\r\n- If their file numbers are not equal, and the latter's file number is\r\nnot equal to the former plus 1, the latter one is valid\r\n\r\nAnd also, for the first non-head item, it must refer to the earliest\r\ndata file, or the next file if the\r\nearliest file is not sufficient to place the first item(very special\r\ncase, only theoretical possible\r\nin tests)\r\n\r\nWith these validation rules, we can detect the invalid item in index\r\nfile with greatest possibility.\r\n\r\n--- \r\n\r\nBut unfortunately, these scenarios are not covered and could still lead\r\nto a freezer corruption if it occurs:\r\n\r\n**All items in index file are in zero value**\r\n\r\nIt's impossible to distinguish if they are truly zero (e.g. all the data\r\nentries maintained in freezer\r\nare zero size) or just the garbage left by OS. In this case, these index\r\nitems will be kept by truncating\r\nthe entire data file, namely the freezer is corrupted.\r\n\r\nHowever, we can consider that the probability of this situation\r\noccurring is quite low, and even\r\nif it occurs, the freezer can be considered to be close to an empty\r\nstate. Rerun the state sync\r\nshould be acceptable.\r\n\r\n**Index file is integral while relative data file is corrupted**\r\n\r\nIt might be possible the data file is corrupted whose file size is\r\nextended correctly with garbage\r\nfilled (e.g. zero bytes). In this case, it's impossible to detect the\r\ncorruption by index validation.\r\n\r\nWe can either choose to `fsync` the data file, or blindly believe that\r\nif index file is integral then\r\nthe data file could be integral with very high chance. In this pull\r\nrequest, the first option is taken."
        },
        {
            "date": "2024-10-01 13:23:35",
            "message": "params: begin v1.14.12 release cycle (#30536)\n\nparams: begin v1.14.12 release cycle"
        },
        {
            "date": "2024-10-01 13:19:15",
            "message": "params: begin v1.14.12 release cycle"
        },
        {
            "date": "2024-10-01 13:14:30",
            "message": "params: go-ethereum v1.14.11 stable"
        },
        {
            "date": "2024-10-01 09:36:56",
            "message": "internal/ethapi: remove td field from block (#30386)\n\nimplement https://github.com/ethereum/execution-apis/pull/570"
        },
        {
            "date": "2024-09-30 16:32:39",
            "message": "cmd/geth: remove deprecated lightchaindata db (#30527)\n\nThis PR removes the dependencies on `lightchaindata` db as the light\r\nprotocol has been deprecated and removed from the codebase."
        },
        {
            "date": "2024-09-30 12:46:39",
            "message": "eth/catalyst: use setcanonical instead of sethead in simulated fork (#30465)\n\nFixes https://github.com/ethereum/go-ethereum/issues/30448"
        },
        {
            "date": "2024-09-30 12:39:53",
            "message": " build: use buildx to build multi-platform docker images (#30530)"
        },
        {
            "date": "2024-09-30 09:06:10",
            "message": "core/txpool/blobpool: use types.Sender instead of signer.Sender (#30473)\n\nUse types.Sender(signer, tx) to utilize the transaction's sender cache\r\nand avoid repeated address recover."
        },
        {
            "date": "2024-09-30 08:56:14",
            "message": "p2p/discover: add config option for disabling FINDNODE liveness check (#30512)\n\nThis is for fixing Prysm integration tests."
        },
        {
            "date": "2024-09-27 11:13:45",
            "message": "params: begin v1.14.11 release cycle"
        },
        {
            "date": "2024-09-27 11:09:42",
            "message": "params: release Geth v1.14.10"
        },
        {
            "date": "2024-09-27 10:56:25",
            "message": "Revert \"core/txpool, eth/catalyst:  ensure gas tip retains current value upon rollback\" (#30521)\n\nReverts ethereum/go-ethereum#30495\r\n\r\nYou are free to create a proper Clear method if that's the best way. But\r\none that does a proper cleanup, not some hacky call to set gas which\r\nscrews up logs, metrics and everything along the way. Also doesn't work\r\nfor legacy pool local transactions.\r\n\r\nThe current code had a hack in the simulated code, now we have a hack in\r\nlive txpooling code. No, that's not acceptable. I want the live code to\r\nbe proper, meaningful API, meaningful comments, meaningful\r\nimplementation."
        },
        {
            "date": "2024-09-27 10:05:35",
            "message": "Merge pull request #30518 from holiman/blobpool_fix\n\ncore/txpool/blobpool: return all reinject-addresses"
        },
        {
            "date": "2024-09-27 08:55:42",
            "message": "core/txpool/blobpool: add test to check internal shuffling"
        },
        {
            "date": "2024-09-27 06:24:23",
            "message": "core/txpool/blobpool: revert part of #30437, return all reinject-addresses"
        },
        {
            "date": "2024-09-26 09:08:36",
            "message": "core/txpool, eth/catalyst: ensure gas tip retains current value upon rollback (#30495)\n\nHere we move the method that drops all transactions by temporarily increasing the fee\r\ninto the TxPool itself. It's better to have it there because we can set it back to the\r\nconfigured value afterwards. This resolves a TODO in the simulated backend."
        },
        {
            "date": "2024-09-26 07:28:40",
            "message": "deps: update supranational/blst (#30504)\n\nThis update should only affect the fuzzers, as far as I know. But it\r\nseems like it might also fix some arm/macos compilation issue in\r\nhttps://github.com/ethereum/go-ethereum/issues/30494\r\n\r\nCloses #30494 (I think)"
        },
        {
            "date": "2024-09-26 06:12:12",
            "message": "p2p/discover: fix flaky tests writing to test.log after completion (#30506)\n\nThis PR fixes two tests, which had a tendency to sometimes write to the `*testing.T` `log` facility after the test function had completed, which is not allowed. This PR fixes it by using waitgroups to ensure that the handler/logwriter terminates before the test exits.\r\n\r\ncloses #30505"
        },
        {
            "date": "2024-09-24 11:53:46",
            "message": "core/vm: more benchmarks for bls g1/g2-multiexp precompiles (#30459)\n\nThis change adds more comprehensive benchmarks with a wider-variety of input sizes for g1 and g2 multi exponentiation."
        },
        {
            "date": "2024-09-24 11:18:36",
            "message": "core/tracing, core/vm: add ContractCode to the OpContext (#30466)\n\nExtends the opcontext interface to include accessor for code being executed in current context. While it is possible to get the code via `statedb.GetCode`, that approach doesn't work for initcode."
        },
        {
            "date": "2024-09-24 11:14:38",
            "message": "internal/ethapi: fix gascap 0 for eth_simulateV1 (#30496)\n\nSimilar to #30474."
        },
        {
            "date": "2024-09-24 07:26:29",
            "message": "core/rawdb: make sure specified state scheme is valid (#30499)\n\nThis change exits with error if user provided a `--state.scheme` which is neither `hash` nor `path`"
        },
        {
            "date": "2024-09-23 11:31:56",
            "message": "internal/ethapi/api: for simulated calls, set gaspool to max value if global gascap is 0 (#30474)\n\nIn #27720, we introduced RPC global gas cap. A value of `0` means an unlimited gas cap. However, this was not the case for simulated calls. This PR fixes the behaviour."
        },
        {
            "date": "2024-09-23 11:27:29",
            "message": "core/state: commit snapshot only if the base layer exists (#30493)\n\nThis pull request skips the state snapshot update if the base layer is\r\nnot existent, eliminating the numerous warning logs after an unclean\r\nshutdown.\r\n\r\nSpecifically, Geth will rewind its chain head to a historical block\r\nafter unclean shutdown and state snapshot will be remained as unchanged\r\nwaiting for recovery. During this period of time, the snapshot is unusable\r\nand all state updates should be ignored/skipped for state snapshot update."
        },
        {
            "date": "2024-09-23 07:29:07",
            "message": "core/state: fix comment of `mode` (#30490)"
        },
        {
            "date": "2024-09-23 07:17:18",
            "message": "cmd/utils: fix `setEtherbase` (#30488)\n\nMake `setEtherbase` fall thorugh and handle `miner.pending.feeRecipient` after showing deprecation-warning for `miner.etherbase`-flag."
        },
        {
            "date": "2024-09-22 08:12:47",
            "message": "travis: work around travis/osx/go1.23 setup bug (#30491)\n\nThis is a work-around for a strange issue with travis, specifically,\r\n`os=osx, go: 1.23.1`. When this is used, the actual go that ends up\r\nbeing used is `go1.19.4 darwin/amd64 `.\r\n\r\nUsing `which go`, it told me that the `go` in the path was a softlink at\r\n`/Users/travis/gopath/bin/go1.23.1 `. However, this was not true: using\r\n`command -v go`, it told me that the actual `go` that was used is a\r\nsoftlink at `/usr/local/bin/go`.\r\n\r\nThis change rewrites the `/usr/local/bin/go` softlink to point to the\r\nbinary at `/Users/travis/gopath/bin/go1.23.1`, so we get the right\r\ngo-version."
        },
        {
            "date": "2024-09-20 13:43:42",
            "message": "beacon, core, eth, miner: integrate witnesses into production Geth (#30069)\n\nThis PR integrates witness-enabled block production, witness-creating\r\npayload execution and stateless cross-validation into the `engine` API.\r\nThe purpose of the PR is to enable the following use-cases (for API\r\ndetails, please see next section):\r\n\r\n- Cross validating locally created blocks:\r\n- Call `forkchoiceUpdatedWithWitness` instead of `forkchoiceUpdated` to\r\ntrigger witness creation too.\r\n- Call `getPayload` as before to retrieve the new block and also the\r\nabove created witness.\r\n- Call `executeStatelessPayload` against another client to\r\ncross-validate the block.\r\n\r\n- Cross validating locally processed blocks:\r\n- Call `newPayloadWithWitness` instead of `newPayload` to trigger\r\nwitness creation too.\r\n- Call `executeStatelessPayload` against another client to\r\ncross-validate the block.\r\n\r\n- Block production for stateless clients (local or MEV builders):\r\n- Call `forkchoiceUpdatedWithWitness` instead of `forkchoiceUpdated` to\r\ntrigger witness creation too.\r\n- Call `getPayload` as before to retrieve the new block and also the\r\nabove created witness.\r\n- Propagate witnesses across the consensus libp2p network for stateless\r\nEthereum.\r\n\r\n- Stateless validator validation:\r\n- Call `executeStatelessPayload` with the propagated witness to\r\nstatelessly validate the block.\r\n\r\n*Note, the various `WithWitness` methods could also *just be* an\r\nadditional boolean flag on the base methods, but this PR wanted to keep\r\nthe methods separate until a final consensus is reached on how to\r\nintegrate in production.*\r\n\r\n---\r\n\r\nThe following `engine` API types are introduced:\r\n\r\n```go\r\n// StatelessPayloadStatusV1 is the result of a stateless payload execution.\r\ntype StatelessPayloadStatusV1 struct {\r\n\tStatus          string      `json:\"status\"`\r\n\tStateRoot       common.Hash `json:\"stateRoot\"`\r\n\tReceiptsRoot    common.Hash `json:\"receiptsRoot\"`\r\n\tValidationError *string     `json:\"validationError\"`\r\n}\r\n```\r\n\r\n- Add `forkchoiceUpdatedWithWitnessV1,2,3` with same params and returns\r\nas `forkchoiceUpdatedV1,2,3`, but triggering a stateless witness\r\nbuilding if block production is requested.\r\n- Extend `getPayloadV2,3` to return `executionPayloadEnvelope` with an\r\nadditional `witness` field of type `bytes` iff created via\r\n`forkchoiceUpdatedWithWitnessV2,3`.\r\n- Add `newPayloadWithWitnessV1,2,3,4` with same params and returns as\r\n`newPayloadV1,2,3,4`, but triggering a stateless witness creation during\r\npayload execution to allow cross validating it.\r\n- Extend `payloadStatusV1` with a `witness` field of type `bytes` if\r\nreturned by `newPayloadWithWitnessV1,2,3,4`.\r\n- Add `executeStatelessPayloadV1,2,3,4` with same base params as\r\n`newPayloadV1,2,3,4` and one more additional param (`witness`) of type\r\n`bytes`. The method returns `statelessPayloadStatusV1`, which mirrors\r\n`payloadStatusV1` but replaces `latestValidHash` with `stateRoot` and\r\n`receiptRoot`."
        },
        {
            "date": "2024-09-20 12:06:12",
            "message": "build: fix macos builds by working around travis osx flaw (#30479)\n\nThis should fix https://github.com/ethereum/go-ethereum/issues/30471.\r\nSee investigation in https://github.com/ethereum/go-ethereum/pull/30478\r\nfor more background."
        },
        {
            "date": "2024-09-19 08:23:13",
            "message": ".github: add release maintainers to params/ CODEOWNERS (#30458)"
        },
        {
            "date": "2024-09-19 07:41:10",
            "message": "ethdb/pebble: handle errors (#30367)"
        },
        {
            "date": "2024-09-19 06:38:06",
            "message": "core: minor fix for the log wrapper with debug purpose (#30454)\n\nAfter this PR, https://github.com/ethereum/go-ethereum/pull/28187, the\r\nway to set the default logger is different. This PR only updates the way\r\nto set logger in some test cases' comments that existed in the codebase\r\n(since this commit\r\nhttps://github.com/ethereum/go-ethereum/commit/b63e3c37a6). Although I\r\nam not sure if it a good way to leave the code in the comment, it truly\r\nmakes me more efficiently to debug and fix the failing test cases."
        },
        {
            "date": "2024-09-19 06:35:14",
            "message": "genesis: fix dev mode alloc (#30460)\n\nBalance being null causes `getGenesisState` to fail as the balance field\r\nis required in json marshaling of an account."
        },
        {
            "date": "2024-09-18 12:48:47",
            "message": "params: begin v1.14.10 release cycle (#30457)"
        },
        {
            "date": "2024-09-18 12:27:03",
            "message": "params: release go-ethereum v1.14.9 stable (#30455)"
        },
        {
            "date": "2024-09-18 08:53:50",
            "message": "Revert \"core/rawdb: remove unused transition status state accessors\" (#30449)\n\nReverts ethereum/go-ethereum#30433"
        },
        {
            "date": "2024-09-17 14:10:59",
            "message": "core/tracing: add verkle gas change reasons to changelog (#30444)\n\nAdd changes from #30409 and #29338 to changelog.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>\r\nCo-authored-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>"
        },
        {
            "date": "2024-09-16 17:57:31",
            "message": "core/tracing: fix typo in comment (#30443)\n\nminor fix"
        },
        {
            "date": "2024-09-16 08:56:02",
            "message": "core, trie: prealloc capacity for maps (#30437)\n\n- preallocate capacity for map\r\n- avoid `reinject` adding empty value\r\n- use `maps.Copy`"
        },
        {
            "date": "2024-09-16 06:51:03",
            "message": "core/types: more easily extensible tx signing (#30372)\n\nThis change makes the code slightly easier for downstream-projects to extend with more signer-types, but if functionalily equivalent to the previous code."
        },
        {
            "date": "2024-09-16 06:44:47",
            "message": "internal: run tests in parallel (#30381)\n\nContinuation of https://github.com/ethereum/go-ethereum/pull/28546"
        },
        {
            "date": "2024-09-15 00:55:53",
            "message": "core/rawdb: remove unused transition status state accessors (#30433)"
        },
        {
            "date": "2024-09-14 13:45:52",
            "message": "core/txpool/blobpool: avoid possible zero index panic (#30430)\n\nThis situation(`len(txs) == 0`) rarely occurs, but if it does, it will\r\npanic.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-09-14 13:44:42",
            "message": "core/tracing: fix copy/paste error+comments in reason listing (#30431)\n\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>"
        },
        {
            "date": "2024-09-13 21:47:18",
            "message": "p2p/enode: add quic ENR entry (#30283)\n\nAdd `quic` entry to the ENR as proposed in\r\nhttps://github.com/ethereum/consensus-specs/pull/3644\r\n\r\n---------\r\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2024-09-13 13:37:30",
            "message": "core/state, core/vm: Nyota contract create init simplification (#30409)\n\nImplementation of [this EIP-4762\r\nupdate](https://github.com/ethereum/EIPs/pull/8867).\r\n\r\n---------\r\n\r\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\r\nCo-authored-by: Tanishq Jasoria <jasoriatanishq@gmail.com>"
        },
        {
            "date": "2024-09-13 09:17:40",
            "message": "core/rawdb: more accurate description of freezer in docs (#30393)\n\nfixes https://github.com/ethereum/go-ethereum/issues/29793"
        },
        {
            "date": "2024-09-13 09:16:47",
            "message": "eth/filters: prevent concurrent access in test (#30401)\n\nuse a mutex to prevent concurrent access to the api.filters map during `TestPendingTxFilterDeadlock` test"
        },
        {
            "date": "2024-09-12 14:08:29",
            "message": "beacon/light/api: fixed blsync update query (#30421)\n\nThis PR fixes what https://github.com/ethereum/go-ethereum/pull/30306/\r\nbroke. Escaping the `?` in the event sub query was fixed in that PR but\r\nit was still escaped in the `updates` request. This PR adds a URL params\r\nargument to `httpGet` and fixes `updates` query formatting."
        },
        {
            "date": "2024-09-11 13:11:08",
            "message": "core/vm: remove panic when address is not present (#30414)\n\nRemove redundant address presence check in `makeGasSStoreFunc`.\r\n\r\nThis PR simplifies the `makeGasSStoreFunc` function by removing the\r\nredundant check for address presence in the access list. The updated\r\ncode now only checks for slot presence, streamlining the logic and\r\neliminating unnecessary panic conditions.\r\n\r\nThis change removes the unnecessary address presence check, simplifying\r\nthe code and improving maintainability without affecting functionality.\r\nThe previous panic condition was intended as a canary during the testing\r\nphases (i.e. _YOLOv2_) and is no longer needed."
        },
        {
            "date": "2024-09-10 18:52:20",
            "message": "beacon/engine/types: remove PayloadV4 (#30415)\n\nh/t @MariusVanDerWijden for finding and fixing this on devnet 3.\r\n\r\nI made the mistake of thinking `PayloadVersion` was correlated with the\r\n`GetPayloadVX` method, but it actually tracks which version of\r\n`PayloadAttributes` were passed to `forkchoiceUpdated`. So far, Prague\r\ndoes not necessitate a new version of fcu, so there is no need for\r\n`PayloadV4`.\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2024-09-06 15:02:34",
            "message": "core/state/snapshot: port changes from 29995 (#30040)\n\n#29995 has been reverted due to an unexpected flaw in the state snapshot\r\nprocess.\r\n\r\nSpecifically, it attempts to stop the state snapshot generation, which\r\ncould potentially\r\ncause the system to halt if the generation is not currently running.\r\n\r\nThis pull request ports the changes made in #29995 and fixes the flaw."
        },
        {
            "date": "2024-09-06 10:32:01",
            "message": "eth/fetcher: fix blob transaction propagation (#30125)\n\nThis PR fixes an issue with blob transaction propagation due to the blob\r\ntransation txpool rejecting transactions with gapped nonces. The\r\nspecific changes are:\r\n\r\n- fetch transactions from a peer in the order they were announced to\r\nminimize nonce-gaps (which cause blob txs to be rejected\r\n\r\n- don't wait on fetching blob transactions after announcement is\r\nreceived, since they are not broadcast\r\n\r\nTesting:\r\n- unit tests updated to reflect that fetch order should always match tx\r\nannouncement order\r\n- unit test added to confirm blob transactions are scheduled immediately\r\nfor fetching\r\n  - running the PR on an eth mainnet full node without incident so far\r\n\r\n---------\r\n\r\nSigned-off-by: Roberto Bayardo <bayardo@alum.mit.edu>\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-09-06 09:31:00",
            "message": "internal/ethapi: eth_multicall (#27720)\n\nThis is a successor PR to #25743. This PR is based on a new iteration of\r\nthe spec: https://github.com/ethereum/execution-apis/pull/484.\r\n\r\n`eth_multicall` takes in a list of blocks, each optionally overriding\r\nfields like number, timestamp, etc. of a base block. Each block can\r\ninclude calls. At each block users can override the state. There are\r\nextra features, such as:\r\n\r\n- Include ether transfers as part of the logs\r\n- Overriding precompile codes with evm bytecode\r\n- Redirecting accounts to another address\r\n\r\n## Breaking changes\r\n\r\nThis PR includes the following breaking changes:\r\n\r\n- Block override fields of eth_call and debug_traceCall have had the\r\nfollowing fields renamed\r\n  - `coinbase` -> `feeRecipient`\r\n  - `random` -> `prevRandao`\r\n  - `baseFee` -> `baseFeePerGas`\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-09-06 08:11:14",
            "message": "build: upgrade -dlgo version to Go 1.23.1 (#30404)\n\nNew security fix:\r\nhttps://groups.google.com/g/golang-announce/c/K-cEzDeCtpc"
        },
        {
            "date": "2024-09-06 07:42:59",
            "message": "core/state: get rid of field pointer in journal (#30361)\n\nThis pull request replaces the field pointer in journal entry with the\r\nfield itself, specifically the address of mutated account.\r\n\r\nWhile it will introduce the extra allocation cost, but it's easier for\r\ncode reading. Let's measure the overhead overall to see if the change is\r\nacceptable or not."
        },
        {
            "date": "2024-09-05 10:10:47",
            "message": "core/state: state reader abstraction (#29761)\n\nThis pull request introduces a state.Reader interface for state\r\naccessing.\r\n\r\nThe interface could be implemented in various ways. It can be pure trie\r\nonly reader, or the combination of trie and state snapshot. What's more,\r\nthis interface allows us to have more flexibility in the future, e.g.\r\nthe\r\narchive reader (for accessing archive state).\r\n\r\nAdditionally, this pull request removes the following metrics\r\n\r\n- `chain/snapshot/account/reads`\r\n- `chain/snapshot/storage/reads`"
        },
        {
            "date": "2024-09-05 08:50:34",
            "message": "build: increase go test timeout (#30398)\n\nThis increases the timeout for the go tests on ci, this should prevent\r\ntravis from erroring.\r\n\r\nsee:\r\nhttps://app.travis-ci.com/github/ethereum/go-ethereum/jobs/625803693"
        },
        {
            "date": "2024-09-04 14:15:41",
            "message": "node: fix flaky jwt-test (#30388)\n\nThis PR fixes a flaky jwt-test. \r\n\r\nThe test is a jwt \"from one second in the future\". The test passes; the\r\nreason for this is that the CI-system is slow, and by the time the jwt\r\nis actually evaluated, that second has passed, and it's no longer\r\nfuture.\r\n\r\nAlternative to #30380"
        },
        {
            "date": "2024-09-04 13:19:18",
            "message": "all: remove funding verifier (#30391)\n\nNow that verification is done, we can remove the funding information."
        },
        {
            "date": "2024-09-04 13:13:20",
            "message": "core: fix compilation error (#30394)\n\nun-borks a compilation error from a recent merge to master"
        },
        {
            "date": "2024-09-04 13:03:06",
            "message": "all: remove forkchoicer and reorgNeeded (#29179)\n\nThis PR changes how sidechains are handled. \r\n\r\nBefore the merge, it was possible to import a chain with lower td and not set it as canonical. After the merge, we expect every chain that we get via InsertChain to be canonical. Non-canonical blocks can still be inserted\r\nwith InsertBlockWIthoutSetHead.\r\n\r\nIf during the InsertChain, the existing chain is not canonical anymore, we mark it as a sidechain and send the SideChainEvents normally."
        },
        {
            "date": "2024-09-04 12:33:51",
            "message": "all: implement EIP-6110, execution layer triggered deposits (#29431)\n\nThis PR implements EIP-6110: Supply validator deposits on chain. It also sketches\r\nout the base for Prague in the engine API types."
        },
        {
            "date": "2024-09-03 14:22:32",
            "message": "funding.json: add funding information file (#30385)\n\nAdds a list of funding identifiers."
        },
        {
            "date": "2024-09-02 08:41:44",
            "message": "core/state: pull the verkle trie from prefetcher for empty storage root (#30369)\n\nThis pull request fixes a flaw in prefetcher.\r\n\r\nIn verkle tree world, both accounts and storage slots are committed into\r\na single tree instance for state hashing. If the prefetcher is activated, we will\r\ntry to pull the trie for the prefetcher for performance speedup. \r\n\r\nHowever, we had a special logic to skip pulling storage trie if the\r\nstorage root is empty. While it's true for merkle as we have nothing to\r\ndo with an empty storage trie, it's totally wrong for verkle. The consequences\r\nfor skipping pulling is the storage changes are committed into trie A, while the\r\naccount changes are committed into trie B (pulled from the prefetcher), boom."
        },
        {
            "date": "2024-09-02 08:30:33",
            "message": "Include tracerConfig in created tracing test (#30364)\n\nFixes the tracer test filler for when there is tracerConfig."
        },
        {
            "date": "2024-08-30 12:13:02",
            "message": "trie, core/state: Nyota EIP-6800 & EIP-4762 spec updates (#30357)\n\nThis PR implements changes related to\r\n[EIP-6800](https://eips.ethereum.org/EIPS/eip-6800) and\r\n[EIP-4762](https://eips.ethereum.org/EIPS/eip-4762) spec updates.\r\n\r\nA TL;DR of the changes is that `Version`, `Balance`, `Nonce` and\r\n`CodeSize` are encoded in a single leaf named `BasicData`. For more\r\ndetails, see the [_Header Values_ table in\r\nEIP-6800](https://eips.ethereum.org/EIPS/eip-6800#header-values).\r\n\r\nThe motivation for this was simplifying access event patterns, reducing\r\ncode complexity, and, as a side effect, saving gas since fewer leaf\r\nnodes must be accessed.\r\n\r\n---------\r\n\r\nCo-authored-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-08-29 12:50:27",
            "message": "consensus/beacon, core/types: add verkle witness builder (#30129)\n\nThis PR adds the bulk verkle witness+proof production at the end of block\r\nproduction. It reads all data from the tree in one swoop and produces\r\na verkle proof.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-08-28 12:12:09",
            "message": "signer/core/apitypes: support fixed size arrays for EIP-712 typed data (#30175)\n\nWhen attempting to hash a typed data struct that includes a type\r\nreference with a fixed-size array, the validation process fails.\r\nAccording to EIP-712, arrays can be either fixed-size or dynamic,\r\ndenoted by `Type[n]` or `Type[]` respectively, although it appears this\r\ncurrently isn't supported.\r\n\r\nThis change modifies  the validation logic to accommodate types\r\ncontaining fixed-size arrays."
        },
        {
            "date": "2024-08-28 06:18:23",
            "message": "core/state: semantic journalling (part 1) (#28880)\n\nThis is a follow-up to #29520, and a preparatory PR to a more thorough\r\nchange in the journalling system.\r\n\r\n### API methods instead of `append` operations\r\n\r\nThis PR hides the journal-implementation details away, so that the\r\nstatedb invokes methods like `JournalCreate`, instead of explicitly\r\nappending journal-events in a list. This means that it's up to the\r\njournal whether to implement it as a sequence of events or\r\naggregate/merge events.\r\n\r\n### Snapshot-management inside the journal \r\n\r\nThis PR also makes it so that management of valid snapshots is moved\r\ninside the journal, exposed via the methods `Snapshot() int` and\r\n`RevertToSnapshot(revid int, s *StateDB)`.\r\n\r\n\r\n### SetCode\r\n\r\nJournalSetCode journals the setting of code: it is implicit that the\r\nprevious values were \"no code\" and emptyCodeHash. Therefore, we can\r\nsimplify the setCode journal.\r\n\r\n### Selfdestruct\r\n\r\nThe self-destruct journalling is a bit strange: we allow the\r\nselfdestruct operation to be journalled several times. This makes it so\r\nthat we also are forced to store whether the account was already\r\ndestructed.\r\n\r\nWhat we can do instead, is to only journal the first destruction, and\r\nafter that only journal balance-changes, but not journal the\r\nselfdestruct itself.\r\n\r\nThis simplifies the journalling, so that internals about state\r\nmanagement does not leak into the journal-API.\r\n\r\n### Preimages\r\n\r\nPreimages were, for some reason, integrated into the journal management,\r\ndespite not being a consensus-critical data structure. This PR undoes\r\nthat.\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-08-27 15:11:50",
            "message": "accounts/abi/bind, ethclient/simulated: check SendTransaction error in tests (#30349)\n\nIn few tests the returned error from `SendTransaction` is not being\r\nchecked. This PR checks the returned err in tests.\r\n\r\nReturning errors also revealed tx in `TestCommitReturnValue` is not\r\nactually being sent, and returns err ` only replay-protected (EIP-155)\r\ntransactions allowed over RPC`. Fixed the transaction by using the\r\n`testTx` function."
        },
        {
            "date": "2024-08-27 12:10:32",
            "message": "p2p/discover: fix Write method in metered connection (#30355)\n\n`WriteToUDP` was never called, since `meteredUdpConn` exposed directly\r\nall the methods from the underlying `UDPConn` interface.\r\n\r\nThis fixes the `discover/egress` metric never being updated."
        },
        {
            "date": "2024-08-26 14:18:47",
            "message": "core/state: fix trie prefetcher for verkle (#30354)\n\nThis pull request fixes the panic issue in prefetcher once the verkle is\r\nactivated."
        },
        {
            "date": "2024-08-26 12:02:10",
            "message": "core: add metrics for state access (#30353)\n\nThis pull request adds a few more performance metrics, specifically:\r\n\r\n- The average time cost of an account read\r\n- The average time cost of a storage read\r\n- The rate of account reads\r\n- The rate of storage reads"
        },
        {
            "date": "2024-08-26 08:39:35",
            "message": "core: implement EIP-2935 (#29465)\n\nhttps://eips.ethereum.org/EIPS/eip-2935\r\n\r\n---------\r\n\r\nCo-authored-by: Guillaume Ballet <gballet@gmail.com>\r\nCo-authored-by: Ignacio Hagopian <jsign.uy@gmail.com>\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-08-26 01:29:24",
            "message": "doc: update 2021-08-22-split-postmortem (#30351)\n\nUpdate 2021-08-22-split-postmortem"
        },
        {
            "date": "2024-08-23 14:48:20",
            "message": "gitignore: ignore build signatures (#30346)\n\nIgnore files are generated during signing of download-binaries, which 'dirty' the vcs for subsequent builds."
        },
        {
            "date": "2024-08-23 14:30:30",
            "message": "build: debug travis build (#30344)\n\ndebugging travis build pipeline"
        },
        {
            "date": "2024-08-23 10:31:24",
            "message": "beacon/light/sync: basic tests for rangeLock (#30269)\n\nadds simple tests for lock and firstUnlocked method from rangeLock\r\ntype\r\n\r\n---------\r\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2024-08-23 10:29:02",
            "message": "beacon/blsync: better error information in test (#30336)\n\nthis change reports the error instead of ignoring it"
        },
        {
            "date": "2024-08-23 10:27:06",
            "message": "trie: avoid un-needed map copy (#30343)\n\nThis change avoids the an unnecessary map copy if the preimage recording is not enabled."
        },
        {
            "date": "2024-08-23 07:48:24",
            "message": "build: make go buildid static (#30342)\n\nThe previous clearing of buildid did fully work, turns out we need to\r\nset it in `ldflags`\r\n\r\nThe go buildid is the only remaining hurdle for reproducible builds, see\r\nhttps://github.com/ethereum/go-ethereum/issues/28987#issuecomment-2306412590\r\n\r\nThis PR changes the go build id application note to say literally `none`\r\n\r\nhttps://github.com/golang/go/issues/33772#issuecomment-528176001:\r\n\r\n> This difference is due to the .note.go.buildid section added by the\r\nlinker. It can be set to something static e.g. -ldflags=-buildid= (empty\r\nstring) to gain reproducibility."
        },
        {
            "date": "2024-08-22 11:29:40",
            "message": "build: fix hash for go1.23.0.linux-riscv64.tar.gz (#30335)\n\nbuild: fix hash for go1.23.0.linux-riscv64.tar.gz"
        },
        {
            "date": "2024-08-21 13:16:08",
            "message": "eth/tracers: avoid panic in state test runner (#30332)\n\nMake tracers more robust by handling `nil` receipt as input. \r\nAlso pass in a receipt with gas used in the state test runner.\r\nCloses https://github.com/ethereum/go-ethereum/issues/30117.\r\n\r\n---------\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2024-08-21 07:22:33",
            "message": "eth/protocols/eth: handle zero-count header requests (#30305)\n\nProper fix for handling `count=0` get header requests. \r\n\r\nhttps://en.wikipedia.org/wiki/Count_Zero"
        },
        {
            "date": "2024-08-21 02:00:31",
            "message": "trie: use go-verkle helper for speedier (*VerkleTrie).RollBackAccount (#30242)\n\nThis is a performance improvement on the account-creation rollback code\r\nrequired for the archive node to support verkle. It uses the utility\r\nfunction `DeleteAtStem` to remove code and account data per-group\r\ninstead of doing it leaf by leaf.\r\n\r\nIt also fixes an index bug, as code is chunked in 31-byte chunks, so\r\ncomparing with the code size should use 31 as its stride.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-08-20 15:34:03",
            "message": "travis.yml: use focal for builds (#30319)"
        },
        {
            "date": "2024-08-20 14:02:54",
            "message": "cmd/utils,p2p: enable discv5 by default (#30327)"
        },
        {
            "date": "2024-08-20 13:59:48",
            "message": "all: clean up goerli flag and config (#30289)\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2024-08-20 13:59:16",
            "message": "cmd/devp2p: require dns:read, dns:edit permissions for cloudflare deploy  (#30326)\n\nThis PR adds the `dns:read` and `dns:edit` permissions to the required\r\nset of permissions checked before deploying an ENR tree to Cloudflare.\r\nThese permissions are necessary for a successful publish.\r\n\r\n**Background**:\r\nThe current logic for `devp2p dns to-cloudflare` checks for `zone:edit`\r\nand `zone:read` permissions. However, when running the command with only\r\nthese two permissions, the following error occurs:\r\n```\r\nwrong permissions on zone REMOVED-ZONE: map[#zone:edit:false #zone:read:true]\r\n```\r\n\r\nAdding `zone:read` and `zone:edit` to the API token led to a different\r\nerror:\r\n```\r\nINFO [08-19|14:06:16.782] Retrieving existing TXT records on pos-nodes.hardfork.dev\r\nAuthentication error (10000)\r\n```\r\n\r\nThis suggested that additional permissions were required. I added\r\n`dns:read`, but encountered another error:\r\n```\r\nINFO [08-19|14:11:42.342] Retrieving existing TXT records on pos-nodes.hardfork.dev\r\nINFO [08-19|14:11:42.851] Updating DNS entries\r\nfailed to publish REMOVED.pos-nodes.hardfork.dev: Authentication error (10000)\r\n```\r\n\r\nFinally, after adding both `dns:read` and `dns:edit` permissions, the\r\ncommand executed successfully with the following output:\r\n```\r\nINFO [08-19|14:13:07.677] Checking Permissions on zone REMOVED-ZONE\r\nINFO [08-19|14:13:08.014] Retrieving existing TXT records on pos-nodes.hardfork.dev\r\nINFO [08-19|14:13:08.440] Updating DNS entries\r\nINFO [08-19|14:13:08.440] \"Updating pos-nodes.hardfork.dev from \\\"enrtree-root:v1 e=FSED3EDKEKRDDFMCLP746QY6CY l=FDXN3SN67NA5DKA4J2GOK7BVQI seq=1 sig=Glja2c9RviRqOpaaHR0MnHsQwU76nJXadJwFeiXpp8MRTVIhvL0LIireT0yE3ETZArGEmY5Ywz3FVHZ3LR5JTAE\\\" to \\\"enrtree-root:v1 e=AB66M4ULYD5OYN4XFFCPVZRLUM l=FDXN3SN67NA5DKA4J2GOK7BVQI seq=1 sig=H8cqDzu0FAzBplK4g3yudhSaNtszIebc2aj4oDm5a5ZE5PAg-xpCnQgVE_53CsgsqQpalD9byafx_FrUT61sagA\\\"\"\r\nINFO [08-19|14:13:16.932] Updated DNS entries                      new=32 updated=1 untouched=100\r\nINFO [08-19|14:13:16.932] Deleting stale DNS entries\r\nINFO [08-19|14:13:24.663] Deleted stale DNS entries                count=31\r\n```\r\n\r\nWith this PR, the required permissions for deploying an ENR tree to\r\nCloudflare now include `zone:read`, `zone:edit`, `dns:read`, and\r\n`dns:edit`. The initial check now includes all of the necessary\r\npermissions and indicates in the error message which permissions are\r\nmissing:\r\n```\r\nINFO [08-19|14:17:20.339] Checking Permissions on zone REMOVED-ZONE\r\nwrong permissions on zone REMOVED-ZONE: map[#dns_records:edit:false #dns_records:read:false #zone:edit:false #zone:read:true]\r\n```"
        },
        {
            "date": "2024-08-20 13:54:28",
            "message": "rpc: add timeout to rpc client Unsubscribe (#30318)\n\nFixes #30156\r\n\r\nThis adds a repro of the linked issue. I fixed it by adding a timeout\r\nwhen issuing the call to unsubscribe."
        },
        {
            "date": "2024-08-20 13:50:07",
            "message": "all: update to go version 1.23.0 (#30323)\n\nThis PR updates the version of go used in builds and docker to\r\n1.23.0. Release notes: https://go.dev/doc/go1.23\r\n\r\nMore importantly, following our policy of maintaining the last two\r\nversions (which now becomes 1.23 and 1.22), we can now make use of\r\nthe things that were introduced in 1.22: https://go.dev/doc/go1.22\r\n\r\nGo 1.22 makes two changes to \u201cfor\u201d loops.\r\n- each iteration creates new variables, \r\n- for loops may range over integers\r\n\r\nOther than that, some interesting library changes and other stuff."
        },
        {
            "date": "2024-08-20 13:33:28",
            "message": "build: attempt at reproducible builds (#30321)\n\nThis PR implements the conclusions from\r\nhttps://github.com/ethereum/go-ethereum/issues/28987#issuecomment-2296075028,\r\nthat is:\r\n\r\nBuilding with `--strip-all` as a ld-flag to the cgo linker, to remove\r\nsymbols. Without that, some spurious reference to a temporary file is\r\nincluded into the kzg-related library.\r\n\r\nBuilding with `--build-id=none`, to avoid putting a `build id` into the file."
        },
        {
            "date": "2024-08-20 12:31:06",
            "message": "core/vm: reuse Memory instances (#30137)\n\nThis PR adds a sync.Pool to reuse instances of Memory in EVMInterpreter."
        },
        {
            "date": "2024-08-20 12:06:00",
            "message": "core/rawdb: drop MigrateTable (#30331)\n\nThese are the leftovers from #24028."
        },
        {
            "date": "2024-08-20 10:26:35",
            "message": "accounts/abi: handle ABIs with contract type parameter (#30315)\n\nconvert parameter of type contract to the basic `address` type\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-08-19 21:32:15",
            "message": "eth/catalyst: ensure period zero mode leaves no pending txs in pool (#30264)\n\ncloses #29475, replaces #29657, #30104 \r\n\r\nFixes two issues. First is a deadlock where the txpool attempts to reorg, but can't complete because there are no readers left for the new txs subscription. Second, resolves a problem with on demand mode where txs may be left pending when there are more pending txs than block space.\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-08-19 18:06:57",
            "message": "gitignore: ignore upload-artefacts (#30325)\n\nOur `WriteArchive`, used by ci builder, creates files in the repo root,in order to upload. After we've built the amd64-builds, we create the uploads, and cause the repo to be flagged as dirty for the remaining builds.\r\n\r\nThis change fixes it by adding the artefacts to gitignore. Closes #30324"
        },
        {
            "date": "2024-08-19 11:35:41",
            "message": "build: remove mantic from ppa builds (#30322)\n\nremoves ppa-build for ubuntu `mantic`"
        },
        {
            "date": "2024-08-19 11:35:04",
            "message": "internal/build: include git-date on detached head (#30320)\n\nWhen we are building in detached head, we cannot easily obtain the same information as we can if we're in non-detached head.\r\n\r\nHowever, one thing we _can_ obtain is the git-hash and git-date. Currently, we omit to include the git-date into the build-info, which causes problem for reproducable builds which are on a detached head.\r\n\r\nThis change fixes it to include the date-info always."
        },
        {
            "date": "2024-08-16 14:41:44",
            "message": "vm: simplify error handling in `vm.EVM.create()` (#30292)\n\nTo allow all error paths in `vm.EVM.create()` to consume the necessary\r\ngas, there is currently a pattern of gating code on `if err == nil`\r\ninstead of returning as soon as the error occurs. The same behaviour can\r\nbe achieved by abstracting the gated code into a method that returns\r\nimmediately on error, improving readability and thus making it easier to\r\nunderstand and maintain."
        },
        {
            "date": "2024-08-16 14:33:41",
            "message": "core: remove withdrawal length check for state processor (#30286)\n\nThe withdrawal length is already verified by the beacon consensus package, so the check in the state processor is a duplicate."
        },
        {
            "date": "2024-08-16 12:39:57",
            "message": "beacon/light: handle endpoint URL more gracefully (#30306)\n\nblsync was failing if the light endpoint it was provided ended with a\n`/`. This change should handle the joining more gracefully."
        },
        {
            "date": "2024-08-15 20:14:42",
            "message": "eth: dial nodes from discv5 (#30302)\n\nHere I am adding a discv5 nodes source into the p2p dial iterator. It's\r\nan improved version of #29533.\r\n\r\nUnlike discv4, the discv5 random nodes iterator will always provide full\r\nENRs. This means we can apply filtering to the results and will only try\r\ndialing nodes which explictly opt into the eth protocol with a matching\r\nchain.\r\n\r\nI have also removed the dial iterator from snap. We don't have an\r\nofficial DNS list for snap anymore, and I doubt anyone else is running\r\none. While we could potentially filter for snap on discv5, there will be\r\nvery few nodes announcing it, and the extra iterator would just stall\r\nthe dialer.\r\n\r\n---------\r\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2024-08-15 14:36:35",
            "message": "eth/tracers/js: add coinbase addr to ctx (#30231)\n\nAdd coinbase address to javascript tracer context.\r\n\r\nThis PR adds the `coinbase` address to `jsTracer.ctx`, allowing access\r\nto the coinbase address (fee receipient) in custom JavaScript tracers.\r\n\r\nExample usage:\r\n\r\n```javascript\r\nresult: function(ctx) {\r\n  return toAddress(ctx.coinbase);\r\n}\r\n```\r\n\r\nThis change enables custom tracers to access coinbase address,\r\npreviously unavailable, enhancing their capabilities to match built-in\r\ntracers."
        },
        {
            "date": "2024-08-15 09:42:39",
            "message": "eth/ethconfig: remove LES server config (#30298)"
        },
        {
            "date": "2024-08-15 09:35:16",
            "message": "eth/fetcher: always expect transaction metadata in announcement (#30288)\n\nThis pull request drops the legacy transaction retrieval support from before\r\neth68, adding the restrictions that transaction metadata must be provided\r\nalong with the transaction announment."
        },
        {
            "date": "2024-08-15 08:11:03",
            "message": ".golangci.yml: remove lint warning for TxLookupLimit"
        },
        {
            "date": "2024-08-15 07:16:23",
            "message": "core: only compute state root once (#30299)\n\nThis PR refactors the genesis initialization a bit, s.th. we only\r\ncompute the blockhash once instead of twice as before (during hashAlloc\r\nand flushAlloc)\r\n\r\nThis will significantly reduce the amount of memory allocated during\r\ngenesis init\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-08-14 09:45:51",
            "message": "go.mod: upgrade to pebble v1.1.2 (#30297)\n\nIncludes a fix for MIPS32 support.\r\n\r\nPebble release:\r\nhttps://github.com/cockroachdb/pebble/releases/tag/v1.1.2\r\nKey fix for mips32:\r\nhttps://github.com/cockroachdb/pebble/commit/9f3904a705d60b9832febb6c6494183d92c8f556\r\n(also the only change from v1.1.1."
        },
        {
            "date": "2024-08-13 11:49:31",
            "message": "core/txpool/blobpool: fix error message (#30247)\n\nthe validation process only checks for 'less than', which is\r\ninconsistent with the error output"
        },
        {
            "date": "2024-08-12 18:46:15",
            "message": "build: run 'go mod tidy' check as part of lint (#30291)"
        },
        {
            "date": "2024-08-12 18:42:36",
            "message": "go.mod: remove github.com/julienschmidt/httprouter (#30290)"
        },
        {
            "date": "2024-08-12 12:19:35",
            "message": "params: begin v1.14.9 release cycle"
        },
        {
            "date": "2024-08-12 12:15:30",
            "message": "params: release go-ethereum v1.14.8 stable"
        },
        {
            "date": "2024-08-12 08:43:54",
            "message": "eth/protocols/snap: cleanup dangling account trie nodes due to incomplete storage (#30258)\n\nThis pull request fixes #30229.\r\n \r\nDuring snap sync, large storage will be split into several pieces and\r\nsynchronized concurrently. Unfortunately, the tradeoff is that the respective\r\nmerkle trie of each storage chunk will be incomplete due to the incomplete\r\nboundaries. The trie nodes on these boundaries will be discarded, and any\r\ndangling nodes on disk will also be removed if they fall on these paths,\r\nensuring the state healer won't be blocked.\r\n\r\nHowever, the dangling account trie nodes on the path from the root to the\r\nassociated account are left untouched. This means the dangling account trie\r\nnodes could potentially stop the state healing and break the assumption that the\r\nentire subtrie should exist if the subtrie root exists. We should consider the\r\naccount trie node as the ancestor of the corresponding storage trie node.\r\n\r\nIn the scenarios described in the above ticket, the state corruption could occur\r\nif there is a dangling account trie node while some storage trie nodes are\r\nremoved due to synchronization redo.\r\n\r\nThe fixing idea is pretty straightforward, the trie nodes on the path from root\r\nto account should all be explicitly removed if an incomplete storage trie\r\noccurs. Therefore, a `delete` operation has been added into `gentrie` to\r\nexplicitly clear the account along with all nodes on this path. The special\r\nthing is that it's a cross-trie clearing. In theory, there may be a dangling\r\nnode at any position on this account key and we have to clear all of them."
        },
        {
            "date": "2024-08-12 08:36:48",
            "message": "p2p/simulations: remove packages (#30250)\n\nLooking at the history of these packages over the past several years, there\r\nhaven't been any meaningful contributions or usages:\r\nhttps://github.com/ethereum/go-ethereum/commits/master/p2p/simulations?before=de6d5976794a9ed3b626d4eba57bf7f0806fb970+35\r\n\r\nAlmost all of the commits are part of larger refactors or low-hanging-fruit contributions.\r\nSeems like it's not providing much value and taking up team + contributor time."
        },
        {
            "date": "2024-08-10 10:44:31",
            "message": "beacon/engine, consensus/beacon: use params.MaximumExtraDataSize instead of hard-coded value (#29721)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2024-08-09 20:11:22",
            "message": "go.mod: update uint256 to 1.3.1 (#30280)\n\nRelease notes: https://github.com/holiman/uint256/releases/tag/v1.3.1"
        },
        {
            "date": "2024-08-08 16:58:08",
            "message": "cmd/evm: fix evm basefee (#30281)\n\nfixes #30279 -- previously we did not use the basefee from the genesis, and instead the defaults were used from `runtime.go/setDefaults`-function"
        },
        {
            "date": "2024-08-08 13:14:00",
            "message": "eth/downloader, core/types: take withdrawals-size into account in downloader queue (#30276)\n\nFixes a slight miscalculation in the downloader queue, which was not accurately taking block withdrawals into account when calculating the size of the items in the queue"
        },
        {
            "date": "2024-08-08 11:50:00",
            "message": "tests: fix TransactionTest to actually run (#30272)\n\nDue to https://github.com/ethereum/tests/releases/tag/v10.1, the format\r\nof the TransactionTest changed, but it was not properly addressed, causing the test\r\nto pass unexpectedly.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-08-08 11:47:43",
            "message": "build: upgrade -dlgo version to Go 1.22.6 (#30273)"
        },
        {
            "date": "2024-08-08 08:27:38",
            "message": "core/vm: use uint64 in memory for indices everywhere (#30252)\n\nConsistently use `uint64` for indices in `Memory` and drop lots of type\r\nconversions from `uint64` to `int64`.\r\n\r\n---------\r\n\r\nCo-authored-by: lmittmann <lmittmann@users.noreply.github.com>"
        },
        {
            "date": "2024-08-08 07:13:18",
            "message": "signer/core: improve performance of isPrimitiveTypeValid function (#30274) (#30277)\n\nPrecomputes valid primitive types into a map to use for validation, thus removing sprintf."
        },
        {
            "date": "2024-08-06 12:38:47",
            "message": "core/vm: improved stack swap performance (#30249)\n\nThis PR adds the methods `Stack.swap1..16()` that faster than `Stack.swap(1..16)`. \r\n\r\nCo-authored-by: lmittmann <lmittmann@users.noreply.github.com>"
        },
        {
            "date": "2024-08-06 12:14:37",
            "message": "ethclient: support networkID in hex format (#30263)\n\nSome chains\u2019 network IDs use hexadecimal such as Optimism (\"0xa\" instead\r\nof \"10\"), so when converting the string to big.Int, we cannot specify\r\nbase 10; otherwise, it will encounter errors with hexadecimal network\r\nIDs."
        },
        {
            "date": "2024-08-06 11:51:48",
            "message": "core/vm/runtime: ensure tracer benchmark calls `OnTxStart` (#30257)\n\nThe struct-based tracing added in #29189 seems to have caused an issue\r\nwith the benchmark `BenchmarkTracerStepVsCallFrame`. On master we see\r\nthe following panic:\r\n\r\n```console\r\nBenchmarkTracerStepVsCallFrame\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x2 addr=0x40 pc=0x1019782f0]\r\n\r\ngoroutine 37 [running]:\r\ngithub.com/ethereum/go-ethereum/eth/tracers/js.(*jsTracer).OnOpcode(0x140004c4000, 0x0, 0x10?, 0x989680, 0x1, {0x101ea2298, 0x1400000e258}, {0x1400000e258?, 0x14000155928?, 0x10173020c?}, ...)\r\n        /Users/matt/dev/go-ethereum/eth/tracers/js/goja.go:328 +0x140\r\ngithub.com/ethereum/go-ethereum/core/vm.(*EVMInterpreter).Run(0x14000307da0, 0x140003cc0d0, {0x0, 0x0, 0x0}, 0x0)\r\n ...\r\nFAIL    github.com/ethereum/go-ethereum/core/vm/runtime 0.420s\r\nFAIL\r\n```\r\n\r\nThe issue seems to be that `OnOpcode` expects that `OnTxStart` has\r\nalready been called to initialize the `env` value in the tracer. The JS\r\ntracer uses it in `OnOpcode` for the `GetRefund()` method.\r\n\r\nThis patch resolves the issue by reusing the `Call` method already\r\ndefined in `runtime_test.go` which correctly calls `OnTxStart`."
        },
        {
            "date": "2024-08-06 11:49:48",
            "message": "params: remove unused les parameters (#30268)"
        },
        {
            "date": "2024-08-05 17:14:22",
            "message": "eth/catalyst: get params.ExcessBlobGas but check with params.BlobGasUsed (#30267)\n\nSeems it is checked with the wrong argument\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2024-08-02 15:49:01",
            "message": "cmd/evm: don't overwrite sender account (#30259)\n\nFixes #30254 \r\n\r\nIt seems like the removed CreateAccount call is very old and not needed anymore.\r\nAfter removing it, setting a sender that does not exist in the state doesn't seem to cause\r\nan issue."
        },
        {
            "date": "2024-08-02 15:36:28",
            "message": "eth/downloader: gofmt (#30261)\n\nFixes a regression introduced in\r\nhttps://github.com/ethereum/go-ethereum/pull/30219"
        },
        {
            "date": "2024-08-02 04:44:03",
            "message": "internal/debug: remove memsize (#30253)\n\nRemoving because memsize will very likely be broken by Go 1.23. See\nhttps://github.com/fjl/memsize/issues/4"
        },
        {
            "date": "2024-08-01 18:09:04",
            "message": "accounts/abi/bind: add accessList support to base bond contract (#30195)\n\nAdding the correct accessList parameter when calling a contract can\r\nreduce gas consumption. However, the current version only allows adding\r\nthe accessList manually when constructing the transaction. This PR can\r\nprovide convenience for saving gas."
        },
        {
            "date": "2024-08-01 14:25:55",
            "message": "all: remove deprecated protobuf dependencies (#30232)\n\nThe package `github.com/golang/protobuf/proto` is deprecated in favor\r\n`google.golang.org/protobuf/proto`. We should update the codes to\r\nrecommended package.\r\n\r\nSigned-off-by: Icarus Wu <icaruswu66@qq.com>"
        },
        {
            "date": "2024-08-01 14:10:43",
            "message": "eth/downloader: correct sync mode logging to show old mode (#30219)\n\nThis PR fixes an issue in the setMode method of beaconBackfiller where the\r\nlog message was not displaying the previous mode correctly. The log message\r\nnow shows both the old and new sync modes."
        },
        {
            "date": "2024-08-01 14:06:43",
            "message": "miner: remove outdated comment (#30248)"
        },
        {
            "date": "2024-07-31 19:38:23",
            "message": "p2p/discover: schedule revalidation also when all nodes are excluded (#30239)\n\n## Issue\n\nIf `nextTime` has passed, but all nodes are excluded, `get` would return\n`nil` and `run` would therefore not invoke `schedule`. Then, we schedule\na timer for the past, as neither `nextTime` value has been updated. This\ncreates a busy loop, as the timer immediately returns.\n\n## Fix\n\nWith this PR, revalidation will be also rescheduled when all nodes are\nexcluded.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        }
    ],
    "ethereum/go-ethereum_2024": [
        {
            "date": "2024-12-19 15:03:05",
            "message": "params: update system contracts for prague devnet-5 (#30938)"
        },
        {
            "date": "2024-12-19 09:06:33",
            "message": "core, core/types: rename AuthList to SetCodeAuthorizations (#30935)\n\nAs a follow-up to #30933, I propose to also use the SetCode prefix in\r\nour internal APIs for the authorization list."
        },
        {
            "date": "2024-12-18 19:17:49",
            "message": "cmd/evm: update tests for SetCodeAuthorization JSON encoding change (#30936)\n\nFixing a regression introduced by 73a4ecf675f6, which I accidentally\r\npushed to the master branch directly."
        },
        {
            "date": "2024-12-18 18:46:15",
            "message": "core/types: rename SetCodeAuthorization 'v' to 'yParity'\n\nThe API spec requires the name yParity."
        },
        {
            "date": "2024-12-18 18:10:53",
            "message": "core/types: updates for EIP-7702 API functions (#30933)\n\nHere I am proposing two small changes to the exported API for EIP-7702:\r\n\r\n(1) `Authorization` has a very generic name, but it is in fact only used\r\nfor one niche use case: authorizing code in a `SetCodeTx`. So I propose\r\ncalling it `SetCodeAuthorization` instead. The signing function is\r\nrenamed to `SignSetCode` instead of `SignAuth`.\r\n   \r\n(2) The signing function for authorizations should take key as the first\r\nparameter, and the authorization second. The key will almost always be\r\nin a variable, while the authorization can be given as a literal."
        },
        {
            "date": "2024-12-17 23:18:36",
            "message": "cmd/evm: make evm statetest accept non-json files (#30927)\n\nThis fixes a regression introduced recently. Without this fix, it's not\r\npossible to use statetests without `.json` suffix. This is problematic for\r\ngoevmlab `minimizer`, which appends the suffix `.min` during processing."
        },
        {
            "date": "2024-12-17 18:47:10",
            "message": "core/types, internal/ethapi: fixes for prague RPC encoding (#30926)\n\nFixing some issues I found while regenerating RPC tests for Prague:\r\n\r\n- Authorization signature values were not encoded as hex\r\n- `requestsRoot` in block should be `requestsHash`\r\n- `authorizationList` should work for `eth_call`"
        },
        {
            "date": "2024-12-17 17:37:29",
            "message": "core/vm: make all opcodes proper type (#30925)\n\nNoticed this omission while doing some work on goevmlab. We don't\r\nproperly type some of the opcodes, but apparently implicit casting works\r\nin all the internal usecases."
        },
        {
            "date": "2024-12-17 14:26:03",
            "message": "build(deps): bump golang.org/x/crypto from 0.26.0 to 0.31.0 (#30921)\n\nBumps [golang.org/x/crypto](https://github.com/golang/crypto) from\r\n0.26.0 to 0.31.0.\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
        },
        {
            "date": "2024-12-17 14:16:17",
            "message": "core: fixes for Prague fork in GenerateChain (#30924)\n\nAdding some missing functionality I noticed while updating the hivechain\r\ntool for the Prague fork:\r\n\r\n- we forgot to process the parent block hash\r\n- added `ConsensusLayerRequests` to get the requests list of the block"
        },
        {
            "date": "2024-12-17 08:12:10",
            "message": "accounts/abi/bind: make it possible to wait for tx hash (#30079)\n\nThis change adds methods which makes it possible for to wait for a transaction with a specific hash when deploying contracts during abi bind interaction.\r\n\r\n---------\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2024-12-17 07:58:26",
            "message": "core/vm, go.mod: update uint256 and use faster method to write to memory (#30868)\n\nUpdates geth to use the latest uint256, and use faster memory-writer"
        },
        {
            "date": "2024-12-16 13:10:08",
            "message": "trie/pathdb: state iterator (snapshot integration pt 4) (#30654)\n\nIn this pull request, the state iterator is implemented. It's mostly a copy-paste\r\nfrom the original state snapshot package, but still has some important changes\r\nto highlight here:\r\n\r\n(a) The iterator for the disk layer consists of a diff iterator and a disk iterator.\r\n\r\nOriginally, the disk layer in the state snapshot was a wrapper around the disk, \r\nand its corresponding iterator was also a wrapper around the disk iterator.\r\nHowever, due to structural differences, the disk layer iterator is divided into\r\ntwo parts:\r\n\r\n- The disk iterator, which traverses the content stored on disk.\r\n- The diff iterator, which traverses the aggregated state buffer.\r\n\r\nCheckout `BinaryIterator` and `FastIterator` for more details.\r\n\r\n(b) The staleness management is improved in the diffAccountIterator and\r\ndiffStorageIterator\r\n\r\nOriginally, in the `diffAccountIterator`, the layer\u2019s staleness had to be checked \r\nwithin the Next function to ensure the iterator remained usable. Additionally, \r\na read lock on the associated diff layer was required to first retrieve the account \r\nblob. This read lock protection is essential to prevent concurrent map read/write. \r\nAfterward, a staleness check was performed to ensure the retrieved data was \r\nnot outdated.\r\n\r\nThe entire logic can be simplified as follows: a loadAccount callback is provided \r\nto retrieve account data. If the corresponding state is immutable (e.g., diff layers\r\nin the path database), the staleness check can be skipped, and a single account \r\ndata retrieval is sufficient. However, if the corresponding state is mutable (e.g., \r\nthe disk layer in the path database), the callback can operate as follows:\r\n\r\n```go\r\nfunc(hash common.Hash) ([]byte, error) {\r\n    dl.lock.RLock()\r\n    defer dl.lock.RUnlock()\r\n\r\n    if dl.stale {\r\n        return nil, errSnapshotStale\r\n    }\r\n    return dl.buffer.states.mustAccount(hash)\r\n}\r\n```\r\n\r\nThe callback solution can eliminate the complexity for managing\r\nconcurrency with the read lock for atomic operation."
        },
        {
            "date": "2024-12-16 10:29:37",
            "message": "all: implement eip-7702 set code tx (#30078)\n\nThis PR implements EIP-7702: \"Set EOA account code\". \r\nSpecification: https://eips.ethereum.org/EIPS/eip-7702\r\n\r\n> Add a new transaction type that adds a list of `[chain_id, address,\r\nnonce, y_parity, r, s]` authorization tuples. For each tuple, write a\r\ndelegation designator `(0xef0100 ++ address)` to the signing account\u2019s\r\ncode. All code reading operations must load the code pointed to by the\r\ndesignator.\r\n\r\n---------\r\n\r\nCo-authored-by: Mario Vega <marioevz@gmail.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-12-13 11:46:12",
            "message": "p2p: DNS resolution for static nodes (#30822)\n\nCloses #23210 \r\n\r\n# Context \r\nWhen deploying Geth in Kubernetes with ReplicaSets, we encountered two\r\nDNS-related issues affecting node connectivity. First, during startup,\r\nGeth tries to resolve DNS names for static nodes too early in the config\r\nunmarshaling phase. If peer nodes aren't ready yet (which is common in\r\nKubernetes rolling deployments), this causes an immediate failure:\r\n\r\n\r\n```\r\nINFO [11-26|10:03:42.816] Starting Geth on Ethereum mainnet...\r\nINFO [11-26|10:03:42.817] Bumping default cache on mainnet         provided=1024 updated=4096\r\nFatal: config.toml, line 81: (p2p.Config.StaticNodes) lookup idontexist.geth.node: no such host\r\n``` \r\n\r\nThe second issue comes up when pods get rescheduled to different nodes -\r\ntheir IPs change but peers keep using the initially resolved IP, never\r\nupdating the DNS mapping.\r\n\r\nThis PR adds proper DNS support for enode:// URLs by deferring resolution\r\nto connection time. It also handles DNS failures gracefully instead of failing\r\nfatally during startup, making it work better in container environments where\r\nIPs are dynamic and peers come and go during rollouts.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-12-12 11:39:03",
            "message": "internal/ethapi: add block override to estimateGas (#30695)\n\nAdd block overrides to `eth_estimateGas` to align consistency with\r\n`eth_call`.\r\n\r\n\r\nhttps://github.com/ethereum/go-ethereum/issues/27800#issuecomment-1658186166\r\n\r\nFixes https://github.com/ethereum/go-ethereum/issues/28175\r\n\r\n---------\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2024-12-12 11:33:42",
            "message": "p2p: fix DiscReason encoding/decoding (#30855)\n\nThis fixes an issue where the disconnect message was not wrapped in a list.\r\nThe specification requires it to be a list like any other message.\r\n\r\nIn order to remain compatible with legacy geth versions, we now accept both\r\nencodings when parsing a disconnect message.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-12-11 10:05:59",
            "message": "core/state: remove pointless wrapper functions (#30891)"
        },
        {
            "date": "2024-12-10 13:30:24",
            "message": "accounts/abi: support unpacking solidity errors (#30738)\n\nThis PR adds the error fragments to `func (abi ABI) getArguments` which\r\nallows typed decoding of errors."
        },
        {
            "date": "2024-12-10 13:22:43",
            "message": "build: update to Go 1.23.4 (#30872)"
        },
        {
            "date": "2024-12-10 12:27:29",
            "message": "metrics, cmd/geth: change init-process of metrics (#30814)\n\nThis PR modifies how the metrics library handles `Enabled`: previously,\r\nthe package `init` decided whether to serve real metrics or just\r\ndummy-types.\r\n\r\nThis has several drawbacks: \r\n- During pkg init, we need to determine whether metrics are enabled or\r\nnot. So we first hacked in a check if certain geth-specific\r\ncommandline-flags were enabled. Then we added a similar check for\r\ngeth-env-vars. Then we almost added a very elaborate check for\r\ntoml-config-file, plus toml parsing.\r\n\r\n- Using \"real\" types and dummy types interchangeably means that\r\neverything is hidden behind interfaces. This has a performance penalty,\r\nand also it just adds a lot of code.\r\n\r\nThis PR removes the interface stuff, uses concrete types, and allows for\r\nthe setting of Enabled to happen later. It is still assumed that\r\n`metrics.Enable()` is invoked early on.\r\n\r\nThe somewhat 'heavy' operations, such as ticking meters and exp-decay,\r\nnow checks the enable-flag to prevent resource leak.\r\n\r\nThe change may be large, but it's mostly pretty trivial, and from the\r\nlast time I gutted the metrics, I ensured that we have fairly good test\r\ncoverage.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-12-10 12:10:17",
            "message": "core/vm: remove unnecessary comment (#30887)"
        },
        {
            "date": "2024-12-10 08:43:24",
            "message": "cmd/evm: consolidate evm output switches (#30849)\n\nThis PR attempts to clean up some ambiguities and quirks from recent\r\nchanges to evm flag handling.\r\n\r\nThis PR mainly focuses on `evm run` subcommand, to use the same flags\r\nfor configuring tracing/output options as `statetest/blocktest` does.\r\n\r\nAdditionally, it adds quite a lot of tests for expected outputs of the\r\nvarious subcommands, to avoid accidental changes.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-12-10 02:10:49",
            "message": "core/state: enable partial-functional reader (snapshot integration pt 3) (#30650)\n\nIt's a pull request based on https://github.com/ethereum/go-ethereum/pull/30643\r\n\r\nIn this pull request, the partial functional state reader is enabled if **legacy snapshot\r\nis not enabled**. The tracked flat states in pathdb will be used to serve the state\r\nretrievals, as the second implementation to fasten the state access.\r\n\r\nThis pull request should be a noop change in normal cases."
        },
        {
            "date": "2024-12-09 18:29:19",
            "message": "core/txpool: remove unused parameter `local`  (#30871)"
        },
        {
            "date": "2024-12-06 11:14:05",
            "message": "trie/utils: ensure master can generate a correct genesis for kaustinen7 (#30856)\n\nThis imports the following fixes:\r\n\r\n - update gnark to 1.1.0\r\n - update go-verkle to 0.2.2\r\n - fix: main storage offset bug (gballet/go-ethereum#329)\r\n - fix: tree key generation (gballet/go-ethereum#401)\r\n\r\n---------\r\n\r\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\r\nCo-authored-by: Ignacio Hagopian <jsign.uy@gmail.com>"
        },
        {
            "date": "2024-12-04 08:40:37",
            "message": "core/tracing: extends tracing.Hooks with OnSystemCallStartV2 (#30786)\n\nThis PR extends the Hooks interface with a new method,\r\n`OnSystemCallStartV2`, which takes `VMContext` as its parameter.\r\n\r\nMotivation\r\n\r\nBy including `VMContext` as a parameter, the `OnSystemCallStartV2` hook\r\nachieves parity with the `OnTxStart` hook in terms of provided insights.\r\nThis alignment simplifies the inner tracer logic, enabling consistent\r\nhandling of state changes and internal calls within the same framework.\r\n\r\n---------\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2024-12-04 07:52:59",
            "message": "cmd/evm, eth/tracers: refactor structlogger and make it streaming (#30806)\n\nThis PR refactors the structlog a bit, making it so that it can be used\r\nin a streaming mode.\r\n\r\n-------------\r\n\r\nOBS: this PR makes a change in the input `config` config, the third\r\ninput-parem field to `debug.traceCall`. Previously, seteting it to e.g.\r\n` {\"enableMemory\": true, \"limit\": 1024}` would mean that the response\r\nwas limited to `1024` items. Since an 'item' may include both memory and\r\nstorage, the actual size of the response was undertermined.\r\nAfter this change, the response will be limited to `1024` __`bytes`__\r\n(or thereabouts).\r\n\r\n\r\n\r\n-----------\r\n\r\n\r\nThe commandline usage of structlog now uses the streaming mode, leaving\r\nthe non-streaming mode of operation for the eth_Call.\r\n\r\nThere are two benefits of streaming mode \r\n1. Not have to maintain a long list of operations, \r\n2. Not have to duplicate / n-plicate data, e.g. memory / stack /\r\nreturndata so that each entry has their own private slice.\r\n\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-12-03 15:11:26",
            "message": "CODEOWNERS: add some more entries for auto assignment (#30851)"
        },
        {
            "date": "2024-12-03 08:30:26",
            "message": "eth/downloader: move SyncMode to package eth/ethconfig (#30847)\n\nLots of packages depend on eth/downloader just for the SyncMode type.\r\nSince we have a dedicated package for eth protocol configuration, it\r\nmakes more sense to define SyncMode there, turning eth/downloader into\r\nmore of a leaf package."
        },
        {
            "date": "2024-12-02 17:17:43",
            "message": "internal/debug: rename --trace to --go-execution-trace (#30846)\n\nThis flag is very rarely needed, so it's OK for it to have a verbose\r\nname. The name --trace also conflicts with the concept of EVM tracing,\r\nwhich is much more heavily used."
        },
        {
            "date": "2024-12-02 14:43:17",
            "message": "fuzzing: fix oss-fuzz fuzzer (#30845)\n\nThe fuzzer added recenly to fuzz the eth handler doesn't\r\nbuild on oss-fuzz, because it also has dependencies in the peer_test.go.\r\n\r\nThis change fixes it, I hope, by adding that file also for preprocessing."
        },
        {
            "date": "2024-12-02 14:18:02",
            "message": "cmd/evm: improve block/state test runner (#30633)\n\n* unify `staterunner` and `blockrunner` CLI flags, especially around\r\ntracing\r\n* added support for struct logger or json logging (although having issue\r\n#30658)\r\n* new --cross-check flag to validate the stateless witness collection\r\n  / execution matches stateful\r\n* adds support for tracing the stateless execution when a tracer is set\r\n  (to more easily debug differences)\r\n* --human for more readable test summary\r\n* directory or file input, so if you pass tests/spec-tests/fixtures/blockchain_tests it will execute all\r\nblockchain tests"
        },
        {
            "date": "2024-11-29 17:42:28",
            "message": "eth/tracers: fix state hooks in API (#30830)\n\nWhen a tx/block was being traced through the API the state hooks weren't\r\nbeing called as they should. This is due to #30745 moving the hooked\r\nstatedb one level up in the state processor. This PR fixes that.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-11-29 14:39:42",
            "message": "core: switch EVM tx context in ApplyMessage (#30809)\n\nThis change relocates the EVM tx context switching to the ApplyMessage function.\r\nWith this change, we can remove a lot of EVM.SetTxContext calls before\r\nmessage execution.\r\n\r\n### Tracing API changes\r\n\r\n- This PR replaces the `GasPrice` field of the `VMContext` struct with\r\n  `BaseFee`. Users may instead take the effective gas price from\r\n  `tx.EffectiveGasTipValue(env.BaseFee)`.\r\n\r\n---------\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2024-11-29 14:32:45",
            "message": "core/state: introduce code reader interface (#30816)\n\nThis PR introduces a `ContractCodeReader` interface with functions defined:\r\n\r\ntype ContractCodeReader interface {\r\n\tCode(addr common.Address, codeHash common.Hash) ([]byte, error)\r\n\tCodeSize(addr common.Address, codeHash common.Hash) (int, error)\r\n}\r\n\r\nThis interface can be implemented in various ways. Although the codebase\r\ncurrently includes only one implementation, additional implementations\r\ncould be created for different purposes and scenarios, such as a code\r\nreader designed for the Verkle tree approach or one that reads code from\r\nthe witness.\r\n\r\n*Notably, this interface modifies the function\u2019s semantics. If the\r\ncontract code is not found, no error will be returned. An error should\r\nonly be returned in the event of an unexpected issue, primarily for\r\nfuture implementations.*\r\n\r\nThe original state.Reader interface is extended with ContractCodeReader\r\nmethods, it gives us more flexibility to manipulate the reader with additional\r\nlogic on top, e.g. Hooks.\r\n\r\ntype Reader interface {\r\n\tContractCodeReader\r\n\tStateReader\r\n}\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-11-29 11:30:45",
            "message": "triedb/pathdb: track flat state changes in pathdb (snapshot integration pt 2) (#30643)\n\nThis pull request ports some changes from the main state snapshot\r\nintegration one, specifically introducing the flat state tracking in\r\npathdb.\r\n\r\nNote, the tracked flat state changes are only held in memory and won't\r\nbe persisted in the disk. Meanwhile, the correspoding state retrieval in\r\npersistent state is also not supported yet. The states management in\r\ndisk is more complicated and will be implemented in a separate pull\r\nrequest.\r\n\r\nPart 1: https://github.com/ethereum/go-ethereum/pull/30752"
        },
        {
            "date": "2024-11-28 17:43:39",
            "message": "core/types: add length check in CalcRequestsHash (#30829)\n\nThe existing implementation is correct when building and verifying\r\nblocks, since we will only collect non-empty requests into the block\r\nrequests list.\r\n\r\nBut it isn't correct for cases where a requests list containing empty\r\nitems is sent by the consensus layer on the engine API. We want to\r\nensure that empty requests do not cause a difference in validation\r\nthere, so the commitment computation should explicitly skip them."
        },
        {
            "date": "2024-11-28 13:37:36",
            "message": "cmd/bootnode: remove bootnode utility (#30813)\n\nSince we don't really support custom networks anymore, we don't need the\r\nbootnode utility. In case a discovery-only node is wanted, it can still be run using cmd/devp2p."
        },
        {
            "date": "2024-11-28 10:48:50",
            "message": "all: exclude empty outputs in requests commitment (#30670)\n\nImplements changes from these spec PRs:\r\n\r\n- https://github.com/ethereum/EIPs/pull/8989\r\n- https://github.com/ethereum/execution-apis/pull/599"
        },
        {
            "date": "2024-11-28 09:17:58",
            "message": "trie: combine validation loops in VerifyRangeProof (#30823)\n\nSmall optimization. It's guaranteed that `len(keys)` == `len(values)`,\r\nso we can combine the checks in a single loop rather than 2 separate\r\nloops."
        },
        {
            "date": "2024-11-28 03:21:31",
            "message": "core/state/snapshot: handle legacy journal (#30802)\n\nThis workaround is meant to minimize the possibility for snapshot generation\r\nonce the geth node upgrades to new version (specifically #30752 )\r\n\r\nIn #30752, the journal format in state snapshot is modified by removing\r\nthe destruct set. Therefore, the existing old format (version = 0) will be\r\ndiscarded and all in-memory layers will be lost. Unfortunately, the lost \r\nin-memory layers can't be recovered by some other approaches, and the \r\nentire state snapshot will be regenerated (it will last about 2.5 hours).\r\n\r\nThis pull request introduces a workaround to adopt the legacy journal if\r\nthe destruct set contained is empty. Since self-destruction has been\r\ndeprecated following the cancun fork, the destruct set is expected to be nil for\r\nlayers above the fork block. However, an exception occurs during contract \r\ndeployment: pre-funded accounts may self-destruct, causing accounts with \r\nnon-zero balances to be removed from the state. For example,\r\nhttps://etherscan.io/tx/0xa087333d83f0cd63b96bdafb686462e1622ce25f40bd499e03efb1051f31fe49).\r\n\r\n\r\nFor nodes with a fully synced state, the legacy journal is likely compatible with\r\nthe updated definition, eliminating the need for regeneration. Unfortunately,\r\nnodes performing a full sync of historical chain segments or encountering \r\npre-funded account deletions may face incompatibilities, leading to automatic \r\nsnapshot regeneration."
        },
        {
            "date": "2024-11-27 06:17:03",
            "message": "core: better document reason for dropping error on return (#30811)\n\nAdd a comment for error return of nil\r\n\r\nSigned-off-by: wangjingcun <wangjingcun@aliyun.com>"
        },
        {
            "date": "2024-11-26 15:12:38",
            "message": "cmd/evm: don't reuse state between iterations, show errors (#30780)\n\nReusing state between benchmark iterations resulted in inconsistent\r\nresults across runs, which surfaced in https://github.com/ethereum/go-ethereum/issues/30778 .\r\n\r\nIf these errors are triggered again, they will now trigger panic. \r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-11-26 10:33:59",
            "message": "Revert \"core/state/snapshot: simplify snapshot rebuild (#30772)\" (#30810)\n\nThis reverts commit 23800122b37695be50565f8221858a16ce1763db.\r\n\r\nThe original pull request introduces a bug and some flaky tests are\r\ndetected because of this flaw.\r\n\r\n```\r\n--- FAIL: TestRecoverSnapshotFromWipingCrash (0.27s)\r\n    blockchain_snapshot_test.go:158: The disk layer is not integrated snapshot is not constructed\r\n{\"pc\":0,\"op\":88,\"gas\":\"0x7148\",\"gasCost\":\"0x2\",\"memSize\":0,\"stack\":[],\"depth\":1,\"refund\":0,\"opName\":\"PC\"}\r\n{\"pc\":1,\"op\":255,\"gas\":\"0x7146\",\"gasCost\":\"0x1db0\",\"memSize\":0,\"stack\":[\"0x0\"],\"depth\":1,\"refund\":0,\"opName\":\"SELFDESTRUCT\"}\r\n{\"output\":\"\",\"gasUsed\":\"0x0\"}\r\n{\"output\":\"\",\"gasUsed\":\"0x1db2\"}\r\n{\"pc\":0,\"op\":116,\"gas\":\"0x13498\",\"gasCost\":\"0x3\",\"memSize\":0,\"stack\":[],\"depth\":1,\"refund\":0,\"opName\":\"PUSH21\"}\r\n```\r\n\r\nBefore the original PR, the snapshot would block the function until the\r\ndisk layer\r\nwas fully generated under the following conditions:\r\n\r\n(a) explicitly required by users with `AsyncBuild = false`.\r\n(b) the snapshot was being fully rebuilt or *the disk layer generation\r\nhad resumed*.\r\n\r\nUnfortunately, with the changes introduced in that PR, the snapshot no\r\nlonger waits\r\nfor disk layer generation to complete if the generation is resumed. It\r\nbrings lots of\r\nuncertainty and breaks this tiny debug feature."
        },
        {
            "date": "2024-11-26 07:16:00",
            "message": "core/tracing: add GetCodeHash to StateDB (#30784)\n\nThis PR extends the tracing.StateDB interface by adding a GetCodeHash function."
        },
        {
            "date": "2024-11-26 01:49:12",
            "message": "eth/ethconfig: improve error message if TTD missing (#30807)\n\nThis updates the message you get when trying to initialize Geth with\r\ngenesis.json that doesn't have `terminalTotalDifficulty`. The previous\r\nmessage was a bit obscure, I had to check the code to find out what the\r\nproblem was."
        },
        {
            "date": "2024-11-25 12:43:23",
            "message": "core/state/snapshot: simplify snapshot rebuild (#30772)\n\nThis PR is purely for improved readability; I was doing work involving\r\nthe file and think this may help others who are trying to understand\r\nwhat's going on.\r\n\r\n1. `snapshot.Tree.Rebuild()` now returns a function that blocks until\r\nregeneration is complete, allowing `Tree.waitBuild()` to be removed\r\nentirely as all it did was search for the `done` channel behind this new\r\nfunction.\r\n2. Its usage inside `New()` is also simplified by (a) only waiting if\r\n`!AsyncBuild`; and (b) avoiding the double negative of `if !NoBuild`.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-11-25 12:34:50",
            "message": "accounts/abi:  fix MakeTopics mutation of big.Int inputs (#30785)\n\n#28764 updated `func MakeTopics` to support negative `*big.Int`s.\r\nHowever, it also changed the behavior of the function from just\r\n_reading_ the input `*big.Int` via `Bytes()`, to leveraging\r\n`big.U256Bytes` which is documented as being _destructive_:\r\n\r\nThis change updates `MakeTopics` to not mutate the original, and \r\nalso applies the same change in signer/core/apitypes."
        },
        {
            "date": "2024-11-25 12:33:28",
            "message": "internal/ethapi: remove double map-clone (#30803)\n\nSimilar to https://github.com/ethereum/go-ethereum/pull/30788"
        },
        {
            "date": "2024-11-25 12:29:27",
            "message": "eth/tracers/logger: improve markdown logger (#30805)\n\nThis PR improves the output of the markdown logger a bit.\r\n\r\n- Remove `RStack` field, \r\n- Move `Stack` last, since it may have very large vertical expansion\r\n- Make the pre- and post-exec  metadata structured into a bullet-list"
        },
        {
            "date": "2024-11-25 09:07:50",
            "message": "eth/tracers/logger: fix json-logger output missing (#30804)\n\nFixes a flaw introduced in\r\nhttps://github.com/ethereum/go-ethereum/pull/29795 , discovered while\r\nreviewing https://github.com/ethereum/go-ethereum/pull/30633 ."
        },
        {
            "date": "2024-11-24 19:09:38",
            "message": "internal/flags: fix \"flag redefined\" bug for alias on custom flags (#30796)\n\nThis change fixes a bug on the `DirectoryFlag` and the `BigFlag`, which would trigger a `panic` with the message \"flag redefined\" in case an alias was added to such a flag."
        },
        {
            "date": "2024-11-22 08:55:43",
            "message": "core, triedb: remove destruct flag in state snapshot (#30752)\n\nThis pull request removes the destruct flag from the state snapshot to\r\nsimplify the code.\r\n\r\nPreviously, this flag indicated that an account was removed during a\r\nstate transition, making all associated storage slots inaccessible.\r\nBecause storage deletion can involve a large number of slots, the actual\r\ndeletion is deferred until the end of the process, where it is handled\r\nin batches.\r\n\r\nWith the deprecation of self-destruct in the Cancun fork, storage\r\ndeletions are no longer expected. Historically, the largest storage\r\ndeletion event in Ethereum was around 15 megabytes\u2014manageable in memory.\r\n\r\nIn this pull request, the single destruct flag is replaced by a set of\r\ndeletion markers for individual storage slots. Each deleted storage slot\r\nwill now appear in the Storage set with a nil value.\r\n\r\nThis change will simplify a lot logics, such as storage accessing,\r\nstorage flushing, storage iteration and so on."
        },
        {
            "date": "2024-11-22 08:16:42",
            "message": "trie: replace custom logic with bytes.HasPrefix (#30771)\n\nin `trie`\r\n- Replace custom logic with `bytes.HasPrefix`\r\n- Remove unnecessary code in `GetNode`"
        },
        {
            "date": "2024-11-22 08:02:45",
            "message": "all: typos in comments (#30779)\n\nfixes some typos"
        },
        {
            "date": "2024-11-22 07:21:20",
            "message": "internal/ethapi: remove double map-clone (#30788)\n\n`ActivePrecompiledContracts()` clones the precompiled contract map, thus\r\nits callsite does not need to clone it"
        },
        {
            "date": "2024-11-22 07:17:32",
            "message": "core, eth, internal, miner: remove unnecessary parameters (#30776)\n\nFollow-up to #30745 , this change removes some unnecessary parameters."
        },
        {
            "date": "2024-11-20 11:35:52",
            "message": "core, eth, internal, cmd: rework EVM constructor (#30745)\n\nThis pull request refactors the EVM constructor by removing the\r\nTxContext parameter.\r\n\r\nThe EVM object is frequently overused. Ideally, only a single EVM\r\ninstance should be created and reused throughout the entire state\r\ntransition of a block, with the transaction context switched as needed\r\nby calling evm.SetTxContext.\r\n\r\nUnfortunately, in some parts of the code, the EVM object is repeatedly\r\ncreated, resulting in unnecessary complexity. This pull request is the\r\nfirst step towards gradually improving and simplifying this setup.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-11-20 07:40:21",
            "message": "core/vm/program: evm bytecode-building utility (#30725)\n\nIn many cases, there is a need to create somewhat nontrivial bytecode. A\r\nrecent example is the verkle statetests, where we want a `CREATE2`- op\r\nto create a contract, which can then be invoked, and when invoked does a\r\nselfdestruct-to-self.\r\n\r\nIt is overkill to go full solidity, but it is also a bit tricky do\r\nassemble this by concatenating bytes. This PR takes an approach that\r\nhas been used in in goevmlab for several years.\r\n\r\nUsing this utility, the case can be expressed as: \r\n```golang\r\n\t// Some runtime code\r\n\truntime := program.New().Ops(vm.ADDRESS, vm.SELFDESTRUCT).Bytecode()\r\n\t// A constructor returning the runtime code\r\n\tinitcode := program.New().ReturnData(runtime).Bytecode()\r\n\t// A factory invoking the constructor\r\n\touter := program.New().Create2AndCall(initcode, nil).Bytecode()\r\n```\r\n\r\nWe have a lot of places in the codebase where we concatenate bytes, cast\r\nfrom `vm.OpCode` . By taking tihs approach instead, thos places can be made a\r\nbit more maintainable/robust."
        },
        {
            "date": "2024-11-19 15:58:52",
            "message": "version: fix typo in v1.14.13 release cycle name"
        },
        {
            "date": "2024-11-19 13:51:54",
            "message": "version: begin v1.14.13 release cycle"
        },
        {
            "date": "2024-11-19 13:46:38",
            "message": "version: go-ethereum v1.14.12 stable"
        },
        {
            "date": "2024-11-19 12:43:33",
            "message": "rpc: run tests in parallel (#30384)\n\nContinuation of https://github.com/ethereum/go-ethereum/pull/30381"
        },
        {
            "date": "2024-11-19 12:35:52",
            "message": "core/txpool, eth/catalyst: clear transaction pool in Rollback (#30534)\n\nThis adds an API method `DropTransactions` to legacy pool, blob pool and\r\ntxpool interface. This method removes all txs currently tracked in the\r\npools.\r\n\r\nIt modifies the simulated beacon to use the new method in `Rollback`\r\nwhich removes previous hacky implementation that also erroneously reset\r\nthe gas tip to 1 gwei.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-11-19 12:29:23",
            "message": "all: remove kilic dependency from bls12381 fuzzers (#30296)\n\nThe [kilic](https://github.com/kilic/bls12-381) bls12381 implementation\r\nhas been archived. It shouldn't be necessary to include it as a fuzzing\r\ntarget any longer.\r\n\r\nThis also adds fuzzers for G1/G2 mul that use inputs that are guaranteed\r\nto be valid. Previously, we just did random input fuzzing for these\r\nprecompiles."
        },
        {
            "date": "2024-11-19 06:26:39",
            "message": "core: fix typos (#30767)"
        },
        {
            "date": "2024-11-15 13:05:23",
            "message": "build: upgrade -dlgo version to Go 1.23.3 (#30742)\n\nNew release: https://groups.google.com/g/golang-announce/c/X5KodEJYuqI"
        },
        {
            "date": "2024-11-15 09:15:15",
            "message": "cmd/geth: remove unlock commandline flag (#30737)\n\nThis is one further step towards removing account management from\r\n`geth`. This PR deprecates the flag `unlock`, and makes the flag moot:\r\nunlock via geth is no longer possible."
        },
        {
            "date": "2024-11-15 06:59:06",
            "message": "core/state: tests on the binary iterator (#30754)\n\nFixes an error in the binary iterator, adds additional testcases\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-11-11 11:14:18",
            "message": "docs: fix typo (#30740)\n\nfixes a typo on one of the postmortems"
        },
        {
            "date": "2024-11-11 10:43:22",
            "message": "p2p/netutil: unittests for addrutil (#30439)\n\nadd unit tests for `p2p/addrutil`\r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-11-10 09:57:05",
            "message": "tests: fix test panic (#30741)\n\nFix panic in tests"
        },
        {
            "date": "2024-11-09 15:07:17",
            "message": "eth/protocols/eth: add ETH68 protocol handler fuzzers (#30417)\n\nAdds a protocol handler fuzzer to fuzz the ETH68 protocol handlers"
        },
        {
            "date": "2024-11-09 00:08:06",
            "message": "core/state, triedb/database: refactor state reader (#30712)\n\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-11-08 16:20:48",
            "message": "travis: build and upload RISC-V docker images too (#30739)\n\nRequested by @barnabasbusa"
        },
        {
            "date": "2024-11-08 14:28:42",
            "message": "trie/utils: remove unneeded initialization (#30472)"
        },
        {
            "date": "2024-11-08 14:25:30",
            "message": "core/state: invoke OnCodeChange-hook on selfdestruct (#30686)\n\nThis change invokes the OnCodeChange hook when selfdestruct operation is performed, and a contract is removed. This is an event which can be consumed by tracers."
        },
        {
            "date": "2024-11-08 14:21:00",
            "message": "beacon/blsync: remove cli dependencies (#30720)\n\nThis PR moves chain config related code (config file processing, fork\r\nlogic, network defaults) from `beacon/types` and `beacon/blsync` into\r\n`beacon/params` while the command line flag logic of the chain config is\r\nmoved into `cmd/utils`, thereby removing the cli dependencies from\r\npackage `beacon` and its sub-packages."
        },
        {
            "date": "2024-11-08 14:18:42",
            "message": "cmd/evm:  benchmarking via `statetest` command + filter by name, index and fork (#30442)\n\nWhen `evm statetest --bench` is specified, benchmark the execution\r\nsimilarly to `evm run`.\r\n\r\nAlso adds the ability to filter tests by name, index and fork. \r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-11-08 14:04:17",
            "message": "signer/core: extended support for EIP-712 array types (#30620)\n\nThis change updates the EIP-712 implementation to resolve [#30619](https://github.com/ethereum/go-ethereum/issues/30619).\r\n\r\nThe test cases have been repurposed from the ethers.js [repository](https://github.com/ethers-io/ethers.js/blob/main/testcases/typed-data.json.gz), but have been updated to remove tests that don't have a valid domain separator; EIP-712 messages without a domain separator are not supported by geth.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-11-08 13:57:29",
            "message": "accounts/usbwallet: support dynamic tx (#30180)\n\nAdds support non-legacy transaction-signing using ledger\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-11-08 12:33:43",
            "message": "internal/ethapi:  Set basefee for `AccessList` based on given block, not chain tip (#30538)"
        },
        {
            "date": "2024-11-08 12:28:16",
            "message": "ethclient/gethclient: testcase for createAccessList, make tabledriven (#30194)\n\nAdds testcase for createAccessList when user requested gasPrice is less than baseFee, also makes the tests tabledriven\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-11-07 19:26:02",
            "message": "ethclient: add RevertErrorData function and example (#30669)\n\nHere I'm adding a new helper function that extracts the revert reason of\r\na contract call. Unfortunately, this aspect of the API is underspecified.\r\nSee these spec issues for more detail:\r\n\r\n- https://github.com/ethereum/execution-apis/issues/232\r\n- https://github.com/ethereum/execution-apis/issues/463\r\n- https://github.com/ethereum/execution-apis/issues/523\r\n\r\nThe function added here only works with Geth-like servers that return\r\nerror code `3`. We will not be able to support all possible servers.\r\nHowever, if there is a specific server implementation that makes it\r\npossible to extract the same info, we could add it in the same function\r\nas well.\r\n\r\n---------\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2024-11-07 13:48:51",
            "message": "build(deps): bump github.com/golang-jwt/jwt/v4 from 4.5.0 to 4.5.1 (#30728)\n\nBumps [github.com/golang-jwt/jwt/v4](https://github.com/golang-jwt/jwt) from 4.5.0 to 4.5.1.\r\n\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
        },
        {
            "date": "2024-11-06 17:24:55",
            "message": "cmd/utils: change blssync.JWTSecretFlag to DirectoryFlag (#30729)\n\ncloses https://github.com/ethereum/go-ethereum/issues/30304\r\n\r\nWe already use `DirectoryFlag` for `authrpc.jwtsecret` which expands the\r\ntilde, so this should work out of the box"
        },
        {
            "date": "2024-11-05 17:29:37",
            "message": "core/state: small fix in hooked statedb (#30732)\n\nfixes a very tiny bug"
        },
        {
            "date": "2024-11-05 07:42:22",
            "message": "eth/tracers: fill the creationMethod in flatCall (#30539)\n\n`flatCallTracer` will now specify the type of a create in the action\r\nvia the `creationMethod` field.\r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2024-11-04 14:10:12",
            "message": "all: fix issues with benchmarks (#30667)\n\nThis PR fixes some issues with benchmarks\r\n\r\n- [x] Removes log output from a log-test\r\n- [x] Avoids a `nil`-defer in `triedb/pathdb`\r\n- [x] Fixes some crashes re tracers\r\n- [x] Refactors a very resource-expensive benchmark for blobpol.\r\n**NOTE**: this rewrite touches live production code (a little bit), as\r\nit makes the validator-function used by the blobpool configurable.\r\n- [x] Switch some benches over to use pebble over leveldb\r\n- [x] reduce mem overhead in the setup-phase of some tests\r\n- [x] Marks some tests with a long setup-phase to be skipped if `-short`\r\nis specified (where long is on the order of tens of seconds). Ideally,\r\nin my opinion, one should be able to run with `-benchtime 10ms -short`\r\nand sanity-check all tests very quickly.\r\n- [x]  Drops some metrics-bechmark which times the speed of `copy`.\r\n\r\n---------\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2024-11-04 13:19:50",
            "message": "core, trie: verkle state processor tests (#30672)\n\nTests that are crucial to for verifying the verkle testnet functions properly.\r\n\r\n---------\r\n\r\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\r\nCo-authored-by: Ignacio Hagopian <jsign.uy@gmail.com>\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-11-04 10:39:06",
            "message": "core/vm/runtime: invoke tx-end hook (#30711)\n\nWhen using the `core/vm/runtime` helpers to execute code, callbacks for the tx end were not invoked. This change fixes it by invoking them."
        },
        {
            "date": "2024-11-04 10:33:42",
            "message": "eth/catalyst: make engine api test time independent (#30713)\n\nThis test depends on a 100ms timer, which fails quite often, messing up\r\nour pipelines. Hook directly into the internal version of getPayload\r\nwhich has the capacity to wait for the full payload before returning.\r\nThis might not be absolutely correct from a test perspective, but it\r\nbeats failing ci. The alternative would be to expose the full build hook\r\ninto the outside, but it might be a bit overkill for this scenario."
        },
        {
            "date": "2024-11-04 10:32:41",
            "message": "core/txpool: improve error responses with wrapped errors (#30715)"
        },
        {
            "date": "2024-11-04 09:49:23",
            "message": "tests/fuzzers/bls12381: more verbose fuzzing-output (#30724)\n\nThis PR updates the fuzzing verbosity a bit, in case of mismatches"
        },
        {
            "date": "2024-11-03 20:05:44",
            "message": "build: use slices.Clone for copying slice (#30716)"
        },
        {
            "date": "2024-11-01 08:51:06",
            "message": "eth/tracers:  flatCallTracer error compatible with parity (#30497)\n\nCompatible error message in the flat call tracer with parity-style endpoints.\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2024-10-31 18:53:35",
            "message": "all: remove `personal` RPC namespace (#30704)\n\nThis PR is a first step towards removing account management from geth,\r\nand contains a lot of the user-facing changes.\r\n\r\nWith this PR, the `personal` namespace disappears. **Note**: `personal`\r\nnamespace has been deprecated for quite some time (since\r\nhttps://github.com/ethereum/go-ethereum/pull/26390 1 year and 8 months\r\nago), and users who have wanted to use it has been forced to used the\r\nflag `--rpc.enabledeprecatedpersonal`. So I think it's fairly\r\nnon-controversial to drop it at this point.\r\n\r\nSpecifically, this means: \r\n\r\n- Account/wallet listing\r\n  -`personal.getListAccounts`  \r\n  -`personal.listAccounts`     \r\n  -`personal.getListWallets`   \r\n  -`personal.listWallets`      \r\n- Lock/unlock\r\n  -`personal.lockAccount`      \r\n  -`personal.openWallet`       \r\n  -`personal.unlockAccount`\r\n- Sign ops\r\n  -`personal.sign`             \r\n  -`personal.sendTransaction`  \r\n  -`personal.signTransaction`  \r\n- Imports / inits\r\n  -`personal.deriveAccount`    \r\n  -`personal.importRawKey`     \r\n  -`personal.initializeWallet` \r\n  -`personal.newAccount`       \r\n  -`personal.unpair` \r\n- Other: \r\n  -`personal.ecRecover`        \r\n\r\n\r\nThe underlying keystores and account managent code is still in place,\r\nwhich means that `geth --dev` still works as expected, so that e.g. the\r\nexample below still works:\r\n\r\n```\r\n> eth.sendTransaction({data:\"0x6060\", value: 1, from:eth.accounts[0]})\r\n```\t\r\n\r\nAlso, `ethkey` and `clef` are untouched. \r\n\r\nWith the removal of `personal`, as far as I know we have no more API\r\nmethods which contain credentials, and if we want to implement\r\nlogging-capabilities of RPC ingress payload, it would be possible after\r\nthis.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-10-31 18:52:39",
            "message": "internal/flags: remove low-use type TextMarshalerFlag (#30707)\n\nCurrently we have a custom TextMarshalerFlag. It's a nice idea, allowing\r\nanything implementing text marshaller to be used as a flag. That said,\r\nwe only ever used it in one place because it's not that obvious how to\r\nuse and it needs some boilerplate on the type itself too, apart of the\r\nheavy boilerplate got the custom flag.\r\n\r\nAll in all there's no *need* to drop this feature just now, but while\r\nporting the cmds over to cli @v3, all other custom flags worker\r\nperfectly, whereas this one started crashing deep inside the cli\r\npackage. The flag handling in v3 got rebuild on generics and there are a\r\nnumber of new methods needed; and my guess is that maybe one of them\r\ndoesn't work like this flag currently is designed too.\r\n\r\nWe could definitely try and redesign this flag for cli v3... but all\r\nthat effort and boilerplate just to use it for 1 flag in 1 location,\r\nseems not worth it. So for now I'm suggesting removing it and maybe\r\nreconsider a similar feature in cli v3 with however it will work."
        },
        {
            "date": "2024-10-31 17:26:02",
            "message": "internal/flags: remove Merge, it's identical to slices.Concat (#30706)\n\nThis is a noop change to not have custom code for stdlib functionality."
        },
        {
            "date": "2024-10-31 15:03:47",
            "message": "cmd/utils, eth/ethconfig: remove some ancient leftover flag (#30705)\n\nThis is a flag leftover from the swarm era. No need to deprecate it,\r\nit's been useless/dead forever now."
        },
        {
            "date": "2024-10-31 10:19:01",
            "message": "core: add code to witness when state object is accessed (#30698)\n\nI think the core code should generally be agnostic about the witness and\r\nthe statedb layer should determine what elements need to be included in\r\nthe witness. Because code is accessed via `GetCode`, and\r\n`GetCodeLength`, the statedb will always know when it needs to add that\r\ncode into the witness.\r\n\r\nThe edge case is block hashes, so we continue to add them manually in\r\nthe implementation of `BLOCKHASH`.\r\n\r\nIt probably makes sense to refactor statedb so we have a wrapped\r\nimplementation that accumulates the witness, but this is a simpler\r\nchange that makes #30078 less aggressive."
        },
        {
            "date": "2024-10-30 17:01:47",
            "message": "core/vm: speed up push and interpreter loop (#30662)\n\nLooking at the cpu profile of a burntpix benchmark, I noticed that a lot\r\nof time was spent in gas-used, in the interpreter loop. It's an actual\r\ncall (not inlined), which explicitly wants to be ignored by tracing\r\n(\"tracing.GasChangeIgnored\"), so it can be safely and simply inlined.\r\n\r\nThe other change is in `pushX`. These also do a call to\r\n`common.RightPadBytes`. I replaced that by a doing a corresponding `Lsh`\r\non the `u256` if needed. Note: it's needed only to make the stack output\r\nlook right, for fuzzers. It technically doesn't matter what we put\r\nthere: if code ends on a pushdata immediate, nothing will consume the\r\nstack element. We could just as well just ignore it, if we didn't care\r\nabout fuzzers (which I do).\r\n\r\nSeems quite a lot faster on burntpix, according to my runs. \r\n\r\nThis PR:\r\n```\r\nEVM gas used:    5642735088\r\nexecution time:  34.84609475s\r\nallocations:     915683\r\nallocated bytes: 175334088\r\n```\r\n```\r\nEVM gas used:    5642735088\r\nexecution time:  36.671958278s\r\nallocations:     915701\r\nallocated bytes: 175340528\r\n```\r\n\r\nMaster\r\n```\r\nEVM gas used:    5642735088\r\nexecution time:  49.349209526s\r\nallocations:     915684\r\nallocated bytes: 175333368\r\n```\r\n```\r\nEVM gas used:    5642735088\r\nexecution time:  46.581006598s\r\nallocations:     915681\r\nallocated bytes: 175330728\r\n```\r\n\r\n---------\r\n\r\nCo-authored-by: Sina M <1591639+s1na@users.noreply.github.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-10-30 14:22:10",
            "message": "beacon/light: remove unused CommitteeChain.signerThreshold (#30484)\n\nThis field is a duplicate of UpdateScore.SignerCount and never referenced."
        },
        {
            "date": "2024-10-29 11:21:17",
            "message": "appveyor, build, internal: ci.go cleanups, add package dep checker (#30696)"
        },
        {
            "date": "2024-10-29 08:32:40",
            "message": "ethdb: refactor Database interface (#30693)"
        },
        {
            "date": "2024-10-29 08:31:04",
            "message": "core, eth, node: break rawdb -> {leveldb, pebble} dependency (#30689)"
        },
        {
            "date": "2024-10-29 06:35:06",
            "message": "eth/tracers: add disableCode/Storage options for prestateTracer (#30648)\n\nWhen using the prestateTracer, in some cases users are only concerned\r\nwith balances or nonce information, and are not interested in the lengthy\r\ncontract code or storage data.\r\n\r\nTherefore, this PR introduces two new configuration options in the\r\n`prestateTracerConfig` structure:\r\n- `disableCode`\r\n- `disableStorage`\r\n\r\nThese options allow users to control whether the tracer returns contract\r\ncode and storage data during execution tracing. By setting these\r\noptions, users can more flexibly customize their needs and focus on\r\nobtaining information that is more critical and relevant to their\r\nspecific use cases.\r\n\r\nThese options work with the default mode as well as `diffMode: true`.\r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\nCo-authored-by: Sina M <1591639+s1na@users.noreply.github.com>"
        },
        {
            "date": "2024-10-28 20:29:25",
            "message": "cmd/geth: avoid hard coding the IPC name (#30687)"
        },
        {
            "date": "2024-10-28 09:26:36",
            "message": "build: document doGoModTidy function in ci.go (#30685)"
        },
        {
            "date": "2024-10-25 15:33:46",
            "message": "ethdb: add DeleteRange feature (#30668)\n\nThis PR adds `DeleteRange` to `ethdb.KeyValueWriter`. While range\r\ndeletion using an iterator can be really slow, `DeleteRange` is natively\r\nsupported by pebble and apparently runs in O(1) time (typically 20-30ms\r\nin my tests for removing hundreds of millions of keys and gigabytes of\r\ndata). For leveldb and memorydb an iterator based fallback is\r\nimplemented. Note that since the iterator method can be slow and a\r\ndatabase function should not unexpectedly block for a very long time,\r\nthe number of deleted keys is limited at 10000 which should ensure that\r\nit does not block for more than a second. ErrTooManyKeys is returned if\r\nthe range has only been partially deleted. In this case the caller can\r\nrepeat the call until it finally succeeds."
        },
        {
            "date": "2024-10-25 11:20:18",
            "message": "beacon/blsync: add holesky config and update checkpoints (#30671)\n\nThis PR adds the beacon chain config for the holesky testnet. It also\r\nupdates beacon checkpoints for Mainnet and Sepolia."
        },
        {
            "date": "2024-10-24 07:13:01",
            "message": "core/vm: remove debug printout in eof test (#30665)"
        },
        {
            "date": "2024-10-24 07:11:47",
            "message": "core: fix tracing of system calls (#30666)\n\nThis change makes it so that the wrapped statedb with tracing-hooks is passed to the system call processing\r\n\r\nFixes #30658"
        },
        {
            "date": "2024-10-23 13:12:56",
            "message": "docs: update security policy (#30606)\n\nprevious key expired 2023-07-27, the new one expires 2026-02-22:\r\n\r\npub   rsa4096 2016-11-11 [SC] [expires: 2026-02-22]\r\n      AE96ED969E479B0084F3E17FE88D3334FA5F6A0A\r\nuid Ethereum Foundation Security Team <security@ethereum.org>\r\nuid Ethereum Foundation Bug Bounty <bounty@ethereum.org>\r\nsub   rsa4096 2016-11-11 [E] [expires: 2026-02-22]"
        },
        {
            "date": "2024-10-23 06:33:14",
            "message": "eth/tracers/internal/tracertest: add missing Random to call context (#30652)\n\nFixes a configuration issue in a test-helper, so that we can do call tracing-tests post-merge"
        },
        {
            "date": "2024-10-23 06:26:18",
            "message": "all: remove TerminalTotalDifficultyPassed (#30609)\n\nrebased https://github.com/ethereum/go-ethereum/pull/29766 . The\r\ndownstream branch appears to have been deleted and I don't have perms to\r\npush to that fork.\r\n\r\n`TerminalTotalDifficultyPassed` is removed. `TerminalTotalDifficulty`\r\nmust now be non-nil, and it is expected that networks are already\r\nmerged: we can only import PoW/Clique chains, not produce blocks on\r\nthem.\r\n\r\n---------\r\n\r\nCo-authored-by: stevemilk <wangpeculiar@gmail.com>"
        },
        {
            "date": "2024-10-23 06:11:25",
            "message": "crypto, tests/fuzzers: add gnark bn254 precompile methods for fuzzing (#30585)\n\nMakes the gnark precompile methods more amenable to fuzzing"
        },
        {
            "date": "2024-10-23 06:03:36",
            "message": "core/state: move state log mechanism to a separate layer (#30569)\n\nThis PR moves the logging/tracing-facilities out of `*state.StateDB`,\r\nin to a wrapping struct which implements `vm.StateDB` instead.\r\n\r\nIn most places, it is a pretty straight-forward change: \r\n- First, hoisting the invocations from state objects up to the statedb. \r\n- Then making the mutation-methods simply return the previous value, so\r\nthat the external logging layer could log everything.\r\n\r\nSome internal code uses the direct object-accessors to mutate the state,\r\nparticularly in testing and in setting up state overrides, which means\r\nthat these changes are unobservable for the hooked layer. Thus, configuring\r\nthe overrides are not necessarily part of the API we want to publish.\r\n\r\nThe trickiest part about the layering is that when the selfdestructs are\r\nfinally deleted during `Finalise`, there's the possibility that someone\r\nsent some ether to it, which is burnt at that point, and thus needs to\r\nbe logged. The hooked layer reaches into the inner layer to figure out\r\nthese events.\r\n\r\nIn package `vm`, the conversion from `state.StateDB + hooks` into a\r\nhooked `vm.StateDB` is performed where needed.\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-10-21 09:45:33",
            "message": "common: drop BigMin and BigMax, they pollute our dep graph (#30645)\n\nWay back we've added `common.math.BigMin` and `common.math.BigMax`.\r\nThese were kind of cute helpers, but unfortunate ones, because package\r\nall over out codebase added dependencies to this package just to avoid\r\nhaving to write out 3 lines of code.\r\n\r\nBecause of this, we've also started having package name clashes with the\r\nstdlib `math`, which got solves even more badly by moving some helpers\r\nover ***from*** the stdlib into our custom lib (e.g. MaxUint64). The\r\nlatter ones were nuked out in a previous PR and this PR nukes out BigMin\r\nand BigMax, inlining them at all call sites.\r\n\r\nAs we're transitioning to uint256, if need be, we can add a min and max\r\nto that."
        },
        {
            "date": "2024-10-21 06:24:28",
            "message": "consensus/clique, miner: remove clique -> accounts dependency (#30642)\n\nClique currently depends on the `accounts` package. This was a bit of a\r\nbig cannon even in the past, just to pass a signer \"account\" to the\r\nClique block producer. Either way, nowadays Geth does not support clique\r\nmining any more, so by removing that bit of functionality from our code,\r\nwe can also break this dependency.\r\n\r\nClique should ideally be further torn out, but this at least gets us one\r\nstep closer to cleanups."
        },
        {
            "date": "2024-10-20 16:36:51",
            "message": "eth/tracers/js: avoid compiling js bigint when not needed (#30640)\n\nWhile looking at some mem profiles from `evm` runs, I noticed that\r\n`goja` compilation of the bigint library was present. The bigint library\r\ncompilation happens in a package `init`, whenever the package\r\n`eth/tracers/js` is loaded. This PR changes it to load lazily when\r\nneeded.\r\n\r\nIt becomes slightly faster with this change, and slightly less alloc:y. \r\n\r\nNon-scientific benchmark with 100 executions: \r\n```\r\ntime for i in {1..100}; do ./evm --code 6040 run; done;\r\n ```\r\n\r\ncurrent `master`:\r\n\r\n```\r\nreal    0m6.634s\r\nuser    0m5.213s\r\nsys     0m2.277s\r\n```\r\nWithout compiling bigint\r\n```\r\nreal    0m5.802s\r\nuser    0m4.191s\r\nsys     0m1.965s\r\n```"
        },
        {
            "date": "2024-10-20 16:28:39",
            "message": "build, internal, version: break ci.go/version->common dependency (#30638)\n\nThis PR tries to break the ci.go to common dependency by moving the\r\nversion number out of params."
        },
        {
            "date": "2024-10-20 12:43:39",
            "message": "common/math: sigh, keep deleting dead code"
        },
        {
            "date": "2024-10-20 12:38:31",
            "message": "common/math: delete some further dead code (#30639)"
        },
        {
            "date": "2024-10-20 11:54:06",
            "message": "build: get rid of ci.go -> common direct dependency (#30637)"
        },
        {
            "date": "2024-10-20 11:41:51",
            "message": "all: get rid of custom MaxUint64 and MaxUint64 (#30636)"
        },
        {
            "date": "2024-10-20 10:25:15",
            "message": "core/state: fix runaway alloc caused by prefetcher heap escape (#30629)\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2024-10-18 15:06:31",
            "message": "core, trie, triedb: minor changes from snapshot integration (#30599)\n\nThis change ports some non-important changes from https://github.com/ethereum/go-ethereum/pull/30159, including interface renaming and some trivial refactorings."
        },
        {
            "date": "2024-10-18 11:49:27",
            "message": "build: reenable building arm64 concurrently (#30626)"
        },
        {
            "date": "2024-10-18 09:02:32",
            "message": "gitignore: get rid of some relics (#30623)\n\nClean out some ancient stuff from git ignore."
        },
        {
            "date": "2024-10-18 08:34:46",
            "message": "swarm: nuke this leftover (#30622)\n\nSwarm moved out more than 5 years ago, time to let it go."
        },
        {
            "date": "2024-10-17 16:27:35",
            "message": "beacon/engine, core/txpool, eth/catalyst: add engine_getBlobsV1 API (#30537)"
        },
        {
            "date": "2024-10-17 08:05:17",
            "message": "beacon/engine,eth/catalyst: hex marshal requests in engine api (#30603)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-10-17 08:04:20",
            "message": "miner: send full request when resolving full payload (#30615)\n\nFixes an issue missed in #30576 where we send empty requests for a full\r\npayload being resolved, causing hash mismatch later on when we get the\r\npayload back via `NewPayload`."
        },
        {
            "date": "2024-10-17 04:51:47",
            "message": "eth/tracers: various fixes (#30540)\n\nBreaking changes:\r\n\r\n- The ChainConfig was exposed to tracers via VMContext passed in\r\n`OnTxStart`. This is unnecessary specially looking through the lens of\r\nlive tracers as chain config remains the same throughout the lifetime of\r\nthe program. It was there so that native API-invoked tracers could\r\naccess it. So instead we moved it to the constructor of API tracers.\r\n\r\nNon-breaking:\r\n\r\n- Change the default config of the tracers to be `{}` instead of nil.\r\nThis way an extra nil check can be avoided.\r\n\r\nRefactoring:\r\n\r\n- Rename `supply` struct to `supplyTracer`.\r\n- Un-export some hook definitions."
        },
        {
            "date": "2024-10-16 16:46:40",
            "message": "core: reduce peak memory usage during reorg (#30600)\n\n~~Opening this as a draft to have a discussion.~~ Pressed the wrong\r\nbutton\r\nI had [a previous PR\r\n](https://github.com/ethereum/go-ethereum/pull/24616)a long time ago\r\nwhich reduced the peak memory used during reorgs by not accumulating all\r\ntransactions and logs.\r\nThis PR reduces the peak memory further by not storing the blocks in\r\nmemory.\r\nHowever this means we need to pull the blocks back up from storage\r\nmultiple times during the reorg.\r\nI collected the following numbers on peak memory usage: \r\n\r\n// Master: BenchmarkReorg-8 10000 899591 ns/op 820154 B/op 1440\r\nallocs/op 1549443072 bytes of heap used\r\n// WithoutOldChain: BenchmarkReorg-8 10000 1147281 ns/op 943163 B/op\r\n1564 allocs/op 1163870208 bytes of heap used\r\n// WithoutNewChain: BenchmarkReorg-8 10000 1018922 ns/op 943580 B/op\r\n1564 allocs/op 1171890176 bytes of heap used\r\n\r\nEach block contains a transaction with ~50k bytes and we're doing a 10k\r\nblock reorg, so the chain should be ~500MB in size\r\n\r\n---------\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
        },
        {
            "date": "2024-10-16 07:32:58",
            "message": "core, eth, ethstats: simplify chain head events (#30601)"
        },
        {
            "date": "2024-10-15 15:10:03",
            "message": "core, ethdb/pebble: run pebble in non-sync mode (#30573)\n\nImplements https://github.com/ethereum/go-ethereum/issues/29819"
        },
        {
            "date": "2024-10-15 14:00:14",
            "message": "ethdb/pebble: switch to increasing level sizes (#30602)"
        },
        {
            "date": "2024-10-15 08:51:20",
            "message": "beacon/engine: omit null witness field from payload envelope (#30597)\n\n## Description\r\n\r\nOmit null `witness` field from payload envelope.\r\n\r\n## Motivation\r\n\r\nCurrently, JSON encoded payload types always include `\"witness\": null`,\r\nwhich, I believe, is not intentional."
        },
        {
            "date": "2024-10-15 08:49:08",
            "message": "crypto: use decred secp256k1 directly (#30595)\n\nUse `github.com/decred/dcrd/dcrec/secp256k1/v4` directly rather than\r\n`github.com/btcsuite/btcd/btcec/v2` which is just a wrapper around the\r\nunderlying decred library. Inspired by\r\nhttps://github.com/cosmos/cosmos-sdk/pull/15018\r\n\r\n`github.com/btcsuite/btcd/btcec/v2` has a very annoying breaking change\r\nwhen upgrading from `v2.3.3` to `v2.3.4`. The easiest way to workaround\r\nthis is to just remove the wrapper.\r\n\r\nWould be very nice if you could backport this to the release branches.\r\n\r\nReferences:\r\n- https://github.com/btcsuite/btcd/issues/2221\r\n- https://github.com/cometbft/cometbft/pull/4294\r\n- https://github.com/cometbft/cometbft/pull/3728\r\n- https://github.com/zeta-chain/node/pull/2934"
        },
        {
            "date": "2024-10-15 08:02:02",
            "message": "internal/ethapi: refactor `TxArgs.setCancunFeeDefaults` (#30541)\n\ncalculating a reasonable tx blob fee cap (`max_blob_fee_per_gas *\r\ntotal_blob_gas`) only depends on the excess blob gas of the parent\r\nheader. The parent header is assumed to be correct, so the method should\r\nnot be able to fail and return an error."
        },
        {
            "date": "2024-10-14 19:43:35",
            "message": "beacon/engine: strip type byte in requests (#30576)\n\nThis change brings geth into compliance with the current engine API\nspecification for the Prague fork. I have moved the assignment of\nExecutionPayloadEnvelope.Requests into BlockToExecutableData to ensure\nthere is a single place where the type is removed.\n\nWhile doing so, I noticed that handling of requests in the miner was not\nquite correct for the empty payload. It would return `nil` requests for\nthe empty payload even for blocks after the Prague fork. To fix this, I\nhave added the emptyRequests field in miner.Payload."
        },
        {
            "date": "2024-10-14 17:25:22",
            "message": "build: update to golangci-lint 1.61.0 (#30587)\n\nChangelog: https://golangci-lint.run/product/changelog/#1610 \r\n\r\nRemoves `exportloopref` (no longer needed), replaces it with\r\n`copyloopvar` which is basically the opposite.\r\n\r\nAlso adds: \r\n- `durationcheck`\r\n- `gocheckcompilerdirectives`\r\n- `reassign`\r\n- `mirror`\r\n- `tenv`\r\n\r\n---------\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2024-10-14 11:32:15",
            "message": "trie: concurrent commit (#30545)\n\nThis change makes the trie commit operation concurrent, if the number of changes exceed 100. \r\n\r\nCo-authored-by: stevemilk <wangpeculiar@gmail.com>\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-10-13 16:51:51",
            "message": "core: enable EIP-2935 in chain maker (#30575)"
        },
        {
            "date": "2024-10-13 16:47:51",
            "message": "cmd/evm: fixup issues with requests in t8n (#30584)\n\nThis fixes a few issues missed in #29052:\r\n\r\n* `requests` must be hex encoded, so added a helper to marshal.\r\n* The statedb was committed too early and so the result of the system\r\ncalls was lost.\r\n* For devnet-4 we need to pull off the type byte prefix from the request\r\ndata."
        },
        {
            "date": "2024-10-12 09:25:58",
            "message": "build: add support for ubuntu 24.10 (#30580)"
        },
        {
            "date": "2024-10-11 19:36:13",
            "message": "all: implement EIP-7002 & EIP-7251 (#30571)\n\nThis is a redo of #29052 based on newer specs. Here we implement EIPs\r\nscheduled for the Prague fork:\r\n\r\n- EIP-7002: Execution layer triggerable withdrawals\r\n- EIP-7251: Increase the MAX_EFFECTIVE_BALANCE\r\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2024-10-10 11:03:03",
            "message": "core/tracing: add GetTransientState method to StateDB interface (#30531)\n\nAllows live custom tracers to access contract transient storage through the StateDB interface."
        },
        {
            "date": "2024-10-10 08:47:40",
            "message": "eth/protocols/eth: remove Requests in block body (#30562)\n\nBlock no longer has Requests. This PR just removes some code that wasn't removed in #30425."
        },
        {
            "date": "2024-10-10 05:54:07",
            "message": "eth/catalyst, core/txpool/blobpool: make tests output less logs (#30563)\n\nA couple of tests set the debug level to `TRACE` on stdout,\r\nand all subsequent tests in the same package are also affected\r\nby that, resulting in outputs of tens of megabytes. \r\n\r\nThis PR removes such calls from two packages where it was prevalent.\r\nThis makes getting a summary of failing tests simpler, and possibly\r\nreduces some strain from the CI pipeline."
        },
        {
            "date": "2024-10-09 12:45:14",
            "message": "eth/tracers: do system contract processing prior to parallel-tracing  (#30520)\n\nThis fixes `debug_traceBlock` methods for JS tracers in that it correctly\r\napplies the beacon block root processing to the state."
        },
        {
            "date": "2024-10-09 10:24:58",
            "message": "all: implement flat deposit requests encoding (#30425)\n\nThis implements recent changes to EIP-7685, EIP-6110, and\r\nexecution-apis.\r\n\r\n---------\r\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>\r\nCo-authored-by: Shude Li <islishude@gmail.com>"
        },
        {
            "date": "2024-10-08 11:30:07",
            "message": "log: remove unused parameter (#30432)"
        },
        {
            "date": "2024-10-04 10:53:06",
            "message": "build: upgrade -dlgo version to Go 1.23.2 (#30544)\n\nNew release: https://groups.google.com/g/golang-announce/c/NKEc8VT7Fz0"
        },
        {
            "date": "2024-10-02 14:00:36",
            "message": "beacon/light: optimize lock usage in `HeadTracker` (#30485)\n\nminimizes the time when the lock is held"
        },
        {
            "date": "2024-10-02 13:05:50",
            "message": "core/vm, cmd/evm: implement eof validation (#30418)\n\nThe bulk of this PR is authored by @lightclient , in the original\r\nEOF-work. More recently, the code has been picked up and reworked for the new EOF\r\nspecification, by @MariusVanDerWijden , in https://github.com/ethereum/go-ethereum/pull/29518, and also @shemnon has contributed with fixes.\r\n\r\nThis PR is an attempt to start eating the elephant one small bite at a\r\ntime, by selecting only the eof-validation as a standalone piece which\r\ncan be merged without interfering too much in the core stuff.\r\n\r\nIn this PR: \r\n\r\n- [x] Validation of eof containers, lifted from #29518, along with\r\ntest-vectors from consensus-tests and fuzzing, to ensure that the move\r\ndid not lose any functionality.\r\n- [x] Definition of eof opcodes, which is a prerequisite for validation\r\n- [x] Addition of `undefined` to a jumptable entry item. I'm not\r\nsuper-happy with this, but for the moment it seems the least invasive\r\nway to do it. A better way might be to go back and allowing nil-items or\r\nnil execute-functions to denote \"undefined\".\r\n- [x] benchmarks of eof validation speed \r\n\r\n\r\n---------\r\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\nCo-authored-by: Danno Ferrin <danno.ferrin@shemnon.com>"
        },
        {
            "date": "2024-10-01 16:27:25",
            "message": "internal/web3ext: rm unused modules (#30532)\n\nRemove console extensions for already deleted API namespaces (les, vflux and ethash)."
        },
        {
            "date": "2024-10-01 16:16:16",
            "message": "core/rawdb: freezer index repair (#29792)\n\nThis pull request removes the `fsync` of index files in freezer.ModifyAncients function for \r\nperformance gain.\r\n\r\nOriginally, fsync is added after each freezer write operation to ensure\r\nthe written data is truly transferred into disk. Unfortunately, it turns \r\nout `fsync` can be relatively slow, especially on\r\nmacOS (see https://github.com/ethereum/go-ethereum/issues/28754 for more\r\ninformation). \r\n\r\nIn this pull request, fsync for index file is removed as it turns out\r\nindex file can be recovered even after a unclean shutdown. But fsync for data file is still kept, as\r\nwe have no meaningful way to validate the data correctness after unclean shutdown.\r\n\r\n---\r\n\r\n**But why do we need the `fsync` in the first place?** \r\n\r\nAs it's necessary for freezer to survive/recover after the machine crash\r\n(e.g. power failure).\r\nIn linux, whenever the file write is performed, the file metadata update\r\nand data update are\r\nnot necessarily performed at the same time. Typically, the metadata will\r\nbe flushed/journalled\r\nahead of the file data. Therefore, we make the pessimistic assumption\r\nthat the file is first\r\nextended with invalid \"garbage\" data (normally zero bytes) and that\r\nafterwards the correct\r\ndata replaces the garbage. \r\n\r\nWe have observed that the index file of the freezer often contain\r\ngarbage entry with zero value\r\n(filenumber = 0, offset = 0) after a machine power failure. It proves\r\nthat the index file is extended\r\nwithout the data being flushed. And this corruption can destroy the\r\nwhole freezer data eventually.\r\n\r\nPerforming fsync after each write operation can reduce the time window\r\nfor data to be transferred\r\nto the disk and ensure the correctness of the data in the disk to the\r\ngreatest extent.\r\n\r\n---\r\n\r\n**How can we maintain this guarantee without relying on fsync?**\r\n\r\nBecause the items in the index file are strictly in order, we can\r\nleverage this characteristic to\r\ndetect the corruption and truncate them when freezer is opened.\r\nSpecifically these validation\r\nrules are performed for each index file:\r\n\r\nFor two consecutive index items:\r\n\r\n- If their file numbers are the same, then the offset of the latter one\r\nMUST not be less than that of the former.\r\n- If the file number of the latter one is equal to that of the former\r\nplus one, then the offset of the latter one MUST not be 0.\r\n- If their file numbers are not equal, and the latter's file number is\r\nnot equal to the former plus 1, the latter one is valid\r\n\r\nAnd also, for the first non-head item, it must refer to the earliest\r\ndata file, or the next file if the\r\nearliest file is not sufficient to place the first item(very special\r\ncase, only theoretical possible\r\nin tests)\r\n\r\nWith these validation rules, we can detect the invalid item in index\r\nfile with greatest possibility.\r\n\r\n--- \r\n\r\nBut unfortunately, these scenarios are not covered and could still lead\r\nto a freezer corruption if it occurs:\r\n\r\n**All items in index file are in zero value**\r\n\r\nIt's impossible to distinguish if they are truly zero (e.g. all the data\r\nentries maintained in freezer\r\nare zero size) or just the garbage left by OS. In this case, these index\r\nitems will be kept by truncating\r\nthe entire data file, namely the freezer is corrupted.\r\n\r\nHowever, we can consider that the probability of this situation\r\noccurring is quite low, and even\r\nif it occurs, the freezer can be considered to be close to an empty\r\nstate. Rerun the state sync\r\nshould be acceptable.\r\n\r\n**Index file is integral while relative data file is corrupted**\r\n\r\nIt might be possible the data file is corrupted whose file size is\r\nextended correctly with garbage\r\nfilled (e.g. zero bytes). In this case, it's impossible to detect the\r\ncorruption by index validation.\r\n\r\nWe can either choose to `fsync` the data file, or blindly believe that\r\nif index file is integral then\r\nthe data file could be integral with very high chance. In this pull\r\nrequest, the first option is taken."
        },
        {
            "date": "2024-10-01 13:23:35",
            "message": "params: begin v1.14.12 release cycle (#30536)\n\nparams: begin v1.14.12 release cycle"
        },
        {
            "date": "2024-10-01 13:19:15",
            "message": "params: begin v1.14.12 release cycle"
        },
        {
            "date": "2024-10-01 13:14:30",
            "message": "params: go-ethereum v1.14.11 stable"
        },
        {
            "date": "2024-10-01 09:36:56",
            "message": "internal/ethapi: remove td field from block (#30386)\n\nimplement https://github.com/ethereum/execution-apis/pull/570"
        },
        {
            "date": "2024-09-30 16:32:39",
            "message": "cmd/geth: remove deprecated lightchaindata db (#30527)\n\nThis PR removes the dependencies on `lightchaindata` db as the light\r\nprotocol has been deprecated and removed from the codebase."
        },
        {
            "date": "2024-09-30 12:46:39",
            "message": "eth/catalyst: use setcanonical instead of sethead in simulated fork (#30465)\n\nFixes https://github.com/ethereum/go-ethereum/issues/30448"
        },
        {
            "date": "2024-09-30 12:39:53",
            "message": " build: use buildx to build multi-platform docker images (#30530)"
        },
        {
            "date": "2024-09-30 09:06:10",
            "message": "core/txpool/blobpool: use types.Sender instead of signer.Sender (#30473)\n\nUse types.Sender(signer, tx) to utilize the transaction's sender cache\r\nand avoid repeated address recover."
        },
        {
            "date": "2024-09-30 08:56:14",
            "message": "p2p/discover: add config option for disabling FINDNODE liveness check (#30512)\n\nThis is for fixing Prysm integration tests."
        },
        {
            "date": "2024-09-27 11:13:45",
            "message": "params: begin v1.14.11 release cycle"
        },
        {
            "date": "2024-09-27 11:09:42",
            "message": "params: release Geth v1.14.10"
        },
        {
            "date": "2024-09-27 10:56:25",
            "message": "Revert \"core/txpool, eth/catalyst:  ensure gas tip retains current value upon rollback\" (#30521)\n\nReverts ethereum/go-ethereum#30495\r\n\r\nYou are free to create a proper Clear method if that's the best way. But\r\none that does a proper cleanup, not some hacky call to set gas which\r\nscrews up logs, metrics and everything along the way. Also doesn't work\r\nfor legacy pool local transactions.\r\n\r\nThe current code had a hack in the simulated code, now we have a hack in\r\nlive txpooling code. No, that's not acceptable. I want the live code to\r\nbe proper, meaningful API, meaningful comments, meaningful\r\nimplementation."
        },
        {
            "date": "2024-09-27 10:05:35",
            "message": "Merge pull request #30518 from holiman/blobpool_fix\n\ncore/txpool/blobpool: return all reinject-addresses"
        },
        {
            "date": "2024-09-27 08:55:42",
            "message": "core/txpool/blobpool: add test to check internal shuffling"
        },
        {
            "date": "2024-09-27 06:24:23",
            "message": "core/txpool/blobpool: revert part of #30437, return all reinject-addresses"
        },
        {
            "date": "2024-09-26 09:08:36",
            "message": "core/txpool, eth/catalyst: ensure gas tip retains current value upon rollback (#30495)\n\nHere we move the method that drops all transactions by temporarily increasing the fee\r\ninto the TxPool itself. It's better to have it there because we can set it back to the\r\nconfigured value afterwards. This resolves a TODO in the simulated backend."
        },
        {
            "date": "2024-09-26 07:28:40",
            "message": "deps: update supranational/blst (#30504)\n\nThis update should only affect the fuzzers, as far as I know. But it\r\nseems like it might also fix some arm/macos compilation issue in\r\nhttps://github.com/ethereum/go-ethereum/issues/30494\r\n\r\nCloses #30494 (I think)"
        },
        {
            "date": "2024-09-26 06:12:12",
            "message": "p2p/discover: fix flaky tests writing to test.log after completion (#30506)\n\nThis PR fixes two tests, which had a tendency to sometimes write to the `*testing.T` `log` facility after the test function had completed, which is not allowed. This PR fixes it by using waitgroups to ensure that the handler/logwriter terminates before the test exits.\r\n\r\ncloses #30505"
        },
        {
            "date": "2024-09-24 11:53:46",
            "message": "core/vm: more benchmarks for bls g1/g2-multiexp precompiles (#30459)\n\nThis change adds more comprehensive benchmarks with a wider-variety of input sizes for g1 and g2 multi exponentiation."
        },
        {
            "date": "2024-09-24 11:18:36",
            "message": "core/tracing, core/vm: add ContractCode to the OpContext (#30466)\n\nExtends the opcontext interface to include accessor for code being executed in current context. While it is possible to get the code via `statedb.GetCode`, that approach doesn't work for initcode."
        },
        {
            "date": "2024-09-24 11:14:38",
            "message": "internal/ethapi: fix gascap 0 for eth_simulateV1 (#30496)\n\nSimilar to #30474."
        },
        {
            "date": "2024-09-24 07:26:29",
            "message": "core/rawdb: make sure specified state scheme is valid (#30499)\n\nThis change exits with error if user provided a `--state.scheme` which is neither `hash` nor `path`"
        },
        {
            "date": "2024-09-23 11:31:56",
            "message": "internal/ethapi/api: for simulated calls, set gaspool to max value if global gascap is 0 (#30474)\n\nIn #27720, we introduced RPC global gas cap. A value of `0` means an unlimited gas cap. However, this was not the case for simulated calls. This PR fixes the behaviour."
        },
        {
            "date": "2024-09-23 11:27:29",
            "message": "core/state: commit snapshot only if the base layer exists (#30493)\n\nThis pull request skips the state snapshot update if the base layer is\r\nnot existent, eliminating the numerous warning logs after an unclean\r\nshutdown.\r\n\r\nSpecifically, Geth will rewind its chain head to a historical block\r\nafter unclean shutdown and state snapshot will be remained as unchanged\r\nwaiting for recovery. During this period of time, the snapshot is unusable\r\nand all state updates should be ignored/skipped for state snapshot update."
        },
        {
            "date": "2024-09-23 07:29:07",
            "message": "core/state: fix comment of `mode` (#30490)"
        },
        {
            "date": "2024-09-23 07:17:18",
            "message": "cmd/utils: fix `setEtherbase` (#30488)\n\nMake `setEtherbase` fall thorugh and handle `miner.pending.feeRecipient` after showing deprecation-warning for `miner.etherbase`-flag."
        },
        {
            "date": "2024-09-22 08:12:47",
            "message": "travis: work around travis/osx/go1.23 setup bug (#30491)\n\nThis is a work-around for a strange issue with travis, specifically,\r\n`os=osx, go: 1.23.1`. When this is used, the actual go that ends up\r\nbeing used is `go1.19.4 darwin/amd64 `.\r\n\r\nUsing `which go`, it told me that the `go` in the path was a softlink at\r\n`/Users/travis/gopath/bin/go1.23.1 `. However, this was not true: using\r\n`command -v go`, it told me that the actual `go` that was used is a\r\nsoftlink at `/usr/local/bin/go`.\r\n\r\nThis change rewrites the `/usr/local/bin/go` softlink to point to the\r\nbinary at `/Users/travis/gopath/bin/go1.23.1`, so we get the right\r\ngo-version."
        },
        {
            "date": "2024-09-20 13:43:42",
            "message": "beacon, core, eth, miner: integrate witnesses into production Geth (#30069)\n\nThis PR integrates witness-enabled block production, witness-creating\r\npayload execution and stateless cross-validation into the `engine` API.\r\nThe purpose of the PR is to enable the following use-cases (for API\r\ndetails, please see next section):\r\n\r\n- Cross validating locally created blocks:\r\n- Call `forkchoiceUpdatedWithWitness` instead of `forkchoiceUpdated` to\r\ntrigger witness creation too.\r\n- Call `getPayload` as before to retrieve the new block and also the\r\nabove created witness.\r\n- Call `executeStatelessPayload` against another client to\r\ncross-validate the block.\r\n\r\n- Cross validating locally processed blocks:\r\n- Call `newPayloadWithWitness` instead of `newPayload` to trigger\r\nwitness creation too.\r\n- Call `executeStatelessPayload` against another client to\r\ncross-validate the block.\r\n\r\n- Block production for stateless clients (local or MEV builders):\r\n- Call `forkchoiceUpdatedWithWitness` instead of `forkchoiceUpdated` to\r\ntrigger witness creation too.\r\n- Call `getPayload` as before to retrieve the new block and also the\r\nabove created witness.\r\n- Propagate witnesses across the consensus libp2p network for stateless\r\nEthereum.\r\n\r\n- Stateless validator validation:\r\n- Call `executeStatelessPayload` with the propagated witness to\r\nstatelessly validate the block.\r\n\r\n*Note, the various `WithWitness` methods could also *just be* an\r\nadditional boolean flag on the base methods, but this PR wanted to keep\r\nthe methods separate until a final consensus is reached on how to\r\nintegrate in production.*\r\n\r\n---\r\n\r\nThe following `engine` API types are introduced:\r\n\r\n```go\r\n// StatelessPayloadStatusV1 is the result of a stateless payload execution.\r\ntype StatelessPayloadStatusV1 struct {\r\n\tStatus          string      `json:\"status\"`\r\n\tStateRoot       common.Hash `json:\"stateRoot\"`\r\n\tReceiptsRoot    common.Hash `json:\"receiptsRoot\"`\r\n\tValidationError *string     `json:\"validationError\"`\r\n}\r\n```\r\n\r\n- Add `forkchoiceUpdatedWithWitnessV1,2,3` with same params and returns\r\nas `forkchoiceUpdatedV1,2,3`, but triggering a stateless witness\r\nbuilding if block production is requested.\r\n- Extend `getPayloadV2,3` to return `executionPayloadEnvelope` with an\r\nadditional `witness` field of type `bytes` iff created via\r\n`forkchoiceUpdatedWithWitnessV2,3`.\r\n- Add `newPayloadWithWitnessV1,2,3,4` with same params and returns as\r\n`newPayloadV1,2,3,4`, but triggering a stateless witness creation during\r\npayload execution to allow cross validating it.\r\n- Extend `payloadStatusV1` with a `witness` field of type `bytes` if\r\nreturned by `newPayloadWithWitnessV1,2,3,4`.\r\n- Add `executeStatelessPayloadV1,2,3,4` with same base params as\r\n`newPayloadV1,2,3,4` and one more additional param (`witness`) of type\r\n`bytes`. The method returns `statelessPayloadStatusV1`, which mirrors\r\n`payloadStatusV1` but replaces `latestValidHash` with `stateRoot` and\r\n`receiptRoot`."
        },
        {
            "date": "2024-09-20 12:06:12",
            "message": "build: fix macos builds by working around travis osx flaw (#30479)\n\nThis should fix https://github.com/ethereum/go-ethereum/issues/30471.\r\nSee investigation in https://github.com/ethereum/go-ethereum/pull/30478\r\nfor more background."
        },
        {
            "date": "2024-09-19 08:23:13",
            "message": ".github: add release maintainers to params/ CODEOWNERS (#30458)"
        },
        {
            "date": "2024-09-19 07:41:10",
            "message": "ethdb/pebble: handle errors (#30367)"
        },
        {
            "date": "2024-09-19 06:38:06",
            "message": "core: minor fix for the log wrapper with debug purpose (#30454)\n\nAfter this PR, https://github.com/ethereum/go-ethereum/pull/28187, the\r\nway to set the default logger is different. This PR only updates the way\r\nto set logger in some test cases' comments that existed in the codebase\r\n(since this commit\r\nhttps://github.com/ethereum/go-ethereum/commit/b63e3c37a6). Although I\r\nam not sure if it a good way to leave the code in the comment, it truly\r\nmakes me more efficiently to debug and fix the failing test cases."
        },
        {
            "date": "2024-09-19 06:35:14",
            "message": "genesis: fix dev mode alloc (#30460)\n\nBalance being null causes `getGenesisState` to fail as the balance field\r\nis required in json marshaling of an account."
        },
        {
            "date": "2024-09-18 12:48:47",
            "message": "params: begin v1.14.10 release cycle (#30457)"
        },
        {
            "date": "2024-09-18 12:27:03",
            "message": "params: release go-ethereum v1.14.9 stable (#30455)"
        },
        {
            "date": "2024-09-18 08:53:50",
            "message": "Revert \"core/rawdb: remove unused transition status state accessors\" (#30449)\n\nReverts ethereum/go-ethereum#30433"
        },
        {
            "date": "2024-09-17 14:10:59",
            "message": "core/tracing: add verkle gas change reasons to changelog (#30444)\n\nAdd changes from #30409 and #29338 to changelog.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>\r\nCo-authored-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>"
        },
        {
            "date": "2024-09-16 17:57:31",
            "message": "core/tracing: fix typo in comment (#30443)\n\nminor fix"
        },
        {
            "date": "2024-09-16 08:56:02",
            "message": "core, trie: prealloc capacity for maps (#30437)\n\n- preallocate capacity for map\r\n- avoid `reinject` adding empty value\r\n- use `maps.Copy`"
        },
        {
            "date": "2024-09-16 06:51:03",
            "message": "core/types: more easily extensible tx signing (#30372)\n\nThis change makes the code slightly easier for downstream-projects to extend with more signer-types, but if functionalily equivalent to the previous code."
        },
        {
            "date": "2024-09-16 06:44:47",
            "message": "internal: run tests in parallel (#30381)\n\nContinuation of https://github.com/ethereum/go-ethereum/pull/28546"
        },
        {
            "date": "2024-09-15 00:55:53",
            "message": "core/rawdb: remove unused transition status state accessors (#30433)"
        },
        {
            "date": "2024-09-14 13:45:52",
            "message": "core/txpool/blobpool: avoid possible zero index panic (#30430)\n\nThis situation(`len(txs) == 0`) rarely occurs, but if it does, it will\r\npanic.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-09-14 13:44:42",
            "message": "core/tracing: fix copy/paste error+comments in reason listing (#30431)\n\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>"
        },
        {
            "date": "2024-09-13 21:47:18",
            "message": "p2p/enode: add quic ENR entry (#30283)\n\nAdd `quic` entry to the ENR as proposed in\r\nhttps://github.com/ethereum/consensus-specs/pull/3644\r\n\r\n---------\r\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2024-09-13 13:37:30",
            "message": "core/state, core/vm: Nyota contract create init simplification (#30409)\n\nImplementation of [this EIP-4762\r\nupdate](https://github.com/ethereum/EIPs/pull/8867).\r\n\r\n---------\r\n\r\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\r\nCo-authored-by: Tanishq Jasoria <jasoriatanishq@gmail.com>"
        },
        {
            "date": "2024-09-13 09:17:40",
            "message": "core/rawdb: more accurate description of freezer in docs (#30393)\n\nfixes https://github.com/ethereum/go-ethereum/issues/29793"
        },
        {
            "date": "2024-09-13 09:16:47",
            "message": "eth/filters: prevent concurrent access in test (#30401)\n\nuse a mutex to prevent concurrent access to the api.filters map during `TestPendingTxFilterDeadlock` test"
        },
        {
            "date": "2024-09-12 14:08:29",
            "message": "beacon/light/api: fixed blsync update query (#30421)\n\nThis PR fixes what https://github.com/ethereum/go-ethereum/pull/30306/\r\nbroke. Escaping the `?` in the event sub query was fixed in that PR but\r\nit was still escaped in the `updates` request. This PR adds a URL params\r\nargument to `httpGet` and fixes `updates` query formatting."
        },
        {
            "date": "2024-09-11 13:11:08",
            "message": "core/vm: remove panic when address is not present (#30414)\n\nRemove redundant address presence check in `makeGasSStoreFunc`.\r\n\r\nThis PR simplifies the `makeGasSStoreFunc` function by removing the\r\nredundant check for address presence in the access list. The updated\r\ncode now only checks for slot presence, streamlining the logic and\r\neliminating unnecessary panic conditions.\r\n\r\nThis change removes the unnecessary address presence check, simplifying\r\nthe code and improving maintainability without affecting functionality.\r\nThe previous panic condition was intended as a canary during the testing\r\nphases (i.e. _YOLOv2_) and is no longer needed."
        },
        {
            "date": "2024-09-10 18:52:20",
            "message": "beacon/engine/types: remove PayloadV4 (#30415)\n\nh/t @MariusVanDerWijden for finding and fixing this on devnet 3.\r\n\r\nI made the mistake of thinking `PayloadVersion` was correlated with the\r\n`GetPayloadVX` method, but it actually tracks which version of\r\n`PayloadAttributes` were passed to `forkchoiceUpdated`. So far, Prague\r\ndoes not necessitate a new version of fcu, so there is no need for\r\n`PayloadV4`.\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2024-09-06 15:02:34",
            "message": "core/state/snapshot: port changes from 29995 (#30040)\n\n#29995 has been reverted due to an unexpected flaw in the state snapshot\r\nprocess.\r\n\r\nSpecifically, it attempts to stop the state snapshot generation, which\r\ncould potentially\r\ncause the system to halt if the generation is not currently running.\r\n\r\nThis pull request ports the changes made in #29995 and fixes the flaw."
        },
        {
            "date": "2024-09-06 10:32:01",
            "message": "eth/fetcher: fix blob transaction propagation (#30125)\n\nThis PR fixes an issue with blob transaction propagation due to the blob\r\ntransation txpool rejecting transactions with gapped nonces. The\r\nspecific changes are:\r\n\r\n- fetch transactions from a peer in the order they were announced to\r\nminimize nonce-gaps (which cause blob txs to be rejected\r\n\r\n- don't wait on fetching blob transactions after announcement is\r\nreceived, since they are not broadcast\r\n\r\nTesting:\r\n- unit tests updated to reflect that fetch order should always match tx\r\nannouncement order\r\n- unit test added to confirm blob transactions are scheduled immediately\r\nfor fetching\r\n  - running the PR on an eth mainnet full node without incident so far\r\n\r\n---------\r\n\r\nSigned-off-by: Roberto Bayardo <bayardo@alum.mit.edu>\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-09-06 09:31:00",
            "message": "internal/ethapi: eth_multicall (#27720)\n\nThis is a successor PR to #25743. This PR is based on a new iteration of\r\nthe spec: https://github.com/ethereum/execution-apis/pull/484.\r\n\r\n`eth_multicall` takes in a list of blocks, each optionally overriding\r\nfields like number, timestamp, etc. of a base block. Each block can\r\ninclude calls. At each block users can override the state. There are\r\nextra features, such as:\r\n\r\n- Include ether transfers as part of the logs\r\n- Overriding precompile codes with evm bytecode\r\n- Redirecting accounts to another address\r\n\r\n## Breaking changes\r\n\r\nThis PR includes the following breaking changes:\r\n\r\n- Block override fields of eth_call and debug_traceCall have had the\r\nfollowing fields renamed\r\n  - `coinbase` -> `feeRecipient`\r\n  - `random` -> `prevRandao`\r\n  - `baseFee` -> `baseFeePerGas`\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-09-06 08:11:14",
            "message": "build: upgrade -dlgo version to Go 1.23.1 (#30404)\n\nNew security fix:\r\nhttps://groups.google.com/g/golang-announce/c/K-cEzDeCtpc"
        },
        {
            "date": "2024-09-06 07:42:59",
            "message": "core/state: get rid of field pointer in journal (#30361)\n\nThis pull request replaces the field pointer in journal entry with the\r\nfield itself, specifically the address of mutated account.\r\n\r\nWhile it will introduce the extra allocation cost, but it's easier for\r\ncode reading. Let's measure the overhead overall to see if the change is\r\nacceptable or not."
        },
        {
            "date": "2024-09-05 10:10:47",
            "message": "core/state: state reader abstraction (#29761)\n\nThis pull request introduces a state.Reader interface for state\r\naccessing.\r\n\r\nThe interface could be implemented in various ways. It can be pure trie\r\nonly reader, or the combination of trie and state snapshot. What's more,\r\nthis interface allows us to have more flexibility in the future, e.g.\r\nthe\r\narchive reader (for accessing archive state).\r\n\r\nAdditionally, this pull request removes the following metrics\r\n\r\n- `chain/snapshot/account/reads`\r\n- `chain/snapshot/storage/reads`"
        },
        {
            "date": "2024-09-05 08:50:34",
            "message": "build: increase go test timeout (#30398)\n\nThis increases the timeout for the go tests on ci, this should prevent\r\ntravis from erroring.\r\n\r\nsee:\r\nhttps://app.travis-ci.com/github/ethereum/go-ethereum/jobs/625803693"
        },
        {
            "date": "2024-09-04 14:15:41",
            "message": "node: fix flaky jwt-test (#30388)\n\nThis PR fixes a flaky jwt-test. \r\n\r\nThe test is a jwt \"from one second in the future\". The test passes; the\r\nreason for this is that the CI-system is slow, and by the time the jwt\r\nis actually evaluated, that second has passed, and it's no longer\r\nfuture.\r\n\r\nAlternative to #30380"
        },
        {
            "date": "2024-09-04 13:19:18",
            "message": "all: remove funding verifier (#30391)\n\nNow that verification is done, we can remove the funding information."
        },
        {
            "date": "2024-09-04 13:13:20",
            "message": "core: fix compilation error (#30394)\n\nun-borks a compilation error from a recent merge to master"
        },
        {
            "date": "2024-09-04 13:03:06",
            "message": "all: remove forkchoicer and reorgNeeded (#29179)\n\nThis PR changes how sidechains are handled. \r\n\r\nBefore the merge, it was possible to import a chain with lower td and not set it as canonical. After the merge, we expect every chain that we get via InsertChain to be canonical. Non-canonical blocks can still be inserted\r\nwith InsertBlockWIthoutSetHead.\r\n\r\nIf during the InsertChain, the existing chain is not canonical anymore, we mark it as a sidechain and send the SideChainEvents normally."
        },
        {
            "date": "2024-09-04 12:33:51",
            "message": "all: implement EIP-6110, execution layer triggered deposits (#29431)\n\nThis PR implements EIP-6110: Supply validator deposits on chain. It also sketches\r\nout the base for Prague in the engine API types."
        },
        {
            "date": "2024-09-03 14:22:32",
            "message": "funding.json: add funding information file (#30385)\n\nAdds a list of funding identifiers."
        },
        {
            "date": "2024-09-02 08:41:44",
            "message": "core/state: pull the verkle trie from prefetcher for empty storage root (#30369)\n\nThis pull request fixes a flaw in prefetcher.\r\n\r\nIn verkle tree world, both accounts and storage slots are committed into\r\na single tree instance for state hashing. If the prefetcher is activated, we will\r\ntry to pull the trie for the prefetcher for performance speedup. \r\n\r\nHowever, we had a special logic to skip pulling storage trie if the\r\nstorage root is empty. While it's true for merkle as we have nothing to\r\ndo with an empty storage trie, it's totally wrong for verkle. The consequences\r\nfor skipping pulling is the storage changes are committed into trie A, while the\r\naccount changes are committed into trie B (pulled from the prefetcher), boom."
        },
        {
            "date": "2024-09-02 08:30:33",
            "message": "Include tracerConfig in created tracing test (#30364)\n\nFixes the tracer test filler for when there is tracerConfig."
        },
        {
            "date": "2024-08-30 12:13:02",
            "message": "trie, core/state: Nyota EIP-6800 & EIP-4762 spec updates (#30357)\n\nThis PR implements changes related to\r\n[EIP-6800](https://eips.ethereum.org/EIPS/eip-6800) and\r\n[EIP-4762](https://eips.ethereum.org/EIPS/eip-4762) spec updates.\r\n\r\nA TL;DR of the changes is that `Version`, `Balance`, `Nonce` and\r\n`CodeSize` are encoded in a single leaf named `BasicData`. For more\r\ndetails, see the [_Header Values_ table in\r\nEIP-6800](https://eips.ethereum.org/EIPS/eip-6800#header-values).\r\n\r\nThe motivation for this was simplifying access event patterns, reducing\r\ncode complexity, and, as a side effect, saving gas since fewer leaf\r\nnodes must be accessed.\r\n\r\n---------\r\n\r\nCo-authored-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-08-29 12:50:27",
            "message": "consensus/beacon, core/types: add verkle witness builder (#30129)\n\nThis PR adds the bulk verkle witness+proof production at the end of block\r\nproduction. It reads all data from the tree in one swoop and produces\r\na verkle proof.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-08-28 12:12:09",
            "message": "signer/core/apitypes: support fixed size arrays for EIP-712 typed data (#30175)\n\nWhen attempting to hash a typed data struct that includes a type\r\nreference with a fixed-size array, the validation process fails.\r\nAccording to EIP-712, arrays can be either fixed-size or dynamic,\r\ndenoted by `Type[n]` or `Type[]` respectively, although it appears this\r\ncurrently isn't supported.\r\n\r\nThis change modifies  the validation logic to accommodate types\r\ncontaining fixed-size arrays."
        },
        {
            "date": "2024-08-28 06:18:23",
            "message": "core/state: semantic journalling (part 1) (#28880)\n\nThis is a follow-up to #29520, and a preparatory PR to a more thorough\r\nchange in the journalling system.\r\n\r\n### API methods instead of `append` operations\r\n\r\nThis PR hides the journal-implementation details away, so that the\r\nstatedb invokes methods like `JournalCreate`, instead of explicitly\r\nappending journal-events in a list. This means that it's up to the\r\njournal whether to implement it as a sequence of events or\r\naggregate/merge events.\r\n\r\n### Snapshot-management inside the journal \r\n\r\nThis PR also makes it so that management of valid snapshots is moved\r\ninside the journal, exposed via the methods `Snapshot() int` and\r\n`RevertToSnapshot(revid int, s *StateDB)`.\r\n\r\n\r\n### SetCode\r\n\r\nJournalSetCode journals the setting of code: it is implicit that the\r\nprevious values were \"no code\" and emptyCodeHash. Therefore, we can\r\nsimplify the setCode journal.\r\n\r\n### Selfdestruct\r\n\r\nThe self-destruct journalling is a bit strange: we allow the\r\nselfdestruct operation to be journalled several times. This makes it so\r\nthat we also are forced to store whether the account was already\r\ndestructed.\r\n\r\nWhat we can do instead, is to only journal the first destruction, and\r\nafter that only journal balance-changes, but not journal the\r\nselfdestruct itself.\r\n\r\nThis simplifies the journalling, so that internals about state\r\nmanagement does not leak into the journal-API.\r\n\r\n### Preimages\r\n\r\nPreimages were, for some reason, integrated into the journal management,\r\ndespite not being a consensus-critical data structure. This PR undoes\r\nthat.\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-08-27 15:11:50",
            "message": "accounts/abi/bind, ethclient/simulated: check SendTransaction error in tests (#30349)\n\nIn few tests the returned error from `SendTransaction` is not being\r\nchecked. This PR checks the returned err in tests.\r\n\r\nReturning errors also revealed tx in `TestCommitReturnValue` is not\r\nactually being sent, and returns err ` only replay-protected (EIP-155)\r\ntransactions allowed over RPC`. Fixed the transaction by using the\r\n`testTx` function."
        },
        {
            "date": "2024-08-27 12:10:32",
            "message": "p2p/discover: fix Write method in metered connection (#30355)\n\n`WriteToUDP` was never called, since `meteredUdpConn` exposed directly\r\nall the methods from the underlying `UDPConn` interface.\r\n\r\nThis fixes the `discover/egress` metric never being updated."
        },
        {
            "date": "2024-08-26 14:18:47",
            "message": "core/state: fix trie prefetcher for verkle (#30354)\n\nThis pull request fixes the panic issue in prefetcher once the verkle is\r\nactivated."
        },
        {
            "date": "2024-08-26 12:02:10",
            "message": "core: add metrics for state access (#30353)\n\nThis pull request adds a few more performance metrics, specifically:\r\n\r\n- The average time cost of an account read\r\n- The average time cost of a storage read\r\n- The rate of account reads\r\n- The rate of storage reads"
        },
        {
            "date": "2024-08-26 08:39:35",
            "message": "core: implement EIP-2935 (#29465)\n\nhttps://eips.ethereum.org/EIPS/eip-2935\r\n\r\n---------\r\n\r\nCo-authored-by: Guillaume Ballet <gballet@gmail.com>\r\nCo-authored-by: Ignacio Hagopian <jsign.uy@gmail.com>\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-08-26 01:29:24",
            "message": "doc: update 2021-08-22-split-postmortem (#30351)\n\nUpdate 2021-08-22-split-postmortem"
        },
        {
            "date": "2024-08-23 14:48:20",
            "message": "gitignore: ignore build signatures (#30346)\n\nIgnore files are generated during signing of download-binaries, which 'dirty' the vcs for subsequent builds."
        },
        {
            "date": "2024-08-23 14:30:30",
            "message": "build: debug travis build (#30344)\n\ndebugging travis build pipeline"
        },
        {
            "date": "2024-08-23 10:31:24",
            "message": "beacon/light/sync: basic tests for rangeLock (#30269)\n\nadds simple tests for lock and firstUnlocked method from rangeLock\r\ntype\r\n\r\n---------\r\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2024-08-23 10:29:02",
            "message": "beacon/blsync: better error information in test (#30336)\n\nthis change reports the error instead of ignoring it"
        },
        {
            "date": "2024-08-23 10:27:06",
            "message": "trie: avoid un-needed map copy (#30343)\n\nThis change avoids the an unnecessary map copy if the preimage recording is not enabled."
        },
        {
            "date": "2024-08-23 07:48:24",
            "message": "build: make go buildid static (#30342)\n\nThe previous clearing of buildid did fully work, turns out we need to\r\nset it in `ldflags`\r\n\r\nThe go buildid is the only remaining hurdle for reproducible builds, see\r\nhttps://github.com/ethereum/go-ethereum/issues/28987#issuecomment-2306412590\r\n\r\nThis PR changes the go build id application note to say literally `none`\r\n\r\nhttps://github.com/golang/go/issues/33772#issuecomment-528176001:\r\n\r\n> This difference is due to the .note.go.buildid section added by the\r\nlinker. It can be set to something static e.g. -ldflags=-buildid= (empty\r\nstring) to gain reproducibility."
        },
        {
            "date": "2024-08-22 11:29:40",
            "message": "build: fix hash for go1.23.0.linux-riscv64.tar.gz (#30335)\n\nbuild: fix hash for go1.23.0.linux-riscv64.tar.gz"
        },
        {
            "date": "2024-08-21 13:16:08",
            "message": "eth/tracers: avoid panic in state test runner (#30332)\n\nMake tracers more robust by handling `nil` receipt as input. \r\nAlso pass in a receipt with gas used in the state test runner.\r\nCloses https://github.com/ethereum/go-ethereum/issues/30117.\r\n\r\n---------\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2024-08-21 07:22:33",
            "message": "eth/protocols/eth: handle zero-count header requests (#30305)\n\nProper fix for handling `count=0` get header requests. \r\n\r\nhttps://en.wikipedia.org/wiki/Count_Zero"
        },
        {
            "date": "2024-08-21 02:00:31",
            "message": "trie: use go-verkle helper for speedier (*VerkleTrie).RollBackAccount (#30242)\n\nThis is a performance improvement on the account-creation rollback code\r\nrequired for the archive node to support verkle. It uses the utility\r\nfunction `DeleteAtStem` to remove code and account data per-group\r\ninstead of doing it leaf by leaf.\r\n\r\nIt also fixes an index bug, as code is chunked in 31-byte chunks, so\r\ncomparing with the code size should use 31 as its stride.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-08-20 15:34:03",
            "message": "travis.yml: use focal for builds (#30319)"
        },
        {
            "date": "2024-08-20 14:02:54",
            "message": "cmd/utils,p2p: enable discv5 by default (#30327)"
        },
        {
            "date": "2024-08-20 13:59:48",
            "message": "all: clean up goerli flag and config (#30289)\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2024-08-20 13:59:16",
            "message": "cmd/devp2p: require dns:read, dns:edit permissions for cloudflare deploy  (#30326)\n\nThis PR adds the `dns:read` and `dns:edit` permissions to the required\r\nset of permissions checked before deploying an ENR tree to Cloudflare.\r\nThese permissions are necessary for a successful publish.\r\n\r\n**Background**:\r\nThe current logic for `devp2p dns to-cloudflare` checks for `zone:edit`\r\nand `zone:read` permissions. However, when running the command with only\r\nthese two permissions, the following error occurs:\r\n```\r\nwrong permissions on zone REMOVED-ZONE: map[#zone:edit:false #zone:read:true]\r\n```\r\n\r\nAdding `zone:read` and `zone:edit` to the API token led to a different\r\nerror:\r\n```\r\nINFO [08-19|14:06:16.782] Retrieving existing TXT records on pos-nodes.hardfork.dev\r\nAuthentication error (10000)\r\n```\r\n\r\nThis suggested that additional permissions were required. I added\r\n`dns:read`, but encountered another error:\r\n```\r\nINFO [08-19|14:11:42.342] Retrieving existing TXT records on pos-nodes.hardfork.dev\r\nINFO [08-19|14:11:42.851] Updating DNS entries\r\nfailed to publish REMOVED.pos-nodes.hardfork.dev: Authentication error (10000)\r\n```\r\n\r\nFinally, after adding both `dns:read` and `dns:edit` permissions, the\r\ncommand executed successfully with the following output:\r\n```\r\nINFO [08-19|14:13:07.677] Checking Permissions on zone REMOVED-ZONE\r\nINFO [08-19|14:13:08.014] Retrieving existing TXT records on pos-nodes.hardfork.dev\r\nINFO [08-19|14:13:08.440] Updating DNS entries\r\nINFO [08-19|14:13:08.440] \"Updating pos-nodes.hardfork.dev from \\\"enrtree-root:v1 e=FSED3EDKEKRDDFMCLP746QY6CY l=FDXN3SN67NA5DKA4J2GOK7BVQI seq=1 sig=Glja2c9RviRqOpaaHR0MnHsQwU76nJXadJwFeiXpp8MRTVIhvL0LIireT0yE3ETZArGEmY5Ywz3FVHZ3LR5JTAE\\\" to \\\"enrtree-root:v1 e=AB66M4ULYD5OYN4XFFCPVZRLUM l=FDXN3SN67NA5DKA4J2GOK7BVQI seq=1 sig=H8cqDzu0FAzBplK4g3yudhSaNtszIebc2aj4oDm5a5ZE5PAg-xpCnQgVE_53CsgsqQpalD9byafx_FrUT61sagA\\\"\"\r\nINFO [08-19|14:13:16.932] Updated DNS entries                      new=32 updated=1 untouched=100\r\nINFO [08-19|14:13:16.932] Deleting stale DNS entries\r\nINFO [08-19|14:13:24.663] Deleted stale DNS entries                count=31\r\n```\r\n\r\nWith this PR, the required permissions for deploying an ENR tree to\r\nCloudflare now include `zone:read`, `zone:edit`, `dns:read`, and\r\n`dns:edit`. The initial check now includes all of the necessary\r\npermissions and indicates in the error message which permissions are\r\nmissing:\r\n```\r\nINFO [08-19|14:17:20.339] Checking Permissions on zone REMOVED-ZONE\r\nwrong permissions on zone REMOVED-ZONE: map[#dns_records:edit:false #dns_records:read:false #zone:edit:false #zone:read:true]\r\n```"
        },
        {
            "date": "2024-08-20 13:54:28",
            "message": "rpc: add timeout to rpc client Unsubscribe (#30318)\n\nFixes #30156\r\n\r\nThis adds a repro of the linked issue. I fixed it by adding a timeout\r\nwhen issuing the call to unsubscribe."
        },
        {
            "date": "2024-08-20 13:50:07",
            "message": "all: update to go version 1.23.0 (#30323)\n\nThis PR updates the version of go used in builds and docker to\r\n1.23.0. Release notes: https://go.dev/doc/go1.23\r\n\r\nMore importantly, following our policy of maintaining the last two\r\nversions (which now becomes 1.23 and 1.22), we can now make use of\r\nthe things that were introduced in 1.22: https://go.dev/doc/go1.22\r\n\r\nGo 1.22 makes two changes to \u201cfor\u201d loops.\r\n- each iteration creates new variables, \r\n- for loops may range over integers\r\n\r\nOther than that, some interesting library changes and other stuff."
        },
        {
            "date": "2024-08-20 13:33:28",
            "message": "build: attempt at reproducible builds (#30321)\n\nThis PR implements the conclusions from\r\nhttps://github.com/ethereum/go-ethereum/issues/28987#issuecomment-2296075028,\r\nthat is:\r\n\r\nBuilding with `--strip-all` as a ld-flag to the cgo linker, to remove\r\nsymbols. Without that, some spurious reference to a temporary file is\r\nincluded into the kzg-related library.\r\n\r\nBuilding with `--build-id=none`, to avoid putting a `build id` into the file."
        },
        {
            "date": "2024-08-20 12:31:06",
            "message": "core/vm: reuse Memory instances (#30137)\n\nThis PR adds a sync.Pool to reuse instances of Memory in EVMInterpreter."
        },
        {
            "date": "2024-08-20 12:06:00",
            "message": "core/rawdb: drop MigrateTable (#30331)\n\nThese are the leftovers from #24028."
        },
        {
            "date": "2024-08-20 10:26:35",
            "message": "accounts/abi: handle ABIs with contract type parameter (#30315)\n\nconvert parameter of type contract to the basic `address` type\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-08-19 21:32:15",
            "message": "eth/catalyst: ensure period zero mode leaves no pending txs in pool (#30264)\n\ncloses #29475, replaces #29657, #30104 \r\n\r\nFixes two issues. First is a deadlock where the txpool attempts to reorg, but can't complete because there are no readers left for the new txs subscription. Second, resolves a problem with on demand mode where txs may be left pending when there are more pending txs than block space.\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-08-19 18:06:57",
            "message": "gitignore: ignore upload-artefacts (#30325)\n\nOur `WriteArchive`, used by ci builder, creates files in the repo root,in order to upload. After we've built the amd64-builds, we create the uploads, and cause the repo to be flagged as dirty for the remaining builds.\r\n\r\nThis change fixes it by adding the artefacts to gitignore. Closes #30324"
        },
        {
            "date": "2024-08-19 11:35:41",
            "message": "build: remove mantic from ppa builds (#30322)\n\nremoves ppa-build for ubuntu `mantic`"
        },
        {
            "date": "2024-08-19 11:35:04",
            "message": "internal/build: include git-date on detached head (#30320)\n\nWhen we are building in detached head, we cannot easily obtain the same information as we can if we're in non-detached head.\r\n\r\nHowever, one thing we _can_ obtain is the git-hash and git-date. Currently, we omit to include the git-date into the build-info, which causes problem for reproducable builds which are on a detached head.\r\n\r\nThis change fixes it to include the date-info always."
        },
        {
            "date": "2024-08-16 14:41:44",
            "message": "vm: simplify error handling in `vm.EVM.create()` (#30292)\n\nTo allow all error paths in `vm.EVM.create()` to consume the necessary\r\ngas, there is currently a pattern of gating code on `if err == nil`\r\ninstead of returning as soon as the error occurs. The same behaviour can\r\nbe achieved by abstracting the gated code into a method that returns\r\nimmediately on error, improving readability and thus making it easier to\r\nunderstand and maintain."
        },
        {
            "date": "2024-08-16 14:33:41",
            "message": "core: remove withdrawal length check for state processor (#30286)\n\nThe withdrawal length is already verified by the beacon consensus package, so the check in the state processor is a duplicate."
        },
        {
            "date": "2024-08-16 12:39:57",
            "message": "beacon/light: handle endpoint URL more gracefully (#30306)\n\nblsync was failing if the light endpoint it was provided ended with a\n`/`. This change should handle the joining more gracefully."
        },
        {
            "date": "2024-08-15 20:14:42",
            "message": "eth: dial nodes from discv5 (#30302)\n\nHere I am adding a discv5 nodes source into the p2p dial iterator. It's\r\nan improved version of #29533.\r\n\r\nUnlike discv4, the discv5 random nodes iterator will always provide full\r\nENRs. This means we can apply filtering to the results and will only try\r\ndialing nodes which explictly opt into the eth protocol with a matching\r\nchain.\r\n\r\nI have also removed the dial iterator from snap. We don't have an\r\nofficial DNS list for snap anymore, and I doubt anyone else is running\r\none. While we could potentially filter for snap on discv5, there will be\r\nvery few nodes announcing it, and the extra iterator would just stall\r\nthe dialer.\r\n\r\n---------\r\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2024-08-15 14:36:35",
            "message": "eth/tracers/js: add coinbase addr to ctx (#30231)\n\nAdd coinbase address to javascript tracer context.\r\n\r\nThis PR adds the `coinbase` address to `jsTracer.ctx`, allowing access\r\nto the coinbase address (fee receipient) in custom JavaScript tracers.\r\n\r\nExample usage:\r\n\r\n```javascript\r\nresult: function(ctx) {\r\n  return toAddress(ctx.coinbase);\r\n}\r\n```\r\n\r\nThis change enables custom tracers to access coinbase address,\r\npreviously unavailable, enhancing their capabilities to match built-in\r\ntracers."
        },
        {
            "date": "2024-08-15 09:42:39",
            "message": "eth/ethconfig: remove LES server config (#30298)"
        },
        {
            "date": "2024-08-15 09:35:16",
            "message": "eth/fetcher: always expect transaction metadata in announcement (#30288)\n\nThis pull request drops the legacy transaction retrieval support from before\r\neth68, adding the restrictions that transaction metadata must be provided\r\nalong with the transaction announment."
        },
        {
            "date": "2024-08-15 08:11:03",
            "message": ".golangci.yml: remove lint warning for TxLookupLimit"
        },
        {
            "date": "2024-08-15 07:16:23",
            "message": "core: only compute state root once (#30299)\n\nThis PR refactors the genesis initialization a bit, s.th. we only\r\ncompute the blockhash once instead of twice as before (during hashAlloc\r\nand flushAlloc)\r\n\r\nThis will significantly reduce the amount of memory allocated during\r\ngenesis init\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-08-14 09:45:51",
            "message": "go.mod: upgrade to pebble v1.1.2 (#30297)\n\nIncludes a fix for MIPS32 support.\r\n\r\nPebble release:\r\nhttps://github.com/cockroachdb/pebble/releases/tag/v1.1.2\r\nKey fix for mips32:\r\nhttps://github.com/cockroachdb/pebble/commit/9f3904a705d60b9832febb6c6494183d92c8f556\r\n(also the only change from v1.1.1."
        },
        {
            "date": "2024-08-13 11:49:31",
            "message": "core/txpool/blobpool: fix error message (#30247)\n\nthe validation process only checks for 'less than', which is\r\ninconsistent with the error output"
        },
        {
            "date": "2024-08-12 18:46:15",
            "message": "build: run 'go mod tidy' check as part of lint (#30291)"
        },
        {
            "date": "2024-08-12 18:42:36",
            "message": "go.mod: remove github.com/julienschmidt/httprouter (#30290)"
        },
        {
            "date": "2024-08-12 12:19:35",
            "message": "params: begin v1.14.9 release cycle"
        },
        {
            "date": "2024-08-12 12:15:30",
            "message": "params: release go-ethereum v1.14.8 stable"
        },
        {
            "date": "2024-08-12 08:43:54",
            "message": "eth/protocols/snap: cleanup dangling account trie nodes due to incomplete storage (#30258)\n\nThis pull request fixes #30229.\r\n \r\nDuring snap sync, large storage will be split into several pieces and\r\nsynchronized concurrently. Unfortunately, the tradeoff is that the respective\r\nmerkle trie of each storage chunk will be incomplete due to the incomplete\r\nboundaries. The trie nodes on these boundaries will be discarded, and any\r\ndangling nodes on disk will also be removed if they fall on these paths,\r\nensuring the state healer won't be blocked.\r\n\r\nHowever, the dangling account trie nodes on the path from the root to the\r\nassociated account are left untouched. This means the dangling account trie\r\nnodes could potentially stop the state healing and break the assumption that the\r\nentire subtrie should exist if the subtrie root exists. We should consider the\r\naccount trie node as the ancestor of the corresponding storage trie node.\r\n\r\nIn the scenarios described in the above ticket, the state corruption could occur\r\nif there is a dangling account trie node while some storage trie nodes are\r\nremoved due to synchronization redo.\r\n\r\nThe fixing idea is pretty straightforward, the trie nodes on the path from root\r\nto account should all be explicitly removed if an incomplete storage trie\r\noccurs. Therefore, a `delete` operation has been added into `gentrie` to\r\nexplicitly clear the account along with all nodes on this path. The special\r\nthing is that it's a cross-trie clearing. In theory, there may be a dangling\r\nnode at any position on this account key and we have to clear all of them."
        },
        {
            "date": "2024-08-12 08:36:48",
            "message": "p2p/simulations: remove packages (#30250)\n\nLooking at the history of these packages over the past several years, there\r\nhaven't been any meaningful contributions or usages:\r\nhttps://github.com/ethereum/go-ethereum/commits/master/p2p/simulations?before=de6d5976794a9ed3b626d4eba57bf7f0806fb970+35\r\n\r\nAlmost all of the commits are part of larger refactors or low-hanging-fruit contributions.\r\nSeems like it's not providing much value and taking up team + contributor time."
        },
        {
            "date": "2024-08-10 10:44:31",
            "message": "beacon/engine, consensus/beacon: use params.MaximumExtraDataSize instead of hard-coded value (#29721)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2024-08-09 20:11:22",
            "message": "go.mod: update uint256 to 1.3.1 (#30280)\n\nRelease notes: https://github.com/holiman/uint256/releases/tag/v1.3.1"
        },
        {
            "date": "2024-08-08 16:58:08",
            "message": "cmd/evm: fix evm basefee (#30281)\n\nfixes #30279 -- previously we did not use the basefee from the genesis, and instead the defaults were used from `runtime.go/setDefaults`-function"
        },
        {
            "date": "2024-08-08 13:14:00",
            "message": "eth/downloader, core/types: take withdrawals-size into account in downloader queue (#30276)\n\nFixes a slight miscalculation in the downloader queue, which was not accurately taking block withdrawals into account when calculating the size of the items in the queue"
        },
        {
            "date": "2024-08-08 11:50:00",
            "message": "tests: fix TransactionTest to actually run (#30272)\n\nDue to https://github.com/ethereum/tests/releases/tag/v10.1, the format\r\nof the TransactionTest changed, but it was not properly addressed, causing the test\r\nto pass unexpectedly.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-08-08 11:47:43",
            "message": "build: upgrade -dlgo version to Go 1.22.6 (#30273)"
        },
        {
            "date": "2024-08-08 08:27:38",
            "message": "core/vm: use uint64 in memory for indices everywhere (#30252)\n\nConsistently use `uint64` for indices in `Memory` and drop lots of type\r\nconversions from `uint64` to `int64`.\r\n\r\n---------\r\n\r\nCo-authored-by: lmittmann <lmittmann@users.noreply.github.com>"
        },
        {
            "date": "2024-08-08 07:13:18",
            "message": "signer/core: improve performance of isPrimitiveTypeValid function (#30274) (#30277)\n\nPrecomputes valid primitive types into a map to use for validation, thus removing sprintf."
        },
        {
            "date": "2024-08-06 12:38:47",
            "message": "core/vm: improved stack swap performance (#30249)\n\nThis PR adds the methods `Stack.swap1..16()` that faster than `Stack.swap(1..16)`. \r\n\r\nCo-authored-by: lmittmann <lmittmann@users.noreply.github.com>"
        },
        {
            "date": "2024-08-06 12:14:37",
            "message": "ethclient: support networkID in hex format (#30263)\n\nSome chains\u2019 network IDs use hexadecimal such as Optimism (\"0xa\" instead\r\nof \"10\"), so when converting the string to big.Int, we cannot specify\r\nbase 10; otherwise, it will encounter errors with hexadecimal network\r\nIDs."
        },
        {
            "date": "2024-08-06 11:51:48",
            "message": "core/vm/runtime: ensure tracer benchmark calls `OnTxStart` (#30257)\n\nThe struct-based tracing added in #29189 seems to have caused an issue\r\nwith the benchmark `BenchmarkTracerStepVsCallFrame`. On master we see\r\nthe following panic:\r\n\r\n```console\r\nBenchmarkTracerStepVsCallFrame\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x2 addr=0x40 pc=0x1019782f0]\r\n\r\ngoroutine 37 [running]:\r\ngithub.com/ethereum/go-ethereum/eth/tracers/js.(*jsTracer).OnOpcode(0x140004c4000, 0x0, 0x10?, 0x989680, 0x1, {0x101ea2298, 0x1400000e258}, {0x1400000e258?, 0x14000155928?, 0x10173020c?}, ...)\r\n        /Users/matt/dev/go-ethereum/eth/tracers/js/goja.go:328 +0x140\r\ngithub.com/ethereum/go-ethereum/core/vm.(*EVMInterpreter).Run(0x14000307da0, 0x140003cc0d0, {0x0, 0x0, 0x0}, 0x0)\r\n ...\r\nFAIL    github.com/ethereum/go-ethereum/core/vm/runtime 0.420s\r\nFAIL\r\n```\r\n\r\nThe issue seems to be that `OnOpcode` expects that `OnTxStart` has\r\nalready been called to initialize the `env` value in the tracer. The JS\r\ntracer uses it in `OnOpcode` for the `GetRefund()` method.\r\n\r\nThis patch resolves the issue by reusing the `Call` method already\r\ndefined in `runtime_test.go` which correctly calls `OnTxStart`."
        },
        {
            "date": "2024-08-06 11:49:48",
            "message": "params: remove unused les parameters (#30268)"
        },
        {
            "date": "2024-08-05 17:14:22",
            "message": "eth/catalyst: get params.ExcessBlobGas but check with params.BlobGasUsed (#30267)\n\nSeems it is checked with the wrong argument\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2024-08-02 15:49:01",
            "message": "cmd/evm: don't overwrite sender account (#30259)\n\nFixes #30254 \r\n\r\nIt seems like the removed CreateAccount call is very old and not needed anymore.\r\nAfter removing it, setting a sender that does not exist in the state doesn't seem to cause\r\nan issue."
        },
        {
            "date": "2024-08-02 15:36:28",
            "message": "eth/downloader: gofmt (#30261)\n\nFixes a regression introduced in\r\nhttps://github.com/ethereum/go-ethereum/pull/30219"
        },
        {
            "date": "2024-08-02 04:44:03",
            "message": "internal/debug: remove memsize (#30253)\n\nRemoving because memsize will very likely be broken by Go 1.23. See\nhttps://github.com/fjl/memsize/issues/4"
        },
        {
            "date": "2024-08-01 18:09:04",
            "message": "accounts/abi/bind: add accessList support to base bond contract (#30195)\n\nAdding the correct accessList parameter when calling a contract can\r\nreduce gas consumption. However, the current version only allows adding\r\nthe accessList manually when constructing the transaction. This PR can\r\nprovide convenience for saving gas."
        },
        {
            "date": "2024-08-01 14:25:55",
            "message": "all: remove deprecated protobuf dependencies (#30232)\n\nThe package `github.com/golang/protobuf/proto` is deprecated in favor\r\n`google.golang.org/protobuf/proto`. We should update the codes to\r\nrecommended package.\r\n\r\nSigned-off-by: Icarus Wu <icaruswu66@qq.com>"
        },
        {
            "date": "2024-08-01 14:10:43",
            "message": "eth/downloader: correct sync mode logging to show old mode (#30219)\n\nThis PR fixes an issue in the setMode method of beaconBackfiller where the\r\nlog message was not displaying the previous mode correctly. The log message\r\nnow shows both the old and new sync modes."
        },
        {
            "date": "2024-08-01 14:06:43",
            "message": "miner: remove outdated comment (#30248)"
        },
        {
            "date": "2024-07-31 19:38:23",
            "message": "p2p/discover: schedule revalidation also when all nodes are excluded (#30239)\n\n## Issue\n\nIf `nextTime` has passed, but all nodes are excluded, `get` would return\n`nil` and `run` would therefore not invoke `schedule`. Then, we schedule\na timer for the past, as neither `nextTime` value has been updated. This\ncreates a busy loop, as the timer immediately returns.\n\n## Fix\n\nWith this PR, revalidation will be also rescheduled when all nodes are\nexcluded.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2024-07-30 13:31:27",
            "message": "p2p: fix flaky test TestServerPortMapping (#30241)\n\nThe test specifies `ListenAddr: \":0\"`, which means a random ephemeral\r\nport will be chosen for the TCP listener by the OS. Additionally, since\r\nno `DiscAddr` was specified, the same port that is chosen automatically\r\nby the OS will also be used for the UDP listener in the discovery UDP\r\nsetup. This sometimes leads to test failures if the TCP listener picks a\r\nfree TCP port that is already taken for UDP. By specifying `DiscAddr:\r\n\":0\"`, the UDP port will be chosen independently from the TCP port,\r\nfixing the random failure.\r\n\r\nSee issue #29830.\r\n\r\nVerified using\r\n```\r\ncd p2p\r\ngo test -c -race\r\nstress ./p2p.test -test.run=TestServerPortMapping\r\n...\r\n5m0s: 4556 runs so far, 0 failures\r\n```\r\n\r\nThe issue described above can technically lead to sporadic failures on\r\nsystems that specify a listen address via the `--port` flag of 0 while\r\nnot setting `--discovery.port`. Since the default is using port `30303`\r\nand using a random ephemeral port is likely not used much to begin with,\r\nnot addressing the root cause might be acceptable."
        },
        {
            "date": "2024-07-27 08:18:05",
            "message": "p2p/nat: return correct port for ExtIP NAT (#30234)\n\nReturn the actually requested external port instead of 0 in the\r\nAddMapping implementation for `--nat extip:<IP>`."
        },
        {
            "date": "2024-07-26 03:02:37",
            "message": "internal/ethapi: fix state override test (#30228)\n\nLooks like #30094 became a bit stale after #30185 was merged and now we\r\nhave a stale ref to a state override object causing CI to fail on\r\nmaster."
        },
        {
            "date": "2024-07-24 23:01:59",
            "message": "eth/tracers, internal/ethapi: remove unnecessary map pointer in state override (#30094)"
        },
        {
            "date": "2024-07-24 22:32:58",
            "message": "beacon/types, cmd/devp2p, p2p/enr: clean up uses of fmt.Errorf (#30182)"
        },
        {
            "date": "2024-07-24 12:32:28",
            "message": "triedb/pathdb: print out all trie owner and hash information (#30200)\n\nThis pull request explicitly prints out the full hash for debugging\r\npurpose."
        },
        {
            "date": "2024-07-23 12:54:35",
            "message": "core/state: fix SetStorage override behavior (#30185)\n\nThis pull request fixes the broken feature where the entire storage set is overridden.\r\n\r\nOriginally, the storage set override was achieved by marking the associated account\r\nas deleted, preventing access to the storage slot on disk. However, since #29520, this\r\nflag is also checked when accessing the account, rendering the account unreachable.\r\n\r\nA fix has been applied in this pull request, which re-creates a new state object with all\r\naccount metadata inherited."
        },
        {
            "date": "2024-07-23 12:44:01",
            "message": "cmd/utils: allow configurating blob pool from flags (#30203)\n\nCurrently, we have 3 flags to configure blob pool. However, we don't\r\nread these flags and set the blob pool configuration in eth config\r\naccordingly. This commit adds a function to check if these flags are\r\nprovided and set blob pool configuration based on them."
        },
        {
            "date": "2024-07-23 12:40:12",
            "message": "core/state: check db error after intermediate call (#30171)\n\nThis pull request adds an additional error check after statedb.IntermediateRoot,\r\nensuring that no errors occur during this call. This step is essential, as the call might\r\nencounter database errors."
        },
        {
            "date": "2024-07-23 12:07:06",
            "message": "core/txpool: use the cached address in ValidateTransactionWithState (#30208)\n\nThe address recover is executed and cached in ValidateTransaction already. It's\r\nexpected that the cached one is returned in ValidateTransaction. However,\r\ncurrently, we use the wrong function signer.Sender instead of types.Sender which\r\nwill do all the address recover again."
        },
        {
            "date": "2024-07-23 12:05:46",
            "message": "core/tracing: update latest release version (#30211)"
        },
        {
            "date": "2024-07-23 09:55:56",
            "message": "rpc: show more error detail for `invalidMessageError` (#30191)\n\nHere we add distinct error messages for network timeouts and JSON parsing errors.\r\nNote this specifically applies to HTTP connections serving a single RPC request.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-07-22 21:44:31",
            "message": "core/state: remove useless metrics (#30184)\n\nOriginally, these metrics were added to track the largest storage wiping.\r\nSince account self-destruction was deprecated with the Cancun fork,\r\nthese metrics have become meaningless."
        },
        {
            "date": "2024-07-22 21:38:04",
            "message": "rpc: use stable object in notifier test (#30193)\n\nThis makes the test resilient to changes of types.Header -- otherwise the test needs to be\r\nupdated each time the header structure is modified."
        },
        {
            "date": "2024-07-22 07:58:53",
            "message": "eth/gasprice: remove default from config (#30080)\n\n* eth/gasprice: remove default from config\r\n\r\n* eth/gasprice: sanitize startPrice"
        },
        {
            "date": "2024-07-22 03:40:14",
            "message": "ethdb: remove snapshot (#30189)"
        },
        {
            "date": "2024-07-18 10:38:42",
            "message": "go.mod: upgrade to btcsuite/btcd/btcec v2.3.4 (#30181)"
        },
        {
            "date": "2024-07-18 09:09:02",
            "message": "p2p/discover: remove type encPubkey (#30172)\n\nThe pubkey type was moved to package v4wire a long time ago. Remaining uses of\r\nencPubkey were probably left in due to laziness."
        },
        {
            "date": "2024-07-16 13:17:58",
            "message": "core/rawdb, triedb, cmd: create an isolated disk namespace for verkle (#30105)\n\n* core, triedb/pathdb, cmd: define verkle state ancient store\r\n\r\n* core/rawdb, triedb: add verkle namespace in pathdb"
        },
        {
            "date": "2024-07-16 13:06:22",
            "message": "core/state: don't compute verkle storage tree roots (#30130)"
        },
        {
            "date": "2024-07-16 11:42:30",
            "message": "core/txpool/legacypool: use maps.Keys and maps.Copy (#30091)"
        },
        {
            "date": "2024-07-16 10:52:19",
            "message": "trie, triedb: remove unnecessary child resolver interface (#30167)"
        },
        {
            "date": "2024-07-16 09:47:11",
            "message": "eth/catalyst: fix (*SimulatedBeacon).AdjustTime() conversion (#30138)"
        },
        {
            "date": "2024-07-15 13:26:58",
            "message": "all: simplify tests using t.TempDir() (#30150)"
        },
        {
            "date": "2024-07-15 12:29:13",
            "message": "SECURITY.md: correct PGP key block formatting (#30123)"
        },
        {
            "date": "2024-07-15 10:09:32",
            "message": "core/types: don't modify signature V when reading large chainID (#30157)"
        },
        {
            "date": "2024-07-15 09:36:21",
            "message": "cmd/utils: fix typo in flag description (#30127)"
        },
        {
            "date": "2024-07-15 08:15:35",
            "message": "p2p: fix ip change log parameter (#30158)"
        },
        {
            "date": "2024-07-15 07:05:59",
            "message": "trie: add RollBackAccount function to verkle trees (#30135)"
        },
        {
            "date": "2024-07-15 02:28:06",
            "message": "core/txpool/blobpool: use nonce from argument instead of tx.Nonce() (#30148)\n\nThis does not change the behavior here as the nonce in the argument is\r\ntx.Nonce(). This commit helps to make the function easier to read and avoid\r\ncapturing the tx in the function."
        },
        {
            "date": "2024-07-11 14:09:24",
            "message": "core/state: fix prefetcher for verkle (#29760)"
        },
        {
            "date": "2024-07-11 12:24:09",
            "message": "params: begin v1.14.8 release cycle"
        },
        {
            "date": "2024-07-11 12:23:27",
            "message": "params: go-ethereum v1.14.7 stable"
        },
        {
            "date": "2024-07-11 07:28:27",
            "message": "core/txpool/blobpool: revert #29989, WLock on Nonce (#30142)"
        },
        {
            "date": "2024-07-09 12:19:55",
            "message": "eth/catalyst: fix params in failure log (#30131)"
        },
        {
            "date": "2024-07-09 12:17:43",
            "message": "go.mod: update uint256 to 1.3.0 (#30134)"
        },
        {
            "date": "2024-07-09 11:19:25",
            "message": "crypto: remove hardcoded value for secp256k1.N (#30126)"
        },
        {
            "date": "2024-07-03 10:11:43",
            "message": "build: upgrade -dlgo version to Go 1.22.5 (#30112)"
        },
        {
            "date": "2024-07-02 15:45:10",
            "message": "Merge remote-tracking branch 'gballet/release-1.14.6'"
        },
        {
            "date": "2024-07-02 12:59:41",
            "message": "params: begin v1.14.7 release cycle"
        },
        {
            "date": "2024-07-02 12:58:42",
            "message": "params: release Geth v1.14.6"
        },
        {
            "date": "2024-07-02 12:58:15",
            "message": "accounts/abi: embed Go template instead of string literal (#30098)\n\nrefactor(accounts/abi): use embed pkg to split default template to file"
        },
        {
            "date": "2024-07-01 19:57:04",
            "message": "core/state: fix inconsistent verkle test error messages (#29753)"
        },
        {
            "date": "2024-07-01 15:16:15",
            "message": "build:  add check for stale generated files (#30037)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-07-01 14:18:38",
            "message": "accounts/usbwallet/trezor: upgrade to generate with protoc 27.1 (#30058)"
        },
        {
            "date": "2024-06-28 18:37:58",
            "message": "rpc: truncate call error data logs (#30028)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-06-28 16:08:31",
            "message": "all: replace division with right shift if possible (#29911)"
        },
        {
            "date": "2024-06-28 16:05:57",
            "message": "cmd/evm/internal/t8ntool: log writeTraceResult error message (#30038)"
        },
        {
            "date": "2024-06-28 13:51:27",
            "message": "core/txpool/blobpool: improve newPriceHeap function (#30050)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-06-28 13:15:54",
            "message": "triedb/pathdb: fix flaky test in pathdb (#29901)"
        },
        {
            "date": "2024-06-27 12:30:39",
            "message": "trie: relocate state execution logic into pathdb package (#29861)"
        },
        {
            "date": "2024-06-27 09:29:50",
            "message": "eth/tracers,trie: remove unnecessary check (#30071)"
        },
        {
            "date": "2024-06-25 13:45:33",
            "message": "trie/trienode: remove unnecessary check in Summary (#30047)"
        },
        {
            "date": "2024-06-25 12:19:04",
            "message": "core/txpool/blobpool: avoid use *map as parameter. (#30048)"
        },
        {
            "date": "2024-06-25 11:48:08",
            "message": "all: stateless witness builder and (self-)cross validator (#29719)\n\n* all: add stateless verifications\r\n\r\n* all: simplify witness and integrate it into live geth\r\n\r\n---------\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
        },
        {
            "date": "2024-06-25 09:30:58",
            "message": "internal/debug: remove unnecessary log level assignment (#30044)\n\nLog level is specified in L259 so it's unnecessary to specify it for handlers (L234, L236)."
        },
        {
            "date": "2024-06-25 09:24:33",
            "message": "accounts/keystore: use t.TempDir in test (#30052)"
        },
        {
            "date": "2024-06-25 09:16:27",
            "message": ".github: add lightclient as codeowner to relevant packages (#30062)"
        },
        {
            "date": "2024-06-25 09:14:12",
            "message": "cmd/blsync: use debug.Setup for logging configuration (#30065)"
        },
        {
            "date": "2024-06-21 13:29:07",
            "message": "p2p/discover: improve flaky revalidation tests (#30023)"
        },
        {
            "date": "2024-06-21 07:42:43",
            "message": "Revert \"core/state/snapshot: tiny fixes\" (#30039)\n\nRevert \"core/state/snapshot: tiny fixes (#29995)\"\r\n\r\nThis reverts commit e0e45dbc32501d7917edb07083aa1c34ab7b0fb4."
        },
        {
            "date": "2024-06-21 01:51:03",
            "message": "core/state/snapshot: tiny fixes (#29995)"
        },
        {
            "date": "2024-06-20 12:08:54",
            "message": "p2p/rlpx: 2KB maximum size for handshake messages (#30029)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-06-20 03:47:29",
            "message": "trie/trienode: avoid unnecessary copy (#30019)\n\n* avoid unnecessary copy\r\n\r\n* delete the never used function ProofList\r\n\r\n* eth/protocols/snap, trie/trienode: polish the code\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-06-19 12:46:57",
            "message": "core/txpool/blobpool: change rw-lock to r-lock (#29989)"
        },
        {
            "date": "2024-06-19 09:06:52",
            "message": "common: using `ParseUint` instead of `ParseInt` (#30020)\n\nSince Decimal is defined as unsiged `uint64`, we should use `strconv.ParseUint` instead of `strconv.ParseInt` during unmarshalling.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-06-19 07:58:22",
            "message": "trie: don't reset tracer at the end of Commit (#30024)\n\n* trie: don't reset tracer at the end of Commit\r\n\r\n* Update trie.go\r\n\r\n---------\r\n\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-06-19 06:47:17",
            "message": "cmd/geth, ethdb/pebble: improve database statistic (#29948)\n\n* cmd/geth, ethdb/pebble: polish method naming and code comment\r\n\r\n* implement db stat for pebble\r\n\r\n* cmd, core, ethdb, internal, trie: remove db property selector\r\n\r\n* cmd, core, ethdb: fix function description\r\n\r\n---------\r\n\r\nCo-authored-by: prpeh <prpeh@proton.me>\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-06-18 02:52:49",
            "message": "core/state/snapshot: acquire the lock on Release (#30011)\n\n* core/state/snapshot: acquire the lock on release\r\n\r\n* core/state/snapshot: only acquire read-lock when iterating"
        },
        {
            "date": "2024-06-17 19:53:00",
            "message": "common/math: fix out of bounds access in json unmarshalling (#30014)\n\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-06-17 15:09:29",
            "message": "triedb/pathdb: use maps.Clone and maps.Keys (#29985)"
        },
        {
            "date": "2024-06-17 09:42:41",
            "message": "trie, triedb/pathdb: prealloc capacity for map and slice (#29986)"
        },
        {
            "date": "2024-06-17 09:03:27",
            "message": "log: fix some functions comments (#29907)\n\nupdates some docstrings\r\n---------\r\n\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-06-17 08:15:27",
            "message": "go.mod: update Pebble to sort out a deleted upstream dependency (#30010)"
        },
        {
            "date": "2024-06-17 07:42:39",
            "message": "core/state/snapshot: add a missing lock (#30001)\n\n* upgrade lock usage\r\n\r\n* revert unnecessary change"
        },
        {
            "date": "2024-06-14 06:52:46",
            "message": "trie/triedb: add Reader to backend interface (#29988)"
        },
        {
            "date": "2024-06-12 14:38:19",
            "message": "beacon/light: fix shutdown issues (#29946)\n\n* beacon/light/request: add server test for event after unsubscribe\n\n* beacon/light/api: fixed double stream.Close()\n\n* beacon/light/request: add checks for nil event callback function\n\n* beacon/light/request: unlock server mutex while unsubscribing from parent"
        },
        {
            "date": "2024-06-12 09:23:16",
            "message": "core/state, eth/protocols, trie, triedb/pathdb:  remove unused error from trie Commit (#29869)\n\n* core/state, eth/protocols, trie, triedb/pathdb:  remove unused error return from trie Commit\r\n\r\n* move set back to account-trie-update block scoping for easier readability\r\n\r\n* address review\r\n\r\n* undo tests submodule change\r\n\r\n* trie:  panic if BatchSerialize returns an error in Verkle trie Commit\r\n\r\n* trie: verkle comment nitpicks\r\n\r\n---------\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
        },
        {
            "date": "2024-06-12 07:46:36",
            "message": "accounts: avoid duplicate regex compilation (#29943)\n\n* fix: Optimize regular initialization\r\n\r\n* modify var name\r\n\r\n* variable change to private types"
        },
        {
            "date": "2024-06-12 07:45:42",
            "message": "all: fix inconsistent receiver name and add lint rule for it (#29974)\n\n* .golangci.yml: enable check for consistent receiver name\r\n\r\n* beacon/light/sync: fix receiver name\r\n\r\n* core/txpool/blobpool: fix receiver name\r\n\r\n* core/types: fix receiver name\r\n\r\n* internal/ethapi: use consistent receiver name 'api' for handler object\r\n\r\n* signer/core/apitypes: fix receiver name\r\n\r\n* signer/core: use consistent receiver name 'api' for handler object\r\n\r\n* log: fix receiver name"
        },
        {
            "date": "2024-06-11 17:41:17",
            "message": "p2p/simulations: update doc of HTTP endpoints (#29894)"
        },
        {
            "date": "2024-06-11 13:57:41",
            "message": ".github: disable cache in actions run (#29926)"
        },
        {
            "date": "2024-06-11 13:27:35",
            "message": "cmd/devp2p: fix log output (#29972)"
        },
        {
            "date": "2024-06-11 12:34:56",
            "message": "ethconfig: regenerate config (#29970)"
        },
        {
            "date": "2024-06-11 08:24:44",
            "message": "core/state: rename all the AccessList receivers to 'al' (#29921)\n\nrename all the receivers to 'al'"
        },
        {
            "date": "2024-06-11 08:10:07",
            "message": "cmd, core: prefetch reads too from tries if requested (#29807)\n\n* cmd/utils, consensus/beacon, core/state: when configured via stub  flag: prefetch all reads from account/storage tries, terminate prefetcher synchronously.\r\n\r\n* cmd, core/state: fix nil panic, fix error handling, prefetch nosnap too\r\n\r\n* core/state: expand prefetcher metrics for reads and writes separately\r\n\r\n* cmd/utils, eth: fix noop collect witness flag\r\n\r\n---------\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
        },
        {
            "date": "2024-06-10 12:55:47",
            "message": "core, rlp: remove duplicated words (#29964)"
        },
        {
            "date": "2024-06-10 05:58:50",
            "message": "core: initialize developer genesis beacon root contract with 0 balance (#29963)"
        },
        {
            "date": "2024-06-09 20:50:22",
            "message": "p2p: use package slices to sort in PeersInfo (#29957)"
        },
        {
            "date": "2024-06-09 20:47:51",
            "message": "p2p/discover: add missing lock when calling tab.handleAddNode (#29960)"
        },
        {
            "date": "2024-06-08 11:04:16",
            "message": "cmd/geth: remove unused param (#29952)"
        },
        {
            "date": "2024-06-08 11:00:53",
            "message": "cmd/clef, cmd/evm: fix markdown issues in README (#29954)"
        },
        {
            "date": "2024-06-05 17:48:22",
            "message": "go.mod : tidy"
        },
        {
            "date": "2024-06-07 12:04:18",
            "message": "cmd/evm/internal/t8ntool: remove unused parameter (#29930)"
        },
        {
            "date": "2024-06-06 13:23:44",
            "message": "params: begin v1.14.6 release cycle"
        },
        {
            "date": "2024-06-06 13:17:53",
            "message": "params: release Geth v1.14.5"
        },
        {
            "date": "2024-06-06 13:15:22",
            "message": "p2p/discover: unwrap 4-in-6 UDP source addresses (#29944)\n\nFixes an issue where discovery responses were not recognized."
        },
        {
            "date": "2024-06-06 07:56:41",
            "message": "p2p/netutil: fix comments (#29942)"
        },
        {
            "date": "2024-06-06 07:55:38",
            "message": "rlp: no need to repeat called len method (#29936)\n\nrlp: no need to repeat calling len"
        },
        {
            "date": "2024-06-06 07:52:57",
            "message": "build: upgrade -dlgo version to Go 1.22.4 (#29938)"
        },
        {
            "date": "2024-06-05 17:31:04",
            "message": "p2p: use netip.Addr where possible (#29891)\n\nenode.Node was recently changed to store a cache of endpoint information. The IP address in the cache is a netip.Addr. I chose that type over net.IP because it is just better. netip.Addr is meant to be used as a value type. Copying it does not allocate, it can be compared with ==, and can be used as a map key.\r\n\r\nThis PR changes most uses of Node.IP() into Node.IPAddr(), which returns the cached value directly without allocating.\r\nWhile there are still some public APIs left where net.IP is used, I have converted all code used internally by p2p/discover to the new types. So this does change some public Go API, but hopefully not APIs any external code actually uses.\r\n\r\nThere weren't supposed to be any semantic differences resulting from this refactoring, however it does introduce one: In package p2p/netutil we treated the 0.0.0.0/8 network (addresses 0.x.y.z) as LAN, but netip.Addr.IsPrivate() doesn't. The treatment of this particular IP address range is controversial, with some software supporting it and others not. IANA lists it as special-purpose and invalid as a destination for a long time, so I don't know why I put it into the LAN list. It has now been marked as special in p2p/netutil as well."
        },
        {
            "date": "2024-06-05 13:05:00",
            "message": "core/rawdb: remove unused deriveLogFields (#29913)\n\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-06-05 09:07:37",
            "message": "core/state, eth/tracers: fix typos (#29932)"
        },
        {
            "date": "2024-06-05 08:20:35",
            "message": "params: begin v1.14.5 release cycle"
        },
        {
            "date": "2024-06-05 08:06:37",
            "message": "params: release Geth v1.14.4"
        },
        {
            "date": "2024-06-04 12:51:34",
            "message": "core/state: avoid data race (#29924)"
        },
        {
            "date": "2024-06-04 07:59:41",
            "message": "internal/ethapi: recap higher args.Gas with block GasLimit in DoEstimateGas (#29738)\n\n* internal/ethapi: recap higher args.Gas with block GasLimit in DoEstimateGas\r\n\r\n* internal/ethapi: fix gas estimator capping code\r\n\r\n* internal/ethapi: fix test\r\n\r\n* fix goimports lint (remove space)\r\n\r\n---------\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
        },
        {
            "date": "2024-06-04 03:17:26",
            "message": "trie: iterate values pre-order and fix seek behavior (#27838)\n\nThis pull request fixes the pre-order trie traversal by defining \r\na more accurate iterator order and path comparison rule.\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-06-04 03:12:24",
            "message": "core/state: prefetch account trie while starting a prefetcher (#29919)\n\nAlways prefetch the account trie while starting the prefetcher.\r\n\r\nCo-authored-by: steven <steven@stevendeMacBook-Pro.local>\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-06-03 12:51:04",
            "message": "core/rawdb,eth/protocols,p2p: prealloc slice size (#29893)\n\nchore: prealloc slice size"
        },
        {
            "date": "2024-06-03 12:50:24",
            "message": "log: fix a typo (#29883)\n\nlogger"
        },
        {
            "date": "2024-06-03 12:38:08",
            "message": "beacon/engine: prealloc capacity for map and slice (#29903)\n\n* prealloc capacity for map and slice\r\n\r\n* revert unnecessary change"
        },
        {
            "date": "2024-06-03 12:31:23",
            "message": "cmd/evm/internal/t8ntool: fix a typo (#29887)\n\n* i8ntool: fix a typo\r\n\r\n* cmd/evm/internal/t8ntool: fix typo typo\r\n\r\n---------\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
        },
        {
            "date": "2024-06-03 11:17:12",
            "message": "core/state: introduce stateupdate structure (#29530)\n\n* core/state: introduce stateUpate structure\r\n\r\n* core/state: remove outdated function description\r\n\r\n* core/state: address comments"
        },
        {
            "date": "2024-06-03 10:30:27",
            "message": "Supply delta live tracer (#29347)\n\nIntroduces the first built-in live tracer. The supply tracer tracks ETH supply changes across blocks\r\nand writes the output to disk. This will need to be enabled through CLI using the `--vmtrace supply` flag.\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2024-05-31 16:40:09",
            "message": "CODEOWNERS: @s1na owns core/tracing (#29899)\n\nUpdate CODEOWNERS"
        },
        {
            "date": "2024-05-31 07:39:40",
            "message": "miner: lower default min miner tip from 1 gwei to 0.001 gwei (#29895)"
        },
        {
            "date": "2024-05-31 07:25:49",
            "message": "common/math: rename variable name `int` to `n` (#29890)\n\n* chore: rename variable name `int` to `in`\r\n\r\n* chore: rename variable name `int` to `n`"
        },
        {
            "date": "2024-05-30 16:22:23",
            "message": "eth/gasprice: add comment to constant (#29892)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-05-30 14:24:16",
            "message": "crypto/secp256k1: change receiver variable name to lowercase (#29889)"
        },
        {
            "date": "2024-05-30 13:23:04",
            "message": "ethdb: remove unnecessary function wrapper (#29888)"
        },
        {
            "date": "2024-05-29 13:56:52",
            "message": "eth/catalyst: ensure TxPool is synced in Fork (#29876)\n\nThis should fix an occasional test failure in ethclient/simulated.TestForkResendTx.\r\nInspection of logs revealed the cause of the failure to be that the txpool was not done\r\nreorganizing by the time Fork is called."
        },
        {
            "date": "2024-05-29 13:55:51",
            "message": "cmd/devp2p: fix node.TCP -> node.UDP (#29879)"
        },
        {
            "date": "2024-05-29 13:31:27",
            "message": "build: upgrade to golangci-lint v1.59.0 (#29875)"
        },
        {
            "date": "2024-05-29 13:02:26",
            "message": "p2p/discover: refactor node and endpoint representation (#29844)\n\nHere we clean up internal uses of type discover.node, converting most code to use\r\nenode.Node instead. The discover.node type used to be the canonical representation of\r\nnetwork hosts before ENR was introduced. Most code worked with *node to avoid conversions\r\nwhen interacting with Table methods. Since *node also contains internal state of Table and\r\nis a mutable type, using *node outside of Table code is prone to data races. It's also\r\ncleaner not having to wrap/unwrap *enode.Node all the time.\r\n\r\ndiscover.node has been renamed to tableNode to clarify its purpose.\r\n\r\nWhile here, we also change most uses of net.UDPAddr into netip.AddrPort. While this is\r\ntechnically a separate refactoring from the *node -> *enode.Node change, it is more\r\nconvenient because *enode.Node handles IP addresses as netip.Addr. The switch to package\r\nnetip in discovery would've happened very soon anyway.\r\n\r\nThe change to netip.AddrPort stops at certain interface points. For example, since package\r\np2p/netutil has not been converted to use netip.Addr yet, we still have to convert to\r\nnet.IP/net.UDPAddr in a few places."
        },
        {
            "date": "2024-05-29 12:44:14",
            "message": "core/state: fix typo in comment (#29639)"
        },
        {
            "date": "2024-05-29 12:43:07",
            "message": "eth/downloader, eth/tracer: fix typos in comments (#29707)"
        },
        {
            "date": "2024-05-29 10:24:10",
            "message": "all: fix typos in comments (#29873)\n\nfix using `a` & `the` simutaneously"
        },
        {
            "date": "2024-05-29 10:12:57",
            "message": "accounts: fix TestUpdateKeyfileContents (#29867)\n\nCreate the directory before NewKeyStore. This ensures the watcher successfully starts on\r\nthe first attempt, and waitWatcherStart functions as intended."
        },
        {
            "date": "2024-05-29 10:11:18",
            "message": "p2p/nodestate: remove unused package (#29872)"
        },
        {
            "date": "2024-05-29 10:09:58",
            "message": "p2p/simulations: remove stale information about docker adapter (#29874)"
        },
        {
            "date": "2024-05-29 08:30:25",
            "message": "go.mod: update a number of dependencies (#29763)\n\n* deps: update go-winio\r\n\r\n* deps: update fastcache\r\n\r\n* deps: update golang-set\r\n\r\n* update fatih/color\r\n\r\n* update natefinch/lumberjack.v2"
        },
        {
            "date": "2024-05-28 19:30:17",
            "message": "p2p/discover: fix update logic in handleAddNode (#29836)\n\nIt seems the semantic differences between addFoundNode and addInboundNode were lost in\r\n#29572. My understanding is addFoundNode is for a node you have not contacted directly\r\n(and are unsure if is available) whereas addInboundNode is for adding nodes that have\r\ncontacted the local node and we can verify they are active.\r\n\r\nhandleAddNode seems to be the consolidation of those two methods, yet it bumps the node in\r\nthe bucket (updating it's IP addr) even if the node was not an inbound. This PR fixes\r\nthis. It wasn't originally caught in tests like TestTable_addSeenNode because the\r\nmanipulation of the node object actually modified the node value used by the test.\r\n\r\nNew logic is added to reject non-inbound updates unless the sequence number of the\r\n(signed) ENR increases. Inbound updates, which are published by the updated node itself,\r\nare always accepted. If an inbound update changes the endpoint, the node will be\r\nrevalidated on an expedited schedule.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-05-28 17:54:55",
            "message": "core/state: remove unused error from prefetcher trie method (#29768)\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-05-28 17:52:08",
            "message": " eth, eth/downloader: remove references to LightChain, LightSync (#29711)\n\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-05-28 16:13:03",
            "message": "p2p/discover: fix crash when revalidated node is removed (#29864)\n\nIn #29572, I assumed the revalidation list that the node is contained in could only ever\r\nbe changed by the outcome of a revalidation request. But turns out that's not true: if the\r\nnode gets removed due to FINDNODE failure, it will also be removed from the list it is in.\r\nThis causes a crash.\r\n\r\nThe invariant is: while node is in table, it is always in exactly one of the two lists. So\r\nit seems best to store a pointer to the current list within the node itself."
        },
        {
            "date": "2024-05-28 12:41:11",
            "message": "core/rawdb, triedb/pathdb: fix freezer read-only option (#29823)"
        },
        {
            "date": "2024-05-28 12:16:45",
            "message": "cmd/geth: update testdata (vulncheck) (#29714)"
        },
        {
            "date": "2024-05-28 12:10:27",
            "message": "core/state: fix typos in comments (#29767)"
        },
        {
            "date": "2024-05-28 11:45:16",
            "message": "core/vm/runtime: set random to enable merge-opcodes (#29799)"
        },
        {
            "date": "2024-05-28 11:44:40",
            "message": "all: improve some error strings (#29842)"
        },
        {
            "date": "2024-05-28 11:12:46",
            "message": "eth/tracers: clear error for non-reverting pre-homestead fail (#29824)"
        },
        {
            "date": "2024-05-27 14:26:55",
            "message": "eth/downloader: fix flaky test (#29852)\n\nThis pull request fixes the flay test TestSkeletonSyncRetrievals. In this test, we first\r\ntrigger a sync cycle and wait for it to meet certain expectations. We then inject a new\r\nhead and potentially also a new peer, then perform another final sync. The test now\r\nperforms the newPeer addition before launching the final sync, and waits a bit for that\r\npeer to get registered. This fixes the logic race that made the test fail sometimes.\r\n\r\nCo-authored-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>"
        },
        {
            "date": "2024-05-27 11:42:07",
            "message": "miner: fix TestBuildPayload sporadic failure (#29853)\n\nminer: fix TestBuildPayload sporadic failure\r\n\r\nCo-authored-by: steven <steven@stevendeMacBook-Pro.local>"
        },
        {
            "date": "2024-05-27 06:39:39",
            "message": "core, eth/protocols/snap, internal/ethapi: remove redundant types (#29841)"
        },
        {
            "date": "2024-05-27 06:34:53",
            "message": "metrics: fix function comment (#29843)"
        },
        {
            "date": "2024-05-26 09:54:37",
            "message": "core/types: clarify set inclusion in comments (#29839)"
        },
        {
            "date": "2024-05-24 09:34:30",
            "message": "metrics: add test for `SampleSnapshot.Sum` (#29831)"
        },
        {
            "date": "2024-05-24 09:33:19",
            "message": "p2p: fix typos (#29828)"
        },
        {
            "date": "2024-05-24 07:20:05",
            "message": "metrics: fix flaky test`TestExpDecaySampleNanosecondRegression` (#29832)"
        },
        {
            "date": "2024-05-23 21:17:51",
            "message": "p2p/enode: fix TCPEndpoint (#29827)"
        },
        {
            "date": "2024-05-23 12:27:03",
            "message": "p2p/enode: fix endpoint determination for IPv6 (#29801)\n\nenode.Node has separate accessor functions for getting the IP, UDP port and TCP port.\r\nThese methods performed separate checks for attributes set in the ENR.\r\n\r\nWith this PR, the accessor methods will now return cached information, and the endpoint is\r\ndetermined when the node is created. The logic to determine the preferred endpoint is now\r\nmore correct, and considers how 'global' each address is when both IPv4 and IPv6 addresses\r\nare present in the ENR."
        },
        {
            "date": "2024-05-23 12:26:09",
            "message": "p2p/discover: improved node revalidation (#29572)\n\nNode discovery periodically revalidates the nodes in its table by sending PING, checking\r\nif they are still alive. I recently noticed some issues with the implementation of this\r\nprocess, which can cause strange results such as nodes dropping unexpectedly, certain\r\nnodes not getting revalidated often enough, and bad results being returned to incoming\r\nFINDNODE queries.\r\n\r\nIn this change, the revalidation process is improved with the following logic:\r\n\r\n- We maintain two 'revalidation lists' containing the table nodes, named 'fast' and 'slow'.\r\n- The process chooses random nodes from each list on a randomized interval, the interval being\r\n  faster for the 'fast' list, and performs revalidation for the chosen node.\r\n- Whenever a node is newly inserted into the table, it goes into the 'fast' list.\r\n  Once validation passes, it transfers to the 'slow' list. If a request fails, or the\r\n  node changes endpoint, it transfers back into 'fast'.\r\n- livenessChecks is incremented by one for successful checks. Unlike the old implementation,\r\n  we will not drop the node on the first failing check. We instead quickly decay the\r\n  livenessChecks give it another chance.\r\n- Order of nodes in bucket doesn't matter anymore.\r\n\r\nI am also adding a debug API endpoint to dump the node table content.\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-05-23 10:34:34",
            "message": "metrics: fix out of range error message (#29821)"
        },
        {
            "date": "2024-05-23 09:56:32",
            "message": "Makefile: add fmt, update help (#29777)"
        },
        {
            "date": "2024-05-23 08:55:54",
            "message": "eth/tracers: fix json logger for evm blocktest (#29795)"
        },
        {
            "date": "2024-05-23 08:41:51",
            "message": "internal/ethapi: fix typos (#29784)\n\nFix typos in api.go"
        },
        {
            "date": "2024-05-21 16:27:36",
            "message": "eth/tracers: fix basefee context for traceBlock (#29811)\n\nThis fixes an issue for `debug_traceBlock*` methods where the BASEFEE opcode was returning always 0. This caused the method return invalid results.\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2024-05-21 11:53:34",
            "message": "trie: update the `valid` function comments (#29809)"
        },
        {
            "date": "2024-05-16 09:58:35",
            "message": "trie, eth/protocols/snap: sanitize the committed node data (#29485)"
        },
        {
            "date": "2024-05-15 12:23:24",
            "message": "core: move balanceCheck addition in buyGas (#29762)\n\nIt's a bit confusing to add msg.value into the balanceCheck within the conditional.\r\nNo impact on block validation since GasFeeCap is always set when processing transactions."
        },
        {
            "date": "2024-05-14 13:46:11",
            "message": ".github: upgrade to action versions with node20 (#29776)\n\n* github: upgrade checkout action to version with node20\r\n\r\n* Update go.yml\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-05-14 13:04:32",
            "message": "core: deploy EIP-4788 contract in dev mode genesis (#29655)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-05-14 12:54:49",
            "message": "core/state: remove useless operation (#29769)"
        },
        {
            "date": "2024-05-13 13:34:29",
            "message": "tests: update tests (#29730)"
        },
        {
            "date": "2024-05-13 12:47:45",
            "message": "core/state: blocking prefetcher on term signal, parallel updates (#29519)\n\n* core/state: trie prefetcher change: calling trie() doesn't stop the associated subfetcher\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>\r\n\r\n* core/state: improve prefetcher\r\n\r\n* core/state: restore async prefetcher stask scheduling\r\n\r\n* core/state: finish prefetching async and process storage updates async\r\n\r\n* core/state: don't use the prefetcher for missing snapshot items\r\n\r\n* core/state: remove update concurrency for Verkle tries\r\n\r\n* core/state: add some termination checks to prefetcher async shutdowns\r\n\r\n* core/state: differentiate db tries and prefetched tries\r\n\r\n* core/state: teh teh teh\r\n\r\n---------\r\n\r\nCo-authored-by: Jared Wasinger <j-wasinger@hotmail.com>\r\nCo-authored-by: Martin HS <martin@swende.se>\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-05-10 18:13:11",
            "message": "cmd, core, params, trie: add verkle access witness gas charging (#29338)\n\nImplements some of the changes required to charge and do gas accounting in verkle testnet."
        },
        {
            "date": "2024-05-10 17:48:14",
            "message": "core, beacon, ethdb: fix typos (#29748)\n\n* core, beacon, ethdb: fix typos\r\n\r\n* revert file that can't be changed"
        },
        {
            "date": "2024-05-10 17:44:07",
            "message": "event: fix typo (#29749)\n\ntypo: of -> or"
        },
        {
            "date": "2024-05-10 07:57:38",
            "message": "core/state: remove slot dirtyness if it's set back to origin value (#29731)\n\n* core/state: remove slot dirtiness if it's set back to origin value\r\n\r\n* core/state: suggestion from martin"
        },
        {
            "date": "2024-05-09 14:07:32",
            "message": "params: gofmt"
        },
        {
            "date": "2024-05-09 14:05:42",
            "message": ".travis.yml: disable normal unit tests in cron job (#29746)"
        },
        {
            "date": "2024-05-09 10:40:37",
            "message": "params: begin v1.14.4 release cycle"
        },
        {
            "date": "2024-05-09 10:34:54",
            "message": "params: release go-ethereum v1.14.3 stable"
        },
        {
            "date": "2024-05-08 18:46:54",
            "message": ".travis.yml: restore PPA condition and bump timeouts (#29742)"
        },
        {
            "date": "2024-05-08 18:28:05",
            "message": ".travis.yml: enable PPA upload on push and fix apt-get command (#29741)"
        },
        {
            "date": "2024-05-08 14:27:44",
            "message": "params: begin v1.14.3 release cycle"
        },
        {
            "date": "2024-05-08 14:26:01",
            "message": "params: release go-ethereum v1.14.2 stable"
        },
        {
            "date": "2024-05-08 12:34:58",
            "message": ".travis.yml: fix package install on PPA builder"
        },
        {
            "date": "2024-05-08 12:30:18",
            "message": "params: begin v1.14.2 release cycle"
        },
        {
            "date": "2024-05-08 12:28:40",
            "message": "params: release go-ethereum v1.14.1 stable"
        },
        {
            "date": "2024-05-08 09:33:07",
            "message": ".travis.yml: fix apt-get options (#29734)"
        },
        {
            "date": "2024-05-08 09:08:55",
            "message": ".travis.yml: fix install of gcc-multilib (#29733)"
        },
        {
            "date": "2024-05-08 06:43:33",
            "message": "core: use in-memory freezer for tests (#29720)\n\n* core: simplify chain tests\r\n\r\n* core, eth, cmd: use in-memory freezer for tests\r\n\r\n* core: restore tests"
        },
        {
            "date": "2024-05-07 20:08:29",
            "message": "build: upgrade to go 1.22.3 (#29725)"
        },
        {
            "date": "2024-05-07 19:24:58",
            "message": "travis: use ubuntu noble (24.04) instead of bionic (18.04) (#29723)"
        },
        {
            "date": "2024-05-07 12:27:14",
            "message": "eth/gasestimator: include blobs in virtual balance computation (#29703)\n\nFixes #29702\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-05-07 07:25:15",
            "message": "eth/gasprice: add query limit for FeeHistory to defend DDOS attack (#29644)\n\n* eth/gasprice: add query limit for FeeHistory to defend DDOS attack\r\n\r\n* fix return values after cherry-pick\r\n\r\n---------\r\n\r\nCo-authored-by: Eric <45141191+zlacfzy@users.noreply.github.com>"
        },
        {
            "date": "2024-05-06 11:42:22",
            "message": "ethdb/pebble: fix pebble metrics registration (#29699)\n\nethdb/pebble: use GetOrRegister instead of NewRegistered when creating metrics"
        },
        {
            "date": "2024-05-06 11:28:53",
            "message": "core, core/state: move TriesInMemory to state package (#29701)"
        },
        {
            "date": "2024-05-06 11:21:55",
            "message": "core/tracing: add system call callback when performing `ProcessBeaconBlockRoot` (#29355)\n\nAdded a start/end system where tracer can be notified that processing of some Ethereum system calls is starting processing and also notifies it when the processing has completed.\r\n\r\nDoing a start/end for system call will enable tracers to \"route\" incoming next tracing events to go to a separate bucket than other EVM calls. Those not interested by this fact can simply avoid registering the hooks.\r\n\r\nThe EVM call is going to be traced normally afterward between the signals provided by those 2 new hooks but outside of a transaction context OnTxStart/End. That something implementors of live tracers will need to be aware of (since only \"trx tracers\" are not concerned by ProcessBeaconRoot).\r\n\r\n---------\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2024-05-06 11:17:19",
            "message": "p2p/discover/v5wire: add tests for invalid handshake and auth data size (#29708)"
        },
        {
            "date": "2024-05-02 10:26:07",
            "message": "core/rawdb: fix ancient root folder (#29697)"
        },
        {
            "date": "2024-05-02 09:35:45",
            "message": "trie/pathdb: preallocate map capacity (#29690)\n\n* preallocated capacity for map's certain usege of memory\r\n\r\n* preallocated capacity for map's certain usege of memory"
        },
        {
            "date": "2024-05-02 08:21:11",
            "message": "params: fix misleading comments (#29684)"
        },
        {
            "date": "2024-05-02 08:18:59",
            "message": "core/vm: remove redundant error checks (#29692)"
        },
        {
            "date": "2024-05-02 08:18:27",
            "message": "core/state: parallelise parts of state commit (#29681)\n\n* core/state, internal/workerpool: parallelize parts of state commit\r\n\r\n* core, internal: move workerpool into syncx\r\n\r\n* core/state: use errgroups, commit accounts concurrently\r\n\r\n* core: resurrect detailed commit timers to almost-accuracy"
        },
        {
            "date": "2024-04-30 14:25:35",
            "message": "core/rawdb, trie: improve db APIs for accessing trie nodes (#29362)\n\n* core/rawdb, trie: improve db APIs for accessing trie nodes\r\n\r\n* triedb/pathdb: fix"
        },
        {
            "date": "2024-04-30 13:47:21",
            "message": "accounts, cmd/geth, core: close opened files (#29598)\n\n* fix: open file used up but not closed\r\n\r\n* feat: more same case\r\n\r\n* feat: accept conversation"
        },
        {
            "date": "2024-04-30 13:46:53",
            "message": "eth/downloader:  purge pre-merge sync code (#29281)\n\nThis PR removes pre-merge sync logic from the downloader. Now-irrelevant tests are removed and others have been updated."
        },
        {
            "date": "2024-04-30 12:55:08",
            "message": "all: refactor so `NewBlock`, `WithBody` take `types.Body` (#29482)\n\n* all: refactor so NewBlock(..) and WithBody(..) take a types.Body\r\n\r\n* core: fixup comments, remove txs != receipts panic\r\n\r\n* core/types: add empty withdrawls to body if len == 0"
        },
        {
            "date": "2024-04-30 12:48:54",
            "message": "internal/ethapi: listen to ctx cancellation in access list (#29686)"
        },
        {
            "date": "2024-04-30 12:35:48",
            "message": "core/vm: add subgroup checks for mul/mulexp for G1/G2 (#29637)"
        },
        {
            "date": "2024-04-30 12:33:22",
            "message": "eth/tracers/native: fix flatCallTracer Stop() bug (#29623)\n\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2024-04-30 12:08:13",
            "message": "core/vm: remove a redundant zero check in opAddmod (#29672)"
        },
        {
            "date": "2024-04-30 11:51:04",
            "message": "trie/trienode: minor speedup in nodeset merging (#29683)"
        },
        {
            "date": "2024-04-30 09:33:22",
            "message": "core/rawdb: implement in-memory freezer (#29135)"
        },
        {
            "date": "2024-04-30 09:22:57",
            "message": "cmd/utils: require TTD and difficulty to be zero at genesis for dev mode (#29579)"
        },
        {
            "date": "2024-04-30 09:22:02",
            "message": "params: print time value instead of pointer in ConfigCompatError (#29514)"
        },
        {
            "date": "2024-04-30 09:19:59",
            "message": "cmd/evm/internal/t8ntool, core: prealloc map sizes where possible (#29620)\n\nset cap for map in a certain scenario"
        },
        {
            "date": "2024-04-29 17:44:41",
            "message": "p2p/simulations/adapters: use maps.Clone (#29626)"
        },
        {
            "date": "2024-04-28 11:03:03",
            "message": "params: clarify consensus engine config `String`s (#29643)\n\nDefine these on a value receiever so that nil is shown differently."
        },
        {
            "date": "2024-04-26 15:35:52",
            "message": "core/state: move metrics out of state objects (#29665)"
        },
        {
            "date": "2024-04-26 12:24:40",
            "message": "core/state: revert pending storage updates if they revert to original (#29661)"
        },
        {
            "date": "2024-04-25 11:07:39",
            "message": "build: drop trusty from PPA builds, EOL and incompatible (#29651)\n\n* build: drop trusty from PPA builds, EOL and incompatible\r\n\r\n* build: add Ubuntu Noble PPA build target"
        },
        {
            "date": "2024-04-25 09:27:36",
            "message": "travis: revert the PPA fix hot-build, it works (#29649)"
        },
        {
            "date": "2024-04-25 09:00:59",
            "message": "travis: temporarilly enable PPA builds for testing (#29648)"
        },
        {
            "date": "2024-04-25 08:50:25",
            "message": "build: build all the builders to build all the builders (#29647)\n\n* build: build all the builders to build all the builders\r\n\r\n* build: tweak the indexes a bit to make them consistent"
        },
        {
            "date": "2024-04-25 07:56:25",
            "message": "core/state: better randomized testing (postcheck) on journalling (#29627)\n\nThis PR fixes some flaws with the existing tests.\r\n\r\nThe randomized testing (TestSnapshotRandom) executes a series of steps which modify the state and create journal-events. Later on, we compare the forward-going-states against the backwards-unrolling-journal-states, and check that they are identical.\r\n\r\nThe \"identical\" check is performed using various accessors. It turned out that we failed to check some things: \r\n- the accesslist contents\r\n- the transient storage contents\r\n- the 'newContract' flag\r\n- the dirty storage map\r\n\r\nThis change adds these new checks"
        },
        {
            "date": "2024-04-25 06:40:29",
            "message": "eth/protocols/eth,p2p/discover: remove unnecessary checks (#29590)\n\nfix useless condition"
        },
        {
            "date": "2024-04-25 05:47:29",
            "message": "internal/ethapi: typo (#29636)"
        },
        {
            "date": "2024-04-24 15:45:24",
            "message": "core/state: storage journal entry should revert dirtyness too (#29641)\n\nCurrently our state journal tracks each storage update to a contract, having the ability to revert those changes to the previously set value.\r\n\r\nFor the very first modification however, it behaves a bit wonky. Reverting the update doesn't actually remove the dirty-ness of the slot, rather leaves it as \"change this slot to it's original value\". This can cause issues down the line with for example write witnesses needing to gather an unneeded proof.\r\n\r\nThis PR modifies the storageChange journal entry to not only track the previous value of a slot, but also whether there was any previous value at all set in the current execution context. In essence, the PR changes the semantic of storageChange so it does not simply track storage changes, rather it tracks dirty storage changes, an important distinction for being able to cleanly revert the journal item."
        },
        {
            "date": "2024-04-24 12:27:58",
            "message": "trie, consensus/clique: use maps.Clone (#29616)"
        },
        {
            "date": "2024-04-24 12:04:20",
            "message": "trie: preallocate capacity for fields slice (#29614)\n\ntrie: Preallocate capacity for fields slice"
        },
        {
            "date": "2024-04-24 09:59:06",
            "message": " core/state: remove account reset operation v2 (#29520)\n\n* core/state, tests: remove account reset operation\r\n\r\n* core/state, core/vm: implement createcontract journal event\r\n\r\n* core/state: make createcontract not emit dirtied account, unskip tests\r\n\r\n* core/state: add createcontract to journal fuzzing\r\n\r\n* core/state: fix journal\r\n\r\n* core/state: address comments\r\n\r\n* core/state: remove useless code\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-04-24 08:05:10",
            "message": "params: begin 1.14.1 release cycle"
        },
        {
            "date": "2024-04-24 08:02:49",
            "message": "params: release Geth v1.14.0"
        },
        {
            "date": "2024-04-24 07:07:39",
            "message": "eth/downloader: fix case where skeleton reorgs below the filled block (#29358)\n\nThis change adds a testcase and fixes a corner-case in the skeleton sync.\r\n\r\nWith this change, when doing the skeleton cleanup, we check if the filled header is acually within the range of what we were meant to backfill. If not, it means the backfill was a noop (possibly because we started and stopped it so quickly that it didn't have time to do any meaningful work). In that case, just don't clean up anything.\r\n\r\n---------\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
        },
        {
            "date": "2024-04-24 05:58:05",
            "message": "eth, eth/tracers: process beacon root before transactions (#29402)\n\nThe beacon root when applied in `state_processor.go` is performed right before executing transaction. That means that contract reliying on this value would query the same value found in the block header.\r\n\r\nIn that spirit, it means that any tracing/operation relying on state data which touches transaction must have updated the beacon root before any transaction processing."
        },
        {
            "date": "2024-04-24 05:54:59",
            "message": "core/tracing: Add OnClose Trace Hook (#29629)\n\nThe OnClose trace hook is being triggered on blockchain Stop, so as tracers can release any resources."
        },
        {
            "date": "2024-04-24 05:53:16",
            "message": "cmd/geth, cmd/utils: rename config and flag to` VMTraceJsonConfig` (#29573)\n\nrenames the yaml config field VMTraceConfig to VMTraceJsonConfig, in order to be consistent with the renaming of the CLI flag."
        },
        {
            "date": "2024-04-23 13:10:24",
            "message": "core/vm: fix Prague contracts (#29612)\n\ncore/vm: fix prague contracts"
        },
        {
            "date": "2024-04-23 11:31:32",
            "message": "beacon/light: request finality update explicitly when necessary (#29567)\n\nThis PR adds an extra mechanism to sync.HeadSync that tries to retrieve the latest finality update from every server each time it sends an optimistic update in a new epoch (unless we already have a validated finality update attested in the same epoch). \r\n\r\nNote that this is not necessary and does not happen if the new finality update is delivered before the optimistic update. The spec only mandates light_client_finality_update events when a new epoch is finalized. If the chain does not finalize for a while then we might need an explicit request that returns a finality proof that proves the same finality epoch from the latest attested epoch."
        },
        {
            "date": "2024-04-23 10:09:42",
            "message": "all: fix various typos (#29600)\n\n* core: fix typo\r\n\r\n* rpc: fix typo\r\n\r\n* snap: fix typo\r\n\r\n* trie: fix typo\r\n\r\n* main: fix typo\r\n\r\n* abi: fix typo\r\n\r\n* main: fix field comment for basicOp"
        },
        {
            "date": "2024-04-23 10:08:02",
            "message": "metrics: remove librato (#29624)"
        },
        {
            "date": "2024-04-23 10:06:25",
            "message": "miner: fix typos (#29625)"
        },
        {
            "date": "2024-04-23 08:33:36",
            "message": "eth/catalyst, trie/pathdb: fix flaky tests (#29571)\n\nThis change fixes three flaky tests `TestEth2AssembleBlock`,`TestEth2NewBlock`, `TestEth2PrepareAndGetPayload` and `TestDisable`.\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-04-22 17:00:42",
            "message": "core: remove bad block checks (#29609)"
        },
        {
            "date": "2024-04-22 11:19:42",
            "message": "beacon/light/sync: print error log if checkpoint retrieval fails (#29532)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-04-22 10:17:06",
            "message": "eth: Add eth_blobBaseFee RPC and blob fields to eth_feeHistory (#29140)\n\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-04-22 09:56:54",
            "message": "go.mod: update golang/x repos (#29604)"
        },
        {
            "date": "2024-04-22 08:31:17",
            "message": "eth/filters: remove support for pending logs (#29574)\n\nThis change removes support for subscribing to pending logs. \r\n\r\n\"Pending logs\" were always an odd feature, because it can never be fully reliable. When support for it was added many years ago, the intention was for this to be used by wallet apps to show the 'potential future token balance' of accounts, i.e. as a way of notifying the user of incoming transfers before they were mined. In order to generate the pending logs, the node must pick a subset of all public mempool transactions, execute them in the EVM, and then dispatch the resulting logs to API consumers."
        },
        {
            "date": "2024-04-22 08:13:03",
            "message": "cmd/geth: remove unused parameter (#29602)"
        },
        {
            "date": "2024-04-21 09:14:13",
            "message": "build: fix string compare for SortFunc (#29595)"
        },
        {
            "date": "2024-04-21 09:13:36",
            "message": "p2p/discover: fix test error messages (#29592)"
        },
        {
            "date": "2024-04-19 11:46:43",
            "message": "core/vm: add KZG benchmark (#29583)"
        },
        {
            "date": "2024-04-19 08:07:52",
            "message": "tests: define cancun-to-prague at 15K chainconig (#29557)\n\ntests: add cancun->prague config"
        },
        {
            "date": "2024-04-19 07:58:14",
            "message": "eth/catalyst: fix typo (#29580)"
        },
        {
            "date": "2024-04-18 07:08:25",
            "message": "core/vm: enable bls-precompiles for Prague (#29552)\n\nenables the bls-contracts on the \"Prague\" config, so that the testing-team can activate them to make tests."
        },
        {
            "date": "2024-04-18 06:48:50",
            "message": "core: remove unused fields (#29569)"
        },
        {
            "date": "2024-04-18 06:21:23",
            "message": "eth/ethconfig: regenerate autogen files (#29559)\n\neth/ethconfig/gen_config.go : go generate fix"
        },
        {
            "date": "2024-04-17 15:07:28",
            "message": "beacon/blsync: proceed with empty finalized hash if proof is not expected soon (#29449)\n\n* beacon/blsync: proceed with empty finalized hash if proof is not expected soon\r\n\r\n* Update beacon/blsync/block_sync.go\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\n\r\n* beacon/blsync: fixed linter warning\r\n\r\n* Update beacon/blsync/block_sync.go\r\n\r\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>"
        },
        {
            "date": "2024-04-17 11:55:31",
            "message": "core/state: fix bug in statedb.Copy and remove unnecessary preallocation (#29563)\n\nThis change removes an unnecessary preallocation and fixes a flaw with no-op copies of some parts of the statedb"
        },
        {
            "date": "2024-04-17 06:24:30",
            "message": "trie/utils: simplify codeChunkIndex (#29480)\n\nminor simplification to the code"
        },
        {
            "date": "2024-04-17 05:52:08",
            "message": "ethdb/pebble: print warning log if pebble performance degrades (#29478)"
        },
        {
            "date": "2024-04-16 12:57:57",
            "message": "core/vm: refactor push-functions to use `min` builtin (#29515)\n\n* optimize-push\r\n\r\n* revert push1 change\r\n\r\n* Update instructions.go\r\n\r\n* core/vm: go format\r\n\r\n* core/vm: fix nit\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
        },
        {
            "date": "2024-04-16 12:44:00",
            "message": "all: fix various typos (#29542)\n\n* core/rawdb: fix typos\r\n\r\n* accounts/abi: fix typos\r\n\r\n* metrics: fix typo\r\n\r\n* beacon: fix typo\r\n\r\n* crypto: fix typo\r\n\r\n* rpc: fix typo\r\n\r\n* rpc: fix typo"
        },
        {
            "date": "2024-04-16 12:42:16",
            "message": "core: go fmt (#29544)"
        },
        {
            "date": "2024-04-16 12:32:50",
            "message": "go.mod: clean up indirection (#29553)"
        },
        {
            "date": "2024-04-16 12:31:19",
            "message": "c.d/utils: rename vmtrace.config to vmtrace.jsonconfig (#29554)\n\nrename vmtrace.config to vmtrace.jsonconfig\r\n\r\nfor consinstency with t8ntool trace.jsonconfig"
        },
        {
            "date": "2024-04-16 09:21:20",
            "message": "eth/catalyst: fix log (#29549)\n\nlog:output the correct variable\r\n\r\nCo-authored-by: steven <steven@stevendeMacBook-Pro.local>"
        },
        {
            "date": "2024-04-16 08:53:43",
            "message": "core/vm: update gascosts for BLS12-381 + use gnark instead of kilic (#29441)\n\nThis PR updates the bls contracts from our internal implementation which is an unmaintained fork of the kilic library to the gnark-crypto library that is actively maintained by consensys.\r\n\r\nIt also updates the gas-costs according to the EIP"
        },
        {
            "date": "2024-04-16 08:38:25",
            "message": "rpc: close Clients in tests (#29512)"
        },
        {
            "date": "2024-04-16 08:37:18",
            "message": "rpc: implement Unwrap() for wsHandshakeError (#29522)"
        },
        {
            "date": "2024-04-16 07:05:36",
            "message": "core, eth/protocols/snap, trie: fix cause for snap-sync corruption, implement gentrie (#29313)\n\nThis pull request defines a gentrie for snap sync purpose.\r\n\r\nThe stackTrie is used to generate the merkle tree nodes upon receiving a state batch. Several additional options have been added into stackTrie to handle incomplete states (either missing states before or after).\r\n\r\nIn this pull request, these options have been relocated from stackTrie to genTrie, which serves as a wrapper for stackTrie specifically for snap sync purposes.\r\n\r\nFurther, the logic for managing incomplete state has been enhanced in this change. Originally, there are two cases handled:\r\n\r\n-    boundary node filtering\r\n-    internal (covered by extension node) node clearing\r\n\r\nThis changes adds one more:\r\n \r\n- Clearing leftover nodes on the boundaries.\r\n\r\nThis feature is necessary if there are leftover trie nodes in database, otherwise node inconsistency may break the state healing."
        },
        {
            "date": "2024-04-15 15:35:35",
            "message": "eth/filters: enforce topic-limit early on filter criterias (#29535)\n\nThis PR adds a limit of 1000 to the \"inner\" topics in a filter-criteria"
        },
        {
            "date": "2024-04-15 12:58:17",
            "message": "p2p/nat: fix typos in comments (#29536)"
        },
        {
            "date": "2024-04-15 12:54:51",
            "message": "core/rawdb: add sanity-limit to header accessor (#29534)"
        },
        {
            "date": "2024-04-15 06:40:42",
            "message": "cmd/utils: fix typo in comment (#29528)"
        },
        {
            "date": "2024-04-15 06:34:31",
            "message": "all: remove duplicate word in comments (#29531)\n\nThis change removes some duplicate words in in comments"
        },
        {
            "date": "2024-04-11 11:06:49",
            "message": "cmd: fix some typos in readmes (#29405)\n\n* Update README.md\r\n\r\nupdated for readability\r\n\r\n* Update rules.md\r\n\r\nUpdated for readability and typos"
        },
        {
            "date": "2024-04-11 08:30:15",
            "message": "rpc: fix comment grammar (#29507)"
        },
        {
            "date": "2024-04-10 09:02:45",
            "message": "eth/protocols/snap: skip retrieval for completed storages (#29378)\n\n* eth/protocols/snap: skip retrieval for completed storages\r\n\r\n* eth/protocols/snap: address comments from peter\r\n\r\n* eth/protocols/snap: add comments"
        },
        {
            "date": "2024-04-09 10:14:30",
            "message": "all: use big.Sign to compare with zero (#29490)"
        },
        {
            "date": "2024-04-09 10:12:02",
            "message": "core/tracing: add changelog (#29388)\n\n\r\nCo-authored-by: Matthieu Vachon <matthieu.o.vachon@gmail.com>"
        },
        {
            "date": "2024-04-09 06:51:54",
            "message": "all: use timer instead of time.After in loops, to avoid memleaks (#29241)\n\ntime.After is equivalent to NewTimer(d).C, and does not call Stop if the timer is no longer needed. This can cause memory leaks. This change changes many such occations to use NewTimer instead, and calling Stop once the timer is no longer needed."
        },
        {
            "date": "2024-04-09 06:37:18",
            "message": "core: add txlookup lock (#29343)\n\nThis change adds a lock to the transaction lookup cache, to avoid the case where reorgs make the lookup return inconsistent results."
        },
        {
            "date": "2024-04-09 06:33:36",
            "message": "core/vm: move bls precompiles to correct addresses (#29445)\n\ncore: make bls precompiled contract use the correct address as in eip"
        },
        {
            "date": "2024-04-09 06:27:13",
            "message": "rlp: replace reflect.PtrTo with reflect.PointerTo (#29488)\n\nreflect.PtrTo has been deprecated and superseded by reflect.PointerTo"
        },
        {
            "date": "2024-04-09 06:22:53",
            "message": "internal, signer/core: replace path.Join with filepath.Join (#29489)"
        },
        {
            "date": "2024-04-08 13:48:37",
            "message": "core/vm: reject contract creation if the storage is non-empty (#28912)\n\nThis change implements EIP-7610, which rejects the contract deployment if the destination has non-empty storage."
        },
        {
            "date": "2024-04-08 11:02:56",
            "message": "core: fix typo (#29438)"
        },
        {
            "date": "2024-04-08 11:01:22",
            "message": "core: fix dev mode genesis difficulty (#29469)\n\nThe dev mode is nowadays in Merge-mode from genesis, hence the difficulty of the first block should be zero."
        },
        {
            "date": "2024-04-08 10:59:17",
            "message": "all: replace fmt.Errorf() with errors.New() if no param required (#29472)"
        },
        {
            "date": "2024-04-08 10:58:37",
            "message": "signer/core/apitypes: use slices.Contains (#29474)"
        },
        {
            "date": "2024-04-08 09:29:49",
            "message": "all: replace path.Join with filepath.Join (#29479)\n\n* core/rawdb: replace file.Join with filepath.Join\r\n\r\nSigned-off-by: xiaochangbai <704566072@qq.com>\r\n\r\n* internal/build: replace file.Join with filepath.Join\r\n\r\nSigned-off-by: xiaochangbai <704566072@qq.com>\r\n\r\n---------\r\n\r\nSigned-off-by: xiaochangbai <704566072@qq.com>"
        },
        {
            "date": "2024-04-06 10:22:55",
            "message": "core/vm: better error-info for vm errors (#29354)"
        },
        {
            "date": "2024-04-06 10:17:41",
            "message": "log: default JSON log handler should log all verbosity levels (#29471)\n\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2024-04-06 10:16:25",
            "message": "eth/tracers: use slices.Contains (#29461)"
        },
        {
            "date": "2024-04-06 10:05:06",
            "message": "all: use slices.Contains (#29459)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-04-06 09:09:30",
            "message": "common/prque: fix godoc comments (#29460)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-04-05 19:01:39",
            "message": "signer/core/apitypes: fix apitypes breakage due to bitrotted PR (#29470)"
        },
        {
            "date": "2024-04-05 17:29:44",
            "message": "signer: implement blob txs sendtxargs, enable blobtx-signing (#28976)\n\nThis change makes it possible to sign blob transactions"
        },
        {
            "date": "2024-04-04 14:30:27",
            "message": "beacon/types: enforce fork order based on known forks list (#29380)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-04-04 13:52:38",
            "message": "trie/utils: change Div+Mod to DivMod (#29413)\n\n* trie/utils: change Div+Mod to DivMod\r\n\r\n* trie/utils: gofmt"
        },
        {
            "date": "2024-04-04 13:51:10",
            "message": "core/txpool: repair the limbo Billy too on unclean shutdowns (#29451)"
        },
        {
            "date": "2024-04-04 13:50:31",
            "message": "core/types: use new atomic types in caches (#29411)\n\n* use generic atomic types in tx caches\r\n\r\n* use generic atomic types in block caches\r\n\r\n* eth/catalyst: avoid copying tx in test\r\n\r\n---------\r\n\r\nCo-authored-by: lmittmann <lmittmann@users.noreply.github.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-04-04 10:26:10",
            "message": "internal/debug: convert legacy log level value in debug_verbosity (#29356)"
        },
        {
            "date": "2024-04-04 10:24:49",
            "message": "p2p/discover: using slices.Contains (#29395)"
        },
        {
            "date": "2024-04-04 10:20:54",
            "message": "crypto/signify: close tmp key file in test (#29444)"
        },
        {
            "date": "2024-04-04 10:19:48",
            "message": "p2p/dnsdisc: using clear builtin func (#29418)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-04-04 09:59:54",
            "message": "log: using maps.Clone (#29392)"
        },
        {
            "date": "2024-04-04 09:58:44",
            "message": "beacon/engine: using slices.Contains (#29396)"
        },
        {
            "date": "2024-04-04 09:00:27",
            "message": "build: upgrade -dlgo version to Go 1.22.2 (#29448)"
        },
        {
            "date": "2024-04-03 06:08:52",
            "message": "eth: simplify peer counting logic (#29420)"
        },
        {
            "date": "2024-04-02 19:18:28",
            "message": "p2p: add inbound and outbound peers metric (#29424)"
        },
        {
            "date": "2024-04-02 19:17:34",
            "message": "eth/fetcher: using slices.Contains (#29383)"
        },
        {
            "date": "2024-04-02 13:45:25",
            "message": "common/lru: use clear builtin (#29399)"
        },
        {
            "date": "2024-04-02 12:56:12",
            "message": "core/state: use maps.Clone (#29365)\n\ncore: using maps.Clone"
        },
        {
            "date": "2024-04-02 12:25:06",
            "message": "cmd/evm: reopen the statedb for dumping (#29437)"
        },
        {
            "date": "2024-04-02 09:25:57",
            "message": "eth/filter: using atomic.Pointer instead of atomic.Value (#29435)"
        },
        {
            "date": "2024-04-02 09:25:19",
            "message": "rpc: fix ipc max path size (#29385)"
        },
        {
            "date": "2024-04-02 08:47:15",
            "message": "rlp: using maps.Clone (#29434)"
        },
        {
            "date": "2024-04-02 07:05:53",
            "message": "log: replace the outdated link (#29412)"
        },
        {
            "date": "2024-04-01 12:53:56",
            "message": "eth/tracers: fix base fee and set blob fee in tests (#29376)\n\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2024-04-01 03:45:56",
            "message": "core/types: using maps.Clone (#29398)"
        },
        {
            "date": "2024-04-01 03:42:50",
            "message": "trie: using maps.Clone (#29419)"
        },
        {
            "date": "2024-03-28 16:35:40",
            "message": "eth/tracers/js: consistent name for method receivers (#29375)"
        },
        {
            "date": "2024-03-28 13:09:21",
            "message": "eth/tracers/logger: using maps.Equal (#29384)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-03-28 11:13:41",
            "message": "core/state: using slices.Clone (#29366)"
        },
        {
            "date": "2024-03-28 11:07:38",
            "message": "p2p/dnsdisc: using maps.Copy (#29377)"
        },
        {
            "date": "2024-03-28 11:06:57",
            "message": "core: remove unused code (#29381)"
        },
        {
            "date": "2024-03-28 11:06:44",
            "message": "ethdb/dbtest: replace reflect.DeepEqual with slices.Equal (#29382)"
        },
        {
            "date": "2024-03-27 15:12:57",
            "message": "t8ntool: add optional call frames to json logger (#29353)\n\nAdds a flag `--trace.callframes` to t8n which will log info when entering or exiting a call frame in addition to the execution steps.\r\n\r\n---------\r\n\r\nCo-authored-by: Mario Vega <marioevz@gmail.com>"
        },
        {
            "date": "2024-03-27 12:16:29",
            "message": "accounts/keystore: fix typos in comments (#29336)"
        },
        {
            "date": "2024-03-27 12:15:57",
            "message": "beacon/engine: Fix json param name in GetClientVersionV1 (#29351)\n\nFix json param name"
        },
        {
            "date": "2024-03-27 01:35:33",
            "message": "eth/protocols/snap: check storage root existence for hash scheme (#29341)"
        },
        {
            "date": "2024-03-26 20:25:41",
            "message": "core: add an end-to-end verkle test (#29262)\n\ncore: add a simple verkle test\n\ntriedb, core: skip hash comparison in verkle\n\ncore: remove legacy daoFork logic in verkle chain maker\n\nfix: nil pointer in tests\n\ntriedb/pathdb: add blob hex\n\ncore: less defensive\n\nCo-authored-by: Ignacio Hagopian <jsign.uy@gmail.com>\nCo-authored-by: Martin HS <martin@swende.se>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-03-26 20:01:28",
            "message": "all: fix mismatched names in comments (#29348)\n\n* all: fix mismatched names in comments\r\n\r\n* metrics: fix mismatched name in UpdateIfGt"
        },
        {
            "date": "2024-03-26 14:21:39",
            "message": "core/state: perform updates before deletions when mutating tries (#29201)\n\nThis addresses an edge-case (detailed in the code comment) where the computation of the intermediate trie root would force the unnecessary resolution of a hash node. The change makes it so that when we process changes from a block, we first process trie-updates and afterwards process trie-deletions."
        },
        {
            "date": "2024-03-26 14:04:15",
            "message": "tests: fix panic via state test runner using json logger (#29349)\n\n* tests: fix panic via state test runner using json logger\r\n\r\n* tests: also invoke OnTxEnd"
        },
        {
            "date": "2024-03-26 11:26:44",
            "message": "eth/catalyst: fix flaw in withdrawal-gathering in simulated beacon (#29344)\n\nreturn after reaching maxCount"
        },
        {
            "date": "2024-03-26 04:01:13",
            "message": "Removes some leftover `err` check (#29339)\n\nBefore, `ToMessage` was returning both the resulting `Message` and an error while no error is returned now.\r\n\r\nThose error checks were probably leftover from the past."
        },
        {
            "date": "2024-03-25 19:28:55",
            "message": "beacon/blsync: fixed blsync command line params (#29335)"
        },
        {
            "date": "2024-03-25 19:27:50",
            "message": "beacon/light/api: improve handling of event stream setup failures (#29308)\n\nThe StartHeadListener method will only be called once. So it can't just make one attempt\r\nto connect to the eventsource endpoint, it has to keep trying. Note that once the stream\r\nis established, the eventsource implementation itself will keep retrying."
        },
        {
            "date": "2024-03-25 17:03:44",
            "message": "ethclient/simulated: clean up Node resources when simulated backend is closed (#29316)"
        },
        {
            "date": "2024-03-25 06:50:18",
            "message": "all: remove dependency on golang.org/exp (#29314)\n\nThis change includes a leftovers from https://github.com/ethereum/go-ethereum/pull/29307\r\n- using the [new `slices` package](https://go.dev/doc/go1.21#slices) and\r\n- using the [new `cmp.Ordered`](https://go.dev/doc/go1.21#cmp) instead of exp `constraints.Ordered`"
        },
        {
            "date": "2024-03-25 02:16:44",
            "message": "eth: fix typo (#29320)"
        },
        {
            "date": "2024-03-24 12:51:34",
            "message": "metrics/influxdb: skip float64-precision-dependent tests on arm64 (#29047)\n\nmetrics/influxdb: fix failed cases caused by float64 precision on arm64"
        },
        {
            "date": "2024-03-22 17:53:53",
            "message": "eth/tracers: live chain tracing with hooks (#29189)\n\nHere we add a Go API for running tracing plugins within the main block import process. \r\n\r\nAs an advanced user of geth, you can now create a Go file in eth/tracers/live/, and within\r\nthat file register your custom tracer implementation. Then recompile geth and select your tracer\r\non the command line. Hooks defined in the tracer will run whenever a block is processed.\r\n\r\nThe hook system is defined in package core/tracing. It uses a struct with callbacks, instead of \r\nrequiring an interface, for several reasons:\r\n\r\n- We plan to keep this API stable long-term. The core/tracing hook API does not depend on\r\n  on deep geth internals.\r\n- There are a lot of hooks, and tracers will only need some of them. Using a struct allows you\r\n   to implement only the hooks you want to actually use.\r\n\r\nAll existing tracers in eth/tracers/native have been rewritten to use the new hook system.\r\n\r\nThis change breaks compatibility with the vm.EVMLogger interface that we used to have.\r\nIf you are a user of vm.EVMLogger, please migrate to core/tracing, and sorry for breaking\r\nyour stuff. But we just couldn't have both the old and new tracing APIs coexist in the EVM.\r\n\r\n---------\r\n\r\nCo-authored-by: Matthieu Vachon <matthieu.o.vachon@gmail.com>\r\nCo-authored-by: Delweng <delweng@gmail.com>\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-03-22 12:29:12",
            "message": "all: fix docstrings (#29311)"
        },
        {
            "date": "2024-03-22 12:17:59",
            "message": "log: use native log/slog instead of golang/exp (#29302)"
        },
        {
            "date": "2024-03-22 12:12:10",
            "message": "cmd, triedb: implement history inspection (#29267)\n\nThis pull request introduces a database tool for inspecting the state history. \r\nIt can be used for either account history or storage slot history, within a \r\nspecific block range.\r\n\r\nThe state output format can be chosen either with\r\n\r\n- the \"rlp-encoded\" values (those inserted into the merkle trie)\r\n- the \"rlp-decoded\" value (the raw state value)\r\n\r\nThe latter one needs --raw flag."
        },
        {
            "date": "2024-03-22 11:38:24",
            "message": "triedb/hashdb: Avoid setting db.cleans on Close (#29309)"
        },
        {
            "date": "2024-03-21 12:50:13",
            "message": "all: use min/max/clear from go1.21 (#29307)"
        },
        {
            "date": "2024-03-20 18:22:44",
            "message": "beacon/blsync: support for deneb fork (#29180)\n\nThis adds support for the Deneb beacon chain fork, and fork handling\r\nin general, to the beacon chain light client implementation.\r\n\r\nCo-authored-by: Zsolt Felfoldi <zsfelfoldi@gmail.com>"
        },
        {
            "date": "2024-03-20 14:22:52",
            "message": "eth/protocols/snap, internal/testlog: fix dataraces (#29301)"
        },
        {
            "date": "2024-03-20 13:58:47",
            "message": "core: refactor consensus interface (#29283)\n\nThis PR modifies the consensus interface to wrap the body fields."
        },
        {
            "date": "2024-03-20 13:51:05",
            "message": "core/txpool/blobpool: calculate log1.125 faster (#29300)"
        },
        {
            "date": "2024-03-20 12:11:30",
            "message": "core: skip the check the statefulness of head block in repair (#29245)"
        },
        {
            "date": "2024-03-20 12:09:46",
            "message": "Makefile: update PHONY directive (#29296)"
        },
        {
            "date": "2024-03-20 09:38:30",
            "message": "cmd/evm: fix flag-mismatch from #29290 (#29298)"
        },
        {
            "date": "2024-03-20 08:12:58",
            "message": "cmd/evm: make staterunner always output stateroot to stderr (#29290)\n\nThis changes makes it so that when `evm statetest` executes, regardless of whether `--json` is specified or not, the stateroot is printed on `stderr` as a `jsonl` line. This enables speedier execution of testcases in goevmlab, in cases where full execution op-by-op is not required."
        },
        {
            "date": "2024-03-20 07:51:45",
            "message": "metrics: fix docstrings (#29279)"
        },
        {
            "date": "2024-03-20 07:49:38",
            "message": "all: fix typos (#29288)"
        },
        {
            "date": "2024-03-20 07:46:50",
            "message": "core/asm: minor code-clarification (#29293)"
        },
        {
            "date": "2024-03-19 14:23:55",
            "message": "miner: modify header before checking time-based fields (#29242)\n\nThe Prepare-method of consensus engine might modify the time-field in a header, so it should be called prior to checks that rely on it"
        },
        {
            "date": "2024-03-19 13:05:31",
            "message": "accounts/abi/bind: check invalid chainID first (#29275)"
        },
        {
            "date": "2024-03-19 13:05:06",
            "message": "beacon/light/sync: fix typo in comment (#29256)"
        },
        {
            "date": "2024-03-19 10:25:30",
            "message": "log: replace tmp with bytes.Buffer.AvailableBuffer (#29287)"
        },
        {
            "date": "2024-03-19 02:50:08",
            "message": "triedb/pathdb: improve tests (#29278)"
        },
        {
            "date": "2024-03-18 16:36:50",
            "message": "all: update to go version 1.22.1 (#28946)\n\nSince Go 1.22 has deprecated certain elliptic curve operations, this PR removes \r\nreferences to the affected functions and replaces them with a custom implementation\r\nin package crypto. This causes backwards-incompatible changes in some places.\r\n\r\n---------\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-03-18 07:13:55",
            "message": "go.mod: update protobuf (#29270)"
        },
        {
            "date": "2024-03-15 09:46:22",
            "message": "accounts/abi/bind: remove unused err set and check (#29269)\n\naccounts/abi: remove unused err set and check"
        },
        {
            "date": "2024-03-15 09:44:41",
            "message": "eth/catalyst: prettier output on bad new payloads (#29259)\n\nWhen we receive a bad NewPayload, we currently emit a lot of data to the logging facilities. This PR makes it so we print less data."
        },
        {
            "date": "2024-03-15 09:07:47",
            "message": "eth/downloader, graphql: fix typos (#29243)"
        },
        {
            "date": "2024-03-15 08:14:31",
            "message": "params: use the same variable name as EIP-4788 (#29195)\n\nIn https://eips.ethereum.org/EIPS/eip-4788 the name `BEACON_ROOTS_ADDRESS` is used. This change makes geth use the same variable name to avoid confusion."
        },
        {
            "date": "2024-03-14 13:38:11",
            "message": "cmd/emv/internal/t8ntool: fix shadowing of `excessBlobGas` (#29263)\n\nfix(t8n): unexpected `excessBlobGas` shadowed"
        },
        {
            "date": "2024-03-14 09:32:49",
            "message": "cmd/devp2p: fix decoding of raw RLP ENR attributes (#29257)"
        },
        {
            "date": "2024-03-13 23:26:46",
            "message": "eth/catalyst: remove error return in delayPayloadImport (#29043)\n\n\r\nCo-authored-by: tmelhao <tmelhao@gmail.com>"
        },
        {
            "date": "2024-03-13 23:25:42",
            "message": "go.mod: update golang.org/x/crypto from v0.17.0 to v0.21.0 (#29228)"
        },
        {
            "date": "2024-03-13 17:12:23",
            "message": "tests, appveyor: only execute one in four permutations on CI (#29220)\n\ntests, appveyor: only execute one in four permutations when flag -short is used\r\n\r\nAlso enable -short flag on all appveyor builds (also ubuntu)"
        },
        {
            "date": "2024-03-13 11:39:30",
            "message": "core: improve chain rewinding mechanism (#29196)\n\n* core: improve chain rewinding mechanism\r\n\r\n* core: address comment\r\n\r\n* core: periodically print progress log\r\n\r\n* core: address comments\r\n\r\n* core: fix comment\r\n\r\n* core: fix rewinding in path\r\n\r\n* core: fix beyondRoot condition\r\n\r\n* core: polish code\r\n\r\n* core: polish code\r\n\r\n* core: extend code comment\r\n\r\n* core: stop rewinding if chain is gapped or genesis is reached\r\n\r\n* core: fix broken tests"
        },
        {
            "date": "2024-03-13 06:54:40",
            "message": "accounts/usbwallet, common/bitutil: fix broken links in docs (#29078)\n\nfixes some links in documentation"
        },
        {
            "date": "2024-03-13 06:51:46",
            "message": "crypto/kz4844: pass blobs by ref (#29050)\n\nThis change makes use of the following underlying changes to the kzg-libraries in order to avoid passing large things on the stack:\r\n\r\n- c-kzg: https://github.com/ethereum/c-kzg-4844/pull/393 and\r\n- go-kzg: https://github.com/crate-crypto/go-kzg-4844/pull/63"
        },
        {
            "date": "2024-03-13 06:40:02",
            "message": "eth/tracers: fix concurrency issue for JS-tracing a block (#29238)\n\nThis change fixes a concurrency-issue where JS-tracers were accessing the block-ctx GetHash function in a in parallel, which is not safe."
        },
        {
            "date": "2024-03-12 18:23:24",
            "message": "p2p: fix race in dialScheduler (#29235)\n\n\r\nCo-authored-by: Stefan <stefan@starflinger.eu>"
        },
        {
            "date": "2024-03-12 13:29:35",
            "message": "miner: add additional log (#29193)\n\nAdds a debug level log if the payload building failed for whatever reason"
        },
        {
            "date": "2024-03-12 12:05:31",
            "message": "common/math: copy result in Exp (#29233)\n\ncommon/math: does not change base parameter"
        },
        {
            "date": "2024-03-12 11:12:37",
            "message": "internal/build, rpc: add missing HTTP response body Close() calls (#29223)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-03-12 09:00:34",
            "message": "cmd: use package filepath over path for file system operations (#29227)\n\nPackage filepath implements utility routines for manipulating filename paths in a way compatible with the target operating system-defined file paths.\r\n\r\nPackage path implements utility routines for manipulating slash-separated paths.\r\n\r\nThe path package should only be used for paths separated by forward slashes, such as the paths in URLs"
        },
        {
            "date": "2024-03-12 08:49:53",
            "message": " crypto/bn256/cloudflare: fix noescape-directive (#29222)"
        },
        {
            "date": "2024-03-11 10:17:16",
            "message": "beacon/light/request: fix typos (#29216)"
        },
        {
            "date": "2024-03-11 10:05:48",
            "message": "core: fix deprecation comment for GenesisAccount (#29218)\n\ncore: fix deprecation comment"
        },
        {
            "date": "2024-03-11 10:05:17",
            "message": "core/txpool/blobpool: return ErrAlreadyKnown for duplicate txs (#29210)\n\nSigned-off-by: Lee Bousfield <ljbousfield@gmail.com>"
        },
        {
            "date": "2024-03-11 08:06:57",
            "message": "cmd, core, metrics: always report expensive metrics (#29191)\n\n* cmd, core, metrics: always report expensive metrics\r\n\r\n* core, metrics: report block processing metrics as resetting timer\r\n\r\n* metrics: update reporter tests"
        },
        {
            "date": "2024-03-10 19:01:26",
            "message": "p2p/simulations/adapters: fix error messages in TestTCPPipeBidirections (#29207)"
        },
        {
            "date": "2024-03-08 11:15:52",
            "message": "console: fix the wrong error msg of datadir testcase (#29183)"
        },
        {
            "date": "2024-03-08 11:13:46",
            "message": "ethclient/gethclient: add blob transaction fields in toCallArg (#29198)"
        },
        {
            "date": "2024-03-07 23:01:31",
            "message": "log: add Handler getter to Logger interface (#28793)\n\nlog: Add Handler getter to Logger interface"
        },
        {
            "date": "2024-03-07 21:56:19",
            "message": "all: fix typos in comments (#29186)"
        },
        {
            "date": "2024-03-07 21:25:08",
            "message": "accounts: remove redundant string conversion (#29184)"
        },
        {
            "date": "2024-03-06 16:50:22",
            "message": "cmd/blsync, beacon/light: beacon chain light client (#28822)\n\nHere we add a beacon chain light client for use by geth.\r\n\r\nGeth can now be configured to run against a beacon chain API endpoint,\r\nwithout pointing a CL to it. To set this up, use the `--beacon.api` flag. Information\r\nprovided by the beacon chain is verified, i.e. geth does not blindly trust the beacon\r\nAPI endpoint in this mode. The root of trust are the beacon chain 'sync committees'.\r\n\r\nThe configured beacon API endpoint must provide light client data. At this time, only\r\nLodestar and Nimbus provide the necessary APIs.\r\n\r\nThere is also a standalone tool, cmd/blsync, which uses the beacon chain light client\r\nto drive any EL implementation via its engine API.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-03-06 12:45:03",
            "message": "miner: refactor the miner, make the pending block on demand (#28623)\n\n* miner: untangle miner\r\n\r\n* miner: use common.hash instead of *types.header\r\n\r\n* cmd/geth: deprecate --mine\r\n\r\n* eth: get rid of most miner api\r\n\r\n* console: get rid of coinbase in welcome message\r\n\r\n* miner/stress: get rid of the miner stress test\r\n\r\n* eth: get rid of miner.setEtherbase\r\n\r\n* ethstats: remove miner and hashrate flags\r\n\r\n* ethstats: remove miner and hashrate flags\r\n\r\n* cmd: rename pendingBlockProducer to miner.pending.feeRecipient flag\r\n\r\n* miner: use pendingFeeRecipient instead of etherbase\r\n\r\n* miner: add mutex to protect the pending block\r\n\r\n* miner: add mutex to protect the pending block\r\n\r\n* eth: get rid of etherbase mentions\r\n\r\n* miner: no need to lock the coinbase\r\n\r\n* eth, miner: fix linter\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
        },
        {
            "date": "2024-03-06 12:36:12",
            "message": "eth/tracers: prestate tracer add blob fee (#29168)\n\n* eth/tracers: prestate balance add blob fee\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* eth/tracers: prestate test support blob tx\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* eth/tracers: add prestate blob tx test\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2024-03-06 10:55:44",
            "message": "accounts: remove deprecated function NewPlaintextKeyStore (#29171)"
        },
        {
            "date": "2024-03-06 10:31:50",
            "message": "accounts/usbwallet: update hid library (#29176)"
        },
        {
            "date": "2024-03-06 09:53:12",
            "message": "rpc: add more test cases for arg types (#29006)"
        },
        {
            "date": "2024-03-06 09:32:17",
            "message": "accounts/usbwallet: revert #28945 (#29175)"
        },
        {
            "date": "2024-03-06 05:23:35",
            "message": "internal/ethapi: delete needless error check (#29127)"
        },
        {
            "date": "2024-03-05 14:15:02",
            "message": "go.mod: bump pebble db to official release (#29038)\n\nbump pebble"
        },
        {
            "date": "2024-03-05 14:13:28",
            "message": "consensus, cmd, core, eth: remove support for non-merge mode of operation (#29169)\n\n* eth: drop support for forward sync triggers and head block packets\r\n\r\n* consensus, eth: enforce always merged network\r\n\r\n* eth: fix tx looper startup and shutdown\r\n\r\n* cmd, core: fix some tests\r\n\r\n* core: remove notion of future blocks\r\n\r\n* core, eth: drop unused methods and types"
        },
        {
            "date": "2024-03-05 13:52:44",
            "message": "node: remove test which doesn't do a lot (#29159)\n\n* node: fix test if directory already exists\r\n\r\n* node: remove test"
        },
        {
            "date": "2024-03-05 13:48:27",
            "message": "core: remove useless assignments (#29065)"
        },
        {
            "date": "2024-03-05 13:45:17",
            "message": "rlp: using unsafe.Slice instead of SliceHeader (#29067)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-03-05 13:44:23",
            "message": "rpc: remove deprecated method \"Notifier.Closed\" (#29162)"
        },
        {
            "date": "2024-03-05 13:37:26",
            "message": "internal/jsre: format blob fields from hexdecimal to int  (#29166)\n\n* internal/jsre: format receipt.{blobGasPrice,blobGasUsed} to int\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* internal/jsre: format tx.maxFeePerBlobGas to int\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* internal/jsre: format blob* in block\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2024-03-05 13:32:47",
            "message": "accounts/usbwallet: use updated hid (only) library (#28945)\n\n* accounts/usbwallet: use updated hid (only) library\r\n\r\n* deps: update karalabe/hid"
        },
        {
            "date": "2024-03-05 13:31:55",
            "message": "core/state, trie/triedb/pathdb: remove storage incomplete flag (#28940)\n\nAs SELF-DESTRUCT opcode is disabled in the cancun fork(unless the\r\naccount is created within the same transaction, nothing to delete\r\nin this case). The account will only be deleted in the following\r\ncases:\r\n\r\n- The account is created within the same transaction. In this case\r\nthe original storage was empty.\r\n\r\n- The account is empty(zero nonce, zero balance, zero code) and\r\nis touched within the transaction. Fortunately this kind of accounts\r\nare not-existent on ethereum-mainnet.\r\n\r\nAll in all, after cancun, we are pretty sure there is no large contract\r\ndeletion and we don't need this mechanism for oom protection."
        },
        {
            "date": "2024-03-05 09:47:56",
            "message": "rlp: remove a moot todo (#29154)"
        },
        {
            "date": "2024-03-05 08:47:58",
            "message": "core: initialize `gasRemaining` with `=` instead of `+=` (#29149)\n\ninitialize gasRemaining with = instead of +="
        },
        {
            "date": "2024-03-05 07:33:52",
            "message": "core/types: reuse signtx (#29152)\n\n* core/types: reuse signtx\r\n\r\n* core/types: inline signtx"
        },
        {
            "date": "2024-03-04 20:58:25",
            "message": ".mailmap: remove invalid email address (#29163)"
        },
        {
            "date": "2024-03-04 19:21:43",
            "message": "eth/tracers: Fix prestateTracer pre nonce on contract creation (#29099)\n\nThe prestateTracer was reporting an inaccurate nonce for the contract being created in\r\npost EIP-158 transactions. Correct nonce is 0, due to the issue nonce was being reported as 1."
        },
        {
            "date": "2024-03-04 14:25:53",
            "message": "core: use finalized block as the chain freeze indicator (#28683)\n\n* core: use finalized block as the chain freeze indicator\r\n\r\n* core/rawdb: use max(finality, head-90k) as chain freezing threshold\r\n\r\n* core/rawdb: fix tests\r\n\r\n* core/rawdb: fix lint\r\n\r\n* core/rawdb: address comments from peter\r\n\r\n* core/rawdb: fix typo"
        },
        {
            "date": "2024-03-04 13:07:41",
            "message": "cmd/devp2p: fix commandHasFlag (#29091)\n\nIt got broken in some update of the cli library, and thus bootnodes weren't \r\nbeing configured automatically for some of the discovery commands."
        },
        {
            "date": "2024-03-04 10:03:53",
            "message": "triedb/pathdb: changed the test code to check for verifying state (#29150)\n\nCo-authored-by: this-is-iron <iron@superblock.co>"
        },
        {
            "date": "2024-03-04 09:31:18",
            "message": "all: use EmptyUncleHash, EmptyCodeHash instead of raw value (#29134)"
        },
        {
            "date": "2024-03-04 09:30:15",
            "message": "core: delete unused ErrMaxInitCodeSizeExceeded (#29062)"
        },
        {
            "date": "2024-03-04 09:24:24",
            "message": "accounts/abi: delete duplicate error check (#29136)"
        },
        {
            "date": "2024-03-04 09:16:05",
            "message": "p2p: remove unused argument 'flags' (#29132)"
        },
        {
            "date": "2024-03-02 20:42:50",
            "message": "all: remove redundant import aliases (#29144)"
        },
        {
            "date": "2024-03-02 20:39:22",
            "message": "eth: make transaction propagation paths in the network deterministic (#29034)\n\n* eth: make transaction propagation paths in the network deterministic\r\n\r\n* eth: avoid potential division by 0\r\n\r\n* eth: make tx propagation dependent on local node id too\r\n\r\n* eth: fix review comments"
        },
        {
            "date": "2024-02-29 12:17:32",
            "message": "eth/catalyst: update simulated beacon for cancun (#28829)\n\n* eth/catalyst: update simulated beacon for cancun\r\n\r\n* validate blob hashes\r\n\r\n* compute hashes from commitment\r\n\r\n* fix beacon root and payload version\r\n\r\n* check commitment conversion\r\n\r\n* fix random attr\r\n\r\n* flip dev to cancun"
        },
        {
            "date": "2024-02-29 10:40:59",
            "message": "cmd/utils, core/rawdb, triedb/pathdb: flip hash to path scheme (#29108)\n\n* cmd/utils, core/rawdb, triedb/pathdb: flip hash to path scheme\r\n\r\n* graphql: run tests in hash mode as the chain maker needs it"
        },
        {
            "date": "2024-02-29 09:56:46",
            "message": "all: replace fmt.Errorf() with errors.New() if no param required (#29126)\n\nreplace-fmt-errorf\r\n\r\nCo-authored-by: yzb@example.cn <yzb@example.cn>"
        },
        {
            "date": "2024-02-29 09:56:17",
            "message": "cmd/geth: parseDumpConfig should not return closed db (#29100)\n\n* cmd: parseDumpConfig should not return closed db\r\n\r\n* fix lint"
        },
        {
            "date": "2024-02-29 09:29:06",
            "message": "all: fix function names in docs (#29128)\n\nSigned-off-by: cui fliter <imcusg@gmail.com>"
        },
        {
            "date": "2024-02-28 18:59:16",
            "message": "eth/catalyst: return invalid payload attributes instead of invalid parms for bad fcu payload (#29115)"
        },
        {
            "date": "2024-02-28 17:38:21",
            "message": "internal/ethapi: pass in accesslist in test (#29089)\n\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2024-02-28 12:40:28",
            "message": "triedb/pathdb: fix panic in recoverable (#29107)\n\n* triedb/pathdb: fix panic in recoverable\r\n\r\n* triedb/pathdb: add todo\r\n\r\n* triedb/pathdb: rename\r\n\r\n* triedb/pathdb: rename"
        },
        {
            "date": "2024-02-28 12:23:52",
            "message": "core, triedb/pathdb: calculate the size for batch pre-allocation (#29106)\n\n* core, triedb/pathdb: calculate the size for batch pre-allocation\r\n\r\n* triedb/pathdb: address comment"
        },
        {
            "date": "2024-02-28 08:01:52",
            "message": "params: being major version bump cycle"
        },
        {
            "date": "2024-02-28 07:25:12",
            "message": "core: using math.MaxUint64 instead of 0xffffffffffffffff (#29094)"
        },
        {
            "date": "2024-02-27 11:53:30",
            "message": "params: begin v1.13.15 cycle"
        },
        {
            "date": "2024-02-27 11:50:30",
            "message": "params: release Geth v1.13.14"
        },
        {
            "date": "2024-02-27 11:27:50",
            "message": "core/txpool: elevate the 'already reserved' error into a constant (#29095)\n\ndeclare the 'already reserved' error in errors.go"
        },
        {
            "date": "2024-02-27 09:29:12",
            "message": "eth/tracers: Fix callTracer logs on onlyTopCall == true (#29068)"
        },
        {
            "date": "2024-02-26 16:34:45",
            "message": "core/txpool: no need to log loud rotate if no local txs (#29083)\n\n* core/txpool: no need to run rotate if no local txs\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* Revert \"core/txpool: no need to run rotate if no local txs\"\r\n\r\nThis reverts commit 17fab173883168c586d57ca9c05dfcbd9e7831b4.\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* use Debug if todo is empty\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2024-02-26 12:27:56",
            "message": "core/txpool/blobpool: reduce default database cap for rollout (#29090)\n\nxcore/txpool/blobpool: reduce default database cap for rollout"
        },
        {
            "date": "2024-02-26 12:22:13",
            "message": "eth/catalyst: remove variable in tx conversion loop (#29076)"
        },
        {
            "date": "2024-02-26 10:03:59",
            "message": "cmd/clef: add spaces in README.md table (#29077)\n\nAdd space after links in so they are clickable in vscode."
        },
        {
            "date": "2024-02-26 10:02:18",
            "message": "internal/ethapi: pass blob hashes to gas estimation (#29085)"
        },
        {
            "date": "2024-02-26 09:59:03",
            "message": "eth/catalyst: enable some commented-out testcases\u00a0\u00a0 (#29073)"
        },
        {
            "date": "2024-02-26 09:25:35",
            "message": "p2p, log, rpc: use errors.New to replace fmt.Errorf with no parameters (#29074)"
        },
        {
            "date": "2024-02-26 09:06:52",
            "message": "core/txpool: reject blob txs with blob fee cap below the minimum (#29081)\n\n* make blobpool reject blob transactions with fee below the minimum\r\n\r\n* core/txpool: some minot nitpick polishes and unified error formats\r\n\r\n* core/txpool: do less big.Int constructions with the min blob cap\r\n\r\n---------\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
        },
        {
            "date": "2024-02-23 08:57:47",
            "message": "eth/catalyst: fix wrong error message of payloadV2 after cancun (#29049)\n\n* eth/catalyst: the same error format\r\n\r\nSigned-off-by: tmelhao <tmelhao@gmail.com>\r\n\r\n* eth/catalyst: wrong error message for payloadV2 post-cancun\r\n\r\nSigned-off-by: tmelhao <tmelhao@gmail.com>\r\n\r\n* eth/catalyst: parentBeaconBlockRoot -> parentBlockBeaconRoot\r\n\r\nSigned-off-by: tmelhao <tmelhao@gmail.com>\r\n\r\n* apply commit review\r\n\r\nSigned-off-by: tmelhao <tmelhao@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: tmelhao <tmelhao@gmail.com>\r\nCo-authored-by: tmelhao <tmelhao@gmail.com>"
        },
        {
            "date": "2024-02-22 15:35:23",
            "message": "internal/ethapi:fix zero rpc gas cap in eth_createAccessList (#28846)\n\nThis PR enhances eth_createAccessList RPC call to support scenarios where the node is launched with an unlimited gas cap (--rpc.gascap 0). The eth_createAccessList RPC call returns failure if user doesn't explicitly set a gas limit."
        },
        {
            "date": "2024-02-22 13:39:22",
            "message": "internal/ethapi: use overriden baseFee for gasPrice (#29051)\n\neth_call and debug_traceCall allow users to override various block fields, among them base fee. However the overriden base fee was not considered for computing the effective gas price of that message, and instead base fee of the base block was used. This has been fixed in this commit."
        },
        {
            "date": "2024-02-21 14:49:50",
            "message": "params: begin v1.13.14 release cycle"
        },
        {
            "date": "2024-02-21 14:44:02",
            "message": "params: release go-ethereum v1.13.13 stable"
        },
        {
            "date": "2024-02-21 11:46:32",
            "message": "internal/ethapi: fix defaults for blob fields (#29037)\n\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-02-21 08:00:01",
            "message": "core/txpool: fix typo (#29036)\n\n* fix typos\r\n\r\n* address comments"
        },
        {
            "date": "2024-02-21 07:59:21",
            "message": "params: add cancun upgrade banner (#29042)\n\nparams: add cancun banner\r\n\r\nSigned-off-by: tmelhao <tmelhao@gmail.com>\r\nCo-authored-by: tmelhao <tmelhao@gmail.com>"
        },
        {
            "date": "2024-02-20 11:42:48",
            "message": "core,eth,internal: fix typo (#29024)"
        },
        {
            "date": "2024-02-20 10:08:56",
            "message": "core/txpool: fix typo (#29031)"
        },
        {
            "date": "2024-02-20 09:37:23",
            "message": "core/txpool, eth, miner: retrieve plain and blob txs separately (#29026)\n\n* core/txpool, eth, miner: retrieve plain and blob txs separately\r\n\r\n* core/txpool: fix typo, no farming\r\n\r\n* miner: farm all the typos\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>\r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-02-19 15:29:59",
            "message": "core/vm, params: ensure order of forks, prevent overflow (#29023)\n\nThis PR fixes an overflow which can could happen if inconsistent blockchain rules were configured. Additionally, it tries to prevent such inconsistencies from occurring by making sure that merge cannot be enabled unless previous fork(s) are also enabled."
        },
        {
            "date": "2024-02-19 13:59:40",
            "message": "core/txpool, miner: speed up blob pool pending retrievals (#29008)\n\n* core/txpool, miner: speed up blob pool pending retrievals\r\n\r\n* miner: fix test merge issue\r\n\r\n* eth: same same\r\n\r\n* core/txpool/blobpool: speed up blobtx creation in benchmark a bit\r\n\r\n* core/txpool/blobpool: fix linter\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-02-19 12:03:58",
            "message": "core: using math.MaxUint64 instead of 0xffffffffffffffff (#29022)"
        },
        {
            "date": "2024-02-19 06:25:53",
            "message": "ethstats: prevent panic if head block is not available (#29020)\n\nThis pull request fixes a flaw in ethstats which can lead to node crash\r\n\r\nA panic could happens when the local blockchain is reorging which causes the original head block not to be  reachable (since number->hash canonical mapping is deleted). In order to prevent the panic, the block nilness is now checked in ethstats."
        },
        {
            "date": "2024-02-17 11:37:14",
            "message": "core/txpool, eth, miner: pre-filter dynamic fees during pending tx retrieval (#29005)\n\n* core/txpool, eth, miner: pre-filter dynamic fees during pending tx retrieval\r\n\r\n* miner: fix typo\r\n\r\n* core/txpool: handle init-error in blobpool without panicing\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-02-16 18:05:33",
            "message": "core: move genesis alloc types to core/types (#29003)\n\nWe want to use these types in public user-facing APIs, so they shouldn't be in core.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-02-16 15:33:14",
            "message": "core/txpool/blobpool: update the blob db with corruption handling (#29001)\n\nUpdates billy to a more recent version which is more robust in the face of corrupt data (e.g. after a hard crash)"
        },
        {
            "date": "2024-02-15 18:50:17",
            "message": "core/txpool/legacypool: remove a redundant heap.Init (#28910)\n\n\r\nCo-authored-by: Martin HS <martin@swende.se>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-02-15 18:43:37",
            "message": "cmd/devp2p/internal/ethtest: some fixes for the eth test suite (#28996)\n\nImproving two things here:\r\n\r\nOn hive, where we look at these tests, the Go code comment above the test\r\nis not visible. When there is a failure, it's not obvious what the test is actually\r\nexpecting. I have converted the comments in to printed log messages to\r\nexplain the test more.\r\n\r\nSecond, I noticed that besu is failing some tests because it happens to request\r\na header when we want it to send transactions. Trying the minimal fix here to\r\nserve the headers.\r\n\r\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>"
        },
        {
            "date": "2024-02-15 14:54:40",
            "message": "cmd/evm: fix typo in test script (#28995)"
        },
        {
            "date": "2024-02-15 13:43:45",
            "message": "eth/catalyst: add getClientVersion to capabilities (#28994)"
        },
        {
            "date": "2024-02-15 12:30:11",
            "message": "tests: update execution spec tests + split statetest exec (#28993)"
        },
        {
            "date": "2024-02-15 11:01:30",
            "message": "eth/catalyst,beacon/engine: implement GetClientVersionV1 (#28915)"
        },
        {
            "date": "2024-02-15 09:22:03",
            "message": "cmd/devp2p: fix modulo in makeBlobTxs (#28970)"
        },
        {
            "date": "2024-02-15 09:20:10",
            "message": "core/txpool/blobpool: rename variables in comments (#28981)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-02-15 09:08:46",
            "message": "ethereum, ethclient: add blob transaction fields in CallMsg (#28989)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-02-14 16:02:56",
            "message": "tests: fix goroutine leak related to state snapshot generation (#28974)\n\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-02-14 08:26:53",
            "message": "cmd/utils: fix merge-breakage in test (#28985)"
        },
        {
            "date": "2024-02-13 13:49:53",
            "message": "all: remove the dependency from trie to triedb (#28824)\n\nThis change removes the dependency from trie package to triedb package."
        },
        {
            "date": "2024-02-13 09:14:18",
            "message": "internal/ethapi, signer/core: fix documentation-links (#28979)\n\nfix: management api links"
        },
        {
            "date": "2024-02-13 09:10:11",
            "message": "core/txpool/legacypool: use uint256.Int instead of big.Int (#28606)\n\nThis change makes the legacy transaction pool use of `uint256.Int` instead of `big.Int`. The changes are made primarily only on the internal functions of legacypool. \r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-02-09 19:53:04",
            "message": "internal/ethapi: fix gas estimation bug in eth_fillTransaction for blob tx (#28929)"
        },
        {
            "date": "2024-02-09 18:30:56",
            "message": "fix: update outdated link to trezor docs (#28966)\n\nfix: update link to trezor"
        },
        {
            "date": "2024-02-09 12:15:11",
            "message": "build: remove ubuntu 'lunar' build (#28962)"
        },
        {
            "date": "2024-02-09 07:00:05",
            "message": "params: begin v1.13.13 release cycle"
        },
        {
            "date": "2024-02-09 06:51:43",
            "message": "params: go-ethereum v1.13.12 stable"
        },
        {
            "date": "2024-02-09 06:42:50",
            "message": "internal/era: update block index format to be based on record offset (#28959)\n\nAs mentioned in #26621, the block index format for era1 is not in line with the regular era block index. This change modifies the index so all relative offsets are based against the beginning of the block index record."
        },
        {
            "date": "2024-02-08 18:53:32",
            "message": "internal/ethapi: add support for blobs in eth_fillTransaction (#28839)\n\nThis change adds support for blob-transaction in certain API-endpoints, e.g. eth_fillTransaction. A follow-up PR will add support for signing such transactions."
        },
        {
            "date": "2024-02-08 18:36:38",
            "message": "params, core/forkid: add mainnet timestamp for Cancun (#28958)\n\n* params: add cancun timestamp for mainnet\r\n\r\n* core/forkid: add test for mainnet cancun forkid\r\n\r\n* core/forkid: update todo tests for cancun"
        },
        {
            "date": "2024-02-08 13:49:19",
            "message": "cmd/devp2p, eth: drop support for eth/67 (#28956)"
        },
        {
            "date": "2024-02-08 12:34:38",
            "message": "eth/gasprice: fix percentile validation in eth_feeHistory (#28954)"
        },
        {
            "date": "2024-02-08 10:25:13",
            "message": "ethclient/simulated: fix typo (#28952)\n\n(ethclient/simulated):fix typo"
        },
        {
            "date": "2024-02-07 20:10:49",
            "message": "all: fix docstring names (#28923)\n\n* fix wrong comment\r\n\r\n* reviewers input\r\n\r\n* Update log/handler_glog.go\r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2024-02-07 20:06:38",
            "message": "node, rpc: add configurable HTTP request limit (#28948)\n\nAdds a configurable HTTP request limit, and bumps the engine default"
        },
        {
            "date": "2024-02-07 16:19:14",
            "message": "core,params: add holesky to default genesis function (#28903)"
        },
        {
            "date": "2024-02-07 16:18:27",
            "message": "cmd,internal/era: implement `export-history` subcommand (#26621)\n\n* all: implement era format, add history importer/export\r\n\r\n* internal/era/e2store: refactor e2store to provide ReadAt interface\r\n\r\n* internal/era/e2store: export HeaderSize\r\n\r\n* internal/era: refactor era to use ReadAt interface\r\n\r\n* internal/era: elevate anonymous func to named\r\n\r\n* cmd/utils: don't store entire era file in-memory during import / export\r\n\r\n* internal/era: better abstraction between era and e2store\r\n\r\n* cmd/era: properly close era files\r\n\r\n* cmd/era: don't let defers stack\r\n\r\n* cmd/geth: add description for import-history\r\n\r\n* cmd/utils: better bytes buffer\r\n\r\n* internal/era: error if accumulator has more records than max allowed\r\n\r\n* internal/era: better doc comment\r\n\r\n* internal/era/e2store: rm superfluous reader, rm superfluous testcases, add fuzzer\r\n\r\n* internal/era: avoid some repetition\r\n\r\n* internal/era: simplify clauses\r\n\r\n* internal/era: unexport things\r\n\r\n* internal/era,cmd/utils,cmd/era: change to iterator interface for reading era entries\r\n\r\n* cmd/utils: better defer handling in history test\r\n\r\n* internal/era,cmd: add number method to era iterator to get the current block number\r\n\r\n* internal/era/e2store: avoid double allocation during write\r\n\r\n* internal/era,cmd/utils: fix lint issues\r\n\r\n* internal/era: add ReaderAt func so entry value can be read lazily\r\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\n* internal/era: improve iterator interface\r\n\r\n* internal/era: fix rlp decode of header and correctly read total difficulty\r\n\r\n* cmd/era: fix rebase errors\r\n\r\n* cmd/era: clearer comments\r\n\r\n* cmd,internal: fix comment typos\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
        },
        {
            "date": "2024-02-07 16:01:38",
            "message": "core/state, core/vm: minor uint256 related perf improvements (#28944)"
        },
        {
            "date": "2024-02-06 08:59:24",
            "message": "eth, miner: fix enforcing the minimum miner tip (#28933)\n\n* eth, miner: fix enforcing the minimum miner tip\r\n\r\n* ethclient/simulated: fix failing test due the min tip change\r\n\r\n* accounts/abi/bind: fix simulater gas tip issue"
        },
        {
            "date": "2024-02-06 02:44:42",
            "message": "core: cache transaction indexing tail in memory (#28908)"
        },
        {
            "date": "2024-02-05 21:48:19",
            "message": "Makefile: add help target to display available targets (#28845)\n\n\r\nCo-authored-by: Martin HS <martin@swende.se>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-02-05 21:16:32",
            "message": "all: fix typos in comments (#28881)"
        },
        {
            "date": "2024-02-05 21:01:56",
            "message": "internal/flags: fix --miner.gasprice default listing (#28932)"
        },
        {
            "date": "2024-02-05 21:00:46",
            "message": "p2p: fix accidental termination of portMappingLoop (#28911)"
        },
        {
            "date": "2024-02-04 05:55:30",
            "message": "core/types: fix typo (#28922)"
        },
        {
            "date": "2024-02-02 18:39:12",
            "message": "core/txpool: don't inject lazy resolved transactions into the container (#28917)\n\n* core/txpool: don't inject lazy resolved transactions into the container\r\n\r\n* core/txpool: minor typo fixes"
        },
        {
            "date": "2024-02-02 16:26:35",
            "message": "core/txpool/blobpool: post-crash cleanup and addition/removal metrics (#28914)\n\n* core/txpool/blobpool: clean up resurrected junk after a crash\r\n\r\n* core/txpool/blobpool: track transaction insertions and rejections\r\n\r\n* core/txpool/blobpool: linnnnnnnt"
        },
        {
            "date": "2024-02-02 16:26:13",
            "message": "deps: update memsize (#28916)"
        },
        {
            "date": "2024-01-31 08:57:33",
            "message": "eth/downloader: fix skeleton cleanup (#28581)\n\n* eth/downloader: fix skeleton cleanup\r\n\r\n* eth/downloader: short circuit if nothing to delete\r\n\r\n* eth/downloader: polish the logic in cleanup\r\n\r\n* eth/downloader: address comments"
        },
        {
            "date": "2024-01-31 08:45:20",
            "message": "build: fix problem with windows line-endings in CI download (#28900)\n\nfixes #28890"
        },
        {
            "date": "2024-01-30 01:34:14",
            "message": "core: reset tx lookup cache if necessary (#28865)\n\nThis pull request resets the txlookup cache if chain reorg happens, \r\npreventing them from remaining reachable. It addresses failures in\r\nthe hive tests."
        },
        {
            "date": "2024-01-29 15:40:57",
            "message": "docs/postmortems: fix outdated link (#28893)"
        },
        {
            "date": "2024-01-29 10:53:25",
            "message": "eth/catalyst: allow payload attributes v1 in fcu v2 (#28882)\n\nAt some point, `ForkchoiceUpdatedV2` stopped working for `PayloadAttributesV1` while `paris` was active. This was causing a few failures in hive. This PR fixes that, and also adds a gate in `ForkchoiceUpdatedV1` to disallow `PayloadAttributesV3`."
        },
        {
            "date": "2024-01-29 09:58:43",
            "message": "README.md: fix travis badge (#28889)\n\nThe hyperlink in the README file that directs to the Travis CI build was broken.\r\nThis commit updates the link to point to the corrent build page."
        },
        {
            "date": "2024-01-27 20:16:20",
            "message": "core/types: fix and test handling of faulty nil-returning signer (#28879)\n\nThis adds an error if the signer returns a nil value for one of the signature value fields."
        },
        {
            "date": "2024-01-26 07:57:04",
            "message": "internal/flags: fix typo (#28876)"
        },
        {
            "date": "2024-01-24 10:53:54",
            "message": "params: begin v.1.13.12 release cycle"
        },
        {
            "date": "2024-01-24 10:45:29",
            "message": "params: go-ethereum v1.13.11 stable"
        },
        {
            "date": "2024-01-24 08:07:20",
            "message": "ethclient: fix flaky test (#28864)\n\nFix flaky test due to incomplete transaction indexing"
        },
        {
            "date": "2024-01-24 07:39:12",
            "message": "eth/catalyst: prefix payload id with version (#28246)\n\nGetPayloadVX should only return payloads which match its version. GetPayloadV2 is a special snowflake that supports v1 and v2 payloads. This change uses a a version-specific prefix within in the payload id, basically a namespace for the version number."
        },
        {
            "date": "2024-01-23 20:00:50",
            "message": "core: move tx indexer to its own file (#28857)\n\nThis change moves all the transaction indexing functions to a separate txindexer.go file and defines a txIndexer structure as a refactoring."
        },
        {
            "date": "2024-01-23 19:59:38",
            "message": "core/txpool, eth/catalyst: fix racy simulator due to txpool background reset (#28837)\n\nThis PR fixes an issues in the new simulated backend. The root cause is the fact that the transaction pool has an internal reset operation that runs on a background thread.\r\n\r\nWhen a new transaction is added to the pool via the RPC, the transaction is added to a non-executable queue and will be moved to its final location on a background thread. If the machine is overloaded (or simply due to timing issues), it can happen that the simulated backend will try to produce the next block, whilst the pool has not yet marked the newly added transaction executable. This will cause the block to not contain the transaction. This is an issue because we want determinism from the simulator: add a tx, mine a block. It should be in there.\r\n\r\nThe PR fixes it by adding a Sync function to the txpool, which waits for the current reset operation (if any) to finish, and then runs an entire round of reset on top. The new round is needed because resets are only triggered by new head events, so newly added transactions will not trigger the outer resets that we can wait on. The transaction pool would eventually internally do a reset even on transaction addition, but there's no easy way to wait on that and there's no meaningful reason to bubble that across everything. A clean outer reset will at worse be a small noop goroutine."
        },
        {
            "date": "2024-01-23 15:02:08",
            "message": "eth/catalyst: add timestamp checks to fcu and new payload and improve param checks (#28230)\n\n This PR introduces a few changes with respect to payload verification in fcu and new payload requests:\r\n\r\n* First of all, it undoes the `verifyPayloadAttributes(..)` simplification I attempted in #27872. \r\n* Adds timestamp validation to fcu payload attributes [as required](https://github.com/ethereum/execution-apis/blob/main/src/engine/cancun.md#specification-1) (section 2) by the Engine API spec. \r\n* For the new payload methods, I also update the verification of the executable data. For `newPayloadV2`, it does not currently ensure that cancun values are `nil`. Which could make it possible to submit cancun payloads through it. \r\n* On `newPayloadV3` the same types of checks are added. All shanghai and cancun related fields in the executable data must be non-nil, with the addition that the timestamp is _only_ with cancun.\r\n* Finally it updates a newly failing catalyst test to call the correct fcu and new payload methods depending on the fork."
        },
        {
            "date": "2024-01-23 14:17:42",
            "message": "core/vm: fix misleading comment (#28860)\n\nfix misleading comment"
        },
        {
            "date": "2024-01-23 14:15:48",
            "message": "core/state/snapshot: use AddHash/ContainHash instead of Hasher interface (#28849)\n\nThis change switches from using the `Hasher` interface to add/query the bloomfilter to implementing it as methods.\r\nThis significantly reduces the allocations for Search and Rebloom."
        },
        {
            "date": "2024-01-23 14:02:58",
            "message": "build: upgrade -dlgo version to Go 1.21.6 (#28836)"
        },
        {
            "date": "2024-01-23 13:51:58",
            "message": "all: use uint256 in state (#28598)\n\nThis change makes use of uin256 to represent balance in state. It touches primarily upon statedb, stateobject and state processing, trying to avoid changes in transaction pools, core types, rpc and tracers."
        },
        {
            "date": "2024-01-23 13:46:34",
            "message": "core: fix genesis setup in benchReadChain (#28856)"
        },
        {
            "date": "2024-01-23 10:40:01",
            "message": "go.{mod,sum}: upgrade go-ole to support arm64 (#28859)\n\ngo.{mod,sum}: upgrade go-ole"
        },
        {
            "date": "2024-01-23 08:26:00",
            "message": "docs: remove reference to being official (#28858)"
        },
        {
            "date": "2024-01-22 20:05:18",
            "message": "core, core/rawdb, eth/sync: no tx indexing during snap sync (#28703)\n\nThis change simplifies the logic for indexing transactions and enhances the UX when transaction is not found by returning more information to users.\r\n\r\nTransaction indexing is now considered as a part of the initial sync, and `eth.syncing` will thus be `true` if transaction indexing is not yet finished. API consumers can use the syncing status to determine if the node is ready to serve users."
        },
        {
            "date": "2024-01-20 15:03:14",
            "message": "params, core/forkid: enable cancun on sepolia and holesky (#28834)\n\nThis change enables Cancun \r\n\r\n- Sepolia at 1706655072 (Jan 31st, 2024)\r\n- Holesky at 1707305664 (Feb 7th, 2024)\r\n\r\nSpecification: https://github.com/ethereum/execution-specs/pull/860"
        },
        {
            "date": "2024-01-19 15:43:02",
            "message": "ethclient: apply accessList field in toCallArg (#28832)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-01-19 10:41:17",
            "message": "crypto/kzg4844: add helpers for versioned blob hashes (#28827)\n\nThe code to compute a versioned hash was duplicated a couple times, and also had a small\r\nissue: if we ever change params.BlobTxHashVersion, it will most likely also cause changes\r\nto the actual hash computation. So it's a bit useless to have this constant in params."
        },
        {
            "date": "2024-01-18 12:08:13",
            "message": "eth/filters: reset filter.begin in BenchmarkFilters (#28830)"
        },
        {
            "date": "2024-01-17 14:06:14",
            "message": "internal/ethapi: handle blobs in API methods (#28786)\n\nEIP-4844 adds a new transaction type for blobs. Users can submit such transactions via `eth_sendRawTransaction`. In this PR we refrain from adding support to `eth_sendTransaction` and in fact it will fail if the user passes in a blob hash.\r\n\r\nHowever since the chain can handle such transactions it makes sense to allow simulating them. E.g. an L2 operator should be able to simulate submitting a rollup blob and updating the L2 state. Most methods that take in a transaction object should recognize blobs. The change boils down to adding `blobVersionedHashes` and `maxFeePerBlobGas` to `TransactionArgs`. In summary:\r\n\r\n- `eth_sendTransaction`: will fail for blob txes\r\n- `eth_signTransaction`: will fail for blob txes\r\n\r\nThe methods that sign txes does not, as of this PR, add support the for new EIP-4844 transaction types. Resuming the summary:\r\n\r\n- `eth_sendRawTransaction`: can send blob txes\r\n- `eth_fillTransaction`: will fill in a blob tx. Note: here we simply fill in normal transaction fields + possibly `maxFeePerBlobGas` when blobs are present. One can imagine a more elaborate set-up where users can submit blobs themselves and we fill in proofs and commitments and such. Left for future PRs if desired.\r\n- `eth_call`: can simulate blob messages\r\n- `eth_estimateGas`: blobs have no effect here. They have a separate unit of gas which is not tunable in the transaction."
        },
        {
            "date": "2024-01-17 10:44:01",
            "message": "miner: fix typo in payload_building_test.go (#28825)"
        },
        {
            "date": "2024-01-16 11:20:26",
            "message": "tracer: use proper base fee in tests (#28775)\n\n In the tracing tests, the base fee was generally set to nil. This commit changes this to pass the proper base instead, and fixes the few tests which become broken by the change."
        },
        {
            "date": "2024-01-16 11:08:49",
            "message": "tests: more verbosity if block decoding fails (#28814)"
        },
        {
            "date": "2024-01-15 19:45:50",
            "message": "acounts/usbwallet: fix typo (#28815)\n\nacounts:fix typo"
        },
        {
            "date": "2024-01-15 19:45:14",
            "message": "core/txpool/blobpool: fix typos"
        },
        {
            "date": "2024-01-15 14:32:03",
            "message": "eth: fix potential hang in waitSnapExtension (#28744)\n\nThis should fix a rare hang in waitSnapExtension during shutdown."
        },
        {
            "date": "2024-01-15 10:10:26",
            "message": "ethclient: add tests for TransactionInBlock (#28283)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-01-15 08:15:40",
            "message": "tests: update reference tests (#28778)\n\nUpdates the reference tests to the latest version"
        },
        {
            "date": "2024-01-14 11:32:48",
            "message": "cmd/rlpdump: add -pos flag, displaying byte positions (#28785)"
        },
        {
            "date": "2024-01-14 11:32:23",
            "message": "core/state: unexport GetOrNewStateObject (#28804)"
        },
        {
            "date": "2024-01-12 18:59:36",
            "message": "internal/ethapi: avoid using pending for defaults (#28784)\n\nGiven the discussions around deprecating pending (see #28623 or ethereum/execution-apis#495), we can move away from using the pending block internally, and use latest instead"
        },
        {
            "date": "2024-01-12 18:57:47",
            "message": "p2p/dnsdisc: use strings.Cut over strings.IndexByte (#28787)"
        },
        {
            "date": "2024-01-12 14:14:03",
            "message": "cmd/devp2p/internal/ethtest: skip large tx test on github build (#28794)\n\nThis test was failling consistently on the github 32-bit build probably due to slow IO. Skipping it for that green check."
        },
        {
            "date": "2024-01-12 13:59:03",
            "message": "cmd/geth, internal/debug: get rid of by-default log config (#28801)"
        },
        {
            "date": "2024-01-12 13:58:49",
            "message": "accounts, ethclient: minor tweaks on the new simulated backend (#28799)\n\n* accounts, ethclient: minor tweaks on the new simulated backend\r\n\r\n* ethclient/simulated: add an initial batch of gas options\r\n\r\n* accounts, ethclient: remove mandatory gasLimit constructor param\r\n\r\n* accounts, ethclient: minor option naming tweaks"
        },
        {
            "date": "2024-01-12 13:22:45",
            "message": "build: fix typo in comment (#28800)"
        },
        {
            "date": "2024-01-12 08:40:00",
            "message": "cmd: fix typos (#28798)"
        },
        {
            "date": "2024-01-12 07:06:22",
            "message": "eth: minor change of config-accessor (#28782)\n\neth: refactor `GetVM`"
        },
        {
            "date": "2024-01-12 06:43:52",
            "message": "docs: fix badge in README (#28796)\n\n* Fix broken badge in README.md\r\n\r\nReplaced broken Github link with IPFS link for long-term storage.\r\n\r\n* update go badge\r\n\r\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>\r\n\r\n---------\r\n\r\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>"
        },
        {
            "date": "2024-01-11 17:24:36",
            "message": "params: begin v1.13.11 release cycle"
        },
        {
            "date": "2024-01-11 17:17:54",
            "message": "version: release v1.13.10 to fix bad tag"
        },
        {
            "date": "2024-01-10 16:32:41",
            "message": "params: begin v1.13.10 release cycle"
        },
        {
            "date": "2024-01-10 16:29:05",
            "message": "params: go-ethereum v1.13.9 stable"
        },
        {
            "date": "2024-01-10 15:45:08",
            "message": "ethclient/simulated: implement new sim backend (#28202)\n\nThis is a rewrite of the 'simulated backend', an implementation of the ethclient interfaces\r\nwhich is backed by a simulated blockchain. It was getting annoying to maintain the old\r\nversion of the simulated backend feature because there was a lot of code duplication with\r\nthe main client. \r\n\r\nThe new version is built using parts that we already have: an in-memory geth node instance\r\nrunning in developer mode provides the chain, while the Go API is provided by ethclient.\r\nA backwards-compatibility wrapper is provided, but the simulated backend has also moved to\r\na more sensible import path: github.com/ethereum/go-ethereum/ethclient/simulated\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2024-01-09 14:35:49",
            "message": "cmd/geth: update log test data (#28780)\n\nupdate logger test data"
        },
        {
            "date": "2024-01-09 13:55:09",
            "message": "accounts/abi: fix bigInt topic encoding (#28764)"
        },
        {
            "date": "2024-01-09 07:56:01",
            "message": "cmd/geth: make it possible to autopilot removedb (#28725)\n\nWhen managing geth, it is sometimes desirable to do a partial wipe; deleting state but retaining freezer data. A partial wipe can be somewhat tricky to accomplish. \r\n\r\nThis change implements the ability to perform partial wipe by making it possible to run geth removedb non-interactive, using command line options instead."
        },
        {
            "date": "2024-01-08 19:33:32",
            "message": "params, core/forkid: schedule cancun fork on goerli (#28719)\n\nThis PR schedules the cancun fork for the goerli testnet as discussed on ACD.\r\nSpec: ethereum/execution-specs#860\r\n\r\nWe schedule:\r\n  goerli at 1705473120"
        },
        {
            "date": "2024-01-08 19:31:22",
            "message": "cmd/devp2p/internal/ethtest: fix typos in comments (#28772)"
        },
        {
            "date": "2024-01-08 19:18:30",
            "message": "eth/filters: fix early Unsubscribe of log events (#28769)"
        },
        {
            "date": "2024-01-08 14:27:33",
            "message": "log: emit error level string as \"error\", not \"eror\" (#28774)"
        },
        {
            "date": "2024-01-05 12:49:31",
            "message": "eth/downloader, eth/filters: use defer to call Unsubscribe (#28762)"
        },
        {
            "date": "2024-01-04 15:32:23",
            "message": "ethclient: simplify error handling in TransactionReceipt (#28748)\n\n\r\nCo-authored-by: Martin HS <martin@swende.se>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-01-04 14:03:58",
            "message": "internal/flags: update copyright year to 2024 (#28760)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2024-01-03 15:12:20",
            "message": "cmd/evm: Fix blob-gas-used on invalid transactions in t8n (#28734)\n\ncmd/evm: fixes the blob gas calculation if a transaction is invalid"
        },
        {
            "date": "2024-01-02 10:39:53",
            "message": "core/vm: update comments to match eip number (#28743)"
        },
        {
            "date": "2024-01-02 10:37:22",
            "message": "cmd/evm: fix link in README.md (#28755)"
        }
    ],
    "ethereum/go-ethereum_2025": [
        {
            "date": "2025-07-21 10:29:55",
            "message": "core/vm: triple modexp cost post-cancun (#32231)\n\nhttps://github.com/ethereum/EIPs/pull/9969/files"
        },
        {
            "date": "2025-07-21 08:30:43",
            "message": "triedb/pathdb: fix incorrect address length in history searching (#32248)\n\nWe should use account length to check address, else OOB maybe occured\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-07-18 10:36:10",
            "message": "core/txpool/blobpool: remove unused `txValidationFn` from BlobPool (#32237)\n\nThis PR removes the now\u2011unused `txValidationFn` field from BlobPool.\nIt became obsolete after a PR\u00a0 https://github.com/ethereum/go-ethereum/pull/31202 \nwas merged.\n\nResolves https://github.com/ethereum/go-ethereum/issues/32236"
        },
        {
            "date": "2025-07-18 05:22:59",
            "message": "params: update tx gas limit cap (#32230)\n\nUpdates the tx gas limit cap to the new parameter (2^24)\nhttps://github.com/ethereum/EIPs/pull/9986/files"
        },
        {
            "date": "2025-07-17 03:19:20",
            "message": "all: define constructor for BlobSidecar (#32213)\n\nThe main purpose of this change is to enforce the version setting when\nconstructing the blobSidecar, avoiding creating sidecar with wrong/default \nversion tag."
        },
        {
            "date": "2025-07-17 03:07:22",
            "message": "triedb/pathdb: improve the performance of parse index block (#32219)\n\nThe implementation of `parseIndexBlock` used a reverse loop with slice\nappends to build the restart points, which was less cache-friendly and\ninvolved unnecessary allocations and operations. In this PR we change\nthe implementation to read and validate the restart points in one single\nforward loop.\n\nHere is the benchmark test:\n\n```bash\ngo test -benchmem -bench=BenchmarkParseIndexBlock ./triedb/pathdb/\n```\n\nThe result as below:\n\n```\nbenchmark                      old ns/op     new ns/op     delta\nBenchmarkParseIndexBlock-8     52.9          37.5          -29.05%\n```\n\nabout 29% improvements\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-07-17 02:59:47",
            "message": "eth/protocols/snap: fix negative eta in state progress logging (#32225)"
        },
        {
            "date": "2025-07-17 02:44:35",
            "message": "triedb/pathdb: avoid duplicate metadata reads (#32226)"
        },
        {
            "date": "2025-07-16 21:26:33",
            "message": "eth/tracers: apply block header overrides correctly (#32183)\n\nFixes #32175.\n\nThis fixes the scenario where the blockhash opcode would return 0x0\nduring RPC simulations when using BlockOverrides with a future block\nnumber. The root cause was that BlockOverrides.Apply() only modified the\nvm.BlockContext, but GetHashFn() depends on the actual\ntypes.Header.Number to resolve valid historical block hashes. This\ncaused a mismatch and resulted in incorrect behavior during trace and\ncall simulations.\n\n---------\n\nCo-authored-by: shantichanal <158101918+shantichanal@users.noreply.github.com>\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-07-16 13:36:44",
            "message": "account/abi/bind/v2: fix TestDeploymentWithOverrides (#32212)\n\nThe root cause of the flaky test was a nonce conflict caused by async\ncontract deployments.\n\nThis solution defines a custom deployer with automatic nonce management."
        },
        {
            "date": "2025-07-16 13:11:10",
            "message": "eth/downloader: improve nil pointer protection (#32222)\n\nFix #32221\n\n---------\n\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-07-16 13:00:39",
            "message": "trie: avoid spawning goroutines for empty children (#32220)"
        },
        {
            "date": "2025-07-15 13:48:36",
            "message": "core/rawdb: reduce allocations in rawdb.ReadHeaderNumber (#31913)\n\nThis is something interesting I came across during my benchmarks, we\nspent ~3.8% of all allocations allocating the header number on the heap.\n\n```\n(pprof) list GetHeaderByHash\nTotal: 38197204475\nROUTINE ======================== github.com/ethereum/go-ethereum/core.(*BlockChain).GetHeaderByHash in github.com/ethereum/go-ethereum/core/blockchain_reader.go\n         0 5786566117 (flat, cum) 15.15% of Total\n         .          .     79:func (bc *BlockChain) GetHeaderByHash(hash common.Hash) *types.Header {\n         . 5786566117     80: return bc.hc.GetHeaderByHash(hash)\n         .          .     81:}\n         .          .     82:\n         .          .     83:// GetHeaderByNumber retrieves a block header from the database by number,\n         .          .     84:// caching it (associated with its hash) if found.\n         .          .     85:func (bc *BlockChain) GetHeaderByNumber(number uint64) *types.Header {\nROUTINE ======================== github.com/ethereum/go-ethereum/core.(*HeaderChain).GetHeaderByHash in github.com/ethereum/go-ethereum/core/headerchain.go\n         0 5786566117 (flat, cum) 15.15% of Total\n         .          .    404:func (hc *HeaderChain) GetHeaderByHash(hash common.Hash) *types.Header {\n         . 1471264309    405: number := hc.GetBlockNumber(hash)\n         .          .    406: if number == nil {\n         .          .    407:  return nil\n         .          .    408: }\n         . 4315301808    409: return hc.GetHeader(hash, *number)\n         .          .    410:}\n         .          .    411:\n         .          .    412:// HasHeader checks if a block header is present in the database or not.\n         .          .    413:// In theory, if header is present in the database, all relative components\n         .          .    414:// like td and hash->number should be present too.\n(pprof) list GetBlockNumber\nTotal: 38197204475\nROUTINE ======================== github.com/ethereum/go-ethereum/core.(*HeaderChain).GetBlockNumber in github.com/ethereum/go-ethereum/core/headerchain.go\n  94438817 1471264309 (flat, cum)  3.85% of Total\n         .          .    100:func (hc *HeaderChain) GetBlockNumber(hash common.Hash) *uint64 {\n  94438817   94438817    101: if cached, ok := hc.numberCache.Get(hash); ok {\n         .          .    102:  return &cached\n         .          .    103: }\n         . 1376270828    104: number := rawdb.ReadHeaderNumber(hc.chainDb, hash)\n         .          .    105: if number != nil {\n         .     554664    106:  hc.numberCache.Add(hash, *number)\n         .          .    107: }\n         .          .    108: return number\n         .          .    109:}\n         .          .    110:\n         .          .    111:type headerWriteResult struct {\n(pprof) list ReadHeaderNumber\nTotal: 38197204475\nROUTINE ======================== github.com/ethereum/go-ethereum/core/rawdb.ReadHeaderNumber in github.com/ethereum/go-ethereum/core/rawdb/accessors_chain.go\n 204606513 1376270828 (flat, cum)  3.60% of Total\n         .          .    146:func ReadHeaderNumber(db ethdb.KeyValueReader, hash common.Hash) *uint64 {\n 109577863 1281242178    147: data, _ := db.Get(headerNumberKey(hash))\n         .          .    148: if len(data) != 8 {\n         .          .    149:  return nil\n         .          .    150: }\n  95028650   95028650    151: number := binary.BigEndian.Uint64(data)\n         .          .    152: return &number\n         .          .    153:}\n         .          .    154:\n         .          .    155:// WriteHeaderNumber stores the hash->number mapping.\n         .          .    156:func WriteHeaderNumber(db ethdb.KeyValueWriter, hash common.Hash, number uint64) {\n```\n\nOpening this to discuss the idea, I know that rawdb.EmptyNumber is not a\ngreat name for the variable, open to suggestions"
        },
        {
            "date": "2025-07-15 12:24:17",
            "message": "all: update dead wiki links (#32215)\n\n---\n\n\n**Description:**  \n- Replaced outdated GitHub wiki links with current, official\ndocumentation URLs.\n- Removed links that redirect or are no longer relevant.\n- Ensured all references point to up-to-date and reliable sources.\n\n\n---"
        },
        {
            "date": "2025-07-15 06:20:45",
            "message": "eth/protocols/snap, p2p/discover: improve zero time checks (#32214)"
        },
        {
            "date": "2025-07-15 05:50:52",
            "message": "core/rawdb: change the mechanism to schedule freezer sync (#32135)\n\nThis pull request slightly improves the freezer fsync mechanism by scheduling \nthe Sync operation based on the number of uncommitted items and original\ntime interval.\n\nOriginally, freezer.Sync was triggered every 30 seconds, which worked well during\nactive chain synchronization. However, once the initial state sync is complete, \nthe fixed interval causes Sync to be scheduled too frequently.\n\nTo address this, the scheduling logic has been improved to consider both the time \ninterval and the number of uncommitted items. This additional condition helps \navoid unnecessary Sync operations when the chain is idle."
        },
        {
            "date": "2025-07-15 03:45:20",
            "message": "triedb/pathdb: introduce file-based state journal (#32060)\n\nIntroduce file-based state journal in path database, fixing\nthe Pebble restriction when the journal size exceeds 4GB.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-07-15 01:07:23",
            "message": "core/types: fix CellProofsAt method (#32198)"
        },
        {
            "date": "2025-07-14 22:08:06",
            "message": "all: fix outdated ethereum wiki json-rpc json-rpc doc links (#32209)\n\nReplace outdated wiki reference with ethereum.org\ndocumentation links"
        },
        {
            "date": "2025-07-14 14:06:57",
            "message": "miner: set sidecar version when recomputing proofs (#32199)\n\n- If the block number is `osaka` fork and needs to recompute some `blob\nproofs` to `cell proofs`, here also needs to set version to `1`."
        },
        {
            "date": "2025-07-14 13:33:24",
            "message": "eth/fetcher: fix announcement drop logic (#32210)\n\nThis PR fixes an issue in the tx_fetcher DoS prevention logic where the\ncode keeps the overflow amount (`want - maxTxAnnounces`) instead of the\nallowed amount (`maxTxAnnounces - used`). The specific changes are:\n\n- Correct slice indexing in the announcement drop logic\n- Extend the overflow test case to cover the inversion scenario"
        },
        {
            "date": "2025-07-14 12:07:43",
            "message": "params: EIP-7892 - Blob Parameter Only Hardforks (#32193)\n\nThis is a resubmit of https://github.com/ethereum/go-ethereum/pull/31820\nagainst the `master` branch.\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-07-14 09:27:42",
            "message": "ethclient/gethclient: remove race condition in tests (#32206)\n\nalternative to https://github.com/ethereum/go-ethereum/pull/32200\n\nThe race condition is not happening yet, since there is only a single\ncall to `newTestBackend`, but there might be more in the future"
        },
        {
            "date": "2025-07-14 07:15:18",
            "message": "accounts/keystore: update links to documenation (#32194)\n\n---\n\n\n**Description:**  \n- Replaced outdated GitHub wiki links with the official Ethereum\ndocumentation for Web3 Secret Storage.\n- Updated references in `keystore.go` and `passphrase.go` for improved\naccuracy and reliability.\n\n\n---"
        },
        {
            "date": "2025-07-14 07:07:47",
            "message": "signer/core/apitypes: require blob txs to have tx.to set (#32197)\n\nCheck the `to` address before building the blob tx.\n\n---------\n\nCo-authored-by: jwasinger <j-wasinger@hotmail.com>"
        },
        {
            "date": "2025-07-11 19:55:18",
            "message": "cmd/geth: update vcheck testdata, add docs on generating signatures (#32121)\n\nFixed typo in security release URL by replacing:\nOld: https://blog.ethereum.org/2020/11/12/geth_security_release/\nNew: https://blog.ethereum.org/2020/11/12/geth-security-release/\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-07-11 12:58:21",
            "message": ".github: remove karalabe from CODEOWNERS"
        },
        {
            "date": "2025-07-11 11:56:16",
            "message": "eth/downloader: fix ancient limit in snap sync (#32188)\n\nThis pull request fixes an issue in disabling direct-ancient mode in\nsnap sync.\n\nSpecifically, if `origin >= frozen && origin != 0`, it implies a part of\nchain data has been written into the key-value store, all the following \nwrites into ancient store scheduled by downloader will be rejected \nwith error \n\n`ERROR[07-10|03:46:57.924] Error importing chain data to ancients\nerr=\"can't add block 1166 hash: the append operation is out-order: have\n1166 want 0\"`.\n\nThis issue is detected by the https://github.com/ethpandaops/kurtosis-sync-test, \nwhich initiates the first snap sync cycle without the finalized header and\nimplicitly disables the direct-ancient mode. A few seconds later the second \nsnap sync cycle is initiated with the finalized information and direct-ancient mode\nis enabled incorrectly."
        },
        {
            "date": "2025-07-11 11:51:04",
            "message": "core/types:  add block-level access list structures with encoding/decoding (#31948)\n\nThis adds the SSZ types from the \n[EIP-7928](https://eips.ethereum.org/EIPS/eip-7928) and also adds\nencoder/decoder generation using https://github.com/ferranbt/fastssz.\n\nThe fastssz dependency is updated because the generation will not work\nproperly with the master branch version due to a bug in fastssz.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-07-09 20:09:11",
            "message": "cmd/clef: update Safe API documentation links in changelog (#32136)\n\nThis PR updates the outdated documentation URL from docs.gnosis.io to\nthe new official docs.safe.global domain. The change reflects the\nrebranding from Gnosis Safe to Safe and ensures that users are directed\nto the current API documentation for transaction service reference."
        },
        {
            "date": "2025-07-09 16:49:06",
            "message": "cmd/utils: add the missing check for the HoodiFlag in blsync (#32179)\n\nHoodi network flag should be exclusive to other network flags for both blysnc standalone and integrated mode."
        },
        {
            "date": "2025-07-09 09:24:44",
            "message": "core,miner: implement EIP-7934 - RLP Execution Block Size Limit (#31990)\n\nThis PR adds a block validation check for the maximum block size, as required by\nEIP-7934, and also applies a slightly lower size limit during block building.\n\n---------\n\nCo-authored-by: spencer-tb <spencer@spencertaylorbrown.uk>\nCo-authored-by: Felix Lange <fjl@twurst.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-07-09 00:46:59",
            "message": "core/vm: update gas cost of CLZ to five (#32172)\n\nhttps://github.com/ethereum/EIPs/commit/a794de3fcf71bb8c71e8bafdba11f63133ce4516"
        },
        {
            "date": "2025-07-08 13:23:22",
            "message": "miner, core, core/txpool: implement EIP 7825 - TX Gas Limit Cap (#31824)\n\nImplements EIP-7825\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\nCo-authored-by: lightclient <lightclient@protonmail.com>\nCo-authored-by: MariusVanDerWijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-07-08 13:15:53",
            "message": "eth/catalyst:  abort dev mode block commit if shut down is triggered (#32166)\n\nalternate approach to https://github.com/ethereum/go-ethereum/pull/31328\nsuggested by @MariusVanDerWijden . This prevents Geth from outputting a\nlot of logs when trying to commit on-demand dev mode blocks while the\nclient is shutting down.\n\nThe issue is hard to reproduce, but I've seen it myself and it is\nannoying when it happens. I think this is a reasonable simple solution,\nand we can revisit if we find that the output is still too large (i.e.\nthere is a large delay between initiating shut down and the simulated\nbeacon receiving the signal, while in this loop).\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-07-08 07:51:08",
            "message": "cmd, eth/catalyst: exit geth only if exitWhenSynced is specified (#32149)\n\nThis pull request modifies the behavior of `--synctarget` to terminate\nthe node only when `--exitWhenSynced` is explicitly specified."
        },
        {
            "date": "2025-07-07 18:59:45",
            "message": "core/vm: implement EIP-7951 - precompile for secp256r1 (#31991)\n\nhttps://github.com/ethereum/EIPs/pull/9833\n\nBased on #27540, #30043\n\n---------\n\nCo-authored-by: Ula\u015f Erdo\u011fan <uerdogan2001@hotmail.com>"
        },
        {
            "date": "2025-07-07 14:17:25",
            "message": "consensus/misc/eip4844: implement EIP-7918  (#31965)\n\nhttps://eips.ethereum.org/EIPS/eip-7918\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-07-07 11:26:11",
            "message": ".github, internal/flags: improve actions test runs (#32150)\n\nThis change enables more tests to run on GitHub actions. First, it\nremoves the `-short` flag passed to `go test`, unskipping some longer\nrunning tests. We also enable the full consensus tests to run by\nenabling submodules during git clone.\n\nThe EF now operates org wide runners with the `self-hosted-ghr` label.\nThese are auto-scaling runners which should ideally allow us to process\nany amount of testing load we throw at them. The new runners have `HOME`\nconfigured differently from the actual user home directory, so our\ninternal test for resolving `~` had to be adapted to work in this scenario."
        },
        {
            "date": "2025-07-07 11:00:34",
            "message": "core/txpool/blobpool: lower log level for warnings (#32142)\n\n- Change the log level to `warning`, during syncing blocks, the `final\n== nil` is normal.\n- Change to log tx hash."
        },
        {
            "date": "2025-07-07 09:19:33",
            "message": "core/vm: implement EIP-7939 - CLZ opcode (#31989)\n\nhttps://eips.ethereum.org/EIPS/eip-7939\n\n---------\n\nCo-authored-by: spencer-tb <spencer@spencertaylorbrown.uk>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-07-07 08:01:29",
            "message": "core/vm: move nil-check out of the interpreter loop (#32068)\n\nMoves the jumptable nil check our of the interpreter loop.\nBenchmarks show a 2-10% improvement."
        },
        {
            "date": "2025-07-04 11:45:29",
            "message": ".gitea: fix typo in windows workflow"
        },
        {
            "date": "2025-07-04 11:42:55",
            "message": "gitea: set PATH in script"
        },
        {
            "date": "2025-07-04 11:38:26",
            "message": "gitea: try with cmd"
        },
        {
            "date": "2025-07-04 11:25:40",
            "message": ".gitea: set PATH"
        },
        {
            "date": "2025-07-04 10:42:01",
            "message": ".gitea: update PATH"
        },
        {
            "date": "2025-07-04 11:02:57",
            "message": ".gitea: add workflow_dispatch for release build"
        },
        {
            "date": "2025-07-04 10:17:44",
            "message": "cmd/utils: update flag description of gcmode (#32145)"
        },
        {
            "date": "2025-07-04 01:40:16",
            "message": "cmd/utils: show full deprecated flags (#32141)\n\nThis is a follow up PR after #32128 , Seems I've missed to add\n--txlookuplimit as hidden. In hte meanwhile, I also add the other \ndeprecated flags into the output of `show-deprecated-flags`"
        },
        {
            "date": "2025-07-03 13:07:22",
            "message": ".gitea: add windows build (experimental)"
        },
        {
            "date": "2025-07-03 05:23:00",
            "message": "cmd/utils, internal/debug: hide the deprecated flags (#32128)\n\nSome of the flags were deprecated, so try to hide them in the help\nmessage. And move the `--vmodule` and `--logjson` flags to the\nDeprecatedCategory."
        },
        {
            "date": "2025-07-03 05:19:34",
            "message": "core/state: add GetStateAndCommittedState (#31585)\n\nImproves the SSTORE gas calculation a bit. Previously we would pull up\nthe state object twice. This is okay for existing objects, since they\nare cached, however non-existing objects are not cached, thus we needed\nto go through all 128 diff layers as well as the disk layer twice, just\nfor the gas calculation\n\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/ethereum/go-ethereum/core/vm\ncpu: AMD Ryzen 9 5900X 12-Core Processor            \n               \u2502 /tmp/old.txt \u2502            /tmp/new.txt             \u2502\n               \u2502    sec/op    \u2502   sec/op     vs base                \u2502\nInterpreter-24   1118.0n \u00b1 2%   602.8n \u00b1 1%  -46.09% (p=0.000 n=10)\n```\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-07-02 11:39:44",
            "message": "cmd/workload: rework tracegen to run tracing at block level (#32092)\n\nThis PR changes the trace test to block level, aiming for better\nexecution performance.\n\n---------\n\nCo-authored-by: zsfelfoldi <zsfelfoldi@gmail.com>"
        },
        {
            "date": "2025-07-02 10:39:21",
            "message": "beacon/blsync: update logs for blsync (Fixes #31968 ) (#32046)\n\nSmall update for logs when syncing with blsync. Downgrades the \"latest\nfilled block is not available\" to warn.\n\nCo-authored-by: shantichanal <158101918+shantichanal@users.noreply.github.com>"
        },
        {
            "date": "2025-07-02 08:12:55",
            "message": "version: begin v1.16.2 release cycle"
        },
        {
            "date": "2025-07-02 08:12:04",
            "message": "version: release go-ethereum v1.16.1 stable"
        },
        {
            "date": "2025-07-02 06:16:54",
            "message": "accounts/abi: generate TryPack* methods for abigen v2 bindings (#31692)\n\n1. Fix the error return format.\n**todo**: ~~`bindtype` needs more complex logic to fix it.~~\n`\nif err != nil {\n  return nil, err\n}\nif err == nil {\n  return obj, nil\n}\n`\n2. ~~Return pointer type object to avoid copying the whole struct\ncontent.~~\n3. Give the panic decision to the user.\n4. Fix empty line at the end of function.\n\n**TODO**: ~~fix some related test cases.~~\n\n---------\n\nCo-authored-by: Jared Wasinger <j-wasinger@hotmail.com>"
        },
        {
            "date": "2025-07-02 05:50:18",
            "message": "eth/catalyst: fix edge case in simulated backend (#31871)\n\ngeth cmd: `geth --dev --dev.period 5`\ncall: `debug.setHead` to rollback several blocks.\n\nIf the `debug.setHead` call is delayed, it will trigger a panic with a\nsmall probability, due to using the null point of\n`fcResponse.PayloadID`.\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-07-02 00:46:03",
            "message": "core/rawdb, triedb/pathdb: fix two inaccurate comments (#32130)"
        },
        {
            "date": "2025-07-01 14:53:10",
            "message": "core/types: blockTimestamp in logs is hex-encoded (#32129)\n\ncloses #32120"
        },
        {
            "date": "2025-07-01 14:31:09",
            "message": "core/filtermaps: define APIs for map, epoch calculation (#31659)\n\nThis pull request refines the filtermap implementation, defining key\nAPIs for map and\nepoch calculations to improve readability.\n\nThis pull request doesn't change any logic, it's a pure cleanup.\n\n---------\n\nCo-authored-by: zsfelfoldi <zsfelfoldi@gmail.com>"
        },
        {
            "date": "2025-07-01 11:51:16",
            "message": "internal: remove unused shh and swarm modules from console (#32073)\n\nSimilar to https://github.com/ethereum/go-ethereum/pull/31856, remove\nthe not availabe shh, swarm modules in the console.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-07-01 07:18:49",
            "message": "ethapi: reduce some of the wasted effort in GetTransactionReceipt (#32021)\n\nTowards https://github.com/ethereum/go-ethereum/issues/26974\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-07-01 07:07:33",
            "message": "internal/ethapi: prealloc map for the txpool api (#32110)\n\nuse `make(map, len(txpool))` to prealloc the map for the txpool content,\nto avoid the map growing in the loop."
        },
        {
            "date": "2025-07-01 07:04:05",
            "message": "eth/catalyst: fix the log message in newPayloadV4 (#32125)\n\nIt should be `newPayloadV4 must only be called for prague payloads` for\nthe V4 payload error"
        },
        {
            "date": "2025-07-01 07:00:33",
            "message": "core/filtermaps: clean up log format of unindexing message (#32123)\n\nSorry for not fully fixed in https://github.com/ethereum/go-ethereum/pull/31761, now the log \nformat of unindexing message is cleaned up, to make it consistent with the indexing message."
        },
        {
            "date": "2025-07-01 06:50:02",
            "message": "Fix log indexer noise after debug_setHead operations (#31934)\n\n## Summary\nThis PR resolves Issue #31929 by reducing log noise generated by the log\nindexer after `debug_setHead` operations.\n\n## Problem Description\nWhen `debug_setHead` is called to rewind the blockchain, blocks are\nremoved from the database. However, the log indexer's `ChainView`\nobjects may still hold references to these deleted blocks. When\n`extendNonCanonical()` attempts to access these missing headers, it\nresults in:\n\n1. **Repeated ERROR logs**: `Header not found number=X hash=0x...`\n2. **Log noise** that can mask other important errors  \n3. **User confusion** about whether this indicates a real problem\n\n## Root Cause Analysis\nThe issue occurs because:\n- `debug_setHead` removes blocks from the blockchain database\n- Log indexer's `ChainView` may still reference deleted block hashes\n- `extendNonCanonical()` in `core/filtermaps/chain_view.go` tries to\nfetch these missing headers\n- The existing `return false` logic properly handles the error, but logs\nat ERROR level\n\n## Solution\nThis is a **logging improvement only** - no functional logic changes:\n\n### Changes Made\n1. **Log level**: Changed from `ERROR` to `DEBUG` \n2. **Log message**: Enhanced with descriptive context about chain view\nextension\n3. **Comments**: Added explanation for when this situation occurs\n4. **Behavior**: Maintains existing error handling (`return false` was\nalready present)\n\n### Code Changes\n```go\n// Before\nlog.Error(\"Header not found\", \"number\", number, \"hash\", hash)\nreturn false\n\n// After  \n// Header not found - this can happen after debug_setHead operations\n// where blocks have been deleted. Return false to indicate the chain view\n// is no longer valid rather than logging repeated errors.\nlog.Debug(\"Header not found during chain view extension\", \"number\", number, \"hash\", hash)\nreturn false\n```\n\n## Testing\n\n### Automated Tests\n- \u2705 All existing filtermaps tests pass: `go test ./core/filtermaps -v`\n- \u2705 No regressions in related functionality\n\n### Manual Verification\n1. **Before fix**: Started geth in dev mode, generated blocks, called\n`debug_setHead(3)` \u2192 **5 repeated ERROR logs**\n2. **After fix**: Same scenario \u2192 **4 DEBUG logs, no ERROR noise**\n\n### Test Environment\n```bash\n# Setup test environment\nrm -rf ./dev-test-data\n./build/bin/geth --dev --datadir ./dev-test-data --http --http.api debug,eth,net,web3 --verbosity 4\n\n# Generate test blocks and trigger issue\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"jsonrpc\":\"2.0\",\"method\":\"debug_setHead\",\"params\":[\"0x3\"],\"id\":1}' http://localhost:8545\n```\n\n\n## Related Issues\n- Fixes #31929\n\n## Additional Context\nThis issue was reported as spurious error messages appearing after\n`debug_setHead` operations. The investigation revealed that while the\nerror handling was functionally correct, the ERROR log level was\ninappropriate for this expected scenario in development/debugging\nworkflows.\n\nThe fix maintains full compatibility while significantly improving the\ndebugging experience for developers using `debug_setHead`.\n\n---------\n\nCo-authored-by: Sun Tae, Kim <38067691+humblefirm@users.noreply.github.com>\nCo-authored-by: zsfelfoldi <zsfelfoldi@gmail.com>"
        },
        {
            "date": "2025-07-01 06:13:19",
            "message": "eth/filters: add address limit to filters (#31876)\n\nThe address filter was never checked against a maximum limit, which can\nbe somewhat abusive for API nodes. This PR adds a limit similar to\ntopics\n\n## Description (AI generated)\n\nThis pull request introduces a new validation to enforce a maximum limit\non the number of addresses allowed in filter criteria for Ethereum logs.\nIt includes updates to the `FilterAPI` and `EventSystem` logic, as well\nas corresponding test cases to ensure the new constraint is properly\nenforced.\n\n### Core functionality changes:\n\n* **Validation for maximum addresses in filter criteria**:\n- Added a new constant, `maxAddresses`, set to 100, to define the\nmaximum allowable addresses in a filter.\n- Introduced a new error, `errExceedMaxAddresses`, to handle cases where\nthe number of addresses exceeds the limit.\n- Updated the `GetLogs` method in `FilterAPI` to validate the number of\naddresses against `maxAddresses`.\n- Modified the `UnmarshalJSON` method to return an error if the number\nof addresses in the input JSON exceeds `maxAddresses`.\n- Added similar validation to the `SubscribeLogs` method in\n`EventSystem`.\n\n### Test updates:\n\n* **New test cases for address limit validation**:\n- Added a test in `TestUnmarshalJSONNewFilterArgs` to verify that\nexceeding the maximum number of addresses triggers the\n`errExceedMaxAddresses` error.\n- Updated `TestInvalidLogFilterCreation` to include a test case for an\ninvalid filter with more than `maxAddresses` addresses.\n- Updated `TestInvalidGetLogsRequest` to test for invalid log requests\nwith excessive addresses.\n\nThese changes ensure that the system enforces a reasonable limit on the\nnumber of addresses in filter criteria, improving robustness and\npreventing potential performance issues.\n\n---------\n\nCo-authored-by: zsfelfoldi <zsfelfoldi@gmail.com>"
        },
        {
            "date": "2025-07-01 03:35:22",
            "message": "triedb: reset state indexer after snap synced (#32104)\n\nFix the issue after initial snap sync with `gcmode=archive` enabled.\n\n```\nNewPayload: inserting block failed       error=\"history indexing is out of order, last: null, requested: 1\"\n```\n\n---------\n\nSigned-off-by: Delweng <delweng@gmail.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-06-30 15:24:52",
            "message": ".gitea: disable cron schedule"
        },
        {
            "date": "2025-06-30 08:17:59",
            "message": ".gitea: fix 386 upload"
        },
        {
            "date": "2025-06-30 07:53:52",
            "message": ".gitea: switch release builds to static linking (#32118)\n\nThis is to avoid compatibility issues with mismatched glibc versions\nbetween the builder and deployment target.\n\nFixes #32102"
        },
        {
            "date": "2025-06-27 22:56:20",
            "message": "eth: correct tracer initialization in BlockchainConfig (#32107)\n\ncore.BlockChainConfig.VmConfig is not a pointer, so setting the Tracer\non the `vmConfig` object after it was passed to options does *not* apply\nit to options.VmConfig\n\nThis fixes the issue by setting the value directly inside the `options`\nobject and removing the confusing `vmConfig` variable to prevent further\nmistakes."
        },
        {
            "date": "2025-06-27 07:27:52",
            "message": "node: do not double-wrap KV stores (#32089)\n\nFor no apparent reason, KV stores were getting wrapped in `nofreezedb`\nfirst and then in `freezerdb`."
        },
        {
            "date": "2025-06-27 07:18:05",
            "message": "all: replace override.prague with osaka (#32093)\n\nreplace `--override.prague` with `--override.osaka`\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-06-26 20:02:50",
            "message": ".travis.yml: remove travis configuration"
        },
        {
            "date": "2025-06-26 19:29:59",
            "message": ".gitea: trigger PPA upload on tag"
        },
        {
            "date": "2025-06-26 18:58:52",
            "message": "version: begin v1.16.1 release cycle"
        },
        {
            "date": "2025-06-26 18:54:41",
            "message": "version: release go-ethereum v1.16.0 stable"
        },
        {
            "date": "2025-06-26 15:20:20",
            "message": "all: incorporate state history indexing status into eth_syncing response (#32099)\n\nThis pull request tracks the state indexing progress in eth_syncing\nRPC response, i.e. we will return non-null syncing status until indexing\nhas finished."
        },
        {
            "date": "2025-06-26 15:19:02",
            "message": "triedb/pathdb: fix journal resolution in pathdb (#32097)\n\nThis pull request fixes a flaw in the PBSS state iterator, which\ncould return empty account or storage data.\n\nIn PBSS, multiple in-memory diff layers and a write buffer are\nmaintained. These layers are persisted to the database and reloaded after\nnode restarts. However, since the state data is encoded using RLP, the\ndistinction between nil and an empty byte slice is lost during the encode/decode\nprocess. As a result, invalid state values such as `[]byte{}` can appear in PBSS\nand ultimately be returned by the state iterator.\n\n\nCheckout\nhttps://github.com/ethereum/go-ethereum/blob/master/triedb/pathdb/iterator_fast.go#L270\nfor more iterator details.\n\nIt's a long-term existent issue and now be activated since the snapshot\nintegration.\nThe error `err=\"range contains deletion\"` will occur when Geth tries to\nserve other\npeers with SNAP protocol request.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-25 08:50:54",
            "message": "core, eth, triedb: serve historical states over RPC (#31161)\n\nThis is the part-2 for archive node over path mode, which ultimately\nships the functionality to serve the historical states"
        },
        {
            "date": "2025-06-25 08:49:09",
            "message": "eth, triedb/pathdb: permit write buffer allowance in PBSS archive mode (#32091)\n\nThis pull request fixes a flaw in PBSS archive mode that significantly\ndegrades performance when the mode is enabled.\n\nOriginally, in hash mode, the dirty trie cache is completely disabled\nwhen archive mode is active, in order to disable the in-memory garbage \ncollection mechanism. However, the internal logic in path mode differs \nsignificantly, and the dirty trie node cache is essential for maintaining\nchain insertion performance. Therefore, the cache is now retained in\npath mode."
        },
        {
            "date": "2025-06-25 02:42:45",
            "message": "cmd/utils: fix formatting for beacon flag errors to fit Fatalf form (#32090)\n\nNoticed that the errors for the blsync flags were not formatted\ncorrectly for `Fatalf(..)`."
        },
        {
            "date": "2025-06-25 01:42:11",
            "message": "core, consensus/beacon: defer trie resolution (#31725)\n\nPreviously, the account trie for a given state root was resolved immediately \nwhen the stateDB was created, implying that the trie was always required\nby the stateDB.\n\nHowever, this assumption no longer holds, especially for path archive nodes, \nwhere historical states can be accessed even if the corresponding trie data \ndoes not exist."
        },
        {
            "date": "2025-06-24 13:06:20",
            "message": "cmd/geth, triedb: add pathdb state verification (#32086)\n\nThis pull request ports the snapshot iteration logic from the legacy\nimplementation."
        },
        {
            "date": "2025-06-24 12:36:12",
            "message": "core/rawdb, triedb/pathdb: implement history indexer (#31156)\n\nThis pull request is part-1 for shipping the core part of archive node\nin PBSS mode."
        },
        {
            "date": "2025-06-24 11:17:41",
            "message": "miner: default gaslimit 45M (#32087)\n\nWe believe it is safe to raise the gaslimit to 45M before the Fusaka\nfork. So this PR changes the default to 45M."
        },
        {
            "date": "2025-06-24 07:12:11",
            "message": "cmd/geth: era-download logic fix (#32081)\n\nDownloading from a range was failing because it would return and error\nearly with an error misinterpreting \"start-end\".\n\n---------\n\nCo-authored-by: shantichanal <158101918+shantichanal@users.noreply.github.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-06-24 05:52:18",
            "message": "eth/tracers: prestate lookup EIP7702 delegation account (#32080)\n\nImplement https://github.com/ethereum/go-ethereum/issues/32078 \nParse and lookup the delegation account if EIP7702 is enabled.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-06-23 07:13:48",
            "message": "cmd/clef: update readme (#32070)\n\nReplaced the outdated and broken link to the Web3 Secret Storage\nDefinition with the current official URL from ethereum.org in the Clef\nREADME. This ensures users have access to up-to-date and accurate\ndocumentation for the keystore file format."
        },
        {
            "date": "2025-06-23 06:04:21",
            "message": "eth: quick canceling block inserting when debug_setHead is invoked (#32067)\n\nIf Geth is engaged in a long-run block synchronization, such as a full\nsyncing over a large number of blocks, invoking `debug_setHead` will\ncause `downloader.Cancel` to wait for all fetchers to stop first.\nThis can be time-consuming, particularly for the block processing\nthread.\n\nTo address this, we manually call `blockchain.StopInsert` to interrupt\nthe blocking processing thread and allow it to exit immediately, and\nafter that call `blockchain.ResumeInsert` to resume the block\ndownloading process.\n\nAdditionally, we add a sanity check for the input block number of\n`debug_setHead` to ensure its validity.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-06-22 12:40:54",
            "message": "triedb/pathdb, eth: use double-buffer mechanism in pathdb (#30464)\n\nPreviously, PathDB used a single buffer to aggregate database writes,\nwhich needed to be flushed atomically. However, flushing large amounts\nof data (e.g., 256MB) caused significant overhead, often blocking the\nsystem for around 3 seconds during the flush.\n\nTo mitigate this overhead and reduce performance spikes, a double-buffer\nmechanism is introduced. When the active buffer fills up, it is marked\nas frozen and a background flushing process is triggered. Meanwhile, a\nnew buffer is allocated for incoming writes, allowing operations to\ncontinue uninterrupted.\n\nThis approach reduces system blocking times and provides flexibility in\nadjusting buffer parameters for improved performance."
        },
        {
            "date": "2025-06-22 12:28:29",
            "message": "core/state: fix prefetch on single core CPU (#32075)\n\nWe need at least one prefetch goroutine. SetLimit(0) would block\nprefetch.\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>"
        },
        {
            "date": "2025-06-21 05:00:32",
            "message": "core/state: improve the prefetcher concurrency allowance (#32071)\n\nImprove the prefetcher concurrency allowance."
        },
        {
            "date": "2025-06-21 04:58:04",
            "message": "core/state: expose the state reader stats (#31998)\n\nThis pull request introduces a mechanism to expose statistics from the\nstate reader, specifically related to cache utilization during state prefetching.\n\nTo improve state access performance, a pair of state readers is constructed \nwith a shared local cache. One reader to execute transactions  ahead of time\nto warm up the cache. The other reader is used by the actual chain processing \nlogic, which can benefit from the prefetched states.\n\nThis PR adds visibility into how effective the cache is by exposing relevant \nusage statistics.\n\n---------\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>\nCo-authored-by: Csaba Kiraly <csaba.kiraly@gmail.com>"
        },
        {
            "date": "2025-06-20 11:40:41",
            "message": "ethdb: Implement DeleteRange in batch (#31947)\n\nimplement #31945\n\n---------\n\nCo-authored-by: prpeh <prpeh@proton.me>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-06-20 11:18:20",
            "message": "crypto/bn256: add documentation on subgroup checks for G2 (#32066)\n\nThis PR improves the IsOnCurve methods for BN254 G2 points by:\n\n* Clarifying its behavior the docstring, making it explicit that it\nverifies both the point being on the curve and in the correct subgroup.\n\n* Adding an in-line comment explaining the subgroup membership check\n(c.Mul(Order)).\n\n * Minor wording adjustments for readability and consistency."
        },
        {
            "date": "2025-06-20 10:47:48",
            "message": "crypto/bn256/gnark: align marshaling behavior (#32065)\n\nAligns the marshaling behavior of gnark to google and cloudflare\n\nCo-authored-by: kevaundray <kevtheappdev@gmail.com>"
        },
        {
            "date": "2025-06-19 18:37:02",
            "message": ".gitea: show environment in release-ppa.yml"
        },
        {
            "date": "2025-06-19 14:19:54",
            "message": "trie: delete secKeyCacheOwner (#31785)\n\nThe optimization tried to defer allocating the cache map until it was used for the\nfirst time. It's a relic from earlier times, when tries were copied often. This seems\nunnecessary now, so we can just create the map when the trie is created.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-19 12:56:12",
            "message": ".gitea: touch cron workflow files"
        },
        {
            "date": "2025-06-19 10:21:15",
            "message": "core: consolidate BlockChain constructor options (#31925)\n\nIn this pull request, the original `CacheConfig` has been renamed to `BlockChainConfig`.\n\nOver time, more fields have been added to `CacheConfig` to support\nblockchain configuration. Such as `ChainHistoryMode`, which clearly extends\nbeyond just caching concerns.\n\nAdditionally, adding new parameters to the blockchain constructor has\nbecome increasingly complicated, since it\u2019s initialized across multiple\nplaces in the codebase. A natural solution is to consolidate these arguments \ninto a dedicated configuration struct.\n\nAs a result, the existing `CacheConfig` has been redefined as `BlockChainConfig`.\nSome parameters, such as `VmConfig`, `TxLookupLimit`, and `ChainOverrides`\nhave been moved into `BlockChainConfig`. Besides, a few fields in `BlockChainConfig`\nwere renamed, specifically:\n\n- `TrieCleanNoPrefetch` -> `NoPrefetch`\n- `TrieDirtyDisabled` -> `ArchiveMode`\n\nNotably, this change won't affect the command line flags or the toml\nconfiguration file. It's just an internal refactoring and fully backward-compatible.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-19 09:43:24",
            "message": "core: simplify effectiveTip calculation (#31771)\n\nSince we have the effective gas price in the message, we can compute tip by\nsimply subtracting the basefee. No need to recompute the effective price.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-19 02:05:32",
            "message": "core/rawdb: don't decode the full block body in ReadTransaction (#32027)\n\nReading a single transaction out of a block shouldn't need decoding the\nentire body\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-06-19 01:44:39",
            "message": "eth,core: terminate the downloader immediately when shutdown signal is received (#32062)\n\nCloses https://github.com/ethereum/go-ethereum/issues/32058"
        },
        {
            "date": "2025-06-18 12:17:30",
            "message": "crypto/bn256/cloudflare: pull in upstream fix for R27 and R29 usage (#32057)\n\nPulls in https://github.com/cloudflare/bn256/pull/48 to remove usage of\nR27 and R29 [which are reserved](https://go.dev/doc/asm#arm64)."
        },
        {
            "date": "2025-06-18 07:29:14",
            "message": "all: reuse the global hash buffer (#31839)\n\nAs https://github.com/ethereum/go-ethereum/pull/31769 defined a global\nhash pool, so we can reuse it, and also remove the unnecessary\nKeccakState buffering\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-06-18 07:06:49",
            "message": "eth/catalyst: fetch header on forkchoiceUpdated (#31928)\n\ncloses https://github.com/ethereum/go-ethereum/issues/31254\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-06-17 21:42:06",
            "message": "build: upgrade -dlgo version to Go 1.24.4 (#31978)"
        },
        {
            "date": "2025-06-17 21:02:36",
            "message": "tests/fuzzers: added bn marshaling fuzzers (#32053)\n\nAdds marshaling fuzzing for G1 and G2 to oss-fuzz. \n\nAlso aligns the behavior of the google library to that of gnark and\ncloudflare, which only ever read the first 64 / 128 bytes of the input,\nregardless of how long the input is"
        },
        {
            "date": "2025-06-17 19:58:31",
            "message": "crypto/bn256: fix gnark deserialisation (#32055)\n\nfixes the gnark deserialisation\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-17 12:59:37",
            "message": "go.mod: bump golang.org/x/net from 0.36.0 to 0.38.0 (#31658)"
        },
        {
            "date": "2025-06-17 12:44:51",
            "message": "accounts: fix data race when closing manager (#31982)\n\nFixes a data race on the `wallets` slice when closing account Manager.\n\nAt the moment, there is a data race between a go-routine calling the\nManager's `Close` function and the background go-routine handling most\noperations on the `Manager`. The `Manager`'s `wallets` field is accessed\nwithout proper synchronization.\n\nBy moving the closing of wallets from the `Close()` function into the\nbackground thread, this issue can be resolved."
        },
        {
            "date": "2025-06-17 12:23:45",
            "message": "ethdb/pebble: lower the compaction debt (#31988)\n\nThis pull request reduces the threshold for triggering compaction at\nlevel0, leading to less compaction debt. This change is helpful in the\ncase of heavy write-load, mitigating the case of heavy write stalls\ncaused by compaction.\n\ncloses https://github.com/ethereum/go-ethereum/issues/31830"
        },
        {
            "date": "2025-06-17 12:13:03",
            "message": "fix: skip storage entries with missing preimage keys (#32051)\n\nWhen `GetKey`  is called, a missing preimage can cause the function to return a `nil`\nkey. This, in turn, makes `account.Storage` persist an incorrect value."
        },
        {
            "date": "2025-06-16 22:42:07",
            "message": "Revert \"crypto/bn256: default to gnark (#32024)\"\n\nThis reverts commit e0cf89ecfaa29b40dc548eec16e071242b40eedd."
        },
        {
            "date": "2025-06-16 16:44:18",
            "message": "node: fix data race on httpConfig.prefix (#32047)\n\nThis fixes a data race when accessing the `httpConfig.prefix` field.\nThis field can be modified while the server is running through\n`enableRPC`. The fix is storing the prefix in the handler, which is\naccessed through the atomic pointer.\n\nalternative to #32035\nfixes https://github.com/ethereum/go-ethereum/issues/32019"
        },
        {
            "date": "2025-06-16 13:34:48",
            "message": "tracers/prestate: always remove empty accounts from pre-state (#31427)\n\nThe prestateTracer had the intention of excluding accounts that were\nempty prior to execution from the prestate. This was being done only for\ncreated contracts. This PR makes it so all such empty accounts are\nexcluded. This behavior is configurable using the `includeEmpty: true`\nflag introduced in #31855.\n\n---------\n\nSigned-off-by: Ignacio Hagopian <jsign.uy@gmail.com>\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2025-06-16 11:23:10",
            "message": "go.mod: update gnark-crypto to v0.18.0 (#32034)\n\nmainly to pull in https://github.com/Consensys/gnark-crypto/pull/693"
        },
        {
            "date": "2025-06-16 11:10:14",
            "message": "crypto/bn256: default to gnark (#32024)"
        },
        {
            "date": "2025-06-16 10:31:09",
            "message": "eth/tracers: flag for empty acounts in prestateTracer (#31855)\n\nThis PR introduces a flag that enables returning of newly created state\nobjects in the prestateTracer.\n\n**Rationale**\nHaving this information is useful because local execution can more\neasily distinguish between newly created objects and system contracts.\n\n---------\n\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2025-06-13 14:16:49",
            "message": "Makefile: add make evm (#32029)"
        },
        {
            "date": "2025-06-13 12:01:50",
            "message": "core/vm: implement updates to modexp gas cost changes in EIP-7883 (#32015)\n\nImplements the updated gas cost changes introduced in\nhttps://github.com/ethereum/EIPs/commit/5cdd75157d78522bde8dc58977717c14cd7f2789"
        },
        {
            "date": "2025-06-13 11:47:26",
            "message": "metrics: remove use of reflect in metrics registration code (#31962)\n\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-06-13 07:04:24",
            "message": "trie: no need to store preimage if not enabled (#32012)\n\nAs the preimage will only be stored if `t.preimages != nil`, so no need\nto save them into local cache if not enabled. This will reduce the memory \nwasted to copy the bytes\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-06-12 12:30:54",
            "message": "metrics: add chain/gas for cumulative gas usage (#32004)\n\nThis is a followup to #31753.\n\nA cumulative counter is more useful when we need to measure / aggregate\nthe metric over a longer period of time. It also means we won't miss data,\ne.g. our prometheus scrapes every 30 seconds, and so may miss a transient \nspike in the pre-aggregated mgas/s.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-06-12 09:53:16",
            "message": "crypto/kzg4844: remove kzg initialization (#32017)\n\nThis fixes a regression in the state tests where we always initialized\nthe KZG library. This was added to test some stuff in #31791"
        },
        {
            "date": "2025-06-11 12:50:46",
            "message": "core/vm, cmd/evm: remove EOF (#32000)\n\nWith EOF removed from the Osaka fork, and no longer being tested, the\nimplementation will now just be bitrotting. I'm opting to remove it so\nit doesn't get in the way of other changes."
        },
        {
            "date": "2025-06-10 09:52:02",
            "message": "eth/filters: add timestamp to derived logs (#31887)\n\nThe block timestamp field is now added to the logs returned\nby eth_getLogs."
        },
        {
            "date": "2025-06-09 14:44:42",
            "message": "params: enable osaka fork in MergedTestChainConfig (#31993)"
        },
        {
            "date": "2025-06-09 14:36:24",
            "message": "cmd/workload: introduce transaction-trace test (#31288)\n\nThis pull request introduces a new test suite in workload framework, for\ntransaction tracing.\n\n**test generation**\n`go run . tracegen --trace-tests trace-test.json http://host:8545`\n\nand you can choose to store the trace result in a specific folder\n`go run . tracegen --trace-tests trace-test.json --trace-output\n./trace-result http://host:8545`\n\n**test run**\n`./workload test -run Trace/Transaction --trace-invalid ./trace-invalid\nhttp://host:8545`\n\nThe mismatched trace result will be saved in the specific folder for\nfurther investigation."
        },
        {
            "date": "2025-06-09 13:16:06",
            "message": "eth: initialize blobTxPool (#31992)\n\nFixes a regression introduced in #31791, see\nhttps://github.com/ethereum/go-ethereum/pull/31791#issuecomment-2955554641"
        },
        {
            "date": "2025-06-09 10:01:38",
            "message": "ethdb/pebble: adjust the number of memory tables (#31970)\n\nThis pull request adjusts the number of allowed memory tables in Pebble.\n\nPebble allows configuring an arbitrary number of memory tables to hold \nunflushed data. When the current memtable becomes full, it is scheduled \nfor flushing, and a new memtable is allocated to accept subsequent\nwrites. However, if too many memtables accumulate and are waiting to be \nflushed, subsequent writes will stall.\n\nOriginally, only two memtables were configured, each with a size of 512\nMB for Ethereum mainnet. While this setup works well under normal\nconditions, it becomes problematic under heavy write loads. In such scenarios,\nflushing is only triggered when more than 512 MB of data is pending, which may\nnot be responsive enough. Even worse, if compactions are running\nconcurrently, flushing memtables can become slow due to the heavy IO \noverhead, leading to write stalls across the system.\n\nThis pull request tries to mitigate the performance degradation by having \nmore memory tables but with a smaller size. In this case, the pending\nwrites can be flushed more smoothly and responsively."
        },
        {
            "date": "2025-06-09 09:34:24",
            "message": "eth/catalyst: implement getBlobsV2 (#31791)\n\nImplements `engine_getBlobsV2` which is needed for PeerDAS.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-05 14:47:49",
            "message": "core/vm: implement EIP 7883 - ModExp Gas Cost Increase (#31606)\n\nhttps://eips.ethereum.org/EIPS/eip-7883\n\n---------\n\nCo-authored-by: MariusVanDerWijden <m.vanderwijden@live.de>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-05 14:19:47",
            "message": "cmd/geth: fix era1 download location to match store (#31951)\n\nThis changes the era1 downloader to place the files into the correct\nlocation where geth will actually use them. Also adds integration with\nthe new --datadir.era flag."
        },
        {
            "date": "2025-06-05 10:14:35",
            "message": "eth, p2p: improve dial speed by pre-fetching dial candidates (#31944)\n\nThis PR improves the speed of Disc/v4 and Disc/v5 based discovery by\nadding a prefetch buffer to discovery sources, eliminating slowdowns\ndue to timeouts and rate mismatch between the two processes.\n\nSince we now want to filter the discv4 nodes iterator, it is being removed\nfrom the default discovery mix in p2p.Server. To keep backwards-compatibility,\nthe default unfiltered discovery iterator will be utilized by the server when\nno protocol-specific discovery is configured.\n\n---------\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-04 18:52:27",
            "message": "crypto/kzg4844: avoid copying blobs for marshaling (#31911)\n\nLLVM is not able to handle large arrays on stack"
        },
        {
            "date": "2025-06-04 16:19:11",
            "message": "core/vm: implement EIP 7823 - Set upper bounds for MODEXP (#31818)"
        },
        {
            "date": "2025-06-04 14:07:16",
            "message": "eth/downloader: fix missing receipt (#31952)\n\nThis fixes a regression introduced by #29158 where receipts of empty blocks\nwere stored into the database as an empty byte array, instead of an RLP empty list.\n\nFixes #31938\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-06-04 13:07:15",
            "message": "cmd/utils: update SepoliaFlag usage (#31961)\n\nThe Sepolia testnet has transitioned to pos following The Merge."
        },
        {
            "date": "2025-06-04 12:47:01",
            "message": "accounts/abi:  error when packing negative values in unsigned types (#31790)\n\nThis is an alternative approach to\nhttps://github.com/ethereum/go-ethereum/pull/31607 , that doesn't break\nbackwards-compatibility with abigen.\n\nNote that this does change the behavior of `Argument.Pack`: previously,\npacking negative values for a `uint` parameter would cause them to be\nrepresented in signed binary representation via two's complement. Now,\nit will fail explicitly in this case.\n\nHowever, I don't see a reason to support this functionality. The ABI\nalready explicitly supports signed integers. There's no reason that a\nsmart contract author would choose to store signed values in a `uint`\nafaict.\n\n---------\n\nCo-authored-by: MariusVanDerWijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-06-04 04:18:20",
            "message": "eth/catalyst: use atomics instead of locks (#31955)"
        },
        {
            "date": "2025-06-03 22:19:23",
            "message": "metrics: disable CPU metrics on tinygo (#31953)"
        },
        {
            "date": "2025-06-03 15:13:35",
            "message": "eth/filters: fix pruned history error for genesis block (#31941)\n\nFixes an issue where querying logs for block ranges starting from 0 would fail with an irrelevant\nerror on a pruned node. Now the correct \"history is pruned\" error will be returned."
        },
        {
            "date": "2025-06-03 12:36:00",
            "message": "eth/catalyst: change warning to error for 'too many bad block attempts' (#31940)\n\nThis situation was failing quietly for me recently when I had a partial\ndata corruption issue. Changing the log level to Error would increase\nvisibility for me."
        },
        {
            "date": "2025-06-03 10:54:13",
            "message": "core/filtermaps: remove filter base row cache, add group read (#31852)\n\nThis PR changes the database access of the base part of filter rows that\nare stored in groups of 32 adjacent maps for improved database storage\nsize and data access efficiency.\nBefore this grouped storage was introduced, filter rows were not cached\nbecause the access pattern of either the index rendering or the search\ndoes not really benefit from caching. Also no mutex was necessary for\nfilter row access. Storing adjacent rows in groups complicated the\nsituation as a search typically required reading all or most of adjacent\nrows of a group, so in order to implement the single row read operation\nwithout having to read the entire group up to 32 times, a cache for the\nbase row groups was added. This also introduced data race issues for\nconcurrenct read/write in the same group which was avoided by locking\nthe `indexLock` mutex. Unfortunately this also led to slowed down or\ntemporarily blocked search operations when indexing was in progress.\nThis PR returns to the original concept of uncached, no-mutex filter map\naccess by increasing read efficiency in a better way; similiarly to\nwrite operations that already operate on groups of filter maps, now\n`getFilterMapRow` is also replaced by `getFilterMapRows` that accepts a\nsingle `rowIndex` and a list of `mapIndices`. It slightly complicates\n`singleMatcherInstance.getMatchesForLayer` which now has to collect\ngroups of map indices accessed in the same row, but in exchange it\nguarantees maximum read efficiency while avoiding read/write mutex\ninterference.\n\nNote: a follow-up refactoring is WIP that further changes the database\naccess scheme by prodiving an immutable index view to the matcher, makes\nthe whole indexer more straightforward with no callbacks, and entirely\nremoves the concept of matcher syncing with `validBlocks` and the\nresulting multiple retry logic in `eth/filters/filter.go`. This might\ntake a bit longer to finish though and in the meantime this change could\nhopefully already solve the blocked request issues."
        },
        {
            "date": "2025-06-03 08:47:38",
            "message": "core/rawdb: integrate eradb backend for RPC (#31604)\n\nThis implements a backing store for chain history based on era1 files.\nThe new store is integrated with the freezer. Queries for blocks and receipts\nbelow the current freezer tail are handled by the era store.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-06-02 14:11:19",
            "message": "eth: return null for not-found in BlockByNumberOrHash (#31949)\n\nThis changes the API backend to return null for not-found blocks. This behavior\nis required by the RPC When `BlockByNumberOrHash` always returned an error\nfor this case ever since being added in https://github.com/ethereum/go-ethereum/pull/19491.\nThe backend method has a couple of call sites, and all of them handle a `nil`\nblock result because `BlockByNumber` returns `nil` for not-found.\n\nThe only case where this makes a real difference is for `eth_getBlockReceipts`,\nwhich was changed in #31361 to actually forward the error from `BlockByNumberOrHash`\nto the caller."
        },
        {
            "date": "2025-06-02 11:00:58",
            "message": ".gitea: modify scheduled workflow times (#31946)"
        },
        {
            "date": "2025-05-29 10:26:50",
            "message": "go.mod: bump flock package version (#31909)\n\nThe newer version has a stub implementation for unsupported targets,\nwhich allows us to compile to more exotic targets."
        },
        {
            "date": "2025-05-29 10:23:38",
            "message": ".travis.yml: remove master branch push builds (#31927)\n\nRelease artefact building has been migrated to another system (Gitea),\nso we can finally stop using Travis CI. However, in order to have a\nfail-safe for the release, I'm leaving the config in and it will still\ntrigger builds on Travis for tagged releases. That way, if our new\nsystem fails to work for the next release, we will still have the option\nof using Travis."
        },
        {
            "date": "2025-05-29 04:20:39",
            "message": "cmd/geth, cmd/utils: log prefunded account/key in ephemeral development mode (#31898)\n\nThis PR modifies the disclaimer/banner that is printed when starting up\nGeth in dev mode:\n* if the client is spun up in ephemeral dev mode with a keystore\noverride, the address of the first (prefunded) account is printed.\n* if the client is spun up in ephemeral mode without a keystore\noverride, the genesis allocation contains a single static prefunded EOA\naccount. It's address and private key are logged.\n* the banner is printed at the end of client initialization to make it\nmore prominent. Previously, it was logged towards the beginning of\nclient initialization and subsequent logging from startup filled the\nterminal, pushing it out of view of the user.\n\nOther change is that we now use a static prefunded dev account instead\nof generating a random one when instantiating a new dev mode chain.\n\nThis is an example of what the banner looks like:\n```\nWARN [05-28|23:05:16.475] You are running Geth in --dev mode. Please note the following:\nWARN [05-28|23:05:16.475] \nWARN [05-28|23:05:16.475]   1. This mode is only intended for fast, iterative development without assumptions on\nWARN [05-28|23:05:16.475]      security or persistence.\nWARN [05-28|23:05:16.475]   2. The database is created in memory unless specified otherwise. Therefore, shutting down\nWARN [05-28|23:05:16.475]      your computer or losing power will wipe your entire block data and chain state for\nWARN [05-28|23:05:16.475]      your dev environment.\nWARN [05-28|23:05:16.475]   3. A random, pre-allocated developer account will be available and unlocked as\nWARN [05-28|23:05:16.475]      eth.coinbase, which can be used for testing. The random dev account is temporary,\nWARN [05-28|23:05:16.475]      stored on a ramdisk, and will be lost if your machine is restarted.\nWARN [05-28|23:05:16.475]   4. Mining is enabled by default. However, the client will only seal blocks if transactions\nWARN [05-28|23:05:16.475]      are pending in the mempool. The miner's minimum accepted gas price is 1.\nWARN [05-28|23:05:16.475]   5. Networking is disabled; there is no listen-address, the maximum number of peers is set\nWARN [05-28|23:05:16.475]      to 0, and discovery is disabled.\nWARN [05-28|23:05:16.475] \nWARN [05-28|23:05:16.475] \nWARN [05-28|23:05:16.475]  Running in ephemeral mode.  The following account has been prefunded in the genesis:\nWARN [05-28|23:05:16.475] \nWARN [05-28|23:05:16.475]        Account\nWARN [05-28|23:05:16.475]        ------------------\nWARN [05-28|23:05:16.475]        0x71562b71999873db5b286df957af199ec94617f7 (10^49 ETH)\nWARN [05-28|23:05:16.475]  \nWARN [05-28|23:05:16.475]        Private Key\nWARN [05-28|23:05:16.475]        ------------------\nWARN [05-28|23:05:16.475]        0xb71c71a67e1177ad4e901695e1b4b9ee17ae16c6668d313eac2f96dbcda3f291\nWARN [05-28|23:05:16.475] \n```\n\ncloses #31796\n\n---------\n\nCo-authored-by: jwasinger <j-wasinger@hotmail.com>"
        },
        {
            "date": "2025-05-28 21:19:13",
            "message": ".gitea: run release build on tag push (#31924)"
        },
        {
            "date": "2025-05-28 21:16:51",
            "message": ".gitea: fix arm64 build (#31923)"
        },
        {
            "date": "2025-05-28 20:57:58",
            "message": ".gitea: fix archive uploads and run PPA upload on release push (#31922)"
        },
        {
            "date": "2025-05-28 20:40:26",
            "message": ".gitea: fix apt update (#31921)"
        },
        {
            "date": "2025-05-28 18:14:48",
            "message": ".gitea: fix secrets passing (#31920)"
        },
        {
            "date": "2025-05-28 17:01:33",
            "message": ".gitea: port more builds from travis and fix PPA env (#31919)"
        },
        {
            "date": "2025-05-28 16:24:43",
            "message": ".gitea: add env to scheduled builds (#31918)"
        },
        {
            "date": "2025-05-28 15:51:47",
            "message": ".gitea: adjust cron schedule (#31915)\n\nThis should make the scheduled build actually run."
        },
        {
            "date": "2025-05-28 11:31:42",
            "message": "triedb/pathdb: introduce lookup structure to optimize state access (#30971)\n\nThis pull request introduces a mechanism to improve state lookup\nefficiency in pathdb by maintaining a lookup structure that eliminates\nunnecessary iteration over diff layers.\n\nThe core idea is to track a mutation history for each dirty state entry\nresiding in the diff layers. This history records the state roots of all layers\nin which the entry was modified, sorted from oldest to newest.\n\nDuring state lookup, this mutation history is queried to find the most\nrecent layer whose state root either matches the target root or is a\ndescendant of it. This allows us to quickly identify the layer containing\nthe relevant data, avoiding the need to iterate through all diff layers from\ntop to bottom.\n\nBesides, the overhead for state lookup is constant, no matter how many\ndiff layers are retained in the pathdb, which unlocks the potential to hold\nmore diff layers.\n\nOf course, maintaining this lookup structure introduces some overhead.\nFor each state transition, we need to:\n(a) update the mutation records for the modified state entries, and\n(b) remove stale mutation records associated with outdated layers.\n\nOn our benchmark machine, it will introduce around 1ms overhead which is\nacceptable."
        },
        {
            "date": "2025-05-26 08:45:41",
            "message": "core/vm: fix bls benchmark (#31896)\n\nFixes #31893"
        },
        {
            "date": "2025-05-23 15:50:25",
            "message": "core: remove unused queued import status (#31870)"
        },
        {
            "date": "2025-05-23 15:48:15",
            "message": "internal/build: add support for Github Actions CI environment (#31891)\n\nThis adds support for the Github actions environment in the build tool.\nInformation from environment variables, like the build number and\nbranch/tag name, is used to make decisions about uploads and package\nfilenames."
        },
        {
            "date": "2025-05-23 14:21:08",
            "message": ".gitea: add cron build script (#31890)\n\nAlso swaps the push build scripts and adds environment output."
        },
        {
            "date": "2025-05-23 11:10:10",
            "message": "core/state: fix copy of storageChange (#31874)\n\nMissing field origvalue when copying storageChange."
        },
        {
            "date": "2025-05-23 10:44:30",
            "message": ".gitea: update release build actions (#31886)\n\nTrying to make the docker build work."
        },
        {
            "date": "2025-05-23 10:33:43",
            "message": ".gitea: add initial workflow file (#31885)"
        },
        {
            "date": "2025-05-23 09:29:01",
            "message": "consensus: remove clique RPC APIs (#31875)"
        },
        {
            "date": "2025-05-23 09:14:40",
            "message": "crypto: use pure Go signature implementation in tinygo (#31878)\n\ntinygo is having problems compiling the C implementation"
        },
        {
            "date": "2025-05-23 07:21:03",
            "message": "internal/era: update link to documentation (#31879)\n\nUpdated reference URL in accumulator.go comment to point to the correct\nlocation of the historical-hashes-accumulator documentation in the\nEthereum portal network specs"
        },
        {
            "date": "2025-05-22 21:49:11",
            "message": "build: Update EEST to v4.5.0 (#31880)\n\nWe deleted outdated pectra-devnet-6@v1.0.0 release by mistake, so this\nPR updates the referenced EEST release to the correct latest version.\n\n@s1na I removed the TODO comment because I think this solves it, unless\nit meant something else.\n\n---------\n\nCo-authored-by: MariusVanDerWijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-05-22 09:30:20",
            "message": "core/txpool: add explicit max blob count limit (#31837)\n\nFixes #31792.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-05-21 12:20:36",
            "message": "eth/tracers: Improve test coverage for toWord (#31846)"
        },
        {
            "date": "2025-05-21 09:53:29",
            "message": "eth/catalyst: move witness methods from engine api (#31867)\n\nNo functional changes, just moves the witness methods into its own file"
        },
        {
            "date": "2025-05-20 16:31:01",
            "message": "core/state: reduce allocation in updateStateObject (#31861)\n\nOptimize updateStateObject to reduce an allocation."
        },
        {
            "date": "2025-05-20 13:38:33",
            "message": "eth/tracers/native: add erc7562 tracer (#31006)\n\nThis PR introduces a new native tracer for AA bundlers. Bundlers participating in the alternative\nmempool will need to validate userops. This tracer will return sufficient information for them to\ndecide whether griefing is possible. Resolves #30546\n\n---------\n\nCo-authored-by: Sina M <1591639+s1na@users.noreply.github.com>"
        },
        {
            "date": "2025-05-20 12:57:01",
            "message": "core/txpool/legacypool: fix flaky test TestAllowedTxSize #30975 (#31836)\n\nSome tests involving transactions near the txMaxSize limit were flaky.\nThis was due to ECDSA signatures occasionally having leading zeros,\nwhich are omitted during RLP encoding \u2014 making the final transaction\nsize 1 byte smaller than expected.\n\nTo address this, a new helper function pricedDataTransactionWithFixedSignature\nwas added. It ensures both r and s are exactly 32 bytes (i.e., no leading zeros),\nproducing transactions with deterministic size."
        },
        {
            "date": "2025-05-20 08:04:37",
            "message": "README: update broken JSON-RPC API documentation link (#31860)\n\nI've updated the broken link to point to the current official Ethereum\nJSON-RPC API documentation at\nhttps://ethereum.org/en/developers/docs/apis/json-rpc/. This is the\ncorrect and up-to-date location for the Ethereum Execution Layer APIs\ndocumentation. The link should now work properly."
        },
        {
            "date": "2025-05-20 07:58:00",
            "message": "internal/reexec: fix broken link to Docker/Moby in comment (#31859)\n\nHey team\u2014noticed a dead link, replaced it with a working URL\n\nhttps://github.com/moby/moby/blob/master/pkg/reexec/reexec.go - old link\n\nhttps://github.com/moby/moby/blob/master/pkg/reexec/reexec_deprecated.go\n- new link"
        },
        {
            "date": "2025-05-19 13:55:17",
            "message": "internal: remove eth_{compile,getWork,submitWork} from console (#31856)\n\nThe `compile` and `eth_getWork` `eth_submitWork` apis were not available\nanymore, so try to remove them"
        },
        {
            "date": "2025-05-19 10:56:12",
            "message": "cmd/utils: remove duplicate code for influxDB tags (#31854)\n\nremove duplicate code\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>"
        },
        {
            "date": "2025-05-19 02:03:59",
            "message": "trie: use common.Hash as the key in secKeyCache map (#31786)"
        },
        {
            "date": "2025-05-19 01:59:35",
            "message": "core: don't emit the warning of log indexing if the db was not initialized (#31845)"
        },
        {
            "date": "2025-05-18 08:25:16",
            "message": "cmd/devp2p/internal/ethtest: tests for BlockRangeUpdate (#31843)\n\nI added a test for BlockRangeUpdate in #29158 but forgot to enable it.\nHere I'm adding two more tests for it. Also applied a small refactoring\nto combine calls to `dial()` and `peer()` into a single function, since\nthese two calls are duplicated in each test."
        },
        {
            "date": "2025-05-16 17:35:17",
            "message": "eth: use headers in debug.GetModifiedAccountsBy* (#31765)\n\nSmall optimization in debug_getModifiedAccountsBy* to avoid fetching block body."
        },
        {
            "date": "2025-05-16 15:10:47",
            "message": "eth/protocols/eth: implement eth/69 (#29158)\n\nThis PR implements eth/69. This protocol version drops the bloom filter\nfrom receipts messages, reducing the amount of data needed for a sync\nby ~530GB (2.3B txs * 256 byte) uncompressed. Compressed this will\nbe reduced to ~100GB\n\nThe new version also changes the Status message and introduces the\nBlockRangeUpdate message to relay information about the available history\nrange.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-05-16 10:29:38",
            "message": "core, triedb/pathdb: final integration (snapshot integration pt 5) (#30661)\n\nIn this pull request, snapshot generation in pathdb has been ported from \nthe legacy state snapshot implementation. Additionally, when running in \npath mode, legacy state snapshot data is now managed by the pathdb\nbased snapshot logic.\n\nNote: Existing snapshot data will be re-generated, regardless of whether \nit was previously fully constructed."
        },
        {
            "date": "2025-05-16 08:20:36",
            "message": "cmd/utils: remove deprecated LES flags (#31838)\n\nThey were not widely used in users setups."
        },
        {
            "date": "2025-05-15 20:54:18",
            "message": "build: upgrade -dlgo version to Go 1.24.3 (#31774)\n\nNew security fix: https://groups.google.com/g/golang-announce/c/UZoIkUT367A"
        },
        {
            "date": "2025-05-15 20:53:26",
            "message": "cmd/geth, internal/era/eradl: add era1 downloader tool (#31823)\n\nThis adds a geth subcommand for downloading era1 files and placing them into\nthe correct location. The tool can be used even while geth is already running\non the datadir. Downloads are checked against a hard-coded list of checksums\nfor mainnet and sepolia.\n\n```\n./geth download-era --server $SERVER --block 333333\n./geth download-era --server $SERVER --block 333333-444444\n./geth download-era --server $SERVER --epoch 0-10\n./geth download-era --server $SERVER --all\n```\n\nThe implementation reuses the file downloader we already had for\nfetching build tools. I've done some refactoring on it to make sure it\ncan support the new use case, and there are some changes to the build\nhere as well."
        },
        {
            "date": "2025-05-15 19:55:38",
            "message": "AUTHORS, .mailmap: update name and email attribution (#31624)"
        },
        {
            "date": "2025-05-15 12:43:52",
            "message": "core/state, core/vm: update stateless gas costs to follow the verkle-gen-7 testnet (#31014)\n\nAdding values to the witness introduces a new class of issues for\ncomputing gas: if there is not enough gas to cover adding an item to the\nwitness, then the item should not be added to the witness.\n\nThe problem happens when several items are added together, and that\nprocess runs out of gas. The witness gas computation needs a way to\nsignal that not enough gas was provided. These values can not be\nhardcoded, however, as they are context dependent, i.e. two calls to the\nsame function with the same parameters can give two different results.\n\nThe approach is to return both the gas that was actually consumed, and\nthe gas that was necessary. If the values don't match, then a witness\nupdate OOG'd. The caller should then charge the `consumed` value\n(remaining gas will be 0) and error out.\n\nWhy not return a boolean instead of the wanted value? Because when\nseveral items are touched, we want to distinguish which item lacked gas.\n\n---------\n\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>"
        },
        {
            "date": "2025-05-15 12:17:58",
            "message": "p2p/enode: add support for naming iterator sources (#31779)\n\nThis adds support for naming the source iterators of FairMix, like so:\n\n  mix.AddSource(enode.WithSourceName(\"mySource\", iter))\n\nThe source that produced the latest node is returned by the new NodeSource method."
        },
        {
            "date": "2025-05-15 07:32:20",
            "message": "cmd/utils: always record preimages in dev mode (#31821)\n\nFix a todo: force-enable this in --dev mode\n\n---------\n\nCo-authored-by: jwasinger <j-wasinger@hotmail.com>"
        },
        {
            "date": "2025-05-14 14:50:02",
            "message": "eth/catalyst: refactor engine api checks (#31182)\n\nThis PR contains three refactors:\n- refactor the latest fork check that we use quite extensively \n- refactor the nil checks in NewPayloads\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-05-14 01:26:08",
            "message": "core: use unix time to check fork readiness (#31800)"
        },
        {
            "date": "2025-05-13 13:28:16",
            "message": "eth: fix returned blockContext for empty blocks in stateAtTransaction (#31768)\n\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-05-13 12:11:27",
            "message": "crypto/kzg4844: use package github.com/crate-crypto/go-eth-kzg (#31806)\n\nI saw in https://github.com/ethereum/go-ethereum/pull/31378 introduced\ngithub.com/crate-crypto/go-eth-kzg to calculate the kzg hash, and\ngithub.com/crate-crypto/go-kzg-4844 was only used in the test files, so\npropose to drop it with go-eth-kzg instead"
        },
        {
            "date": "2025-05-12 09:31:48",
            "message": "accounts/abi/abigen: remove unnecessary test files (#31804)\n\nfix #31793: resolve conflict markers in structs-abi.go.txt"
        },
        {
            "date": "2025-05-12 07:41:24",
            "message": "core/state: fix incorrect description of function behavior (#31809)"
        },
        {
            "date": "2025-05-12 06:37:01",
            "message": "ethdb/pebble: expose stall counter of pebble (#31782)\n\nThis pull request adds a more Pebble metrics, tracking the amount of\nwrite stalls with specific reasons"
        },
        {
            "date": "2025-05-10 00:27:27",
            "message": "metrics: add chain/mgasps to track gas usage rate (#31753)\n\nThis adds a metric called `chain/mgasps`, which records how many million\ngas per second are being used during block insertion.\n\nThe value is calculated as `usedGas * 1000 / elapsed`, and it's updated\nin the `insertStats.report` method. Also cleaned up the log output to\nreuse the same value instead of recalculating it.\n\nUseful for monitoring block processing throughput.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-05-09 10:56:00",
            "message": "core/types: reduce allocations in tx.EffectiveGasTip (#31598)\n\nThis PR introduces an allocation-free version of the\nTransaction.EffectiveGasTip method to improve performance by reducing\nmemory allocations.\n\n## Changes\n- Added a new `EffectiveGasTipInto` method that accepts a destination\nparameter to avoid memory allocations\n- Refactored the existing `EffectiveGasTip` method to use the new\nallocation-free implementation\n- Updated related methods (`EffectiveGasTipValue`, `EffectiveGasTipCmp`,\n`EffectiveGasTipIntCmp`) to use the allocation-free approach\n- Added tests and benchmarks to verify correctness and measure\nperformance improvements\n\n## Motivation\nIn high-transaction-volume environments, the `EffectiveGasTip` method is\ncalled frequently. Reducing memory allocations in this method decreases\ngarbage collection pressure and improves overall system performance.\n\n## Benchmark Results\n\nAs-Is\nBenchmarkEffectiveGasTip/Original-10 42089140 27.45 ns/op 8 B/op 1\nallocs/op\n\nTo-Be\nBenchmarkEffectiveGasTip/IntoMethod-10 72353263 16.73 ns/op 0 B/op 0\nallocs/op\n\n\n## Summary of Improvements\n- **Performance**: ~39% faster execution (27.45 ns/op \u2192 16.73 ns/op)\n- **Memory**: Eliminated all allocations (8 B/op \u2192 0 B/op)\n- **Allocation count**: Reduced from 1 to 0 allocations per operation\n\nThis optimization follows the same pattern successfully applied to other\nmethods in the codebase, maintaining API compatibility while improving\nperformance.\n\n## Safety & Compatibility\nThis optimization has no side effects or adverse impacts because:\n- It maintains functional equivalence as confirmed by comprehensive\ntests\n- It preserves API compatibility with existing callers\n- It follows clear memory ownership patterns with the destination\nparameter\n- It maintains thread safety by only modifying the caller-provided\ndestination parameter\n\nThis optimization follows the same pattern successfully applied to other\nmethods in the codebase, providing better performance without\ncompromising stability or correctness.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-05-09 05:52:40",
            "message": "all: create global hasher pool (#31769)\n\nThis PR creates a global hasher pool that can be used by all packages.\nIt also removes a bunch of the package local pools.\n\nIt also updates a few locations to use available hashers or the global\nhashing pool to reduce allocations all over the codebase.\nThis change should reduce global allocation count by ~1%\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-05-08 14:28:16",
            "message": "core: implement in-block prefetcher (#31557)\n\nThis pull request enhances the block prefetcher by executing transactions \nin parallel to warm the cache alongside the main block processor.\n\nUnlike the original prefetcher, which only executes the next block and\nis limited to chain syncing, the new implementation can be applied to any \nblock. This makes it useful not only during chain sync but also for regular \nblock insertion after the initial sync.\n\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-05-08 14:27:01",
            "message": "core, triedb/pathdb: bail out error if write state history fails (#31781)\n\nThis PR fixes an issue that could lead to data corruption.\n\nWriting the state history may fail due to insufficient disk space or\nother potential errors. With this change, the entire state insertion \nwill be aborted instead of silently ignoring the error.\n\nWithout this fix, state transitions would continue while the associated\nstate history is lost. After a restart, the resulting gap would be detected, \nmaking recovery impossible."
        },
        {
            "date": "2025-05-08 13:21:48",
            "message": "core/types: delete unused test variable (#31776)\n\nDelete the unused `Account.PrivateKey` variable."
        },
        {
            "date": "2025-05-08 13:15:36",
            "message": "cmd/geth, internal: fix flaky console tests (#31784)\n\nThis pull request bumps the timeout for flaky console tests on appveyor."
        },
        {
            "date": "2025-05-08 11:10:26",
            "message": "core, ethdb: introduce database sync function (#31703)\n\nThis pull request introduces a SyncKeyValue function to the\nethdb.KeyValueStore\ninterface, providing the ability to forcibly flush all previous writes\nto disk.\n\nThis functionality is critical for go-ethereum, which internally uses\ntwo independent\ndatabase engines: a key-value store (such as Pebble, LevelDB, or\nmemoryDB for\ntesting) and a flat-file\u2013based freezer. To ensure write-order\nconsistency between\nthese engines, the key-value store must be explicitly synced before\nwriting to the\nfreezer and vice versa.\n\nFixes \n- https://github.com/ethereum/go-ethereum/issues/31405\n- https://github.com/ethereum/go-ethereum/issues/29819"
        },
        {
            "date": "2025-05-08 06:57:17",
            "message": "internal/web3ext: remove the legacy backtraceAt method (#31783)\n\nThe function `BacktraceAt` has been removed in #28187 . But the API\nend-point `debug_backtraceAt` is not removed from the file\n`internal/web3ext/web3ext.go`."
        },
        {
            "date": "2025-05-07 13:34:52",
            "message": "p2p: add metrics for inbound connection errors (#31652)\n\nAdd metics detailing reasons we reject inbound connections for, and\nreasons these connections fail during the handshake."
        },
        {
            "date": "2025-05-07 10:53:45",
            "message": "beacon/blsync: fix requests encoding in engine_newPayloadV4 (#31775)\n\nThis fixes an issue where blocks containing CL requests triggered an\nerror in the engine API. The encoding of requests used base64 instead of\nhex."
        },
        {
            "date": "2025-05-06 04:40:03",
            "message": "cmd/utils:  don't allow network ID override if a preset network is specified (#31630)"
        },
        {
            "date": "2025-05-06 03:30:19",
            "message": "go.mod: update pebble to v1.1.5 to reduce clutter in go.sum (#31541)\n\n```\ngo get github.com/cockroachdb/pebble@v1.1.5\ngo mod tidy\n```\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-05-05 14:20:38",
            "message": "version: begin v1.15.12 release cycle"
        },
        {
            "date": "2025-05-05 14:19:58",
            "message": "version: release go-ethereum v1.15.11 stable"
        },
        {
            "date": "2025-05-05 14:15:59",
            "message": "eth/tracers: fix `standardTraceBlockToFile` (#31763)\n\nFixes methods debug_standardTraceBlockToFile\nand debug_standardTraceBadBlockToFile which were\noutputting empty files.\n\n---------\n\nCo-authored-by: maskpp <maskpp266@gmail.com>\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2025-05-05 12:43:47",
            "message": "rpc: add method name length limit (#31711)\n\nThis change adds a limit for RPC method names to prevent potential abuse\nwhere large method names could lead to large response sizes.\n\nThe limit is enforced in:\n- handleCall for regular RPC method calls\n- handleSubscribe for subscription method calls\n\nAdded tests in websocket_test.go to verify the length limit\nfunctionality for both regular method calls and subscriptions.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-05-05 10:42:19",
            "message": "internal/ethapi: fix tx.from in eth_simulateV1 (#31480)\n\nIssue statement: when user requests eth_simulateV1 to return full\ntransaction objects, these objects always had an empty `from` field. The\nreason is we lose the sender when translation the message into a\ntypes.Transaction which is then later on serialized.\n\nI did think of an alternative but opted to keep with this approach as it\nkeeps complexity at the edge. The alternative would be to pass down a\nsigner object to RPCMarshal* methods and define a custom signer which\nkeeps the senders in its state and doesn't attempt the signature\nrecovery."
        },
        {
            "date": "2025-05-05 06:01:53",
            "message": "triedb: add test suite for preimage store (#31574)"
        },
        {
            "date": "2025-05-05 02:09:58",
            "message": "logs(indexer)Clean up log format in head index progress messages (#31761)\n\nupdates the log entries in `core/filtermaps/indexer.go` to remove double\nquotes around keys like \"first block\" and \"last block\", changing them to\n`firstblock` and `lastblock`. This brings them in line with the general\nlogging style used across the codebase, where log keys are unquoted\nsingle words.\n\nFor example, the log:\n`  INFO [...] \"first block\"=..., \"last block\"=...`\n\nIs now rendered as:\n`  INFO [...] firstblock=..., lastblock=...`\n\nThis change improves readability and maintains consistency with logs\nsuch as:\n`  INFO [...] number=2 sealhash=... uncles=0 txs=0 ...`\n\nNo functional behavior is changed \u2014 this is purely a formatting cleanup\nfor better developer experience."
        },
        {
            "date": "2025-05-05 02:07:55",
            "message": "core: reduce load on txindexer from API (#31752)\n\nFixes https://github.com/ethereum/go-ethereum/issues/31732.\n\nThis logic was removed in the recent refactoring in the txindexer to\nhandle history cutoff (#31393). It was first introduced in this PR:\nhttps://github.com/ethereum/go-ethereum/pull/28908.\n\nI have tested it and it works as an alternative to #31745.\n\nThis PR packs 3 changes to the flow of fetching txs from the API:\n\n- It caches the indexer tail after each run is over to avoid hitting the\ndb all the time as was done originally in #28908.\n\n- Changes `backend.GetTransaction`. It doesn't return an error anymore\nwhen tx indexer is in progress. It shifts the responsibility to the\ncaller to check the progress. The reason is that in most cases we anyway\ncheck the txpool for the tx. If it was indeed a pending tx we can avoid\nthe indexer progress check.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-05-04 12:40:31",
            "message": "params: fix comment for `DefaultBlobSchedule` (#31760)\n\n`DefaultBlobSchedule` is actually used downstream to calculate blob fees\n(e.g.,\n[src](https://github.com/ethereum-optimism/optimism/blob/601a380e47853c2922ea1f8944cda05f0eac16f4/op-service/eth/blob.go#L301)),\nthis PR makes it explicit that these params are for `Ethereum prod`\ninstead of `test chains`."
        },
        {
            "date": "2025-05-04 02:16:33",
            "message": "core/txpool/legacypool: fix data race of pricedList access (#31758)"
        },
        {
            "date": "2025-05-03 16:40:24",
            "message": "core/filtermaps: fix log index initialization (#31750)\n\nThis PR fixes an initialization bug that in some cases caused the map\nrenderer to leave the last, partially rendered map as is and resume\nrendering from the next map. At initialization we check whether the\nexisting rendered maps are consistent with the current chain view and\nrevert them if necessary. Until now this happened through an ugly hacky\nsolution, a \"limited\" chain view that was supposed to trigger a rollback\nof some maps in the renderer logic if necessary. This whole setup worked\nunder assumptions that just weren't true any more. As a result it always\ntried to revert the last map but also it did not shorten the indexed\nrange, only set `headIndexed` to false which indicated to the renderer\nlogic that the last map is fully populated (which it wasn't).\nNow an explicit rollback of any unusable (reorged) maps happens at\nstartup, which also means that no hacky chain view is necessary, as soon\nas the new `FilterMaps` is returned, the indexed range and view are\nconsistent with each other.\n\nIn the first commit an extra check is also added to `writeFinishedMaps`\nso that if there is ever again a bug that would result in a gapped index\nthen it will not break the db with writing the incomplete data. Instead\nit will return an indexing error which causes the indexer to revert to\nunindexed mode and print an error log instantly. Hopefully this will not\never happen in the future, but in order to test this safeguard check I\nmanually triggered the bug with only the first commit enabled, which\ncaused an indexing error as expected. With the second commit added (the\nactual fix) the same operation succeeded without any issues.\n\nNote that the database version is also bumped in this PR in order to\nenforce a full reindexing as any existing database might be potentially\nbroken.\n\nFixes https://github.com/ethereum/go-ethereum/issues/31729"
        },
        {
            "date": "2025-05-02 15:50:22",
            "message": "core/filtermaps: fix log value search range (#31734)\n\nThis PR fixes the out-of-range block number logic of `getBlockLvPointer`\nwhich sometimes caused searches to fail if the head was updated in the\nwrong moment. This logic ensures that querying the pointer of a future\nblock returns the pointer after the last fully indexed block (instead of\nfailing) and therefore an async range update will not cause the search\nto fail. Earier this behaviour only worked when `headIndexed` was true\nand `headDelimiter` pointed to the end of the indexed range. Now it also\nworks for an unfinished index.\n\nThis logic is also moved from `FilterMaps.getBlockLvPointer` to\n`FilterMapsMatcherBackend.GetBlockLvPointer` because it is only required\nby the search anyways. `FilterMaps.getBlockLvPointer` now only returns a\npointer for existing blocks, consistently with how it is used in the\nindexer/renderer.\n\nNote that this unhandled case has been present in the code for a long\ntime but went unnoticed because either one of two previously fixed bugs\ndid prevent it from being triggered; the incorrectly positive\n`tempRange.headIndexed` (fixed in\nhttps://github.com/ethereum/go-ethereum/pull/31680), though caused other\nproblems, prevented this one from being triggered as with a positive\n`headIndexed` no database read was triggered in `getBlockLvPointer`.\nAlso, the unnecessary `indexLock` in `synced()` (fixed in\nhttps://github.com/ethereum/go-ethereum/pull/31708) usually did prevent\nthe search seeing the temp range and therefore avoided noticeable\nissues."
        },
        {
            "date": "2025-05-02 15:43:06",
            "message": "core, eth/gasestimator: introduce MaxGasUsed for estimation (#31735)\n\nThis PR improves gas estimation for data-heavy transactions which hit the floor data gas cost."
        },
        {
            "date": "2025-05-02 15:21:17",
            "message": "node: avoid double close resp.Body (#31710)\n\nThe functions `rpcRequest` and `batchRpcRequest` call `baseRpcRequest`.\nAnd `resp.Body` will be closed in the function `baseRpcRequest` later by\n`t.Cleanup`:\n\n```go\nfunc baseRpcRequest(t *testing.T, url, bodyStr string, extraHeaders ...string) *http.Response {\n        // ......\n\tt.Cleanup(func() { resp.Body.Close() })\n\treturn resp\n}\n```"
        },
        {
            "date": "2025-05-02 14:31:50",
            "message": "cmd/devp2p: test for non-existent block request (#31506)\n\nAdd tests for GetBlockHeaders that verify client does not disconnect when unlikely block numbers are requested, e.g. max uint64.\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-05-02 13:19:54",
            "message": "ethclient: fix retrieval of pending block (#31504)\n\nSince the block hash is not returned for pending blocks, ethclient cannot unmarshal into RPC block. This makes hash optional on rpc block and compute the hash locally for pending blocks to correctly key the tx sender cache.\n\n\nhttps://github.com/ethereum/go-ethereum/blob/a82303f4e3cedcebe31540a53dde4f24fc93da80/internal/ethapi/api.go#L500-L504\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-04-30 10:37:48",
            "message": "cmd/geth: fix compatErr in initGenesis (#31746)"
        },
        {
            "date": "2025-04-30 07:23:08",
            "message": "core/filtermaps: do not derive full receipts during rendering (#31716)\n\nThis changes the filtermaps to only pull up the raw receipts, not the\nderived receipts which saves a lot of allocations.\n\nDuring normal execution this will reduce the allocations of the whole\ngeth node by ~15%."
        },
        {
            "date": "2025-04-30 03:02:11",
            "message": "eth/fetcher: define BatchSize as a constant (#31742)"
        },
        {
            "date": "2025-04-30 03:00:17",
            "message": "cmd/geth: print crit log if chain config is not compatible (#31743)"
        },
        {
            "date": "2025-04-29 12:42:17",
            "message": "crypto/kzg4844: add ComputeCells functionality (#31378)\n\nFor PeerDAS, we need to compute cell proofs. Both ckzg and gokzg support\ncomputing these cell proofs.\nThis PR does the following:\n\n- Update the go-kzg library from \"github.com/crate-crypto/go-kzg-4844\"\nto \"github.com/crate-crypto/go-eth-kzg\" which will be the new upstream\nfor go-kzg moving forward\n- Update ckzg from v1.0.0 to v2.0.1 and switch to /v2\n- Updates the trusted setup to contain the g1 points both in lagrange\nand monomial form\n- Expose `ComputeCells` to compute the cell proofs"
        },
        {
            "date": "2025-04-29 11:21:18",
            "message": "beacon/engine: omit empty witness in payload response (#31739)\n\nFixes https://github.com/ethereum/go-ethereum/issues/31737"
        },
        {
            "date": "2025-04-29 06:29:56",
            "message": "core: apply overrides to mainnet chainconfig (#31733)\n\nThis PR applies the config overrides to the new config as well,\notherwise they will not be applied to defined configs, making\nshadowforks impossible.\n\nTo test:\n```\n>  ./build/bin/geth --override.prague 123 --dev --datadir /tmp/geth\nINFO [04-28|21:20:47.009]  - Prague:                      @123\n> ./build/bin/geth --override.prague 321 --dev --datadir /tmp/geth\nINFO [04-28|21:23:59.760]  - Prague:                      @321\n``"
        },
        {
            "date": "2025-04-28 06:37:02",
            "message": "trie: add edgecase for rangeproof correctness (#31667)\n\nThis PR adds checking for an edgecase which theoretically can happen in\nthe range-prover. Right now, we check that a key does not overwrite a\nprevious one by checking that the key is increasing. However, if keys\nare of different lengths, it is possible to create a key which is\nincreasing _and_ overwrites the previous key. Example: `0xaabbcc`\nfollowed by `0xaabbccdd`.\n\nThis can not happen in go-ethereum, which always uses fixed-size paths\nfor accounts and storage slot paths in the trie, but it might happen if\nthe range prover is used without guaranteed fixed-size keys.\n\nThis PR also adds some testcases for the errors that are expected."
        },
        {
            "date": "2025-04-28 06:26:27",
            "message": "core/txpool/legacypool: refactor truncatePending (#31715)\n\nTruncatePending shows up bright red on our nodes, because it computes\nthe length of a map multiple times.\nI don't know why this is so expensive, but around 20% of our time is\nspent on this, which is super weird.\n\n```\n//PR: BenchmarkTruncatePending-24    \t   17498\t     69397 ns/op\t   32872 B/op\t       3 allocs/op\n//Master: BenchmarkTruncatePending-24    \t    9960\t    123954 ns/op\t   32872 B/op\t       3 allocs/op\n```\n\n```\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkTruncatePending-24     123954        69397         -44.01%\n\nbenchmark                       old allocs     new allocs     delta\nBenchmarkTruncatePending-24     3              3              +0.00%\n\nbenchmark                       old bytes     new bytes     delta\nBenchmarkTruncatePending-24     32872         32872         +0.00%\n```\nThis simple PR is a 44% improvement over the old state\n\n\n``` \nOUTINE ======================== github.com/ethereum/go-ethereum/core/txpool/legacypool.(*LegacyPool).truncatePending in github.com/ethereum/go-ethereum/core/txpool/legacypool/legacypool.go\n     1.96s     18.02s (flat, cum) 19.57% of Total\n         .          .   1495:func (pool *LegacyPool) truncatePending() {\n         .          .   1496:\tpending := uint64(0)\n      60ms      2.99s   1497:\tfor _, list := range pool.pending {\n     250ms      5.48s   1498:\t\tpending += uint64(list.Len())\n         .          .   1499:\t}\n         .          .   1500:\tif pending <= pool.config.GlobalSlots {\n         .          .   1501:\t\treturn\n         .          .   1502:\t}\n         .          .   1503:\n         .          .   1504:\tpendingBeforeCap := pending\n         .          .   1505:\t// Assemble a spam order to penalize large transactors first\n         .      510ms   1506:\tspammers := prque.New[int64, common.Address](nil)\n     140ms      2.50s   1507:\tfor addr, list := range pool.pending {\n         .          .   1508:\t\t// Only evict transactions from high rollers\n      50ms      5.08s   1509:\t\tif uint64(list.Len()) > pool.config.AccountSlots {\n         .          .   1510:\t\t\tspammers.Push(addr, int64(list.Len()))\n         .          .   1511:\t\t}\n         .          .   1512:\t}\n         .          .   1513:\t// Gradually drop transactions from offenders\n         .          .   1514:\toffenders := []common.Address{}\n```\n\n```go\n// Benchmarks the speed of batch transaction insertion in case of multiple accounts.\nfunc BenchmarkTruncatePending(b *testing.B) {\n\t// Generate a batch of transactions to enqueue into the pool\n\tpool, _ := setupPool()\n\tdefer pool.Close()\n\tb.ReportAllocs()\n\tbatches := make(types.Transactions, 4096+1024+1)\n\tfor i := range len(batches) {\n\t\tkey, _ := crypto.GenerateKey()\n\t\taccount := crypto.PubkeyToAddress(key.PublicKey)\n\t\tpool.currentState.AddBalance(account, uint256.NewInt(1000000), tracing.BalanceChangeUnspecified)\n\t\ttx := transaction(uint64(0), 100000, key)\n\t\tbatches[i] = tx\n\t}\n\tfor _, tx := range batches {\n\t\tpool.addRemotesSync([]*types.Transaction{tx})\n\t}\n\tb.ResetTimer()\n\t// benchmark truncating the pending\n\tfor range b.N {\n\t\tpool.truncatePending()\n\t}\n}\n```"
        },
        {
            "date": "2025-04-25 11:27:24",
            "message": "version: begin v1.15.11 release cycle"
        },
        {
            "date": "2025-04-25 10:44:25",
            "message": "version: release go-ethereum v1.15.10 stable"
        },
        {
            "date": "2025-04-25 09:57:38",
            "message": "core/filtermaps: fix deadlock in filtermap callback (#31708)\n\nThis PR fixes a deadlock situation is deleteTailEpoch that might arise\nwhen\nrange delete is running in iterator based fallback mode (either using\nleveldb\ndatabase or the hashdb state storage scheme). \n\nIn this case a stopCb callback is called periodically that does check\nevents,\nincluding matcher sync requests, in which case it tries to acquire\nindexLock\nfor read access, while deleteTailEpoch already held it for write access.\n\nThis pull request removes the indexLock acquiring in\n`FilterMapsMatcherBackend.synced`\nas this function is only called in the indexLoop.\n\nFixes https://github.com/ethereum/go-ethereum/issues/31700"
        },
        {
            "date": "2025-04-24 19:40:12",
            "message": "beacon/params: add mainnet electra config (#31706)\n\nThis PR adds the electra beacon chain configuration for mainnet."
        },
        {
            "date": "2025-04-24 16:19:10",
            "message": "miner: increase default gas limit to 36M (#31705)"
        },
        {
            "date": "2025-04-23 19:01:03",
            "message": "ethclient: allow passing AuthorizationList to calls (#31198)\n\nThis PR adds the `AuthorizationList` field to the `CallMsg` interface to support `eth_call`\nand `eth_estimateGas` of set-code transactions.\n\n---------\n\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2025-04-22 04:57:17",
            "message": "internal/debug: add debug_setMemoryLimit (#31441)"
        },
        {
            "date": "2025-04-21 12:57:25",
            "message": "version: begin v1.15.10 release cycle"
        },
        {
            "date": "2025-04-21 12:56:16",
            "message": "version: release go-ethereum v1.15.9 stable"
        },
        {
            "date": "2025-04-21 07:27:24",
            "message": "core/filtermaps: clone cached slices, fix tempRange (#31680)\n\nThis PR ensures that caching a slice or a slice of slices will never\naffect the original version by always cloning a slice fetched from cache\nif it is not used in a guaranteed read only way."
        },
        {
            "date": "2025-04-20 10:54:40",
            "message": "beacon/params, core/filtermaps: update checkpoints (#31674)\n\nThis PR updates checkpoints for blsync and filtermaps."
        },
        {
            "date": "2025-04-20 07:48:49",
            "message": "eth/filters, core/filtermaps: safe chain view update (#31590)\n\nThis PR changes the chain view update mechanism of the log filter.\nPreviously the head updates were all wired through the indexer, even in\nunindexed mode. This was both a bit weird and also unsafe as the\nindexer's chain view was updates asynchronously with some delay, making\nsome log related tests flaky. Also, the reorg safety of the indexed\nsearch was integrated with unindexed search in a weird way, relying on\n`syncRange.ValidBlocks` in the unindexed case too, with a special\ncondition added to only consider the head of the valid range but not the\ntail in the unindexed case.\n\nIn this PR the current chain view is directly accessible through the\nfilter backend and unindexed search is also chain view based, making it\ninherently safe. The matcher sync mechanism is now only used for indexed\nsearch as originally intended, removing a few ugly special conditions.\n\nThe PR is currently based on top of\nhttps://github.com/ethereum/go-ethereum/pull/31642\nTogether they fix https://github.com/ethereum/go-ethereum/issues/31518\nand replace https://github.com/ethereum/go-ethereum/pull/31542\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-04-19 14:02:31",
            "message": "eth/gasprice: fix eth_feeHistory blobGasUsedRatio divide zero (#31663)\n\nThe API `eth_feeHistory` returns\n`{\"jsonrpc\":\"2.0\",\"id\":1,\"error\":{\"code\":-32603,\"message\":\"json:\nunsupported value: NaN\"}}`, when we query `eth_feeHistory` with a old\nblock that without a blob, or when the field\n`config.blobSchedule.cancun.max` in genesis.config is 0 (that happens\nfor some projects fork geth but they don't have blob).\n\nSo here we specially handle the case when maxBlobGas == 0 to prevent\nthis issue from happening."
        },
        {
            "date": "2025-04-19 11:42:54",
            "message": "core: fail execution if system call fails to execute (#31639)\n\nsee: https://github.com/ethereum/pm/issues/1450#issuecomment-2800911584"
        },
        {
            "date": "2025-04-18 12:00:11",
            "message": "core/filtermaps: make ChainView thread safe (#31671)\n\nThis PR makes `filtermaps.ChainView` thread safe because it is used\nconcurrently both by the indexer and multiple matcher threads. Even\nthough it represents an immutable view of the chain, adding a mutex lock\nto the `blockHash` function is necessary because it does so by extending\nits list of non-canonical hashes if the underlying blockchain is\nchanged.\n\nThe unsafe concurrency did cause a panic once after running the unit\ntests for several hours and it could also happen during live operation."
        },
        {
            "date": "2025-04-18 11:39:11",
            "message": "core/filtermaps: only use common ancestor snapshots (#31668)\n\nThis PR makes the conditions for using a map rendering snapshot stricter\nso that whenever a reorg happens, only a snapshot of a common ancestor\nblock can be used. The issue fixed in\nhttps://github.com/ethereum/go-ethereum/pull/31642 originated from using\na snapshot that wasn't a common ancestor. For example in the following\nreorg scenario: `A->B`, then `A->B2`, then `A->B2->C2`, then `A->B->C`\nthe last reorg triggered a render from snapshot `B` saved earlier. Now\nthis is possible under certain conditions but extra care is needed, for\nexample if block `B` crosses a map boundary then it should not be\nallowed. With the latest fix the checks are sufficient but I realized I\nwould just feel safer if we disallowed this rare and risky scenario\naltogether and just render from snapshot `A` after the last reorg in the\nexample above. The performance difference if a few milliseconds and it\noccurs rarely (about once a day on Holesky, probably much more rare on\nMainnet).\nNote that this PR only makes the snapshot conditions stricter and\n`TestIndexerRandomRange` does check that snapshots are still used\nwhenever it's obviously possible (adding blocks after the current head\nwithout a reorg) so this change can be considered safe. Also I am\nrunning the unit tests and the fuzzer and everything seems to be fine."
        },
        {
            "date": "2025-04-17 19:27:48",
            "message": "eth: add tx to locals only if it has a chance of acceptance (#31618)\n\nThis pull request improves error handling for local transaction submissions.\n\nSpecifically, if a transaction fails with a temporary error but might be\naccepted later, the error will not be returned to the user; instead, the\ntransaction will be tracked locally for resubmission. \n\nHowever, if the transaction fails with a permanent error (e.g., invalid\ntransaction or insufficient balance), the error will be propagated to the user.\n\nThese errors returned in the legacyPool are regarded as temporary failure:\n\n- `ErrOutOfOrderTxFromDelegated`\n- `txpool.ErrInflightTxLimitReached`\n- `ErrAuthorityReserved`\n- `txpool.ErrUnderpriced`\n- `ErrTxPoolOverflow`\n- `ErrFutureReplacePending`\n\nNotably, InsufficientBalance is also treated as a permanent error, as\nit\u2019s highly unlikely that users will transfer funds into the sender account\nafter submitting the transaction. Otherwise, users may be confused\u2014seeing\ntheir transaction submitted but unaware that the sender lacks sufficient funds\u2014and\ncontinue waiting for it to be included.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-04-17 12:23:31",
            "message": "eth/catalyst: sanitize simulated beacon period to avoid overflowing time.Duration (#31407)\n\ncloses #31401\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\nCo-authored-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-04-17 08:46:47",
            "message": "core,params: add fork readiness indicator in logs (#31340)\n\ncloses #31310 \n\nThis has been requested a few times in the past and I think it is a nice\nquality-of-life improvement for users. At a predetermined interval,\nthere will now be a \"Fork ready\" log when a future fork is scheduled,\nbut not yet active.\n\nIt can only possibly print after block import, which kinda avoids the\nscenario where the client isn't progressing or is syncing and the user\nthinks it's \"ready\" because it sees a ready log.\n\nNew output:\n\n```console\nINFO [03-08|21:32:57.472] Imported new potential chain segment     number=7 hash=aa24ee..f09e62 blocks=1 txs=0 mgas=0.000 elapsed=\"874.916\u00b5s\" mgasps=0.000 snapdiffs=973.00B triediffs=7.05KiB triedirty=0.00B\nINFO [03-08|21:32:57.473] Ready for fork activation                fork=Prague date=\"18 Mar 25 19:29 CET\" remaining=237h57m0s timestamp=1,742,322,597\nINFO [03-08|21:32:57.475] Chain head was updated                   number=7 hash=aa24ee..f09e62 root=19b0de..8d32f2 elapsed=\"129.125\u00b5s\"\n```\n\nEasiest way to verify this behavior is to apply this patch and run `geth\n--dev --dev.period=12`\n\n```patch\ndiff --git a/params/config.go b/params/config.go\nindex 9c7719d901..030c4f80e7 100644\n--- a/params/config.go\n+++ b/params/config.go\n@@ -174,7 +174,7 @@ var (\n                ShanghaiTime:            newUint64(0),\n                CancunTime:              newUint64(0),\n                TerminalTotalDifficulty: big.NewInt(0),\n-               PragueTime:              newUint64(0),\n+               PragueTime:              newUint64(uint64(time.Now().Add(time.Hour * 300).Unix())),\n                BlobScheduleConfig: &BlobScheduleConfig{\n                        Cancun: DefaultCancunBlobConfig,\n                        Prague: DefaultPragueBlobConfig,\n```"
        },
        {
            "date": "2025-04-17 08:46:00",
            "message": "params: add prague timestamp for mainnet (#31535)\n\nhttps://eips.ethereum.org/EIPS/eip-7600#activation\n\nTimestamp: `1746612311`\nFork id: `0xc376cf8b`"
        },
        {
            "date": "2025-04-17 08:33:59",
            "message": "eth: fix transaction sender cache miss before broadcast (#31657)\n\nBroadcastTransactions needs the Sender address to route message flows\nfrom the same Sender address consistently to the same random subset of\npeers. It however spent considerable time calculating the Sender\naddresses, even if the Sender address was already calculated and cached\nin other parts of the code.\n\nSince we only need the mapping, we can use any signer, and the one that\nhad already been used is a better choice because of cache reuse."
        },
        {
            "date": "2025-04-17 08:32:40",
            "message": "core: fix sync reset in pruned nodes (#31638)\n\nThis is an attempt at fixing #31601. I think what happens is the startup\nlogic will try to get the full block body (it's `bc.loadLastState`) and\nfail because genesis block has been pruned from the freezer. This will\ncause it to keep repeating the reset logic, causing a deadlock.\n\nThis can happen when due to an unsuccessful sync we don't have the state\nfor the head (or any other state) fully, and try to redo the snap sync.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-04-17 02:39:21",
            "message": "core: fix history pruning initialization for empty DB (#31656)\n\nThis fixes an issue where running geth with `--history.chain postmerge`\nwould not work on an empty database.\n\n```\nERROR[04-16|23:11:12.913] Chain history database is pruned to unknown block tail=0\nFatal: Failed to register the Ethereum service: unexpected database tail\n```"
        },
        {
            "date": "2025-04-17 02:36:53",
            "message": "core/txpool/legacypool: fix data race of txlookup access (#31641)"
        },
        {
            "date": "2025-04-16 21:46:38",
            "message": "core/state: fix log format (#31610)\n\nLog `key` in hexadecimal string format."
        },
        {
            "date": "2025-04-16 21:30:13",
            "message": "core/filtermaps: fix map renderer reorg issue (#31642)\n\nThis PR fixes a bug in the map renderer that sometimes used an obsolete\nblock log value pointer to initialize the iterator for rendering from a\nsnapshot. This bug was triggered by chain reorgs and sometimes caused\nindexing errors and invalid search results. A few other conditions are\nalso made safer that were not reported to cause issues yet but could\npotentially be unsafe in some corner cases. A new unit test is also\nadded that reproduced the bug but passes with the new fixes.\n\nFixes https://github.com/ethereum/go-ethereum/issues/31593\nMight also fix https://github.com/ethereum/go-ethereum/issues/31589\nthough this issue has not been reproduced yet, but it appears to be\nrelated to a log index database corruption around a specific block,\nsimilarly to the other issue.\n\nNote that running this branch resets and regenerates the log index\ndatabase. For this purpose a `Version` field has been added to\n`rawdb.FilterMapsRange` which will also make this easier in the future\nif a breaking database change is needed or the existing one is\nconsidered potentially broken due to a bug, like in this case."
        },
        {
            "date": "2025-04-16 07:50:05",
            "message": "cmd/geth: remove the unused bloomfilter.size flag (#31646)"
        },
        {
            "date": "2025-04-15 18:40:30",
            "message": "p2p: fix dial metrics not picking up the right error (#31621)\n\nOur metrics related to dial errors were off. The original error was not\nwrapped, so the caller function had no chance of picking it up.\nTherefore the most common error, which is \"TooManyPeers\", was not\ncorrectly counted.\n\nThe metrics were originally introduced in\nhttps://github.com/ethereum/go-ethereum/pull/27621\n\nI was thinking of various possible solutions.\n- the one proposed here wraps both the new error and the origial error.\nIt is not a pattern we use in other parts of the code, but works. This\nis maybe the smallest possible change.\n- as an alternate, I could write a proper `errProtoHandshakeError` with\nit's own wrapped error\n- finally, I'm not even sure we need `errProtoHandshakeError`, maybe we\ncould just pass up the original error.\n\n---------\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-04-15 12:34:34",
            "message": "all: remove martin from CODEOWNERS (#31637)\n\nThank you, @holiman, for being an integral part of the Go-Ethereum \nand for your invaluable contributions over the years.\n\nThis will always be your home and you're welcome back anytime!"
        },
        {
            "date": "2025-04-15 12:32:46",
            "message": "core: initialize history pruning in BlockChain (#31636)\n\nI added the history mode configuration in eth/ethconfig initially, since\nit seemed like the logical place. But it turns out we need access to the\nintended pruning setting at a deeper level, and it actually needs to be\nintegrated with the blockchain startup procedure.\n\nWith this change applied, if a node previously had its history pruned,\nand is subsequently restarted **without** the `--history.chain\npostmerge` flag, the `BlockChain` initialization code will now verify\nthe freezer tail against the known pruning point of the predefined\nnetwork and will restore pruning status. Note that this logic is quite\nrestrictive, we allow non-zero tail only for known networks, and only\nfor the specific pruning point that is defined."
        },
        {
            "date": "2025-04-14 10:45:27",
            "message": "eth: add logic to drop peers randomly when saturated (#31476)\n\nAs of now, Geth disconnects peers only on protocol error or timeout,\nmeaning once connection slots are filled, the peerset is largely fixed.\n\nAs mentioned in https://github.com/ethereum/go-ethereum/issues/31321,\nGeth should occasionally disconnect peers to ensure some churn.\nWhat/when to disconnect could depend on:\n- the state of geth (e.g. sync or not)\n- current number of peers\n- peer level metrics\n\nThis PR adds a very slow churn using a random drop.\n\n---------\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-04-14 08:13:45",
            "message": "p2p: better dial/serve success metrics (#31629)\n\nOur previous success metrics gave success even if a peer disconnected\nright after connection. These metrics only count peers that stayed\nconnected for at least 1 min. The 1 min limit is an arbitrary choice. We do\nnot use this for decision logic, only statistics."
        },
        {
            "date": "2025-04-11 09:31:56",
            "message": "version: begin v1.15.9 release cycle"
        },
        {
            "date": "2025-04-11 09:31:16",
            "message": "version: release go-ethereum v1.15.8 stable"
        },
        {
            "date": "2025-04-11 09:28:14",
            "message": "build: upgrade -dlgo version to Go 1.24.2 (#31538)"
        },
        {
            "date": "2025-04-10 21:54:44",
            "message": "tests/testdata: revert to v17.0\n\nThe submodule was accidentally updated to another commit by f64aa6eaf7."
        },
        {
            "date": "2025-04-10 16:21:32",
            "message": "internal/testlog: fix log output from sub-loggers (#31539)\n\nWhen we instantiate a sub-logger via\n`go-ethereum/internal/testlog/logger.With`, we copy the reference to the\n`bufHandler` from the parent logger. However, internally,\n`go-ethereum/internal/testlog/logger.With` calls `log/slog/Logger.With`\nwhich creates a new handler instance (via\n`internal/bufHandler.WithAttrs`).\n\nThis PR modifies sub-logger instantiation to use the newly-instantiated\nhandler, instead of copying the reference from the parent instance. The\ntype cast from `slog.Handler` to `*bufHandler` in\n`internal/testlog/Logger.With` is safe here because a\n`internal/testlog/Logger` can only be instantiated with a `*bufHandler`\nas the underlying handler type.\n\nNote, that I've also removed a pre-existing method that broke the above\nassumption. However, this method is not used in our codebase.\n\nI'm not sure if the assumption holds for forks of geth (e.g. optimism\nhas modified the testlogger somewhat allowing test loggers to accept\narbitrary handler types), but it seems okay to break API compatibility\ngiven that this is in the `internal` package.\n\ncloses https://github.com/ethereum/go-ethereum/issues/31533"
        },
        {
            "date": "2025-04-10 11:49:54",
            "message": "eth/catalyst:  in tests, manually sync txpool after initial chain insertion to prevent race between txpool head reset and promotion of txs that will be subsequently added (#31595)\n\nbefore this changes, this will result in numerous test failures:\n```\n> go test -run=Eth2AssembleBlock -c\n> stress ./catalyst.test\n```\n\nThe reason is that after creating/inserting the test chain, there is a\nrace between the txpool head reset and the promotion of txs added from\ntests.\n\nEnsuring that the txpool state is up to date with the head of the chain\nbefore proceeding fixes these flaky tests."
        },
        {
            "date": "2025-04-10 10:46:54",
            "message": "accounts/usbwallet: full 32bit chainId support for Trezor (#17439)\n\nThis fix allows Trezor to support full 32bit chainId in geth, with the\nnext version of firmware.\n\nFor `chainId > 2147483630` case, Trezor returns signature bit only.\n- Trezor returns only signature parity for `chainId > 2147483630` case.\n- for `chainId == 2147483630` case, Trezor returns `MAX_UINT32` or `0`,\nbut it doesn't matter.\n  (`2147483630 * 2 + 35` = `4294967295`(`MAX_UINT32`))\n\nchainId | returned signature_v | compatible issue\n---------|------------------------|--------------------\n0 < chainId <= 255 | chainId * 2 + 35 + v | no issue (firmware `1.6.2`\nfor Trezor one)\n255 < chainId <= 2147483630 | chainId * 2 + 35 + v | ***fixed.***\n*firmware `1.6.3`*\nchainId > 2147483630 | v | *firmware `1.6.3`*\n\nPlease see also: full 32bit chainId support for Trezor\n- Trezor one: https://github.com/trezor/trezor-mcu/pull/399 ***merged***\n- Trezor model T: https://github.com/trezor/trezor-core/pull/311\n***merged***\n\n---------\n\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\nCo-authored-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>"
        },
        {
            "date": "2025-04-10 09:26:35",
            "message": "eth/fetcher: Fix flaky TestTransactionForgotten test using mock clock (#31468)\n\nFixes #31169\n\nThe TestTransactionForgotten test was flaky due to real time\ndependencies. This PR:\n\n- Replaces real time with mock clock for deterministic timing control\n- Adds precise state checks at timeout boundaries\n- Verifies underpriced cache states and cleanup\n- Improves test reliability by controlling transaction timestamps\n- Adds checks for transaction re-enqueueing behavior\n\nThe changes ensure consistent test behavior without timing-related\nflakiness.\n\n---------\n\nCo-authored-by: Zsolt Felfoldi <zsfelfoldi@gmail.com>"
        },
        {
            "date": "2025-04-10 01:11:24",
            "message": "core/txpool: allow tx and authority regardless of admission order (#31373)\n\nThis PR proposes a change to the authorizations' validation introduced\nin commit cdb66c8. These changes make the expected behavior independent\nof the order of admission of authorizations, improving the\npredictability of the resulting state and the usability of the system\nwith it.\n\nThe current implementation behavior is dependent on the transaction\nsubmission order: This issue is related to authorities and the sender of\na transaction, and can be reproduced respecting the normal nonce rules.\n\nThe issue can be reproduced by the two following cases:\n**First case**\n- Given an empty pool.\n- Submit transaction `{ from: B, auths [ A ] }`: is accepted.\n- Submit transaction `{ from: A }`: Is accepted: it becomes the one\nin-flight transaction allowed.\n\n**Second case**\n- Given an empty pool.\n- Submit transaction `{ from: A }`:  is accepted\n- Submit transaction `{ from: B, auths [ A ] }`: is rejected since there\nis already a queued/pending transaction from A.\n\nThe expected behavior is that both sequences of events would lead to the\nsame sets of accepted and rejected transactions.\n\n**Proposed changes** \nThe queued/pending transactions issued from any authority of the\ntransaction being validated have to be counted, allowing one transaction\nfrom accounts submitting an authorization.\n\n- Notice that the expected behavior was explicitly forbidden in the case\n\"reject-delegation-from-pending-account\", I believe that this behavior\nconflicts to the definition of the limitation, and it is removed in this\nPR. The expected behavior is tested in\n\"accept-authorization-from-sender-of-one-inflight-tx\".\n- Replacement tests have been separated to improve readability of the\nacceptance test.\n- The test \"allow-more-than-one-tx-from-replaced-authority\" has been\nextended with one extra transaction, since the system would always have\naccepted one transaction (but not two).\n- The test \"accept-one-inflight-tx-of-delegated-account\" is extended to\nclean-up state, avoiding leaking the delegation used into the other\ntests. Additionally, replacement check is removed to be tested in its\nown test case.\n\n**Expected behavior** \nThe expected behavior of the authorizations' validation shall be as\nfollows:\n\n![image](https://github.com/user-attachments/assets/dbde7a1f-9679-4691-94eb-c197a0cbb823)\nNotice that replacement shall be allowed, and behavior shall remain\ncoherent with the table, according to the replaced transaction.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-04-09 20:19:28",
            "message": "core/txpool: add notice to` Clear` that is not meant for production code (#31567)\n\nThe `Sync(..)` function explicitly says not to rely on in production\ncode, but it is used in `Clear(..)` so should add a similar mention."
        },
        {
            "date": "2025-04-09 09:28:29",
            "message": "p2p/nat: fix UPnP port reset (#31566)\n\nMake UPnP more robust\n\n- Once a random port was mapped, we try to stick to it even if a UPnP\nrefresh fails. Previously we were immediately moving back to try the\ndefault port, leading to frequent ENR changes.\n\n- We were deleting port mappings before refresh as a possible\nworkaround. This created issues in some UPnP servers. The UPnP (and PMP)\nspecification is explicit about the refresh requirements, and delete is\nclearly not needed (see\nhttps://github.com/ethereum/go-ethereum/pull/30265#issuecomment-2766987859).\nFrom now on we only delete when closing.\n\n- We were trying to add port mappings only once, and then moved on to\nrandom ports. Now we insist a bit more, so that a simple failed request\nwon't lead to ENR changes.\n\nFixes https://github.com/ethereum/go-ethereum/issues/31418\n\n---------\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-04-08 17:57:45",
            "message": "core/vm: optimize push2 opcode (#31267)\n\nDuring my benchmarks on Holesky, around 10% of all CPU time was spent in\nPUSH2\n```\nROUTINE ======================== github.com/ethereum/go-ethereum/core/vm.newFrontierInstructionSet.makePush.func1 in github.com/ethereum/go-ethereum/core/vm/instructions.go\n    16.38s     20.35s (flat, cum) 10.31% of Total\n     740ms      740ms    976:\treturn func(pc *uint64, interpreter *EVMInterpreter, scope *ScopeContext) ([]byte, error) {\n         .          .    977:\t\tvar (\n      40ms       40ms    978:\t\t\tcodeLen = len(scope.Contract.Code)\n     970ms      970ms    979:\t\t\tstart   = min(codeLen, int(*pc+1))\n     200ms      200ms    980:\t\t\tend     = min(codeLen, start+pushByteSize)\n         .          .    981:\t\t)\n     670ms      2.39s    982:\t\ta := new(uint256.Int).SetBytes(scope.Contract.Code[start:end])\n         .          .    983:\n         .          .    984:\t\t// Missing bytes: pushByteSize - len(pushData)\n     410ms      410ms    985:\t\tif missing := pushByteSize - (end - start); missing > 0 {\n         .          .    986:\t\t\ta.Lsh(a, uint(8*missing))\n         .          .    987:\t\t}\n    12.69s     14.94s    988:\t\tscope.Stack.push2(*a)\n      10ms       10ms    989:\t\t*pc += size\n     650ms      650ms    990:\t\treturn nil, nil\n         .          .    991:\t}\n         .          .    992:}\n```\n\nWhich is quite crazy. We have a handwritten encoder for PUSH1 already,\nthis PR adds one for PUSH2.\n\nPUSH2 is the second most used opcode as shown here:\nhttps://gist.github.com/shemnon/fb9b292a103abb02d98d64df6fbd35c8 since\nit is used by solidity quite significantly. Its used ~20 times as much\nas PUSH20 and PUSH32.\n\n# Benchmarks\n\n```\nBenchmarkPush/makePush-14         \t94196547\t        12.27 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkPush/push-14             \t429976924\t         2.829 ns/op\t       0 B/op\t       0 allocs/op\n``` \n\n---------\n\nCo-authored-by: jwasinger <j-wasinger@hotmail.com>"
        },
        {
            "date": "2025-04-08 13:46:27",
            "message": "core/txpool: add 7702 protection to blobpool (#31526)\n\nThis pull request introduces two constraints in the blobPool:\n\n(a) If the sender has a pending authorization or delegation, only one\nin-flight\nexecutable transaction can be cached.\n(b) If the authority address in a SetCode transaction is already\nreserved by\nthe blobPool, the transaction will be rejected.\n\nThese constraints mitigate an attack where an attacker spams the pool\nwith\nnumerous blob transactions, evicts other transactions, and then cancels\nall\npending blob transactions by draining the sender\u2019s funds if they have a\ndelegation.\n\nNote, because there is no exclusive lock held between different subpools\nwhen processing transactions, it's totally possible the SetCode\ntransaction\nand blob transactions with conflict sender and authorities are accepted\nsimultaneously. I think it's acceptable as it's very hard to be\nexploited.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-04-08 12:44:13",
            "message": "eth/remotedb: improve error handling (#31331)\n\nThis PR improves error handling in the remotedb package by fixing two\nissues:\n\n1. In the `Has` method, we now properly propagate errors instead of\nsilently returning false. This makes the behavior more predictable and\nhelps clients better understand when there are connection issues.\n\n2. In the `New` constructor, we add a nil check for the client parameter\nto prevent potential panics. This follows Go best practices for\nconstructor functions.\n\nThese changes make the code more robust and follow Go's error handling\nidioms without requiring any changes to other parts of the codebase.\n\nChanges:\n- Modified `Has` method to return errors instead of silently returning\nfalse\n- Added nil check in `New` constructor\n- Fixed field name in constructor to match struct definition"
        },
        {
            "date": "2025-04-07 05:16:26",
            "message": "cmd/geth: set trie,gc and other cache flags for import chain (#31577)\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-04-04 12:07:46",
            "message": "internal/era: random access to header and receipts (#31544)\n\nCo-authored-by: lightclient <lightclient@protonmail.com>\n\nAdd GetHeaderByNumber and GetReceiptsByNumber to allow more efficient API request filling from Era files."
        },
        {
            "date": "2025-04-04 08:56:55",
            "message": "p2p/nat: remove forceful port mapping in upnp (#30265)\n\nHere we are modifying the port mapping logic so that existing port\nmappings will only be removed when they were previously created by geth.\n\nThe AddAnyPortMapping functionality has been adapted to work consistently\nbetween the IGDv1 and IGDv2 backends."
        },
        {
            "date": "2025-04-03 14:04:11",
            "message": "beacon/blsync: add checkpoint import/export file feature (#31469)\n\nThis PR adds a new `--beacon.checkpoint.file` config flag to geth and\nblsync which specifies a checkpoint import/export file. If a file with\nan existing checkpoint is specified, it is used for initialization\ninstead of the hardcoded one (except when `--beacon.checkpoint` is also\nspecified simultaneously). Whenever the client encounters a new valid\nfinality update with a suitable finalized beacon block root at an epoch\nboundary, it saves the block root in hex format to the checkpoint file."
        },
        {
            "date": "2025-04-03 14:03:03",
            "message": "core, eth, node: use sync write option in pebble (#31519)\n\nFixes #31499"
        },
        {
            "date": "2025-04-03 13:58:37",
            "message": "cmd/devp2p/internal/v5test: log test descriptions (#31551)\n\nThis adds the test description text to the output, instead of keeping it\nas a Go comment. Logs are visible in the hive UI where these tests run,\nwhile Go comments are not."
        },
        {
            "date": "2025-04-03 13:44:07",
            "message": "eth: fix calls to HistoryPruningCutoff (#31552)\n\nThese were caused by crossed merges of recent PRs #31414 and #31361"
        },
        {
            "date": "2025-04-03 13:18:35",
            "message": "build: upgrade to golangci-lint v2 (#31530)"
        },
        {
            "date": "2025-04-03 13:16:35",
            "message": "core, eth/downloader: implement pruning mode sync (#31414)\n\nThis pull request introduces new sync logic for pruning mode. The downloader will now skip\ninsertion of block bodies and receipts before the configured history cutoff point.\n\nOriginally, in snap sync, the header chain and other components (bodies and receipts) were\ninserted separately. However, in Proof-of-Stake, this separation is unnecessary since the\nsync target is already verified by the CL.\n\nTo simplify the process, this pull request modifies `InsertReceiptChain` to insert headers\nalong with block bodies and receipts together. Besides, `InsertReceiptChain` doesn't have\nthe notion of reorg, as the common ancestor is always be found before the sync and extra\nside chain is truncated at the beginning if they fall in the ancient store. The stale\ncanonical chain flags will always be rewritten by the new chain. Explicit reorg logic is\nno longer required in `InsertReceiptChain`."
        },
        {
            "date": "2025-04-03 04:35:52",
            "message": "eth/protocols/eth: improve over/underflow handling in  `GetBlockHeaders` (#31522)"
        },
        {
            "date": "2025-04-02 19:52:40",
            "message": "all: fix typos in docs and comments (#31548)\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-04-02 17:19:25",
            "message": "README: fixup typos (#31540)\n\nFixes a few typos in readme."
        },
        {
            "date": "2025-04-02 12:56:21",
            "message": "p2p/discover: pass node instead of node ID to TALKREQ handler (#31075)\n\nThis is for the implementation of Portal Network in the Shisui client.\nTheir handler needs access to the node object in order to send further\ncalls to the requesting node. This is a breaking API change but it\nshould be fine, since there are basically no known users of TALKREQ\noutside of Portal network.\n\n---------\n\nSigned-off-by: thinkAfCod <q315xia@163.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-04-02 11:47:44",
            "message": "p2p/discover: repeat exact encoding when resending WHOAREYOU packet (#31543)\n\nWhen resending the WHOAREYOU packet, a new nonce and random IV should not\nbe generated. The sent packet needs to match the previously-sent one exactly\nin order to make the handshake retry work.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-04-02 07:47:56",
            "message": "core/txpool: add GetMetadata to transaction pool (#31433)\n\nThis is an alternative to #31309\n\nWith eth/68, transaction announcement must have transaction type and\nsize. So in announceTransactions, we need to query the transaction from\ntransaction pool with its hash. This creates overhead in case of blob\ntransaction which needs to load data from billy and RLP decode. This\ncommit creates a lightweight lookup from transaction hash to transaction\nsize and a function GetMetadata to query transaction type and\ntransaction size given the transaction hash.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-04-02 07:06:54",
            "message": "triedb/pathdb: improve perf by separating nodes map (#31306)\n\nThis PR refactors the `nodeSet` structure in the path database to use\nseparate maps for account and storage trie nodes, resulting in\nperformance improvements. The change maintains the same API while\noptimizing the internal data structure."
        },
        {
            "date": "2025-04-01 14:13:37",
            "message": "accounts/abi/abigen: fix a flaky bind test case `NewSingleStructArgument` (#31501)\n\nfound the failed testcase here\nhttps://ci.appveyor.com/project/ethereum/go-ethereum/builds/51767091/job/rbjke432c05pufja\n\nadd a timeout to wait the tx to be mined.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>\nCo-authored-by: Jared Wasinger <j-wasinger@hotmail.com>"
        },
        {
            "date": "2025-04-01 12:29:20",
            "message": "core/filtermaps: add metrics (#31511)\n\nThis PR adds metrics related to map rendering and pattern matching to\nthe `core/filtermaps` package."
        },
        {
            "date": "2025-04-01 12:10:22",
            "message": "cmd: apply snapshot cache flag in the MakeChain (#31534)"
        },
        {
            "date": "2025-04-01 12:07:47",
            "message": "p2p/nat: improve AddMapping code (#31486)\n\nIt introduces a new variable to store the external port returned by the\naddAnyPortMapping function and ensures that the correct external port is\nreturned even in case of an error.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-04-01 11:42:01",
            "message": "eth, eth/filters: implement API error code for pruned blocks (#31361)\n\nImplements #31275\n\n---------\n\nCo-authored-by: Jared Wasinger <j-wasinger@hotmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-31 16:29:33",
            "message": "version: begin v1.15.8 release cycle reloaded"
        },
        {
            "date": "2025-03-31 16:27:43",
            "message": ".travis.yml: remove macos build"
        },
        {
            "date": "2025-03-31 16:26:56",
            "message": "version: back to v1.15.7, to fix the build"
        },
        {
            "date": "2025-03-31 13:30:31",
            "message": "version: begin v1.15.8 release cycle"
        },
        {
            "date": "2025-03-31 13:29:03",
            "message": "version: release go-ethereum v1.15.7 stable"
        },
        {
            "date": "2025-03-31 12:47:56",
            "message": "core/filtermaps: hashdb safe delete range (#31525)\n\nThis PR adds `rawdb.SafeDeleteRange` and uses it for range deletion in\n`core/filtermaps`. This includes deleting the old bloombits database,\nresetting the log index database and removing index data for unindexed\ntail epochs (which previously weren't properly implemented for the\nfallback case).\n`SafeDeleteRange` either calls `ethdb.DeleteRange` if the node uses the\nnew path based state scheme or uses an iterator based fallback method\nthat safely skips trie nodes in the range if the old hash based state\nscheme is used. Note that `ethdb.DeleteRange` also has its own iterator\nbased fallback implementation in `ethdb/leveldb`. If a path based state\nscheme is used and the backing db is pebble (as it is on the majority of\nnew nodes) then `rawdb.SafeDeleteRange` uses the fast native range\ndelete.\nAlso note that `rawdb.SafeDeleteRange` has different semantics from\n`ethdb.DeleteRange`, it does not automatically return if the operation\ntakes a long time. Instead it receives a `stopCallback` that can\ninterrupt the process if necessary. This is because in the safe mode\npotentially a lot of entries are iterated without being deleted (this is\ndefinitely the case when deleting the old bloombits database which has a\nsingle byte prefix) and therefore restarting the process every time a\nfixed number of entries have been iterated would result in a quadratic\nrun time in the number of skipped entries.\n\nWhen running in safe mode, unindexing an epoch takes about a second,\nremoving bloombits takes around 10s while resetting a full log index\nmight take a few minutes. If a range delete operation takes a\nsignificant amount of time then log messages are printed. Also, any\nrange delete operation can be interrupted by shutdown (tail uinindexing\ncan also be interrupted by head indexing, similarly to how tail indexing\nworks). If the last unindexed epoch might have \"dirty\" index data left\nthen the indexed map range points to the first valid epoch and\n`cleanedEpochsBefore` points to the previous, potentially dirty one. At\nstartup it is always assumed that the epoch before the first fully\nindexed one might be dirty. New tail maps are never rendered and also no\nfurther maps are unindexed before the previous unindexing is properly\ncleaned up.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-31 07:49:19",
            "message": ".gitignore: ignore binaries (#31531)\n\nIgnores all hand-built binaries (built with go build, everything built\nwith make is already ignored)"
        },
        {
            "date": "2025-03-28 15:17:28",
            "message": "core/filtermaps: revert to unindexed mode in case of indexing error (#31500)\n\nThis PR changes log indexer error handling so that if an indexing error\nhappens then it disables the indexer and reverts to unindexed more\nwithout resetting the database (except in case of a failed database\ninit).\nResetting the database on the first error would probably be overkill as\na client update might fix this without having to reindex the entire\nhistory. It would also make debugging very hard. On the other hand,\nthese errors do not resolve themselves automatically so constantly\nretrying makes no sense either. With these changes a new attempt to\nresume indexing is made every time the client is restarted.\nThe PR also fixes https://github.com/ethereum/go-ethereum/issues/31491\nwhich originated from the tail indexer trying to resume processing a\nfailed map renderer.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-28 11:32:24",
            "message": "core/txpool: fix nonce assignment in local tracker (#31496)\n\nFixes #31494"
        },
        {
            "date": "2025-03-28 07:16:37",
            "message": "core/txpool/legacypool: fix data race in checkDelegationLimit (#31475)"
        },
        {
            "date": "2025-03-28 07:15:13",
            "message": "cmd/geth: update geth subcommand arguments (#31293)"
        },
        {
            "date": "2025-03-27 17:40:15",
            "message": "Merge pull request #31228 from curvegrid/fix-sim-rollback\n\neth/catalyst: force sync of txpool before clearing subpools in Rollback"
        },
        {
            "date": "2025-03-27 11:22:17",
            "message": "internal/ethapi: CreateAccessList with stateOverrides (#31497)\n\nAdd support for state overrides in eth_createAccessList. This will make the method consistent\nwith other execution methods.\n\n---------\n\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2025-03-26 15:14:17",
            "message": "accounts/abi: include access-list in gas estimation (#31394)\n\nSimple bugfix to include the access-list in the gas-estimation step of\nthe ABI bindings code."
        },
        {
            "date": "2025-03-26 11:57:08",
            "message": "eth: downgrade peer removal error to warning level (#31492)"
        },
        {
            "date": "2025-03-26 11:48:04",
            "message": "core/rawdb: remove LES database stats (#31495)\n\nThis removes DB schema for LES related db entries. LES has been non-functional\nsince the merge."
        },
        {
            "date": "2025-03-26 04:59:40",
            "message": "core/state: fix double-increment of accountLoaded counter (#31493)"
        },
        {
            "date": "2025-03-25 14:01:21",
            "message": "internal/ethapi: exclude 7702 authorities from result in eth_createAccessList (#31336)\n\ncloses https://github.com/ethereum/go-ethereum/issues/31335\n\n---------\n\nCo-authored-by: sashabeton <sashabeton2007@gmail.com>"
        },
        {
            "date": "2025-03-25 13:59:44",
            "message": "trie: optimize memory allocation (#30932)\n\nThis pull request removes the node copy operation to reduce memory\nallocation. Key Changes as below:\n\n**(a) Use `decodeNodeUnsafe` for decoding nodes retrieved from the trie\nnode reader**\n\nIn the current implementation of the MPT, once a trie node blob is\nretrieved, it is passed to `decodeNode` for decoding. However,\n`decodeNode` assumes the supplied byte slice might be mutated later, so\nit performs a deep copy internally before parsing the node.\n\nGiven that the node reader is implemented by the path database and the\nhash database, both of which guarantee the immutability of the returned\nbyte slice. By restricting the node reader interface to explicitly\nguarantee that the returned byte slice will not be modified, we can\nsafely replace `decodeNode` with `decodeNodeUnsafe`. This eliminates the\nneed for a redundant byte copy during each node resolution.\n\n**(b) Modify the trie in place**\n\nIn the current implementation of the MPT, a copy of a trie node is\ncreated before any modifications are made. These modifications include:\n- Node resolution: Converting the value from a hash to the actual node.\n- Node hashing: Tagging the hash into its cache.\n- Node commit: Replacing the children with its hash.\n- Structural changes: For example, adding a new child to a fullNode or\nreplacing a child of a shortNode.\n\nThis mechanism ensures that modifications only affect the live tree,\nleaving all previously created copies unaffected.\n\nUnfortunately, this property leads to a huge memory allocation\nrequirement. For example, if we want to modify the fullNode for n times,\nthe node will be copied for n times.\n\nIn this pull request, all the trie modifications are made in place. In\norder to make sure all previously created copies are unaffected, the\n`Copy` function now will deep-copy all the live nodes rather than the\nroot node itself.\n\nWith this change, while the `Copy` function becomes more expensive, it's\ntotally acceptable as it's not a frequently used one. For the normal\ntrie operations (Get, GetNode, Hash, Commit, Insert, Delete), the node\ncopy is not required anymore."
        },
        {
            "date": "2025-03-25 13:53:02",
            "message": "all: use fmt.Appendf instead of fmt.Sprintf where possible (#31301)"
        },
        {
            "date": "2025-03-25 13:13:05",
            "message": "core: process EL requests in GenerateVerkleChain (#31175)"
        },
        {
            "date": "2025-03-25 11:26:15",
            "message": "version: begin v1.15.7 release cycle"
        },
        {
            "date": "2025-03-25 10:30:13",
            "message": "version: release v1.15.6 stable"
        },
        {
            "date": "2025-03-25 10:16:26",
            "message": "core/txpool: reject stale transaction for local tracking (#31473)\n\nFixes https://github.com/ethereum/go-ethereum/issues/31451"
        },
        {
            "date": "2025-03-24 18:08:53",
            "message": "internal/ethapi: support for beacon root and withdrawals in simulate api (#31304)\n\nAdds block override fields for beacon block root and withdrawals to the eth_simulateV1.\nAddresses https://github.com/ethereum/go-ethereum/issues/31264"
        },
        {
            "date": "2025-03-24 14:19:14",
            "message": "tests: update test submodule (#31479)\n\nThis commit upgrades the test submodule to latest version:\n\nLatest:\nhttps://github.com/ethereum/tests/commit/81862e4848585a438d64f911a19b3825f0f4cd95\nOld:\nhttps://github.com/ethereum/tests/commit/faf33b471465d3c6cdc3d04fbd690895f78d33f2"
        },
        {
            "date": "2025-03-24 11:27:40",
            "message": "beacon/params: new checkpoints (#31470)\n\nThis PR updates beacon checkpoints. The checkpoints are now stored as\nembedded hex files, in the same format that\nhttps://github.com/ethereum/go-ethereum/pull/31469 uses."
        },
        {
            "date": "2025-03-24 11:27:11",
            "message": "core/filtermaps: fix log indexer init conditions (#31455)\n\nThis PR adds an extra condition to the log indexer initialization in\norder to avoid initializing with block 0 as target head. Previously this\ncaused the indexer to initialize without a checkpoint. Later, when the\nreal chain head was set, it indexed the entire history, then unindexed\nmost of it if only the recent history was supposed to be indexed. Now\nthe init only happens when there is an actual synced chain head and\ntherefore the index is initialized at the most recent checkpoint and\nonly the last year is indexed according to the default parameters.\nDuring checkpoint initialization the best available checkpoint is also\nchecked against the history cutoff point and fails if the indexing would\nhave to start from a block older than the cutoff. If initialization\nfails then the indexer reverts to unindexed mode instead of retrying\nbecause the the failure conditions cannot be expected to recover later."
        },
        {
            "date": "2025-03-24 09:07:38",
            "message": "core/rawdb: improve database stats output (#31463)\n\nInstead of reporting all filtermaps stuff in one line, I'm breaking it\ndown into the three separate kinds of entries here.\n\n```\n+-----------------------+-----------------------------+------------+------------+\n|       DATABASE        |          CATEGORY           |    SIZE    |   ITEMS    |\n+-----------------------+-----------------------------+------------+------------+\n| Key-Value store       | Log index filter-map rows   | 59.21 GiB  |  616077345 |\n| Key-Value store       | Log index last-block-of-map | 12.35 MiB  |     269755 |\n| Key-Value store       | Log index block-lv          | 421.70 MiB |   22109169 |\n```\n\nAlso added some other changes to make it easier to debug:\n\n- restored bloombits into the inspect output, so we notice if it doesn't\nget deleted for some reason\n- tracking of unaccounted key examples"
        },
        {
            "date": "2025-03-23 16:38:26",
            "message": "internal/ethapi: return code 3 from call/estimateGas even if a revert reason was not returned (#31456)"
        },
        {
            "date": "2025-03-21 13:08:51",
            "message": "eth/filter: downgrade log level (#31450)"
        },
        {
            "date": "2025-03-21 12:12:56",
            "message": "cmd/geth: add prune history command (#31384)\n\nThis adds a new subcommand 'geth prune-history' that removes the pre-merge history\non supported networks. Geth is not fully ready to work in this mode, please do not run\nthis command on your production node.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-21 10:29:51",
            "message": "core: respect history cutoff in txindexer (#31393)\n\nIn #31384 we unindex TXes prior to the merge block. However when the\nnode starts up it will try to re-index those back if the config is to index the\nwhole chain. This change makes the indexer aware of the history cutoff block,\navoiding reindexing in that segment.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-21 09:47:58",
            "message": "core/bloombits: remove old bloombits logic and chain indexer (#31081)\n\nThis PR is #3 of a 3-part series that implements the new log index\nintended to replace core/bloombits.\nBased on https://github.com/ethereum/go-ethereum/pull/31079 and\nhttps://github.com/ethereum/go-ethereum/pull/31080\nReplaces https://github.com/ethereum/go-ethereum/pull/30370\n\nThis part removes the old bloombits package and the chain indexer that\nwas only used by bloombits. Deletes the old bloombits database.\n\nFilterMaps data structure explanation:\nhttps://gist.github.com/zsfelfoldi/a60795f9da7ae6422f28c7a34e02a07e\n\nLog index generator code overview:\nhttps://gist.github.com/zsfelfoldi/97105dff0b1a4f5ed557924a24b9b9e7\n\nSearch pattern matcher code overview:\nhttps://gist.github.com/zsfelfoldi/5981735641c956afb18065e84f8aff34\n\nNote that the possibility of a tree hashing scheme and remote proof\nprotocol are mentioned in the documents above but they are not exactly\nspecified yet. These specs are WIP and will be finalized after the local\nlog indexer/filter code is finalized and merged.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-20 21:05:15",
            "message": "core/txpool/legacypool: reject gapped tx from delegated account (#31430)\n\nThis pull request improves the protection mechanism in the txpool for \nsenders with delegation. A sender with either delegation or pending \ndelegation is now limited to a maximum of one in-flight executable \ntransaction, while gapped transactions will be rejected.\n\nReason:\nIf nonce-gapped transaction from delegated/pending-delegated senders\ncan be acceptable, then it's no-longer possible to send another\n\"executable\" transaction with correct nonce due to the policy of at most\none inflight tx. The gapped transaction will be stuck in the txpool, with no\nmeaningful way to unlock the sender.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-03-20 16:11:40",
            "message": "p2p/discover: repeat WHOAREYOU challenge when handshake in progress (#31356)\n\nThis fixes the handshake in a scenario where the remote end sends two unknown\npackets in a row. When this happens, we would previously respond to both with\na WHOAREYOU challenge, but keep only the latest sent challenge. Transmission is\nassumed to be unreliable, so any client that sends two request packets simultaneously\nhas to be prepared to follow up on whichever request leads to a handshake. With\nthis fix, we force them to do the handshake that we can actually complete.\n\nFixes #30581"
        },
        {
            "date": "2025-03-20 13:13:58",
            "message": "core/filtermaps: allow log search while head indexing (#31429)\n\nThis PR changes the matcher syncing conditions so that it is possible to\nrun a search while head indexing is in progress. Previously it was a\nrequirement to have the head indexed in order to perform matcher sync\nbefore and after a search. This was unnecessarily strict as the purpose\nwas just to avoid syncing the valid range with the temporary shortened\nindexed range applied while updating existing head maps. Now the sync\ncondition explicitly checks whether the indexer has a temporary indexed\nrange with some head maps being partially updated.\nIt also fixes a deadlock that happened when matcher synchronization was\nattempted in the event handler called from the `writeFinishedMaps`\nperiodical callback."
        },
        {
            "date": "2025-03-20 12:33:13",
            "message": "eth/tracers: fix test (#31445)\n\nThis pull request fixes a broken unit test\n\n```\n=== CONT  TestTracingWithOverrides\n    api_test.go:1012: result: {\"gas\":21167,\"failed\":false,\"returnValue\":\"0x0000000000000000000000000000000000000000000000000000000000000002\",\"structLogs\":[{\"pc\":0,\"op\":\"PUSH1\",\"gas\":24978860,\"gasCost\":3,\"depth\":1,\"stack\":[]},{\"pc\":2,\"op\":\"CALLDATALOAD\",\"gas\":24978857,\"gasCost\":3,\"depth\":1,\"stack\":[\"0x0\"]},{\"pc\":3,\"op\":\"PUSH1\",\"gas\":24978854,\"gasCost\":3,\"depth\":1,\"stack\":[\"0x1\"]},{\"pc\":5,\"op\":\"ADD\",\"gas\":24978851,\"gasCost\":3,\"depth\":1,\"stack\":[\"0x1\",\"0x1\"]},{\"pc\":6,\"op\":\"PUSH1\",\"gas\":24978848,\"gasCost\":3,\"depth\":1,\"stack\":[\"0x2\"]},{\"pc\":8,\"op\":\"MSTORE\",\"gas\":24978845,\"gasCost\":6,\"depth\":1,\"stack\":[\"0x2\",\"0x0\"]},{\"pc\":9,\"op\":\"PUSH1\",\"gas\":24978839,\"gasCost\":3,\"depth\":1,\"stack\":[]},{\"pc\":11,\"op\":\"PUSH1\",\"gas\":24978836,\"gasCost\":3,\"depth\":1,\"stack\":[\"0x20\"]},{\"pc\":13,\"op\":\"RETURN\",\"gas\":24978833,\"gasCost\":0,\"depth\":1,\"stack\":[\"0x20\",\"0x0\"]}]}\n    api_test.go:1013: test 10, result mismatch, have\n        {21167 false 0x0000000000000000000000000000000000000000000000000000000000000002}\n        , want\n        {21167 false 0000000000000000000000000000000000000000000000000000000000000002}\n    api_test.go:1012: result: {\"gas\":25664,\"failed\":false,\"returnValue\":\"0x000000000000000000000000c6e93f4c1920eaeaa1e699f76a7a8c18e3056074\",\"structLogs\":[]}\n    api_test.go:1013: test 11, result mismatch, have\n        {25664 false 0x000000000000000000000000c6e93f4c1920eaeaa1e699f76a7a8c18e3056074}\n        , want\n        {25664 false 000000000000000000000000c6e93f4c1920eaeaa1e699f76a7a8c18e3056074}\n\n```"
        },
        {
            "date": "2025-03-20 09:20:51",
            "message": "eth/tracers: hex-encode returnValue (#31216)\n\nThis is a **breaking change** to the opcode tracer. The top-level\n`returnValue` field of a trace will be now hex-encoded. If the return\ndata is empty, this field will contain \"0x\".\n\nFixes #31196"
        },
        {
            "date": "2025-03-20 08:23:10",
            "message": "cmd/workload: fixed filter test request error handling (#31424)\n\nThis PR fixes the broken request error handling of the workload filter\ntests. Until now `validateHistoryPruneErr` was invoked with `fq.Err` as\nan input which was always nil and a timeout or http error was reported\nas a result content mismatch.\nAlso, in case of `errPrunedHistory` it is wrong to return here without\nsetting an error because then it will look like a valid empty result and\nthe check will later fail. So instead `errPrunedHistory` is always\nreturned now (without printing an error message) and the callers of\n`run` should handle this special case (typically ignore silently)."
        },
        {
            "date": "2025-03-20 05:14:13",
            "message": "cmd/utils: force hash scheme for archive mode (#31439)"
        },
        {
            "date": "2025-03-19 15:05:44",
            "message": "core/types: cleanup tx signer logic (#31434)\n\nThis removes the signer type-train in favor of defining a single object\nthat can handle all tx types. Supported types are enabled via a map.\nNotably, the new signer also supports disabling legacy transactions."
        },
        {
            "date": "2025-03-19 06:21:40",
            "message": "core/types: reduce allocs in transaction signing (#31258)\n\nThis PR roughly halves the number of allocations needed to compute the\nsigHash for a transaction.\n\nThis sigHash is used whenever we recover a signature of a transaction,\nso quite often. During a recent benchmark full syncing on Holesky,\nroughly 2.8% of all allocations were happening here because the fields\nfrom the transaction would be copied multiple times.\n\n```\n66168733  153175654 (flat, cum)  2.80% of Total\n         .          .    368:func (s londonSigner) Hash(tx *Transaction) common.Hash {\n         .          .    369:\tif tx.Type() != DynamicFeeTxType {\n         .          .    370:\t\treturn s.eip2930Signer.Hash(tx)\n         .          .    371:\t}\n         .   19169966    372:\treturn prefixedRlpHash(\n         .          .    373:\t\ttx.Type(),\n  26442187   26442187    374:\t\t[]interface{}{\n         .          .    375:\t\t\ts.chainId,\n   6848616    6848616    376:\t\t\ttx.Nonce(),\n         .   19694077    377:\t\t\ttx.GasTipCap(),\n         .   18956774    378:\t\t\ttx.GasFeeCap(),\n   6357089    6357089    379:\t\t\ttx.Gas(),\n         .   12321050    380:\t\t\ttx.To(),\n         .   16865054    381:\t\t\ttx.Value(),\n  13435187   13435187    382:\t\t\ttx.Data(),\n  13085654   13085654    383:\t\t\ttx.AccessList(),\n         .          .    384:\t\t})\n         .          .    385:}\n```\n\nThis PR reduces the allocations and speeds up the computation of the\nsigHash by ~22%, which is quite significantly given that this operation\ninvolves a call to Keccak\n```\n// BenchmarkHash-8   \t  440082\t      2639 ns/op\t     384 B/op\t      13 allocs/op\n// BenchmarkHash-8   \t  493566\t      2033 ns/op\t     240 B/op\t       6 allocs/op\n```\n\n```\nHash-8   2.691\u00b5 \u00b1 8%   2.097\u00b5 \u00b1 9%  -22.07% (p=0.000 n=10)\n```\n\nIt also kinda cleans up stuff in my opinion, since the transaction\nshould itself know best how to compute the sighash\n\n\n\n\n![Screenshot_2025-02-25_13-52-41](https://github.com/user-attachments/assets/e2b268aa-e137-417d-926b-f3619daef748)\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-03-19 06:20:50",
            "message": "core/txpool, eth: add GetRLP to transaction pool (#31307)\n\nCurrently, when answering GetPooledTransaction request, txpool.Get() is\nused. When the requested hash is blob transaction, blobpool.Get() is\ncalled. This function loads the RLP-encoded transaction from limbo then\ndecodes and returns. Later, in answerGetPooledTransactions, we need to\nRLP encode again. This decode then encode is wasteful. This commit adds\nGetRLP to transaction pool interface so that answerGetPooledTransactions\ncan use the RLP-encoded from limbo directly.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-03-18 14:41:34",
            "message": "ethclient: Add EstimateGasAtBlock[Hash] to estimate against a specific block (#27508)\n\nThe main use case I see of this is that it allows users to estimate gas\nagainst the same state that they query for their nonce, and the same\nstate they base the data of their transaction against. This helps ensure\nthat gas estimation won't fail and the transaction won't revert on-chain\nbecause of a mismatch between the state used for gas estimation and the\nstate used to generate the inputs to gas estimation or the transaction's\nnonce when submitted to the mempool.\n\nThis PR also updates the EstimateGas comment based on the new geth\n`eth_estimateGas` default of using latest state as of v1.12.0:\nhttps://github.com/ethereum/go-ethereum/pull/24363\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-18 13:32:29",
            "message": "cmd: set name to chaindata for all the opened db (#31352)\n\nWhen I'm running `geth import --metrics`, the metrics is different to\nnormal `geth --metrics`, so the grafana dashboard needs to be updated,\neg: `eth_db_chaindata_disk_read` vs `disk_read`.\n\nSo I think we should always set the name to `eth/db/chaindata` for more\nconvenient.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-03-18 12:46:23",
            "message": "core/filtermaps: fixed indexer checkpoint initialization (#31419)\n\nThis PR fixes a bug in the `lastMapBoundaryBefore` logic that resulted\nin incorrect checkpoint initialization (started rendering from the\nprevious epoch boundary which caused the `needTailEpoch` check to fail).\nApparently the bug was present before but went unnoticed because\n`needTailEpoch` behaved differently.\nFixes https://github.com/ethereum/go-ethereum/issues/31413"
        },
        {
            "date": "2025-03-18 11:40:38",
            "message": "internal/ethapi: fix logs bloom in eth_simulateV1 (#31411)\n\nGeth was returning empty logsBloom for the simulated block."
        },
        {
            "date": "2025-03-18 11:07:49",
            "message": "params: add hoodi testnet definition (#31406)\n\nAdds support for the new hoodi testnet. Hoodi is meant for stakers to test\ntheir setup. For more info please refer to https://hoodi.ethpandaops.io/."
        },
        {
            "date": "2025-03-18 11:05:12",
            "message": "eth/tracers: fix precompile move feat for debug_traceCall (#31348)\n\n`debug_traceCall` was ignoring the override `movePrecompileToAddress`. Now it is\nat feature-parity with eth_call."
        },
        {
            "date": "2025-03-17 17:59:04",
            "message": "eth/filters: implement log filter using new log index (#31080)\n\nThis PR is #2 of a 3-part series that implements the new log index\nintended to replace core/bloombits.\nBased on https://github.com/ethereum/go-ethereum/pull/31079\nReplaces https://github.com/ethereum/go-ethereum/pull/30370\n\nThis part replaces the old bloombits based log search logic in\n`eth/filters` to use the new `core/filtermaps` logic.\n\nFilterMaps data structure explanation:\nhttps://gist.github.com/zsfelfoldi/a60795f9da7ae6422f28c7a34e02a07e\n\nLog index generator code overview:\nhttps://gist.github.com/zsfelfoldi/97105dff0b1a4f5ed557924a24b9b9e7\n\nSearch pattern matcher code overview:\nhttps://gist.github.com/zsfelfoldi/5981735641c956afb18065e84f8aff34\n\nNote that the possibility of a tree hashing scheme and remote proof\nprotocol are mentioned in the documents above but they are not exactly\nspecified yet. These specs are WIP and will be finalized after the local\nlog indexer/filter code is finalized and merged.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-17 15:01:37",
            "message": "core/rawdb: allow for truncation in the freezer (#31362)\n\nHere we add the notion of prunable tables for the `TruncateTail` operation\nin the freezer. TruncateTail for the chain freezer now only truncates the body and\nreceipts tables, leaving headers and hashes as-is.\n\nThis change also requires changing the validation/repair at startup to allow for\ntables with different tail. For the header and hash tables, we now require them to start\nat number zero.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-03-17 14:56:55",
            "message": "cmd/abigen, accounts/abi/bind: implement abigen version 2 (#31379)\n\nThis PR implements a new version of the abigen utility (v2) which exists\nalong with the pre-existing v1 version.\n\nAbigen is a utility command provided by go-ethereum that, given a\nsolidity contract ABI definition, will generate Go code to transact/call\nthe contract methods, converting the method parameters/results and\nstructures defined in the contract into corresponding Go types. This is\nuseful for preventing the need to write custom boilerplate code for\ncontract interactions.\n\nMethods in the generated bindings perform encoding between Go types and\nSolidity ABI-encoded packed bytecode, as well as some action (e.g.\n`eth_call` or creating and submitting a transaction). This limits the\nflexibility of how the generated bindings can be used, and prevents\neasily adding new functionality, as it will make the generated bindings\nlarger for each feature added.\n\nAbigen v2 was conceived of by the observation that the only\nfunctionality that generated Go bindings ought to perform is conversion\nbetween Go types and ABI-encoded packed data. Go-ethereum already\nprovides various APIs which in conjunction with conversion methods\ngenerated in v2 bindings can cover all functionality currently provided\nby v1, and facilitate all other previously-desired use-cases.\n\n## Generating Bindings\n\nTo generate contract bindings using abigen v2, invoke the `abigen`\ncommand with the `--v2` flag. The functionality of all other flags is\npreserved between the v2 and v1 versions.\n\n## What is Generated in the Bindings\n\nThe execution of `abigen --v2` generates Go code containing methods\nwhich convert between Go types and corresponding ABI-encoded data\nexpected by the contract. For each input-accepting contract method and\nthe constructor, a \"packing\" method is generated in the binding which\nconverts from Go types to the corresponding packed solidity expected by\nthe contract. If a method returns output, an \"unpacking\" method is\ngenerated to convert this output from ABI-encoded data to the\ncorresponding Go types.\n\nFor contracts which emit events, an unpacking method is defined for each\nevent to unpack the corresponding raw log to the Go type that it\nrepresents.\n\nLikewise, where custom errors are defined by contracts, an unpack method\nis generated to unpack raw error data into a Go type.\n\n## Using the Generated Bindings\n\nFor a smooth user-experience, abigen v2 comes with a number of utility\nfunctions to be used in conjunction with the generated bindings for\nperforming common contract interaction use-cases. These include:\n\n* filtering for historical logs of a given topic\n* watching the chain for emission of logs with a given topic\n* contract deployment methods\n* Call/Transact methods\n\nhttps://geth.ethereum.org will be updated to include a new tutorial page\nfor abigen v2 with full code examples. The page currently exists in a\nPR: https://github.com/ethereum/go-ethereum/pull/31390 .\n\nThere are also extensive examples of interactions with contract bindings\nin [test\ncases](https://github.com/ethereum/go-ethereum/blob/cc855c7ede460270ae9c83bba278b23cb4f26a00/accounts/abi/bind/v2/lib_test.go)\nprovided with this PR.\n\n---------\n\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-17 08:32:44",
            "message": "eth/catalyst: set FeeRecipient in dev mode (#31316)\n\nthis adds 2 features to improve `geth --dev` experience.\n\n1. we don't need to use `dev_SetFeeRecipient` to set initial coinbase\naddress. it was a pain.\n2. we don't need to unlock keystore if we don't use it. we had it\nbecause of clique."
        },
        {
            "date": "2025-03-17 08:22:12",
            "message": "go.mod: bump golang.org/x/net from 0.34.0 to 0.36.0 (#31369)\n\nBumps [golang.org/x/net](https://github.com/golang/net) from 0.34.0 to\n0.36.0.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a\nhref=\"https://github.com/golang/net/commit/85d1d54551b68719346cb9fec24b911da4e452a1\"><code>85d1d54</code></a>\ngo.mod: update golang.org/x dependencies</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/cde1dda944dcf6350753df966bb5bda87a544842\"><code>cde1dda</code></a>\nproxy, http/httpproxy: do not mismatch IPv6 zone ids against hosts</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/fe7f0391aa994a401c82d829183c1efab7a64df4\"><code>fe7f039</code></a>\npublicsuffix: spruce up code gen and speed up PublicSuffix</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/459513d1f8abff01b4854c93ff0bff7e87985a0a\"><code>459513d</code></a>\ninternal/http3: move more common stream processing to genericConn</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/aad0180cad195ab7bcd14347e7ab51bece53f61d\"><code>aad0180</code></a>\nhttp2: fix flakiness from t.Log when GOOS=js</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/b73e5746f64471c22097f07593643a743e7cfb0f\"><code>b73e574</code></a>\nhttp2: don't log expected errors from writing invalid trailers</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/5f45c776a9c4d415cbe67d6c22c06fd704f8c9f1\"><code>5f45c77</code></a>\ninternal/http3: make read-data tests usable for server handlers</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/43c2540165a4d1bc9a81e06a86eb1e22ece64145\"><code>43c2540</code></a>\nhttp2, internal/httpcommon: reject userinfo in :authority</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/1d78a085008d9fedfe3f303591058325f99727d7\"><code>1d78a08</code></a>\nhttp2, internal/httpcommon: factor out server header logic for\nh2/h3</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/0d7dc54a591c12b4bd03bcd745024178d03d9218\"><code>0d7dc54</code></a>\nquic: add Conn.ConnectionState</li>\n<li>Additional commits viewable in <a\nhref=\"https://github.com/golang/net/compare/v0.34.0...v0.36.0\">compare\nview</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=golang.org/x/net&package-manager=go_modules&previous-version=0.34.0&new-version=0.36.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't\nalter it yourself. You can also trigger a rebase manually by commenting\n`@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits\nthat have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after\nyour CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge\nand block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating\nit. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all\nof the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop\nDependabot creating any more for this major version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop\nDependabot creating any more for this minor version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop\nDependabot creating any more for this dependency (unless you reopen the\nPR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the\n[Security Alerts\npage](https://github.com/ethereum/go-ethereum/network/alerts).\n\n</details>\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
        },
        {
            "date": "2025-03-17 06:13:12",
            "message": "eth/catalyst: fix flaky test (#31403)\n\nThis pull request enhances the unit test, avoiding unnecessary failure\nin CI.\n\n```\n--- FAIL: TestSimulatedBeaconSendWithdrawals (12.08s)\n    simulated_beacon_test.go:139: timed out without including all withdrawals/txs\nFAIL\n```"
        },
        {
            "date": "2025-03-17 01:48:08",
            "message": "metrics: spin up meter ticker routine when enabling metric system (#31400)\n\nAddresses https://github.com/ethereum/go-ethereum/issues/31244"
        },
        {
            "date": "2025-03-15 17:35:10",
            "message": "cmd/utils: fix geth test issue on OpenBSD (#31357)"
        },
        {
            "date": "2025-03-14 17:53:05",
            "message": "tests: update ethereum/tests to v17.0 (#31381)\n\nGet the re-filled tests (plus removal of outdated EIP-2537 tests)"
        },
        {
            "date": "2025-03-14 16:56:24",
            "message": "cmd/evm: fix statetest with multi-fork statetest fixtures (#31374)\n\nFixes `evm statetest` for state test fixtures with multiple fork entries\nin their `post` field (e.g.,\n[chainId.json](https://github.com/ethereum/tests/blob/81862e4848585a438d64f911a19b3825f0f4cd95/GeneralStateTests/stChainId/chainId.json#L39)).\n\nWhen these re-activated flags aren't exposed, `statetest` only executes\nthe fixture for a single fork entry instead of all of the forks as\nexpected.\n\nThis only affects ethereum/tests state test fixtures, not\nethereum/execution-spec-tests (EEST) state tests. EEST writes a separate\nfixture/test case (i.e. a separate top-level dict entry in the .json)\nfor each fork configuration as apposed to combining multiple forks in\none fixture test case: New EEST state tests targeting Prague behavior\nare not affected."
        },
        {
            "date": "2025-03-14 15:56:53",
            "message": "log: fix SetDefault for custom loggers (#31368)\n\nCurrently, even though it takes in a `Logger` interface,\n`log.SetDefualt` enforces that the concrete type of the provided logger\nis `*logger` because:\n1. in `init` `root.Store` is called with a `*logger`\n2. `atomic.Value` panics if the concrete type provided in `Store` is not\nconsistent across calls.\n([ref](https://pkg.go.dev/sync/atomic#Value.Store))\n\n> All calls to Store for a given Value must use values of the same\nconcrete type.\n\nThis PR changes to use `sync.RWMutex` and adds a test that panics on\n`master`."
        },
        {
            "date": "2025-03-14 14:27:38",
            "message": "accounts/abi: improve unpack performance (#31387)\n\nSlightly improves performance of abi.Unpack\n\n```\nBefore\nBenchmarkUnpack/0-14   5965714       210.9 ns/op     280 B/op       5 allocs/op\nBenchmarkUnpack/1-14   2148283       569.7 ns/op     688 B/op      16 allocs/op\n\nAfter:\nBenchmarkUnpack/0-14  \t 7693365\t       151.2 ns/op\t     136 B/op\t       4 allocs/op\nBenchmarkUnpack/1-14  \t 2261294\t       508.9 ns/op\t     544 B/op\t      15 allocs/op\n```\n\nreplaces https://github.com/ethereum/go-ethereum/pull/31292 since I was\nunable to push to your branch @Exca-DK\n\n---------\n\nCo-authored-by: Exca-DK <dawidk.info@gmail.com>"
        },
        {
            "date": "2025-03-13 18:04:16",
            "message": "core/filtermaps: FilterMaps log index generator and search logic (#31079)\n\nThis PR is #1 of a 3-part series that implements the new log index\nintended to replace core/bloombits.\nReplaces https://github.com/ethereum/go-ethereum/pull/30370\n\nThis part implements the new data structure, the log index generator and\nthe search logic. This PR has most of the complexity but it does not\naffect any existing code yet so maybe it is easier to review separately.\n\nFilterMaps data structure explanation:\nhttps://gist.github.com/zsfelfoldi/a60795f9da7ae6422f28c7a34e02a07e\n\nLog index generator code overview:\nhttps://gist.github.com/zsfelfoldi/97105dff0b1a4f5ed557924a24b9b9e7\n\nSearch pattern matcher code overview:\nhttps://gist.github.com/zsfelfoldi/5981735641c956afb18065e84f8aff34\n\nNote that the possibility of a tree hashing scheme and remote proof\nprotocol are mentioned in the documents above but they are not exactly\nspecified yet. These specs are WIP and will be finalized after the local\nlog indexer/filter code is finalized and merged.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-13 17:54:20",
            "message": "eth/ethconfig: fix history prune blocks (#31383)"
        },
        {
            "date": "2025-03-13 14:21:47",
            "message": "cmd/workload: implement checks for history-pruned node (#31355)\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-13 14:16:01",
            "message": "p2p/discover: expose discv5 functions for portal JSON-RPC interface (#31117)\n\nFixes #31093\n\nHere we add some API\u00a0functions on the UDPv5 object for the purpose of implementing\nthe Portal Network JSON-RPC API in the shisui client.\n\n---------\n\nSigned-off-by: Chen Kai <281165273grape@gmail.com>"
        },
        {
            "date": "2025-03-13 11:35:10",
            "message": "core: update blockProcFeed in insertChain (#31065)\n\nThis PR moves the updating of the `blockProcFeed` event feed from\n`InsertChain` to `insertChain` in order to ensure that the feed\nsubscribers are notified whenever block processing happens.\nNote that this event is not subscribed to anywhere in our codebase at\nthe moment, earlier it was used by the LES server to avoid slowing down\nblock processing. Now I want to do the same with the log indexer, the\nproblem is that back then every block insertion was done by\n`InsertChain`, now the regular payload insertion is done by\n`InsertBlockWithoutSetHead`. Both of these (and also `SetCanonical` if\nneeded) calls `insertChain` so I moved the feed update there."
        },
        {
            "date": "2025-03-11 09:26:16",
            "message": "Update core/txpool/txpool.go\n\nCo-authored-by: jwasinger <j-wasinger@hotmail.com>"
        },
        {
            "date": "2025-03-13 10:43:00",
            "message": "eth/ethconfig: add HistoryMode (#31365)\n\nHere I am adding a config option and geth flag (`--history.chain`) for\nconfiguring history pruning. There are two options available:\n\n- `--history.chain all` is the default and will keep all history like\nbefore.\n- `--history.chain postmerge` will configure the history cutoff point to\nthe merge block.\n\nThe option doesn't actually do anything right now, but we need it as a\nprecursor for other history pruning changes."
        },
        {
            "date": "2025-03-12 11:21:50",
            "message": "crypto/secp256k1: update libsecp256k1 (#31242)\n\nUpdates the libsecp256k1 dependency to commit:\nc0d9480fbbf8eccbd4be23ed27f6f2af6f3b211e\n\nPR:\n```\nBenchmarkSign-24    \t   57756\t     21214 ns/op\t     164 B/op\t       3 allocs/op\nBenchmarkRecover-24    \t   37156\t     33044 ns/op\t      80 B/op\t       1 allocs/op\nBenchmarkEcrecoverSignature-24    \t   36889\t     32935 ns/op\t      80 B/op\t       1 allocs/op\nBenchmarkVerifySignature-24    \t   41163\t     29207 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkDecompressPubkey-24    \t  318624\t      4062 ns/op\t     304 B/op\t       6 allocs/op\n```\n\nMaster:\n```\nBenchmarkSign-24    \t   34509\t     35330 ns/op\t     164 B/op\t       3 allocs/op\nBenchmarkRecover-24    \t   25418\t     47725 ns/op\t      80 B/op\t       1 allocs/op\nBenchmarkEcrecoverSignature-24    \t   25735\t     47591 ns/op\t      80 B/op\t       1 allocs/op\nBenchmarkVerifySignature-24    \t   29108\t     41097 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkDecompressPubkey-24    \t  294747\t      4143 ns/op\t     304 B/op\t       6 allocs/op\n```\n\nPerformance seems to be improved significantly:\n```\nSign-24      34.86\u00b5 \u00b1 3%   21.66\u00b5 \u00b1 2%  -37.86% (p=0.000 n=10)\nRecover-24   46.14\u00b5 \u00b1 3%   33.24\u00b5 \u00b1 2%  -27.95% (p=0.000 n=10)\n```"
        },
        {
            "date": "2025-03-12 11:20:40",
            "message": "cmd: ctrl-c to halt the whole import process (#31360)\n\nWhen I press Ctrl-C during the import of multiple files, the import\nprocess will still attempt to import the subsequent files. However, in\nnormal circumstances, users would expect the import to stop immediately\nupon pressing Ctrl-C.\n\nAnd because the current file was not finished importing, subsequent\nimport tasks often fail due to an `unknown ancestor` error.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-11 21:30:45",
            "message": "go.mod: update crypto to remove dependency warning (#31334)"
        },
        {
            "date": "2025-03-11 21:30:02",
            "message": "ethdb: no need to check the metric nilness (#31353)\n\nThe metric always has a value, no need to check for the nil. \n\nSeems this code was first introduced here\nhttps://github.com/ethereum/go-ethereum/blob/054412e33528e53f6deae940c870217b614707b9/metrics/meter.go#L45-L48\n\nAs the `nilMeter` was removed, so this check seems is useless.\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-03-11 16:17:47",
            "message": "beacon/types, beacon/blsync: update for electra (#31243)\n\nThis updates the blsync base types for the Electra fork. I've been\ntesting, and it doesn't seem to make blsync fully work on Electra. But\nI'd still like to get this in to make some progress.\n\n---------\n\nCo-authored-by: Zsolt Felfoldi <zsfelfoldi@gmail.com>"
        },
        {
            "date": "2025-03-11 15:15:07",
            "message": "core: prefund pectra precompiles in developer genesis (#31342)\n\nPrefund the precompile addresses for the new precompiles in the\ndeveloper genesis block."
        },
        {
            "date": "2025-03-11 15:00:50",
            "message": "core/txpool: demote error log to warn (#31332)\n\nThis error log in `legacypool.go` isn't necessary, since even though the\nbehavior is unexpected, it is handled correctly. A discussion on issue\n#22301 concluded that this should instead be a warning log."
        },
        {
            "date": "2025-03-10 13:10:16",
            "message": "cmd,eth,les: replace Cancun override flag with Prague (#31341)\n\nIt's that time of the cycle, should have this ready to go for mainnet\nPrague release."
        },
        {
            "date": "2025-03-07 10:23:19",
            "message": "core/rawdb,state: add preimage miss metric (#31295)\n\n1. The metric of preimage/hits are always the same as preimage/total, prefer to replace\n   the hits with miss instead.\n2. For the state/read/accounts metric, follow the same naming of others,\n  change into singuar."
        },
        {
            "date": "2025-03-05 11:51:53",
            "message": "build: fix execution-spec-tests sanitycheck URL (#31314)"
        },
        {
            "date": "2025-03-05 10:57:18",
            "message": "version: begin v1.15.6 release cycle"
        },
        {
            "date": "2025-03-05 10:55:17",
            "message": "version: release v1.15.5 stable"
        },
        {
            "date": "2025-03-05 10:04:24",
            "message": "core: match on deposit contract log topic (#31317)\n\nThis resolves a situation on the Sepolia testnet, which has a different\ndeposit contract. The contract on that network emits two kinds of logs,\ninstead of only deposit events like the deposit contract on mainnet. So\nwe need to skip events with mismatched topics."
        },
        {
            "date": "2025-03-05 10:02:18",
            "message": "build: upgrade to Go 1.24.1 and golangci-lint 1.64.4 (#31313)\n\n- upgrade -dlgo version to Go 1.24.1\n- upgrade golangci-lint version to 1.64.6"
        },
        {
            "date": "2025-03-04 08:30:03",
            "message": "eth/tracers: fix omitempty for memory and storage (#31289)\n\nThis fixes a regression in the opcode tracer API where we would log\nempty memory and storage fields."
        },
        {
            "date": "2025-03-01 20:40:14",
            "message": "version: begin v1.15.5 release cycle"
        },
        {
            "date": "2025-03-01 20:37:47",
            "message": "version: release go-ethereum v1.15.4 stable"
        },
        {
            "date": "2025-03-01 13:11:51",
            "message": "ethclient: add BlobBaseFee method (#31290)"
        },
        {
            "date": "2025-03-01 13:10:38",
            "message": "eth: check blob transaction validity on the peer goroutine when received (#31219)\n\nThis ensures that if we receive a blob transaction announcement where we cannot\nlink the tx to the sidecar commitments, we will drop the sending peer. This check\nis added in the protocol handler for the PooledTransactions message.\n\nTests for this have also been added in the cross-client \"eth\" protocol test suite.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-03-01 12:58:57",
            "message": "eth: do not add failed tx to localTxTracker (#31202)\n\nIn transaction-sending APIs such as `eth_sendRawTransaction`, a submitted transaction \nfailing the configured txpool validation rules (i.e. fee too low) would cause an error to be\nreturned, even though the transaction was successfully added into the locals tracker.\nOnce added there, the transaction may even be included into the chain at a later time,\nwhen fee market conditions change.\n\nThis change improves on this by performing the validation in the locals tracker, basically\nskipping some of the validation rules for local transactions. We still try to add the tx to the\nmain pool immediately, but an error will only be returned for transactions which are \nfundamentally invalid.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-02-28 12:07:21",
            "message": "eth: remove EventMux accessors (#30017)\n\nHi, it seems these methods in the `backend.go` and `api_backend.go`\nfiles are not used that expose the eventMux, but that is not needed."
        },
        {
            "date": "2025-02-28 11:53:56",
            "message": "core/tracing: stringer for gas and nonce change reasons (#31234)"
        },
        {
            "date": "2025-02-27 16:52:22",
            "message": "build/deb: add step for new Go bootstrap to debian rules (#31283)\n\nNext attempt at fixing the build on launchpad.net"
        },
        {
            "date": "2025-02-27 14:53:52",
            "message": "all: drop x/exp direct dependency (#30558)\n\nThis is a not-particularly-important \"cleanliness\" PR. It removes the\nlast remnants of the `x/exp` package, where we used the `maps.Keys`\nfunction.\n\nThe original returned the keys in a slice, but when it became 'native'\nthe signature changed to return an iterator, so the new idiom is\n`slices.Collect(maps.Keys(theMap))`, unless of course the raw iterator\ncan be used instead.\n\nIn some cases, where we previously collect into slice and then sort, we\ncan now instead do `slices.SortXX` on the iterator instead, making the\ncode a bit more concise.\n\nThis PR might be _slighly_ less optimal, because the original `x/exp`\nimplementation allocated the slice at the correct size off the bat,\nwhich I suppose the new code won't.\n\nPutting it up for discussion.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-02-27 14:52:00",
            "message": "build: simplify go mod tidy check (#31266)\n\nThis changes the go mod tidy check to use the go mod tidy -diff command,\nremoving the custom diffing for go.mod. The check for go.mod/go.sum is now\nperformed in the check_generate action.\n\nAlso included is a change where check_generate and check_baddeps will now\nrun on the GitHub Actions lint step.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-02-27 11:07:36",
            "message": "build: update PPA Go bootstrap version to 1.23 (#31282)\n\nThis is for fixing the PPA build, which has been failing since the\nupdate to Go 1.24. In Go 1.24, the required Go version for bootstrapping\nwas updated to 1.22. In general, they are following through with always\ndepending on the Go version two releases ago for bootstrapping.\n\nSince we still support Ubuntu Xenial (16.04) until its EOL date of\n04/2026, and Xenial only has golang 1.10 as a package, we now need to\nbuild Go a total of four times to get the most recent version. I'm adding a step\nfor Go 1.23 here. This should last us until Go 1.25, which should be out around\n04/2026, and we can hopefully drop the first bootstrapping step at that time."
        },
        {
            "date": "2025-02-27 09:08:33",
            "message": "core/txpool: fix error logs flood caused by removeAuthorities (#31249)\n\nwhen remove an non-SetCodeTxType transaction, error logs flood\n```\nt=2025-02-25T03:11:06+0000 lvl=error msg=\"Authority with untracked tx\" addr=0xD5bf9221fCB1C31Cd1EE477a60c148d40dD63DC1 hash=0x626fdf205a5b1619deb2f9e51fed567353f80acbd522265b455daa0821c571d9\n```\n\nin this PR, only try to removeAuthorities for txs with SetCodeTxType\n\nin addition, the performance of removeAuthorities improved a lot,\nbecause no need range all `t.auths` now.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-02-27 07:40:35",
            "message": "eth/gasprice: sanity check ratio values (#31270)\n\nFollow on to #31246. Adds a sanity check in the test to make sure the\nratio value never goes over 1. Would have avoided the issue in #31245."
        },
        {
            "date": "2025-02-26 23:07:14",
            "message": "cmd/workload: RPC workload tests for filters and history (#31189)\n\n\nCo-authored-by: Felix Lange <fjl@twurst.com>\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2025-02-26 18:24:14",
            "message": "eth/gasprice: fix eth_feeHistory blobGasRatio (#31246)\n\nThis change divides BlobGasUsed by MaxBlobGasPerBlock instead of\nMaxBlobsPerBlock. Dividing by MaxBlobsPerBlock\nmeant the blobGasUsedRatio was an incorrect large number. This bug was\nintroduced by a typo\n[here](https://github.com/ethereum/go-ethereum/commit/e6f3ce7b168b8f346de621a8f60d2fa57c2ebfb0#diff-3357b2399699d7cf954c543cbfb02ff442eb24491e55f5e813e3cc85829b3e8dR110)\n\nFixes https://github.com/ethereum/go-ethereum/issues/31245"
        },
        {
            "date": "2025-02-26 10:49:02",
            "message": "build: filter out .git folder for go generate check (#31265)\n\nFixes lint issue\n\n    >>> /home/appveyor/.gvm/gos/go1.24.0/bin/go generate ./...\n    ci.go:404: File changed: .git/index\n    ci.go:407: One or more generated files were updated by running 'go generate ./...'\n    exit status 1"
        },
        {
            "date": "2025-02-25 15:20:50",
            "message": "version: begin v1.15.4 release cycle"
        },
        {
            "date": "2025-02-25 15:18:34",
            "message": "version: release go-ethereum v1.15.3 stable"
        },
        {
            "date": "2025-02-25 12:40:57",
            "message": "eth/protocols/eth: fix loading \"eth\" ENR key in dial filter (#31251)\n\nThis fixes an issue where dial candidates from discv5 would be ignored\nbecause the \"eth\" ENR entry was not loaded correctly."
        },
        {
            "date": "2025-02-25 11:21:35",
            "message": "ethclient/simulated: add goroutine leak test  (#31033)\n\nAdds a basic sanity test case to catch any go-routines leaked from\ninstantiation/closing of a simulated backend."
        },
        {
            "date": "2025-02-21 02:28:11",
            "message": "Fix flakey behavior in simulated backend Rollback"
        },
        {
            "date": "2025-02-24 23:42:00",
            "message": "params: add deposit contract addresses (#31247)\n\nWe forgot to add the deposit contract address for holesky, causing\ndeposits to not be flagged correctly\n\n---------\n\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>"
        },
        {
            "date": "2025-02-24 21:17:21",
            "message": "core/txpool: move setcode tx validation into legacyPool (#31209)\n\nIn this PR, several improvements have been made:\n\nAuthorization-related validations have been moved to legacyPool. \nPreviously, these checks were part of the standard validation procedure,\nwhich applies common validations across different pools. Since these \nchecks are specific to SetCode transactions, relocating them to\nlegacyPool\nis a more reasonable choice.\n\nAdditionally, authorization conflict checks are now performed regardless\nof whether the transaction is a replacement or not.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-02-24 11:23:25",
            "message": "crypto: add comment to FromECDSAPub (#31241)\n\ncloses https://github.com/ethereum/go-ethereum/issues/26240"
        },
        {
            "date": "2025-02-24 09:31:33",
            "message": "go.mod: update cloudflare-go (#31240)\n\nUpdates cloudflare-go from v0.79.0 to v0.114.0 which also gets rid of a\ndependency to `github.com/hashicorp/go-retryablehttp` which had a\nsecurity flaw.\n\nDiff:\nhttps://github.com/cloudflare/cloudflare-go/compare/v0.79.0...v0.114.0\n\nI did a quick sanity check on the diff on all methods that we use and\nwent through the release notes, there was nothing related to how we use\nit afaict"
        },
        {
            "date": "2025-02-23 16:38:32",
            "message": "eth: report error from setupDiscovery at startup (#31233)\n\nI ran into this while trying to debug a discv5 thing. I tried to disable\nDNS discovery using `--discovery.dns=false`, which doesn't work.\nAnnoyingly, geth started anyway and discarded the error silently. I\neventually found my mistake, but it took way longer than it should have.\n\nAlso including a small change to the error message for invalid DNS URLs\nhere. The user actually needs to see the URL to make sense of the error."
        },
        {
            "date": "2025-02-21 12:36:18",
            "message": "build: replace `tenv` linter with `usetesting` (#31172)"
        },
        {
            "date": "2025-02-21 10:45:02",
            "message": "cmd/clef: improve documentation in readme (#31218)\n\nFixed broken or outdated links and improved documentation formatting to\nensure consistency and correct references.\n\n---------\n\nCo-authored-by: Sina M <1591639+s1na@users.noreply.github.com>"
        },
        {
            "date": "2025-02-21 08:52:55",
            "message": "internal/ethapi: fix prev hashes in eth_simulate (#31122)\n\nShout-out to @Gabriel-Trintinalia for discovering this issue. The gist\nof it as follows:\n\nWhen processing a block, we should provide the parent block as well as\nthe last 256 block hashes. Some of these parents data (specifically the\nhash) was incorrect because even though during the processing of the\nparent block we have updated the header, that header was not updating\nthe TransactionsRoot and ReceiptsRoot fields (types.NewBlock makes a new\ncopy of the header and changes it only on that instance).\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-02-21 08:48:24",
            "message": "signer/core:  fix encoding of `bytes` nested within array (#31049)\n\nFixes an incorrect encoding of recursive bytes types.\ncloses https://github.com/ethereum/go-ethereum/issues/30979"
        },
        {
            "date": "2025-02-21 05:45:29",
            "message": "core/types: remove unneeded todo marker (#31179)"
        },
        {
            "date": "2025-02-21 02:42:54",
            "message": "p2p/nat: remove test with default servers (#31225)\n\nThe test occasionally fails when network connectivity is bad or if it\nhits the wrong server. We usually don't add tests with external network\ndependency so I'm removing them.\n\nFixes #31220"
        },
        {
            "date": "2025-02-20 17:46:25",
            "message": "oss-fuzz: remove deprecated targets (#31224)\n\nFixes https://github.com/ethereum/go-ethereum/issues/31223\n\n(sorry, I thought the fork fork would be created on my repo, not\nupstream, when I used the GH editor)"
        },
        {
            "date": "2025-02-20 14:04:35",
            "message": "eth/tracers: refactor block context in test runner (#29450)\n\nThis commit contains a minor refactoring of the block context\nused within the test runners.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
        },
        {
            "date": "2025-02-20 13:30:55",
            "message": "internal/ethapi: handle prague system calls in eth_simulate (#31176)\n\neth_simulate was not processing prague system calls for history contract and EL\nrequests resulting in inaccurate stateRoot and requestsRoot fields in the block."
        },
        {
            "date": "2025-02-20 12:11:48",
            "message": "core/txpool/legacypool: add setCodeTx reorg test (#31206)\n\nThis PR adds a test that makes sure that a node can send multiple\ntransactions again once a authorization is removed"
        },
        {
            "date": "2025-02-20 09:27:13",
            "message": ".github: downgrade go for lint step (#31217)"
        },
        {
            "date": "2025-02-19 13:57:08",
            "message": "core/asm: delete assembler/disassembler (#31211)\n\nI maintain an improved version of the go-ethereum assembler at\nhttps://github.com/fjl/geas. We don't really use core/asm in our tests,\nand it has some bugs that prevent it from being useful, so I'm removing\nthe package."
        },
        {
            "date": "2025-02-19 10:21:22",
            "message": "build: upgrade -dlgo version to Go 1.24.0 (#31159)\n\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-02-18 20:08:43",
            "message": "eth/catalyst: support earlier forks in SimulatedBeacon (#31084)\n\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-02-18 14:03:48",
            "message": "params: add osaka blob schedule (#31174)\n\nPrevents crashes when running execution spec tests for osaka"
        },
        {
            "date": "2025-02-18 13:53:33",
            "message": "core/vm: clean up EVM environmental structure (#31061)\n\nThis PR does a few things including:\r\n\r\n- Remove `ContractRef` interface\r\n- Remove `vm.AccountRef` which implements `ContractRef` interface\r\n- Maintain the `jumpDests` struct in EVM for sharing between call frames\r\n- Simplify the delegateCall context initialization"
        },
        {
            "date": "2025-02-18 10:15:36",
            "message": "ethclient: add comment describing block number tags (#30984)\n\nAdds a comment on how to use rpc.*BlockNumber and the explanation of the block number tags\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-02-18 05:50:19",
            "message": "utils: clarify description for history.state flag (#31164)"
        },
        {
            "date": "2025-02-18 02:48:42",
            "message": "trie: do not expect ordering in stacktrie during fuzzing (#31170)\n\nThis PR removes the assumption of the stacktrie and trie to have the\r\nsame ordering. This was hit by the fuzzers on oss-fuzz\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-02-17 11:01:20",
            "message": "version: begin v1.15.3 release cycle"
        },
        {
            "date": "2025-02-17 10:59:48",
            "message": "version: release go-ethereum v1.15.2 stable"
        },
        {
            "date": "2025-02-17 09:12:03",
            "message": "eth/protocols/eth: add discovery iterator to protocol (#31185)\n\nWe somehow forgot to add this in #30302, so discv5 and DNS have actually\nbeen disabled since then.\n\nFixes #31168"
        },
        {
            "date": "2025-02-17 08:47:12",
            "message": "p2p: fix marshaling of NAT in TOML (#31192)\n\nThis fixes an issue where a nat.Interface unmarshaled from the TOML\nconfig file could not be re-marshaled to TOML correctly.\n\nFixes #31183"
        },
        {
            "date": "2025-02-17 06:30:06",
            "message": "consensus/beacon: fix isPostMerge for mainnet (#31191)\n\nThis fixes a regression introduced in #31153 where we didn't consider\r\nmainnet to be in PoS, causing #31190.\r\nThe problem is, `params.MainnetChainConfig` does not have a defined\r\n`MergeNetsplitBlock`, so it isn't considered to be in PoS in\r\n`CalcDifficulty`."
        },
        {
            "date": "2025-02-13 17:05:58",
            "message": "core/types: create block's bloom by merging receipts' bloom (#31129)\n\nCurrently, when calculating block's bloom, we loop through all the\r\nreceipt logs to calculate the hash value. However, normally, after going\r\nthrough applyTransaction, the receipt's bloom is already calculated\r\nbased on the receipt log, so the block's bloom can be calculated by just\r\nORing these receipt's blooms.\r\n```\r\ngoos: darwin\r\ngoarch: arm64\r\npkg: github.com/ethereum/go-ethereum/core/types\r\ncpu: Apple M1 Pro\r\nBenchmarkCreateBloom\r\nBenchmarkCreateBloom/small\r\nBenchmarkCreateBloom/small-10             810922              1481 ns/op             104 B/op          5 allocs/op\r\nBenchmarkCreateBloom/large\r\nBenchmarkCreateBloom/large-10               8173            143764 ns/op            9614 B/op        401 allocs/op\r\nBenchmarkCreateBloom/small-mergebloom\r\nBenchmarkCreateBloom/small-mergebloom-10                 5178918               232.0 ns/op             0 B/op          0 allocs/op\r\nBenchmarkCreateBloom/large-mergebloom\r\nBenchmarkCreateBloom/large-mergebloom-10                   54110             22207 ns/op               0 B/op          0 allocs/op\r\n```\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\r\nCo-authored-by: Zsolt Felfoldi <zsfelfoldi@gmail.com>"
        },
        {
            "date": "2025-02-13 15:26:36",
            "message": "version: begin v1.15.2 release cycle"
        },
        {
            "date": "2025-02-13 15:21:36",
            "message": "version: release go-ethereum v1.15.1 stable"
        },
        {
            "date": "2025-02-13 13:48:03",
            "message": "core/rawdb: skip setting flushOffset in read-only mode (#31173)\n\nThis PR addresses a flaw in the freezer table upgrade path.\n\nIn v1.15.0, freezer table v2 was introduced, including an additional \nfield (`flushOffset`) maintained in the metadata file. To ensure \nbackward compatibility, an upgrade path was implemented for legacy\nfreezer tables by setting `flushOffset` to the size of the index file.\n\nHowever, if the freezer table is opened in read-only mode, this file \nwrite operation is rejected, causing Geth to shut down entirely.\n\nGiven that invalid items in the freezer index file can be detected and \ntruncated, all items in freezer v0 index files are guaranteed to be\ncomplete. Therefore, when operating in read-only mode, it is safe to\nuse the  freezer data without performing an upgrade."
        },
        {
            "date": "2025-02-13 12:05:05",
            "message": "core: sanity-check fork configuration in genesis (#31171)\n\nThis is to prevent a crash on startup with a custom genesis configuration.\nWith this change in place, upgrading a chain created by geth v1.14.x and\nbelow will now print an error instead of crashing:\n\n    Fatal: Failed to register the Ethereum service: invalid chain configuration: missing entry for fork \"cancun\" in blobSchedule\n\nArguably this is not great, and it should just auto-upgrade the config.\nWe'll address this in a follow-up PR for geth v1.15.2"
        },
        {
            "date": "2025-02-13 08:45:27",
            "message": "go.mod: update blst to v0.3.14 (#31165)\n\ncloses https://github.com/ethereum/go-ethereum/issues/31072\r\n\r\nBLST released their newest version which includes a fix for go v.1.24:\r\nhttps://github.com/supranational/blst/releases/tag/v0.3.14\r\n\r\nI went through all commits between 0.3.14 and 0.3.13 for a sanity check"
        },
        {
            "date": "2025-02-12 01:55:00",
            "message": "trie: copy preimage store pointer in StateTrie.Copy (#31158)\n\nThis fixes an error where executing `evm run --dump ...` omits preimages\r\nfrom the dump (because the statedb used for execution is a copy of\r\nanother instance)."
        },
        {
            "date": "2025-02-11 15:02:30",
            "message": "internal/ethapi: fix panic in debug methods (#31157)\n\nFixes an error when the block is not found in debug methods."
        },
        {
            "date": "2025-02-11 13:15:04",
            "message": "core/txpool/legacypool: add support for SetCode transactions (#31073)\n\nThe new SetCode transaction type introduces some additional complexity\nwhen handling the transaction pool.\n\nThis complexity stems from two new account behaviors:\n\n1. The balance and nonce of an account can change during regular\n   transaction execution *when they have a deployed delegation*.\n2. The nonce and code of an account can change without any EVM execution\n   at all. This is the \"set code\" mechanism introduced by EIP-7702.\n\nThe first issue has already been considered extensively during the design\nof ERC-4337, and we're relatively confident in the solution of simply\nlimiting the number of in-flight pending transactions an account can have\nto one. This puts a reasonable bound on transaction cancellation. Normally\nto cancel, you would need to spend 21,000 gas. Now it's possible to cancel\nfor around the cost of warming the account and sending value\n(`2,600+9,000=11,600`). So 50% cheaper.\n\nThe second issue is more novel and needs further consideration.\nSince authorizations are not bound to a specific transaction, we\ncannot drop transactions with conflicting authorizations. Otherwise,\nit might be possible to cherry-pick authorizations from txs and front\nrun them with different txs at much lower fee amounts, effectively DoSing\nthe authority. Fortunately, conflicting authorizations do not affect the\nunderlying validity of the transaction so we can just accept both.\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-02-11 12:52:43",
            "message": "p2p/discover: make discv5 response timeout configurable (#31119)"
        },
        {
            "date": "2025-02-11 12:45:44",
            "message": "p2p/discover: remove unused parameter in revalidationList.get (#31155)"
        },
        {
            "date": "2025-02-11 12:44:25",
            "message": "consensus/beacon: remove TestingTTDBlock (#31153)\n\nThis removes the method `TestingTTDBlock` introduced by #30744. It was\nadded to make the beacon consensus engine aware of the merge block in\ntests without relying on the total difficulty. However, tracking the\nmerge block this way is very annoying. We usually configure forks in the\n`ChainConfig`, but the method is on the consensus engine, which isn't\nalways created in the same place. By sidestepping the `ChainConfig` we\ndon't get the usual fork-order checking, so it's possible to enable the\nmerge before the London fork, for example. This in turn can lead to very\nhard-to-debug outputs and validation errors.\n\nSo here I'm changing the consensus engine to check the\n`MergeNetsplitBlock` instead. Alternatively, we assume a network is\nmerged if it has a `TerminalTotalDifficulty` of zero, which is a very\ncommon configuration in tests."
        },
        {
            "date": "2025-02-08 12:26:15",
            "message": "params,core/forkid: enable prague on holesky and sepolia (#31139)\n\nAgreed to the following fork dates for Holesky and Sepolia on ACDC 150\n\nHolesky slot: 3710976\t(Mon, Feb 24 at 21:55:12 UTC)\nSepolia slot: 7118848\t(Wed, Mar 5 at 07:29:36 UTC)"
        },
        {
            "date": "2025-02-07 01:59:12",
            "message": "cmd/devp2p/internal/ethtest: remove TD from status validation (#31137)\n\nAfter recent changes in Geth (removing TD):\r\n\r\nhttps://github.com/ethereum/go-ethereum/commit/39638c81c56db2b2dfe6f51999ffd3029ee212cb#diff-d70a44d4b7a0e84fe9dcca25d368f626ae6c9bc0b8fe9690074ba92d298bcc0d\r\n\r\nNon-Geth clients are failing many devp2p tests with an error:\r\n`peering failed: status exchange failed: wrong TD in status: have 1 want 0`\r\n\r\nRight now only Geth is passing it - all other clients are affected by\r\nthis change. I think there should be no validation of TD when checking `Status`\r\nmessage in hive tests. Now Geth has 0 (and hive tests requires 0) and\r\nall other clients have actual TD. And on real networks there is no validation\r\nof TD when peering"
        },
        {
            "date": "2025-02-06 14:06:46",
            "message": "version: begin v1.15.1 release cycle"
        },
        {
            "date": "2025-02-06 14:05:41",
            "message": "version: release go-ethereum v1.15.0"
        },
        {
            "date": "2025-02-06 11:33:40",
            "message": "build: update EEST fixtures to prague devnet-6 (#31088)\n\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-02-05 22:19:09",
            "message": "build: update to Go 1.23.6 (#31130)\n\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-02-05 22:01:17",
            "message": "all: update license comments and AUTHORS (#31133)"
        },
        {
            "date": "2025-02-05 12:58:25",
            "message": "core/tracing: state journal wrapper (#30441)\n\nHere we add some more changes for live tracing API v1.1:\n\n- Hook `OnSystemCallStartV2` was introduced with `VMContext` as parameter.\n- Hook `OnBlockHashRead` was introduced.\n- `GetCodeHash` was added to the state interface\n- The new `WrapWithJournal` construction helps with tracking EVM reverts in the tracer.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-02-05 09:35:03",
            "message": "consensus/misc/eip4844: more changes for blob gas calculation (#31128)\n\nThis PR changes the signature of `CalcExcessBlobGas` to take in just\nthe header timestamp instead of the whole object. It also adds a sanity\ncheck for the parent->child block order to `VerifyEIP4844Header`."
        },
        {
            "date": "2025-02-04 20:43:18",
            "message": "consensus/misc/eip4844: use head's target blobs, not parent (#31101)\n\nA clarification was made to EIP-7691 stating that at the fork boundary\nit is required to use the target blob count associated with the head\nblock, rather than the parent as implemented here.\n\nSee for more: https://github.com/ethereum/EIPs/pull/9249"
        },
        {
            "date": "2025-02-04 17:10:40",
            "message": "core/txpool/blobpool: fix incorrect arguments in test (#31127)\n\nFixes the linter on master which was broken by\r\nhttps://github.com/ethereum/go-ethereum/pull/30559"
        },
        {
            "date": "2025-02-04 16:23:01",
            "message": "core/txpool: remove locals-tracking from txpools (#30559)\n\nReplaces  #29297, descendant from #27535\r\n\r\n---------\r\n\r\nThis PR removes `locals` as a concept from transaction pools. Therefore,\r\nthe pool now acts as very a good simulation/approximation of how our\r\npeers' pools behave. What this PR does instead, is implement a\r\nlocals-tracker, which basically is a little thing which, from time to\r\ntime, asks the pool \"did you forget this transaction?\". If it did, the\r\ntracker resubmits it.\r\n\r\nIf the txpool _had_ forgotten it, chances are that the peers had also\r\nforgotten it. It will be propagated again.\r\n\r\nDoing this change means that we can simplify the pool internals, quite a\r\nlot.\r\n\r\n### The semantics of `local` \r\n\r\nHistorically, there has been two features, or usecases, that has been\r\ncombined into the concept of `locals`.\r\n\r\n1. \"I want my local node to remember this transaction indefinitely, and\r\nresubmit to the network occasionally\"\r\n2. \"I want this (valid) transaction included to be top-prio for my\r\nminer\"\r\n\r\n\r\nThis PR splits these features up, let's call it `1: local` and `2:\r\nprio`. The `prio` is not actually individual transaction, but rather a\r\nset of `address`es to prioritize.\r\nThe attribute `local` means it will be tracked, and `prio` means it will\r\nbe prioritized by miner.\r\n\r\nFor `local`: anything transaction received via the RPC is marked as\r\n`local`, and tracked by the tracker.\r\nFor `prio`: any transactions from this sender is included first, when\r\nbuilding a block. The existing commandline-flag `--txpool.locals` sets\r\nthe set of `prio` addresses.\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-02-04 16:16:26",
            "message": "core: assign default difficulty to zero for chain without ethash (#31067)\n\nI hit this case while trying something with the simulated backend. The\nEVM only enables instruction set forks after the merge when 'Random' is\nset. In the simulated backend, the random value will be set via the\nengine API for all blocks after genesis. But for the genesis block\nitself, the random value will not be assigned in the vm.BlockContext\nbecause the genesis has a non-zero difficulty. For my case, this meant\nthat estimateGas did not work for the first transaction sent on the\nsimulated chain, since the contract contained a PUSH0 instruction.\n\nThis could also be fixed by explicitly configuring a zero difficulty in\nthe simulated backend. However, I think that zero difficulty is a better\ndefault these days.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-02-04 14:43:18",
            "message": "params,core: add max and target value to chain config (#31002)\n\nImplements [EIP-7840](https://github.com/ethereum/EIPs/pull/9129) and\r\n[EIP-7691](https://github.com/ethereum/EIPs/blob/d96625a4dcbbe2572fa006f062bd02b4582eefd5/EIPS/eip-7691.md).\r\n\r\n---------\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-02-04 14:29:51",
            "message": "params: start osaka fork (#31125)\n\nThis PR defines the Osaka fork. An easy first step to start our work on\nthe next hardfork\n\n(This is needed for EOF testing as well)\n\n---------\n\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>"
        },
        {
            "date": "2025-02-04 13:22:30",
            "message": "core: copy genesis before modifying (#31097)\n\nThis PR fixes a data race in SetupGenesisWithOverride."
        },
        {
            "date": "2025-02-04 10:45:45",
            "message": "core/rawdb: introduce flush offset in freezer (#30392)\n\nThis is a follow-up PR to #29792 to get rid of the data file sync.\n\n**This is a non-backward compatible change, which increments the\ndatabase version from 8 to 9**.\n\nWe introduce a flushOffset for each freezer table, which tracks the position\nof the most recently fsync\u2019d item in the index file. When this offset moves\nforward, it indicates that all index entries below it, along with their corresponding\ndata items, have been properly persisted to disk. The offset can also be moved\nbackward when truncating from either the head or tail of the file.\n\nPreviously, the data file required an explicit fsync after every mutation, which\nwas highly inefficient. With the introduction of the flush offset, the synchronization\nstrategy becomes more flexible, allowing the freezer to sync every 30 seconds\ninstead.\n\nThe data items above the flush offset are regarded volatile and callers must ensure\nthey are recoverable after the unclean shutdown, or explicitly sync the freezer\nbefore any proceeding operations.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-02-04 06:09:06",
            "message": "tests/fuzzers/bls12381: fix error message in fuzzCrossG2Add (#31113)\n\nFixes a typo in the error message within the `fuzzCrossG2Add`\r\nfunction. The panic message incorrectly references \"G1 point addition\r\nmismatch\" when it should be \"G2 point addition mismatch,\" as the\r\nfunction deals with G2 points.\r\n\r\nThis doesn't affect functionality but could cause confusion during\r\ndebugging. I've updated the message to reflect the correct curve."
        },
        {
            "date": "2025-02-03 17:44:26",
            "message": "core/vm: simplify tracer hook invocation in interpreter loop (#31074)\n\nRemoves duplicate code in the interpreter loop."
        },
        {
            "date": "2025-01-31 17:34:22",
            "message": "eth/catalyst: fix validation of type 0 request (#31103)\n\nI caught this error on Hive. It was introduced by\nhttps://github.com/ethereum/go-ethereum/pull/31071 because after adding\nthe equality check the request type 0 will be rejected."
        },
        {
            "date": "2025-01-31 09:36:49",
            "message": "params: update system contract addresses for devnet-6 (#31102)\n\nFinalize Prague system contract addresses. Reference:\n\n* https://github.com/ethereum/EIPs/pull/9287\n* https://github.com/ethereum/EIPs/pull/9288\n* https://github.com/ethereum/EIPs/pull/9289"
        },
        {
            "date": "2025-01-30 16:08:42",
            "message": "core/vm: EXTCODE* return delegation designator for 7702 (#31089)\n\nImplements https://github.com/ethereum/EIPs/pull/9248"
        },
        {
            "date": "2025-01-30 16:07:45",
            "message": "core: implement eip-7623 floor data gas (#30946)\n\nThis PR builds on #29040 and updates it to the new version of the spec.\nI filled the EEST tests and they pass.\n\nLink to spec: https://eips.ethereum.org/EIPS/eip-7623\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>\nCo-authored-by: lightclient <lightclient@protonmail.com>"
        },
        {
            "date": "2025-01-30 15:58:53",
            "message": "all: add build tags for wasip1 (#31090)"
        },
        {
            "date": "2025-01-30 14:00:50",
            "message": "version: begin v1.15.0 release cycle"
        },
        {
            "date": "2025-01-30 13:52:02",
            "message": "build: provide a flag to disable publishing in dockerx build (#31098)\n\nThis changes the `-upload` flag to just toggle the upload. The remote\nimage name is now configured using the `-hub` flag."
        },
        {
            "date": "2025-01-30 13:10:36",
            "message": "crypto: add IsOnCurve check (#31100)"
        },
        {
            "date": "2025-01-30 13:06:50",
            "message": "build: retry PPA upload up to three times (#31099)"
        },
        {
            "date": "2025-01-30 10:21:23",
            "message": "Revert \".travis.yml: change arch for Docker build to arm64 (#31096)\"\n\nThis reverts commit 7b96ec4dae8d4ddeffc761c7757c12e2d2b8bf74."
        },
        {
            "date": "2025-01-30 10:10:45",
            "message": ".travis.yml: change arch for Docker build to arm64 (#31096)\n\nThis is an attempt to work around a gcc issue in the Docker build."
        },
        {
            "date": "2025-01-30 09:58:44",
            "message": "build: bump test timeout (#31095)\n\nTravis often fails because the test times out."
        },
        {
            "date": "2025-01-29 13:31:25",
            "message": "core/{.,state,vm},miner,eth/tracers,tests: implement 7709 with a syscall flag (#31036)\n\nSame as #31015 but requires the contract to exist. Not compatible with\nany verkle testnet up to now.\n\nThis adds a `isSytemCall` flag so that it is possible to detect when a\nsystem call is executed, so that the code execution and other locations\nare not added to the witness.\n\n---------\n\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\nCo-authored-by: Ignacio Hagopian <jsign.uy@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-01-28 17:56:20",
            "message": ".github: add lint step (#31068)"
        },
        {
            "date": "2025-01-28 17:55:41",
            "message": "all: nuke total difficulty (#30744)\n\nThe total difficulty is the sum of all block difficulties from genesis\nto a certain block. This value was used in PoW for deciding which chain\nis heavier, and thus which chain to select. Since PoS has a different\nfork selection algorithm, all blocks since the merge have a difficulty\nof 0, and all total difficulties are the same for the past 2 years.\n\nWhilst the TDs are mostly useless nowadays, there was never really a\nreason to mess around removing them since they are so tiny. This\nreasoning changes when we go down the path of pruned chain history. In\norder to reconstruct any TD, we **must** retrieve all the headers from\nchain head to genesis and then iterate all the difficulties to compute\nthe TD.\n\nIn a world where we completely prune past chain segments (bodies,\nreceipts, headers), it is not possible to reconstruct the TD at all. In\na world where we still keep chain headers and prune only the rest,\nreconstructing it possible as long as we process (or download) the chain\nforward from genesis, but trying to snap sync the head first and\nbackfill later hits the same issue, the TD becomes impossible to\ncalculate until genesis is backfilled.\n\nAll in all, the TD is a messy out-of-state, out-of-consensus computed\nfield that is overall useless nowadays, but code relying on it forces\nthe client into certain modes of operation and prevents other modes or\nother optimizations. This PR completely nukes out the TD from the node.\nIt doesn't compute it, it doesn't operate on it, it's as if it didn't\neven exist.\n\nCaveats:\n\n- Whenever we have APIs that return TD (devp2p handshake, tracer, etc.)\nwe return a TD of 0.\n- For era files, we recompute the TD during export time (fairly quick)\nto retain the format content.\n- It is not possible to \"verify\" the merge point (i.e. with TD gone, TTD\nis useless). Since we're not verifying PoW any more, just blindly trust\nit, not verifying but blindly trusting the many year old merge point\nseems just the same trust model.\n- Our tests still need to be able to generate pre and post merge blocks,\nso they need a new way to split the merge without TTD. The PR introduces\na settable ttdBlock field on the consensus object which is used by tests\nas the block where originally the TTD happened. This is not needed for\nlive nodes, we never want to generate old blocks.\n- One merge transition consensus test was disabled. With a\nnon-operational TD, testing how the client reacts to TTD is useless, it\ncannot react.\n\nQuestions:\n\n- Should we also drop total terminal difficulty from the genesis json?\nIt's a number we cannot react on any more, so maybe it would be cleaner\nto get rid of even more concepts.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-01-28 15:56:23",
            "message": "chore: fix various comments (#31082)"
        },
        {
            "date": "2025-01-25 23:53:14",
            "message": "fix README.md (#31076)\n\nHi\nI fixed 2 minor spelling issues.\n\n---------\n\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>"
        },
        {
            "date": "2025-01-24 15:16:02",
            "message": "p2p/nat: add stun protocol (#31064)\n\nThis implements a basic mechanism to query the node's external IP using\na STUN server. There is a built-in list of public STUN servers for convenience.\nThe new detection mechanism must be selected explicitly using `--nat=stun` \nand is not enabled by default in Geth.\n\nFixes #30881\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-01-24 14:38:17",
            "message": "core/vm: implement EIP-2537 spec updates (#30978)\n\nReference:\n\n- Remove MUL precompiles: https://github.com/ethereum/EIPs/pull/8945\n- Pricing change for pairing operation:\nhttps://github.com/ethereum/EIPs/pull/9098\n- Pricing change for add, mapping and mul operations:\nhttps://github.com/ethereum/EIPs/pull/9097\n- Pricing change for MSM operations:\nhttps://github.com/ethereum/EIPs/pull/9116\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
        },
        {
            "date": "2025-01-24 09:59:33",
            "message": "accounts/usbwallet: fix ledger access for latest firmware and add Ledger Flex (#31004)\n\nThe latest firmware for Ledger Nano S Plus now returns `0x5000` for it's\nproduct ID, which doesn't match any of the product IDs enumerated in\n`hub.go`.\n\nThis PR removes the assumption about the interfaces exposed, and simply\nchecks the upper byte for a match.\n\nAlso adds support for the `0x0007` / `0x7000` product ID (Ledger Flex)."
        },
        {
            "date": "2025-01-23 19:38:09",
            "message": "eth/catalyst: fail on duplicate request types (#31071)\n\nRefer to: https://github.com/ethereum/execution-apis/pull/623"
        },
        {
            "date": "2025-01-23 09:17:12",
            "message": "trie: reduce allocations in stacktrie (#30743)\n\nThis PR uses various tweaks and tricks to make the stacktrie near\nalloc-free.\n\n```\n[user@work go-ethereum]$ benchstat stacktrie.1 stacktrie.7\ngoos: linux\ngoarch: amd64\npkg: github.com/ethereum/go-ethereum/trie\ncpu: 12th Gen Intel(R) Core(TM) i7-1270P\n             \u2502 stacktrie.1  \u2502             stacktrie.7              \u2502\n             \u2502    sec/op    \u2502    sec/op     vs base                \u2502\nInsert100K-8   106.97m \u00b1 8%   88.21m \u00b1 34%  -17.54% (p=0.000 n=10)\n\n             \u2502   stacktrie.1    \u2502             stacktrie.7              \u2502\n             \u2502       B/op       \u2502     B/op      vs base                \u2502\nInsert100K-8   13199.608Ki \u00b1 0%   3.424Ki \u00b1 3%  -99.97% (p=0.000 n=10)\n\n             \u2502  stacktrie.1   \u2502             stacktrie.7             \u2502\n             \u2502   allocs/op    \u2502 allocs/op   vs base                 \u2502\nInsert100K-8   553428.50 \u00b1 0%   22.00 \u00b1 5%  -100.00% (p=0.000 n=10)\n```\nAlso improves derivesha:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/ethereum/go-ethereum/core/types\ncpu: 12th Gen Intel(R) Core(TM) i7-1270P\n                          \u2502 derivesha.1 \u2502             derivesha.2              \u2502\n                          \u2502   sec/op    \u2502    sec/op     vs base                \u2502\nDeriveSha200/stack_trie-8   477.8\u00b5 \u00b1 2%   430.0\u00b5 \u00b1 12%  -10.00% (p=0.000 n=10)\n\n                          \u2502 derivesha.1  \u2502             derivesha.2              \u2502\n                          \u2502     B/op     \u2502     B/op      vs base                \u2502\nDeriveSha200/stack_trie-8   45.17Ki \u00b1 0%   25.65Ki \u00b1 0%  -43.21% (p=0.000 n=10)\n\n                          \u2502 derivesha.1 \u2502            derivesha.2             \u2502\n                          \u2502  allocs/op  \u2502 allocs/op   vs base                \u2502\nDeriveSha200/stack_trie-8   1259.0 \u00b1 0%   232.0 \u00b1 0%  -81.57% (p=0.000 n=10)\n\n```\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-01-22 13:06:36",
            "message": "triedb/pathdb: fix state revert on v2 history (#31060)\n\nState history v2 has been shipped and will take effect after the Cancun fork.\r\nHowever, the state revert function does not differentiate between v1 and v2,\r\ninstead blindly using the storage map key for state reversion. \r\n\r\nThis mismatch between the keys of the live state set and the state history\r\ncan trigger a panic: `non-existent storage slot for reverting`.\r\n\r\nThis flaw has been fixed in this PR."
        },
        {
            "date": "2025-01-22 12:53:01",
            "message": "go.mod: gencodec stable v0.1.0 (#31062)"
        },
        {
            "date": "2025-01-22 08:29:34",
            "message": "p2p: support configuring NAT in TOML file (#31041)\n\nThis is an alternative for #27407 with a solution based on gencodec.\nWith the PR, one can now configure like this:\n\n```\n# config.toml\n[Node.P2P]\nNAT = \"extip:33.33.33.33\"\n```\n\n```shell\n$ geth --config config.toml\n...\nINFO [01-17|16:37:31.436] Started P2P networking      self=enode://2290...ab@33.33.33.33:30303\n```"
        },
        {
            "date": "2025-01-21 22:02:17",
            "message": "cmd/evm: restore --bench flag to evm statetest (#31055)\n\nRefactoring of the `evm` command moved where some commands were valid.\nOne command, `--bench`, used to work in `evm statetest`. The pluming is\nstill in place. This PR puts the `--bench` flag in the place the trace\nflags were moved, and adds tests to validate the bench flag operates in\n`run` and `statetest`\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-01-21 21:23:46",
            "message": "go.mod: remove toolchain line (#31057)\n\nWe have our own system for downloading the toolchain, and really don't\nwant Go's to get in the way of that. We may switch to Go's builtin\ntoolchain support, but not now."
        },
        {
            "date": "2025-01-21 12:11:05",
            "message": "eth/filters: ensure API timeoutLoop terminates with event system (#31056)\n\nDiscovered from failing test introduced\nhttps://github.com/ethereum/go-ethereum/pull/31033 . We should ensure\n`timeoutLoop` terminates if the filter event system is terminated."
        },
        {
            "date": "2025-01-21 07:35:03",
            "message": "cmd/evm: refactor handling output-files for `t8n` (#30854)\n\nAs part of trying to make the inputs and outputs of the evm subcommands\r\nmore streamlined and aligned, this PR modifies how `evm t8n` manages\r\noutput-files.\r\n\r\nPreviously, we do a kind of wonky thing where between each transaction,\r\nwe invoke a `getTracer` closure. In that closure, we create a new\r\noutput-file, a tracer, and then make the tracer stream output to the\r\nfile. We also fiddle a bit to ensure that the file becomes properly\r\nclosed.\r\n\r\nIt is a kind of hacky solution we have in place. This PR changes it, so\r\nthat from the execution-pipeline point of view, we have just a regular\r\ntracer. No fiddling with re-setting it or closing files.\r\n\r\nThat particular tracer, however, is a bit special: it takes care of\r\ncreating new files per transaction (in the tx-start-hook) and closing\r\n(on tx-end-hook). Also instantiating the right type of underlying\r\ntracer, which can be a json-logger or a custom tracer.\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-01-21 03:42:05",
            "message": "core/txpool:  terminate subpool reset goroutine if pool was closed (#31030)\n\nif the pool terminates before `resetDone` can be read, then the\r\ngo-routine will hang."
        },
        {
            "date": "2025-01-20 16:06:39",
            "message": "core/types: initialize ChainID in SetCodeTx copy method (#31054)"
        },
        {
            "date": "2025-01-20 16:04:29",
            "message": "build: upgrade -dlgo version to Go 1.23.5 (#31037)"
        },
        {
            "date": "2025-01-20 09:12:36",
            "message": "core/types: correct chainId check for pragueSigner (#31032)\n\nUse zero value check for the pragueSigner\n\nThis aligns with cancunSigner and londonSigner as well."
        },
        {
            "date": "2025-01-20 07:39:55",
            "message": "cmd/abigen: require either `--abi` or `--combined-json` (#31045)\n\nThis PR addresses issue #30768 , which highlights that running\r\ncmd/abigen/abigen --pkg my_package example.json (erroneously omitting\r\nthe --abi flag) generates an empty binding, when it should fail\r\nexplicitly.\r\n\r\n---------\r\n\r\nCo-authored-by: jwasinger <j-wasinger@hotmail.com>"
        },
        {
            "date": "2025-01-17 15:54:19",
            "message": "ethdb/memorydb: faster DeleteRange (#31038)\n\nThis PR replaces the iterator based DeleteRange implementation of\nmemorydb with a simpler and much faster loop that directly deletes keys\nin the order of iteration instead of unnecessarily collecting keys in\nmemory and sorting them.\n\n---------\n\nCo-authored-by: Martin HS <martin@swende.se>"
        },
        {
            "date": "2025-01-17 01:59:02",
            "message": "all: implement state history v2 (#30107)\n\nThis pull request delivers the new version of the state history, where\r\nthe raw storage key is used instead of the hash.\r\n\r\nBefore the cancun fork, it's supported by protocol to destruct a\r\nspecific account and therefore, all the storage slot owned by it should\r\nbe wiped in the same transition.\r\n\r\nTechnically, storage wiping should be performed through storage\r\niteration, and only the storage key hash will be available for traversal\r\nif the state snapshot is not available. Therefore, the storage key hash\r\nis chosen as the identifier in the old version state history.\r\n\r\nFortunately, account self-destruction has been deprecated by the\r\nprotocol since the Cancun fork, and there are no empty accounts eligible\r\nfor deletion under EIP-158. Therefore, we can conclude that no storage\r\nwiping should occur after the Cancun fork. In this case, it makes no\r\nsense to keep using hash.\r\n\r\nBesides, another big reason for making this change is the current format\r\nstate history is unusable if verkle is activated. Verkle tree has a\r\ndifferent key derivation scheme (merkle uses keccak256), the preimage of\r\nkey hash must be provided in order to make verkle rollback functional.\r\nThis pull request is a prerequisite for landing verkle.\r\n\r\nAdditionally, the raw storage key is more human-friendly for those who\r\nwant to manually check the history, even though Solidity already\r\nperforms some hashing to derive the storage location.\r\n\r\n---\r\n\r\nThis pull request doesn't bump the database version, as I believe the\r\ndatabase should still be compatible if users degrade from the new geth\r\nversion to old one, the only side effect is the persistent new version\r\nstate history will be unusable.\r\n\r\n---------\r\n\r\nCo-authored-by: Zsolt Felfoldi <zsfelfoldi@gmail.com>"
        },
        {
            "date": "2025-01-16 14:58:16",
            "message": "core/tracing: document `OnCodeChange` now being called from SelfDestruct (#31007)\n\nCo-authored-by: Sina M <1591639+s1na@users.noreply.github.com>"
        },
        {
            "date": "2025-01-16 13:40:15",
            "message": "core/txpool/legacypool: ensure pending nonces are reset by SubPool.Clear (#31020)\n\ncloses https://github.com/ethereum/go-ethereum/issues/30842"
        },
        {
            "date": "2025-01-16 13:36:45",
            "message": "core: use sync.Once for SenderCacher initialization (#31029)\n\nThis changes the SenderCacher so its goroutines will only be started on first use.\nAvoids starting them when package core is just imported but core.BlockChain isn't used."
        },
        {
            "date": "2025-01-15 18:45:20",
            "message": "beacon/engine: check for empty requests (#31010)\n\nAccording to\nhttps://github.com/ethereum/execution-apis/blob/main/src/engine/prague.md#engine_newpayloadv4:\n\n> Elements of the list MUST be ordered by request_type in ascending\norder. Elements with empty request_data MUST be excluded from the list.\n\n---------\n\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>"
        },
        {
            "date": "2025-01-14 15:26:24",
            "message": "eth/gasprice: ensure cache purging goroutine terminates with subscription (#31025)"
        },
        {
            "date": "2025-01-14 13:42:18",
            "message": "core/types: change SetCodeTx.ChainID to uint256 (#30982)\n\nWe still need to decide how to handle non-specfic `chainId` in the JSON\nencoding of authorizations. With `chainId` being a uint64, the previous\nimplementation just used value zero. However, it might actually be more\ncorrect to use the value `null` for this case."
        },
        {
            "date": "2025-01-14 13:16:15",
            "message": "all: fix some typos in comments and names (#31023)"
        },
        {
            "date": "2025-01-14 10:49:30",
            "message": "cmd, core, miner: rework genesis setup (#30907)\n\nThis pull request refactors the genesis setup function, the major\nchanges are highlighted here:\n\n**(a) Triedb is opened in verkle mode if `EnableVerkleAtGenesis` is\nconfigured in chainConfig or the database has been initialized previously with\n`EnableVerkleAtGenesis` configured**.\n\nA new config field `EnableVerkleAtGenesis` has been added in the\nchainConfig. This field must be configured with True if Geth wants to initialize \nthe genesis in Verkle mode.\n\nIn the verkle devnet-7, the verkle transition is activated at genesis.\nTherefore, the verkle rules should be used since the genesis. In production\nnetworks (mainnet and public testnets), verkle activation always occurs after\nthe genesis block. Therefore, this flag is only made for devnet and should be\ndeprecated later. Besides, verkle transition at non-genesis block hasn't been\nimplemented yet, it should be done in the following PRs.\n\n**(b) The genesis initialization condition has been simplified**\nThere is a special mode supported by the Geth is that: Geth can be\ninitialized with an existing chain segment, which can fasten the node sync\nprocess by retaining the chain freezer folder.\n\nOriginally, if the triedb is regarded as uninitialized and the genesis block can\nbe found in the chain freezer, the genesis block along with genesis state will be\ncommitted. This condition has been simplified to checking the presence of chain\nconfig in key-value store. The existence of chain config can represent the genesis\nhas been committed."
        },
        {
            "date": "2025-01-13 18:35:49",
            "message": "core: remove unused function parameters (#31001)"
        },
        {
            "date": "2025-01-13 18:33:49",
            "message": "core/txpool/legacypool: fix flaky test TestAllowedTxSize (#30975)\n\n- it was failing because the maximum data length (previously `dataSize`)\nwas set to `txMaxSize - 213` but should had been `txMaxSize - 103` and\nthe last call `dataSize+1+uint64(rand.Intn(10*txMaxSize)))` would\nsometimes fail depending on rand.Intn.\n- Maximal transaction data size comment (invalid) replaced by code logic\nto find the maximum tx length without its data length\n- comments and variable naming improved for clarity\n- 3rd pool add test replaced to add just 1 above the maximum length,\nwhich is important to ensure the logic is correct"
        },
        {
            "date": "2025-01-13 17:00:25",
            "message": "cmd/devp2p/internal/ethtest: using slices.SortFunc to simplify the code (#31012)\n\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
        },
        {
            "date": "2025-01-13 15:12:15",
            "message": "eth/tracers/logger: return revert reason (#31013)\n\nFix the error comparison in tracer to prevent dropping revert reason data\r\n\r\n---------\r\n\r\nCo-authored-by: Martin <mrscdevel@gmail.com>\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-01-13 07:26:10",
            "message": "build: upgrade golangci-lint to v1.63.4 (#31019)\n\nThis PR upgrades `golangci-lint` to v1.63.4 and fixes a warn message\r\nwhich is reported by v1.63.4:\r\n\r\n```text\r\nWARN [config_reader] The configuration option `run.skip-dirs-use-default` is deprecated, please use `issues.exclude-dirs-use-default`.\r\n```\r\n\r\nAlso fixes 2 warnings which are reported by v1.63.4:\r\n\r\n```text\r\ncore/txpool/blobpool/blobpool.go:1754:12: S1005: unnecessary assignment to the blank identifier (gosimple)\r\n        for acct, _ := range p.index {\r\n                  ^\r\ncore/txpool/legacypool/legacypool.go:1989:19: S1005: unnecessary assignment to the blank identifier (gosimple)\r\n        for localSender, _ := range pool.locals.accounts {\r\n                         ^\r\n```"
        },
        {
            "date": "2025-01-10 12:51:19",
            "message": "triedb/pathdb: configure different node hasher in pathdb (#31008)\n\nAs the node hash scheme in verkle and merkle are totally different, the\r\noriginal default node hasher in pathdb is no longer suitable. Therefore,\r\nthis pull request configures different node hasher respectively."
        },
        {
            "date": "2025-01-08 13:22:37",
            "message": "README: remove private network section from readme (#31005)"
        },
        {
            "date": "2025-01-07 10:49:13",
            "message": "triedb/pathdb: fix tester generator (#30972)\n\nThis change fixes is a rare bug in test generator: If the run is very unlucky it\r\ncan use `modifyAccountOp` / `deleteAccountOp` without creating any\r\naccount, leading to have a trie root same as the parent.\r\n\r\nThis change makes the first operation always be a creation."
        },
        {
            "date": "2025-01-07 09:31:10",
            "message": "cmd/clef: fix JS issues in documentation (#30980)\n\nFixes a couple of js-flaws in the docs"
        },
        {
            "date": "2025-01-06 15:31:53",
            "message": "eth/protocols/eth: prevent hanging dispatch (#30918)\n\nThis PR attempts to fix a strange test-failure (timeout) observed on a\nwindows-32 platform.\n\nhttps://ci.appveyor.com/project/ethereum/go-ethereum/builds/51174391/job/d8ascanwwltrlqd5\n\nA goroutine is stuck trying to deliver a response:\n```\ngoroutine 9632 [select, 29 minutes]:\ngithub.com/ethereum/go-ethereum/eth/protocols/eth.(*Peer).dispatchResponse(0x314f100, 0x3e5f6d0, 0x3acbb84)\n\tC:/projects/go-ethereum/eth/protocols/eth/dispatcher.go:172 +0x2a5\ngithub.com/ethereum/go-ethereum/eth/protocols/eth.handleBlockHeaders({0x12abe68, 0x30021b8}, {0x12a815c, 0x40b41c0}, 0x314f100)\n\tC:/projects/go-ethereum/eth/protocols/eth/handlers.go:301 +0x173\ngithub.com/ethereum/go-ethereum/eth/protocols/eth.handleMessage({0x12abe68, 0x30021b8}, 0x314f100)\n\tC:/projects/go-ethereum/eth/protocols/eth/handler.go:205 +0x4f6\ngithub.com/ethereum/go-ethereum/eth/protocols/eth.Handle({0x12abe68, 0x30021b8}, 0x314f100)\n\tC:/projects/go-ethereum/eth/protocols/eth/handler.go:149 +0x33\ngithub.com/ethereum/go-ethereum/eth.testSnapSyncDisabling.func1(0x314f100)\n\tC:/projects/go-ethereum/eth/sync_test.go:65 +0x33\ngithub.com/ethereum/go-ethereum/eth.(*handler).runEthPeer(0x30021b8, 0x314f100, 0x427f648)\n\tC:/projects/go-ethereum/eth/handler.go:355 +0xe65\ncreated by github.com/ethereum/go-ethereum/eth.testSnapSyncDisabling in goroutine 11\n\tC:/projects/go-ethereum/eth/sync_test.go:64 +0x54f\nFAIL\tgithub.com/ethereum/go-ethereum/eth\t1800.138s\n\n```\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
        },
        {
            "date": "2025-01-06 15:28:28",
            "message": "core/types: improve printList in DeriveSha test (#30969)"
        },
        {
            "date": "2025-01-06 06:52:01",
            "message": "core/rawdb: fix panic in freezer (#30973)\n\nFixes an issue where the node panics when an LStat fails with something \r\nother than os.ErrNotExist\r\n\r\ncloses https://github.com/ethereum/go-ethereum/issues/30968"
        },
        {
            "date": "2025-01-03 12:15:06",
            "message": "internal/ethapi: update default simulation timestamp increment to 12 (#30981)\n\nUpdate the default timestamp increment to 12s for `eth_simulate` endpoint"
        },
        {
            "date": "2025-01-02 17:37:58",
            "message": "eth/tracers/logger: skip system calls (#30923)\n\nThis commit makes it so that the struct logger will not emit logs while\nsystem calls are being executed. This will make it consistent with\nthe JSON and MD loggers. It is as it stands hard to distinguish when\nsystem calls are being processed vs when a tx is being processed.\n\n---------\n\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
        },
        {
            "date": "2025-01-02 13:06:47",
            "message": "all: use cmp.Compare (#30958)"
        },
        {
            "date": "2025-01-02 13:04:06",
            "message": "crypto/bn256: fix MulScalar (#30974)\n\nThe `a` parameter should be used in the `MulScalar` function. The\nupstream cloudflare and google repos have already merged fixes.\n\nReference:\n*\nhttps://cs.opensource.google/go/x/crypto/+/8d7daa0c54b357f3071e11eaef7efc4e19a417e2\n* https://github.com/cloudflare/bn256/pull/33"
        },
        {
            "date": "2025-01-02 01:48:25",
            "message": "internal/flags: update copyright year to 2025 (#30976)"
        }
    ],
    "ethereum/go-ethereum": {
        "2025-07-21": [
            {
                "date": "2025-07-21T10:29:55Z",
                "message": "core/vm: triple modexp cost post-cancun (#32231)\n\nhttps://github.com/ethereum/EIPs/pull/9969/files"
            },
            {
                "date": "2025-07-21T08:30:43Z",
                "message": "triedb/pathdb: fix incorrect address length in history searching (#32248)\n\nWe should use account length to check address, else OOB maybe occured\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
            }
        ],
        "2025-07-18": [
            {
                "date": "2025-07-18T10:36:10Z",
                "message": "core/txpool/blobpool: remove unused `txValidationFn` from BlobPool (#32237)\n\nThis PR removes the now\u2011unused `txValidationFn` field from BlobPool.\nIt became obsolete after a PR\u00a0 https://github.com/ethereum/go-ethereum/pull/31202 \nwas merged.\n\nResolves https://github.com/ethereum/go-ethereum/issues/32236"
            },
            {
                "date": "2025-07-18T05:22:59Z",
                "message": "params: update tx gas limit cap (#32230)\n\nUpdates the tx gas limit cap to the new parameter (2^24)\nhttps://github.com/ethereum/EIPs/pull/9986/files"
            }
        ],
        "2025-07-17": [
            {
                "date": "2025-07-17T03:19:20Z",
                "message": "all: define constructor for BlobSidecar (#32213)\n\nThe main purpose of this change is to enforce the version setting when\nconstructing the blobSidecar, avoiding creating sidecar with wrong/default \nversion tag."
            },
            {
                "date": "2025-07-17T03:07:22Z",
                "message": "triedb/pathdb: improve the performance of parse index block (#32219)\n\nThe implementation of `parseIndexBlock` used a reverse loop with slice\nappends to build the restart points, which was less cache-friendly and\ninvolved unnecessary allocations and operations. In this PR we change\nthe implementation to read and validate the restart points in one single\nforward loop.\n\nHere is the benchmark test:\n\n```bash\ngo test -benchmem -bench=BenchmarkParseIndexBlock ./triedb/pathdb/\n```\n\nThe result as below:\n\n```\nbenchmark                      old ns/op     new ns/op     delta\nBenchmarkParseIndexBlock-8     52.9          37.5          -29.05%\n```\n\nabout 29% improvements\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
            },
            {
                "date": "2025-07-17T02:59:47Z",
                "message": "eth/protocols/snap: fix negative eta in state progress logging (#32225)"
            },
            {
                "date": "2025-07-17T02:44:35Z",
                "message": "triedb/pathdb: avoid duplicate metadata reads (#32226)"
            }
        ],
        "2025-07-16": [
            {
                "date": "2025-07-16T21:26:33Z",
                "message": "eth/tracers: apply block header overrides correctly (#32183)\n\nFixes #32175.\n\nThis fixes the scenario where the blockhash opcode would return 0x0\nduring RPC simulations when using BlockOverrides with a future block\nnumber. The root cause was that BlockOverrides.Apply() only modified the\nvm.BlockContext, but GetHashFn() depends on the actual\ntypes.Header.Number to resolve valid historical block hashes. This\ncaused a mismatch and resulted in incorrect behavior during trace and\ncall simulations.\n\n---------\n\nCo-authored-by: shantichanal <158101918+shantichanal@users.noreply.github.com>\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            },
            {
                "date": "2025-07-16T13:36:44Z",
                "message": "account/abi/bind/v2: fix TestDeploymentWithOverrides (#32212)\n\nThe root cause of the flaky test was a nonce conflict caused by async\ncontract deployments.\n\nThis solution defines a custom deployer with automatic nonce management."
            },
            {
                "date": "2025-07-16T13:11:10Z",
                "message": "eth/downloader: improve nil pointer protection (#32222)\n\nFix #32221\n\n---------\n\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
            },
            {
                "date": "2025-07-16T13:00:39Z",
                "message": "trie: avoid spawning goroutines for empty children (#32220)"
            }
        ],
        "2025-07-15": [
            {
                "date": "2025-07-15T13:48:36Z",
                "message": "core/rawdb: reduce allocations in rawdb.ReadHeaderNumber (#31913)\n\nThis is something interesting I came across during my benchmarks, we\nspent ~3.8% of all allocations allocating the header number on the heap.\n\n```\n(pprof) list GetHeaderByHash\nTotal: 38197204475\nROUTINE ======================== github.com/ethereum/go-ethereum/core.(*BlockChain).GetHeaderByHash in github.com/ethereum/go-ethereum/core/blockchain_reader.go\n         0 5786566117 (flat, cum) 15.15% of Total\n         .          .     79:func (bc *BlockChain) GetHeaderByHash(hash common.Hash) *types.Header {\n         . 5786566117     80: return bc.hc.GetHeaderByHash(hash)\n         .          .     81:}\n         .          .     82:\n         .          .     83:// GetHeaderByNumber retrieves a block header from the database by number,\n         .          .     84:// caching it (associated with its hash) if found.\n         .          .     85:func (bc *BlockChain) GetHeaderByNumber(number uint64) *types.Header {\nROUTINE ======================== github.com/ethereum/go-ethereum/core.(*HeaderChain).GetHeaderByHash in github.com/ethereum/go-ethereum/core/headerchain.go\n         0 5786566117 (flat, cum) 15.15% of Total\n         .          .    404:func (hc *HeaderChain) GetHeaderByHash(hash common.Hash) *types.Header {\n         . 1471264309    405: number := hc.GetBlockNumber(hash)\n         .          .    406: if number == nil {\n         .          .    407:  return nil\n         .          .    408: }\n         . 4315301808    409: return hc.GetHeader(hash, *number)\n         .          .    410:}\n         .          .    411:\n         .          .    412:// HasHeader checks if a block header is present in the database or not.\n         .          .    413:// In theory, if header is present in the database, all relative components\n         .          .    414:// like td and hash->number should be present too.\n(pprof) list GetBlockNumber\nTotal: 38197204475\nROUTINE ======================== github.com/ethereum/go-ethereum/core.(*HeaderChain).GetBlockNumber in github.com/ethereum/go-ethereum/core/headerchain.go\n  94438817 1471264309 (flat, cum)  3.85% of Total\n         .          .    100:func (hc *HeaderChain) GetBlockNumber(hash common.Hash) *uint64 {\n  94438817   94438817    101: if cached, ok := hc.numberCache.Get(hash); ok {\n         .          .    102:  return &cached\n         .          .    103: }\n         . 1376270828    104: number := rawdb.ReadHeaderNumber(hc.chainDb, hash)\n         .          .    105: if number != nil {\n         .     554664    106:  hc.numberCache.Add(hash, *number)\n         .          .    107: }\n         .          .    108: return number\n         .          .    109:}\n         .          .    110:\n         .          .    111:type headerWriteResult struct {\n(pprof) list ReadHeaderNumber\nTotal: 38197204475\nROUTINE ======================== github.com/ethereum/go-ethereum/core/rawdb.ReadHeaderNumber in github.com/ethereum/go-ethereum/core/rawdb/accessors_chain.go\n 204606513 1376270828 (flat, cum)  3.60% of Total\n         .          .    146:func ReadHeaderNumber(db ethdb.KeyValueReader, hash common.Hash) *uint64 {\n 109577863 1281242178    147: data, _ := db.Get(headerNumberKey(hash))\n         .          .    148: if len(data) != 8 {\n         .          .    149:  return nil\n         .          .    150: }\n  95028650   95028650    151: number := binary.BigEndian.Uint64(data)\n         .          .    152: return &number\n         .          .    153:}\n         .          .    154:\n         .          .    155:// WriteHeaderNumber stores the hash->number mapping.\n         .          .    156:func WriteHeaderNumber(db ethdb.KeyValueWriter, hash common.Hash, number uint64) {\n```\n\nOpening this to discuss the idea, I know that rawdb.EmptyNumber is not a\ngreat name for the variable, open to suggestions"
            },
            {
                "date": "2025-07-15T12:24:17Z",
                "message": "all: update dead wiki links (#32215)\n\n---\n\n\n**Description:**  \n- Replaced outdated GitHub wiki links with current, official\ndocumentation URLs.\n- Removed links that redirect or are no longer relevant.\n- Ensured all references point to up-to-date and reliable sources.\n\n\n---"
            },
            {
                "date": "2025-07-15T06:20:45Z",
                "message": "eth/protocols/snap, p2p/discover: improve zero time checks (#32214)"
            },
            {
                "date": "2025-07-15T05:50:52Z",
                "message": "core/rawdb: change the mechanism to schedule freezer sync (#32135)\n\nThis pull request slightly improves the freezer fsync mechanism by scheduling \nthe Sync operation based on the number of uncommitted items and original\ntime interval.\n\nOriginally, freezer.Sync was triggered every 30 seconds, which worked well during\nactive chain synchronization. However, once the initial state sync is complete, \nthe fixed interval causes Sync to be scheduled too frequently.\n\nTo address this, the scheduling logic has been improved to consider both the time \ninterval and the number of uncommitted items. This additional condition helps \navoid unnecessary Sync operations when the chain is idle."
            },
            {
                "date": "2025-07-15T03:45:20Z",
                "message": "triedb/pathdb: introduce file-based state journal (#32060)\n\nIntroduce file-based state journal in path database, fixing\nthe Pebble restriction when the journal size exceeds 4GB.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2025-07-15T01:07:23Z",
                "message": "core/types: fix CellProofsAt method (#32198)"
            }
        ],
        "2025-07-14": [
            {
                "date": "2025-07-14T22:08:06Z",
                "message": "all: fix outdated ethereum wiki json-rpc json-rpc doc links (#32209)\n\nReplace outdated wiki reference with ethereum.org\ndocumentation links"
            },
            {
                "date": "2025-07-14T14:06:57Z",
                "message": "miner: set sidecar version when recomputing proofs (#32199)\n\n- If the block number is `osaka` fork and needs to recompute some `blob\nproofs` to `cell proofs`, here also needs to set version to `1`."
            },
            {
                "date": "2025-07-14T13:33:24Z",
                "message": "eth/fetcher: fix announcement drop logic (#32210)\n\nThis PR fixes an issue in the tx_fetcher DoS prevention logic where the\ncode keeps the overflow amount (`want - maxTxAnnounces`) instead of the\nallowed amount (`maxTxAnnounces - used`). The specific changes are:\n\n- Correct slice indexing in the announcement drop logic\n- Extend the overflow test case to cover the inversion scenario"
            },
            {
                "date": "2025-07-14T12:07:43Z",
                "message": "params: EIP-7892 - Blob Parameter Only Hardforks (#32193)\n\nThis is a resubmit of https://github.com/ethereum/go-ethereum/pull/31820\nagainst the `master` branch.\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2025-07-14T09:27:42Z",
                "message": "ethclient/gethclient: remove race condition in tests (#32206)\n\nalternative to https://github.com/ethereum/go-ethereum/pull/32200\n\nThe race condition is not happening yet, since there is only a single\ncall to `newTestBackend`, but there might be more in the future"
            },
            {
                "date": "2025-07-14T07:15:18Z",
                "message": "accounts/keystore: update links to documenation (#32194)\n\n---\n\n\n**Description:**  \n- Replaced outdated GitHub wiki links with the official Ethereum\ndocumentation for Web3 Secret Storage.\n- Updated references in `keystore.go` and `passphrase.go` for improved\naccuracy and reliability.\n\n\n---"
            },
            {
                "date": "2025-07-14T07:07:47Z",
                "message": "signer/core/apitypes: require blob txs to have tx.to set (#32197)\n\nCheck the `to` address before building the blob tx.\n\n---------\n\nCo-authored-by: jwasinger <j-wasinger@hotmail.com>"
            }
        ],
        "2025-07-11": [
            {
                "date": "2025-07-11T19:55:18Z",
                "message": "cmd/geth: update vcheck testdata, add docs on generating signatures (#32121)\n\nFixed typo in security release URL by replacing:\nOld: https://blog.ethereum.org/2020/11/12/geth_security_release/\nNew: https://blog.ethereum.org/2020/11/12/geth-security-release/\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            },
            {
                "date": "2025-07-11T12:58:21Z",
                "message": ".github: remove karalabe from CODEOWNERS"
            },
            {
                "date": "2025-07-11T11:56:16Z",
                "message": "eth/downloader: fix ancient limit in snap sync (#32188)\n\nThis pull request fixes an issue in disabling direct-ancient mode in\nsnap sync.\n\nSpecifically, if `origin >= frozen && origin != 0`, it implies a part of\nchain data has been written into the key-value store, all the following \nwrites into ancient store scheduled by downloader will be rejected \nwith error \n\n`ERROR[07-10|03:46:57.924] Error importing chain data to ancients\nerr=\"can't add block 1166 hash: the append operation is out-order: have\n1166 want 0\"`.\n\nThis issue is detected by the https://github.com/ethpandaops/kurtosis-sync-test, \nwhich initiates the first snap sync cycle without the finalized header and\nimplicitly disables the direct-ancient mode. A few seconds later the second \nsnap sync cycle is initiated with the finalized information and direct-ancient mode\nis enabled incorrectly."
            },
            {
                "date": "2025-07-11T11:51:04Z",
                "message": "core/types:  add block-level access list structures with encoding/decoding (#31948)\n\nThis adds the SSZ types from the \n[EIP-7928](https://eips.ethereum.org/EIPS/eip-7928) and also adds\nencoder/decoder generation using https://github.com/ferranbt/fastssz.\n\nThe fastssz dependency is updated because the generation will not work\nproperly with the master branch version due to a bug in fastssz.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2025-07-09": [
            {
                "date": "2025-07-09T20:09:11Z",
                "message": "cmd/clef: update Safe API documentation links in changelog (#32136)\n\nThis PR updates the outdated documentation URL from docs.gnosis.io to\nthe new official docs.safe.global domain. The change reflects the\nrebranding from Gnosis Safe to Safe and ensures that users are directed\nto the current API documentation for transaction service reference."
            },
            {
                "date": "2025-07-09T16:49:06Z",
                "message": "cmd/utils: add the missing check for the HoodiFlag in blsync (#32179)\n\nHoodi network flag should be exclusive to other network flags for both blysnc standalone and integrated mode."
            },
            {
                "date": "2025-07-09T09:24:44Z",
                "message": "core,miner: implement EIP-7934 - RLP Execution Block Size Limit (#31990)\n\nThis PR adds a block validation check for the maximum block size, as required by\nEIP-7934, and also applies a slightly lower size limit during block building.\n\n---------\n\nCo-authored-by: spencer-tb <spencer@spencertaylorbrown.uk>\nCo-authored-by: Felix Lange <fjl@twurst.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2025-07-09T00:46:59Z",
                "message": "core/vm: update gas cost of CLZ to five (#32172)\n\nhttps://github.com/ethereum/EIPs/commit/a794de3fcf71bb8c71e8bafdba11f63133ce4516"
            }
        ],
        "2025-07-08": [
            {
                "date": "2025-07-08T13:23:22Z",
                "message": "miner, core, core/txpool: implement EIP 7825 - TX Gas Limit Cap (#31824)\n\nImplements EIP-7825\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\nCo-authored-by: lightclient <lightclient@protonmail.com>\nCo-authored-by: MariusVanDerWijden <m.vanderwijden@live.de>"
            },
            {
                "date": "2025-07-08T13:15:53Z",
                "message": "eth/catalyst:  abort dev mode block commit if shut down is triggered (#32166)\n\nalternate approach to https://github.com/ethereum/go-ethereum/pull/31328\nsuggested by @MariusVanDerWijden . This prevents Geth from outputting a\nlot of logs when trying to commit on-demand dev mode blocks while the\nclient is shutting down.\n\nThe issue is hard to reproduce, but I've seen it myself and it is\nannoying when it happens. I think this is a reasonable simple solution,\nand we can revisit if we find that the output is still too large (i.e.\nthere is a large delay between initiating shut down and the simulated\nbeacon receiving the signal, while in this loop).\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
            },
            {
                "date": "2025-07-08T07:51:08Z",
                "message": "cmd, eth/catalyst: exit geth only if exitWhenSynced is specified (#32149)\n\nThis pull request modifies the behavior of `--synctarget` to terminate\nthe node only when `--exitWhenSynced` is explicitly specified."
            }
        ],
        "2025-07-07": [
            {
                "date": "2025-07-07T18:59:45Z",
                "message": "core/vm: implement EIP-7951 - precompile for secp256r1 (#31991)\n\nhttps://github.com/ethereum/EIPs/pull/9833\n\nBased on #27540, #30043\n\n---------\n\nCo-authored-by: Ula\u015f Erdo\u011fan <uerdogan2001@hotmail.com>"
            },
            {
                "date": "2025-07-07T14:17:25Z",
                "message": "consensus/misc/eip4844: implement EIP-7918  (#31965)\n\nhttps://eips.ethereum.org/EIPS/eip-7918\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-07-07T11:26:11Z",
                "message": ".github, internal/flags: improve actions test runs (#32150)\n\nThis change enables more tests to run on GitHub actions. First, it\nremoves the `-short` flag passed to `go test`, unskipping some longer\nrunning tests. We also enable the full consensus tests to run by\nenabling submodules during git clone.\n\nThe EF now operates org wide runners with the `self-hosted-ghr` label.\nThese are auto-scaling runners which should ideally allow us to process\nany amount of testing load we throw at them. The new runners have `HOME`\nconfigured differently from the actual user home directory, so our\ninternal test for resolving `~` had to be adapted to work in this scenario."
            },
            {
                "date": "2025-07-07T11:00:34Z",
                "message": "core/txpool/blobpool: lower log level for warnings (#32142)\n\n- Change the log level to `warning`, during syncing blocks, the `final\n== nil` is normal.\n- Change to log tx hash."
            },
            {
                "date": "2025-07-07T09:19:33Z",
                "message": "core/vm: implement EIP-7939 - CLZ opcode (#31989)\n\nhttps://eips.ethereum.org/EIPS/eip-7939\n\n---------\n\nCo-authored-by: spencer-tb <spencer@spencertaylorbrown.uk>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-07-07T08:01:29Z",
                "message": "core/vm: move nil-check out of the interpreter loop (#32068)\n\nMoves the jumptable nil check our of the interpreter loop.\nBenchmarks show a 2-10% improvement."
            }
        ],
        "2025-07-04": [
            {
                "date": "2025-07-04T11:45:29Z",
                "message": ".gitea: fix typo in windows workflow"
            },
            {
                "date": "2025-07-04T11:42:55Z",
                "message": "gitea: set PATH in script"
            },
            {
                "date": "2025-07-04T11:38:26Z",
                "message": "gitea: try with cmd"
            },
            {
                "date": "2025-07-04T11:25:40Z",
                "message": ".gitea: set PATH"
            },
            {
                "date": "2025-07-04T10:42:01Z",
                "message": ".gitea: update PATH"
            },
            {
                "date": "2025-07-04T11:02:57Z",
                "message": ".gitea: add workflow_dispatch for release build"
            },
            {
                "date": "2025-07-04T10:17:44Z",
                "message": "cmd/utils: update flag description of gcmode (#32145)"
            },
            {
                "date": "2025-07-04T01:40:16Z",
                "message": "cmd/utils: show full deprecated flags (#32141)\n\nThis is a follow up PR after #32128 , Seems I've missed to add\n--txlookuplimit as hidden. In hte meanwhile, I also add the other \ndeprecated flags into the output of `show-deprecated-flags`"
            }
        ],
        "2025-07-03": [
            {
                "date": "2025-07-03T13:07:22Z",
                "message": ".gitea: add windows build (experimental)"
            },
            {
                "date": "2025-07-03T05:23:00Z",
                "message": "cmd/utils, internal/debug: hide the deprecated flags (#32128)\n\nSome of the flags were deprecated, so try to hide them in the help\nmessage. And move the `--vmodule` and `--logjson` flags to the\nDeprecatedCategory."
            },
            {
                "date": "2025-07-03T05:19:34Z",
                "message": "core/state: add GetStateAndCommittedState (#31585)\n\nImproves the SSTORE gas calculation a bit. Previously we would pull up\nthe state object twice. This is okay for existing objects, since they\nare cached, however non-existing objects are not cached, thus we needed\nto go through all 128 diff layers as well as the disk layer twice, just\nfor the gas calculation\n\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/ethereum/go-ethereum/core/vm\ncpu: AMD Ryzen 9 5900X 12-Core Processor            \n               \u2502 /tmp/old.txt \u2502            /tmp/new.txt             \u2502\n               \u2502    sec/op    \u2502   sec/op     vs base                \u2502\nInterpreter-24   1118.0n \u00b1 2%   602.8n \u00b1 1%  -46.09% (p=0.000 n=10)\n```\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2025-07-02": [
            {
                "date": "2025-07-02T11:39:44Z",
                "message": "cmd/workload: rework tracegen to run tracing at block level (#32092)\n\nThis PR changes the trace test to block level, aiming for better\nexecution performance.\n\n---------\n\nCo-authored-by: zsfelfoldi <zsfelfoldi@gmail.com>"
            },
            {
                "date": "2025-07-02T10:39:21Z",
                "message": "beacon/blsync: update logs for blsync (Fixes #31968 ) (#32046)\n\nSmall update for logs when syncing with blsync. Downgrades the \"latest\nfilled block is not available\" to warn.\n\nCo-authored-by: shantichanal <158101918+shantichanal@users.noreply.github.com>"
            },
            {
                "date": "2025-07-02T08:12:55Z",
                "message": "version: begin v1.16.2 release cycle"
            },
            {
                "date": "2025-07-02T08:12:04Z",
                "message": "version: release go-ethereum v1.16.1 stable"
            },
            {
                "date": "2025-07-02T06:16:54Z",
                "message": "accounts/abi: generate TryPack* methods for abigen v2 bindings (#31692)\n\n1. Fix the error return format.\n**todo**: ~~`bindtype` needs more complex logic to fix it.~~\n`\nif err != nil {\n  return nil, err\n}\nif err == nil {\n  return obj, nil\n}\n`\n2. ~~Return pointer type object to avoid copying the whole struct\ncontent.~~\n3. Give the panic decision to the user.\n4. Fix empty line at the end of function.\n\n**TODO**: ~~fix some related test cases.~~\n\n---------\n\nCo-authored-by: Jared Wasinger <j-wasinger@hotmail.com>"
            },
            {
                "date": "2025-07-02T05:50:18Z",
                "message": "eth/catalyst: fix edge case in simulated backend (#31871)\n\ngeth cmd: `geth --dev --dev.period 5`\ncall: `debug.setHead` to rollback several blocks.\n\nIf the `debug.setHead` call is delayed, it will trigger a panic with a\nsmall probability, due to using the null point of\n`fcResponse.PayloadID`.\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
            },
            {
                "date": "2025-07-02T00:46:03Z",
                "message": "core/rawdb, triedb/pathdb: fix two inaccurate comments (#32130)"
            }
        ],
        "2025-07-01": [
            {
                "date": "2025-07-01T14:53:10Z",
                "message": "core/types: blockTimestamp in logs is hex-encoded (#32129)\n\ncloses #32120"
            },
            {
                "date": "2025-07-01T14:31:09Z",
                "message": "core/filtermaps: define APIs for map, epoch calculation (#31659)\n\nThis pull request refines the filtermap implementation, defining key\nAPIs for map and\nepoch calculations to improve readability.\n\nThis pull request doesn't change any logic, it's a pure cleanup.\n\n---------\n\nCo-authored-by: zsfelfoldi <zsfelfoldi@gmail.com>"
            },
            {
                "date": "2025-07-01T11:51:16Z",
                "message": "internal: remove unused shh and swarm modules from console (#32073)\n\nSimilar to https://github.com/ethereum/go-ethereum/pull/31856, remove\nthe not availabe shh, swarm modules in the console.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2025-07-01T07:18:49Z",
                "message": "ethapi: reduce some of the wasted effort in GetTransactionReceipt (#32021)\n\nTowards https://github.com/ethereum/go-ethereum/issues/26974\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2025-07-01T07:07:33Z",
                "message": "internal/ethapi: prealloc map for the txpool api (#32110)\n\nuse `make(map, len(txpool))` to prealloc the map for the txpool content,\nto avoid the map growing in the loop."
            },
            {
                "date": "2025-07-01T07:04:05Z",
                "message": "eth/catalyst: fix the log message in newPayloadV4 (#32125)\n\nIt should be `newPayloadV4 must only be called for prague payloads` for\nthe V4 payload error"
            },
            {
                "date": "2025-07-01T07:00:33Z",
                "message": "core/filtermaps: clean up log format of unindexing message (#32123)\n\nSorry for not fully fixed in https://github.com/ethereum/go-ethereum/pull/31761, now the log \nformat of unindexing message is cleaned up, to make it consistent with the indexing message."
            },
            {
                "date": "2025-07-01T06:50:02Z",
                "message": "Fix log indexer noise after debug_setHead operations (#31934)\n\n## Summary\nThis PR resolves Issue #31929 by reducing log noise generated by the log\nindexer after `debug_setHead` operations.\n\n## Problem Description\nWhen `debug_setHead` is called to rewind the blockchain, blocks are\nremoved from the database. However, the log indexer's `ChainView`\nobjects may still hold references to these deleted blocks. When\n`extendNonCanonical()` attempts to access these missing headers, it\nresults in:\n\n1. **Repeated ERROR logs**: `Header not found number=X hash=0x...`\n2. **Log noise** that can mask other important errors  \n3. **User confusion** about whether this indicates a real problem\n\n## Root Cause Analysis\nThe issue occurs because:\n- `debug_setHead` removes blocks from the blockchain database\n- Log indexer's `ChainView` may still reference deleted block hashes\n- `extendNonCanonical()` in `core/filtermaps/chain_view.go` tries to\nfetch these missing headers\n- The existing `return false` logic properly handles the error, but logs\nat ERROR level\n\n## Solution\nThis is a **logging improvement only** - no functional logic changes:\n\n### Changes Made\n1. **Log level**: Changed from `ERROR` to `DEBUG` \n2. **Log message**: Enhanced with descriptive context about chain view\nextension\n3. **Comments**: Added explanation for when this situation occurs\n4. **Behavior**: Maintains existing error handling (`return false` was\nalready present)\n\n### Code Changes\n```go\n// Before\nlog.Error(\"Header not found\", \"number\", number, \"hash\", hash)\nreturn false\n\n// After  \n// Header not found - this can happen after debug_setHead operations\n// where blocks have been deleted. Return false to indicate the chain view\n// is no longer valid rather than logging repeated errors.\nlog.Debug(\"Header not found during chain view extension\", \"number\", number, \"hash\", hash)\nreturn false\n```\n\n## Testing\n\n### Automated Tests\n- \u2705 All existing filtermaps tests pass: `go test ./core/filtermaps -v`\n- \u2705 No regressions in related functionality\n\n### Manual Verification\n1. **Before fix**: Started geth in dev mode, generated blocks, called\n`debug_setHead(3)` \u2192 **5 repeated ERROR logs**\n2. **After fix**: Same scenario \u2192 **4 DEBUG logs, no ERROR noise**\n\n### Test Environment\n```bash\n# Setup test environment\nrm -rf ./dev-test-data\n./build/bin/geth --dev --datadir ./dev-test-data --http --http.api debug,eth,net,web3 --verbosity 4\n\n# Generate test blocks and trigger issue\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"jsonrpc\":\"2.0\",\"method\":\"debug_setHead\",\"params\":[\"0x3\"],\"id\":1}' http://localhost:8545\n```\n\n\n## Related Issues\n- Fixes #31929\n\n## Additional Context\nThis issue was reported as spurious error messages appearing after\n`debug_setHead` operations. The investigation revealed that while the\nerror handling was functionally correct, the ERROR log level was\ninappropriate for this expected scenario in development/debugging\nworkflows.\n\nThe fix maintains full compatibility while significantly improving the\ndebugging experience for developers using `debug_setHead`.\n\n---------\n\nCo-authored-by: Sun Tae, Kim <38067691+humblefirm@users.noreply.github.com>\nCo-authored-by: zsfelfoldi <zsfelfoldi@gmail.com>"
            },
            {
                "date": "2025-07-01T06:13:19Z",
                "message": "eth/filters: add address limit to filters (#31876)\n\nThe address filter was never checked against a maximum limit, which can\nbe somewhat abusive for API nodes. This PR adds a limit similar to\ntopics\n\n## Description (AI generated)\n\nThis pull request introduces a new validation to enforce a maximum limit\non the number of addresses allowed in filter criteria for Ethereum logs.\nIt includes updates to the `FilterAPI` and `EventSystem` logic, as well\nas corresponding test cases to ensure the new constraint is properly\nenforced.\n\n### Core functionality changes:\n\n* **Validation for maximum addresses in filter criteria**:\n- Added a new constant, `maxAddresses`, set to 100, to define the\nmaximum allowable addresses in a filter.\n- Introduced a new error, `errExceedMaxAddresses`, to handle cases where\nthe number of addresses exceeds the limit.\n- Updated the `GetLogs` method in `FilterAPI` to validate the number of\naddresses against `maxAddresses`.\n- Modified the `UnmarshalJSON` method to return an error if the number\nof addresses in the input JSON exceeds `maxAddresses`.\n- Added similar validation to the `SubscribeLogs` method in\n`EventSystem`.\n\n### Test updates:\n\n* **New test cases for address limit validation**:\n- Added a test in `TestUnmarshalJSONNewFilterArgs` to verify that\nexceeding the maximum number of addresses triggers the\n`errExceedMaxAddresses` error.\n- Updated `TestInvalidLogFilterCreation` to include a test case for an\ninvalid filter with more than `maxAddresses` addresses.\n- Updated `TestInvalidGetLogsRequest` to test for invalid log requests\nwith excessive addresses.\n\nThese changes ensure that the system enforces a reasonable limit on the\nnumber of addresses in filter criteria, improving robustness and\npreventing potential performance issues.\n\n---------\n\nCo-authored-by: zsfelfoldi <zsfelfoldi@gmail.com>"
            },
            {
                "date": "2025-07-01T03:35:22Z",
                "message": "triedb: reset state indexer after snap synced (#32104)\n\nFix the issue after initial snap sync with `gcmode=archive` enabled.\n\n```\nNewPayload: inserting block failed       error=\"history indexing is out of order, last: null, requested: 1\"\n```\n\n---------\n\nSigned-off-by: Delweng <delweng@gmail.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2025-06-30": [
            {
                "date": "2025-06-30T15:24:52Z",
                "message": ".gitea: disable cron schedule"
            },
            {
                "date": "2025-06-30T08:17:59Z",
                "message": ".gitea: fix 386 upload"
            },
            {
                "date": "2025-06-30T07:53:52Z",
                "message": ".gitea: switch release builds to static linking (#32118)\n\nThis is to avoid compatibility issues with mismatched glibc versions\nbetween the builder and deployment target.\n\nFixes #32102"
            }
        ],
        "2025-06-27": [
            {
                "date": "2025-06-27T22:56:20Z",
                "message": "eth: correct tracer initialization in BlockchainConfig (#32107)\n\ncore.BlockChainConfig.VmConfig is not a pointer, so setting the Tracer\non the `vmConfig` object after it was passed to options does *not* apply\nit to options.VmConfig\n\nThis fixes the issue by setting the value directly inside the `options`\nobject and removing the confusing `vmConfig` variable to prevent further\nmistakes."
            },
            {
                "date": "2025-06-27T07:27:52Z",
                "message": "node: do not double-wrap KV stores (#32089)\n\nFor no apparent reason, KV stores were getting wrapped in `nofreezedb`\nfirst and then in `freezerdb`."
            },
            {
                "date": "2025-06-27T07:18:05Z",
                "message": "all: replace override.prague with osaka (#32093)\n\nreplace `--override.prague` with `--override.osaka`\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
            }
        ],
        "2025-06-26": [
            {
                "date": "2025-06-26T20:02:50Z",
                "message": ".travis.yml: remove travis configuration"
            },
            {
                "date": "2025-06-26T19:29:59Z",
                "message": ".gitea: trigger PPA upload on tag"
            },
            {
                "date": "2025-06-26T18:58:52Z",
                "message": "version: begin v1.16.1 release cycle"
            },
            {
                "date": "2025-06-26T18:54:41Z",
                "message": "version: release go-ethereum v1.16.0 stable"
            },
            {
                "date": "2025-06-26T15:20:20Z",
                "message": "all: incorporate state history indexing status into eth_syncing response (#32099)\n\nThis pull request tracks the state indexing progress in eth_syncing\nRPC response, i.e. we will return non-null syncing status until indexing\nhas finished."
            },
            {
                "date": "2025-06-26T15:19:02Z",
                "message": "triedb/pathdb: fix journal resolution in pathdb (#32097)\n\nThis pull request fixes a flaw in the PBSS state iterator, which\ncould return empty account or storage data.\n\nIn PBSS, multiple in-memory diff layers and a write buffer are\nmaintained. These layers are persisted to the database and reloaded after\nnode restarts. However, since the state data is encoded using RLP, the\ndistinction between nil and an empty byte slice is lost during the encode/decode\nprocess. As a result, invalid state values such as `[]byte{}` can appear in PBSS\nand ultimately be returned by the state iterator.\n\n\nCheckout\nhttps://github.com/ethereum/go-ethereum/blob/master/triedb/pathdb/iterator_fast.go#L270\nfor more iterator details.\n\nIt's a long-term existent issue and now be activated since the snapshot\nintegration.\nThe error `err=\"range contains deletion\"` will occur when Geth tries to\nserve other\npeers with SNAP protocol request.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2025-06-25": [
            {
                "date": "2025-06-25T08:50:54Z",
                "message": "core, eth, triedb: serve historical states over RPC (#31161)\n\nThis is the part-2 for archive node over path mode, which ultimately\nships the functionality to serve the historical states"
            },
            {
                "date": "2025-06-25T08:49:09Z",
                "message": "eth, triedb/pathdb: permit write buffer allowance in PBSS archive mode (#32091)\n\nThis pull request fixes a flaw in PBSS archive mode that significantly\ndegrades performance when the mode is enabled.\n\nOriginally, in hash mode, the dirty trie cache is completely disabled\nwhen archive mode is active, in order to disable the in-memory garbage \ncollection mechanism. However, the internal logic in path mode differs \nsignificantly, and the dirty trie node cache is essential for maintaining\nchain insertion performance. Therefore, the cache is now retained in\npath mode."
            },
            {
                "date": "2025-06-25T02:42:45Z",
                "message": "cmd/utils: fix formatting for beacon flag errors to fit Fatalf form (#32090)\n\nNoticed that the errors for the blsync flags were not formatted\ncorrectly for `Fatalf(..)`."
            },
            {
                "date": "2025-06-25T01:42:11Z",
                "message": "core, consensus/beacon: defer trie resolution (#31725)\n\nPreviously, the account trie for a given state root was resolved immediately \nwhen the stateDB was created, implying that the trie was always required\nby the stateDB.\n\nHowever, this assumption no longer holds, especially for path archive nodes, \nwhere historical states can be accessed even if the corresponding trie data \ndoes not exist."
            }
        ],
        "2025-06-24": [
            {
                "date": "2025-06-24T13:06:20Z",
                "message": "cmd/geth, triedb: add pathdb state verification (#32086)\n\nThis pull request ports the snapshot iteration logic from the legacy\nimplementation."
            },
            {
                "date": "2025-06-24T12:36:12Z",
                "message": "core/rawdb, triedb/pathdb: implement history indexer (#31156)\n\nThis pull request is part-1 for shipping the core part of archive node\nin PBSS mode."
            },
            {
                "date": "2025-06-24T11:17:41Z",
                "message": "miner: default gaslimit 45M (#32087)\n\nWe believe it is safe to raise the gaslimit to 45M before the Fusaka\nfork. So this PR changes the default to 45M."
            },
            {
                "date": "2025-06-24T07:12:11Z",
                "message": "cmd/geth: era-download logic fix (#32081)\n\nDownloading from a range was failing because it would return and error\nearly with an error misinterpreting \"start-end\".\n\n---------\n\nCo-authored-by: shantichanal <158101918+shantichanal@users.noreply.github.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2025-06-24T05:52:18Z",
                "message": "eth/tracers: prestate lookup EIP7702 delegation account (#32080)\n\nImplement https://github.com/ethereum/go-ethereum/issues/32078 \nParse and lookup the delegation account if EIP7702 is enabled.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
            }
        ],
        "2025-06-23": [
            {
                "date": "2025-06-23T07:13:48Z",
                "message": "cmd/clef: update readme (#32070)\n\nReplaced the outdated and broken link to the Web3 Secret Storage\nDefinition with the current official URL from ethereum.org in the Clef\nREADME. This ensures users have access to up-to-date and accurate\ndocumentation for the keystore file format."
            },
            {
                "date": "2025-06-23T06:04:21Z",
                "message": "eth: quick canceling block inserting when debug_setHead is invoked (#32067)\n\nIf Geth is engaged in a long-run block synchronization, such as a full\nsyncing over a large number of blocks, invoking `debug_setHead` will\ncause `downloader.Cancel` to wait for all fetchers to stop first.\nThis can be time-consuming, particularly for the block processing\nthread.\n\nTo address this, we manually call `blockchain.StopInsert` to interrupt\nthe blocking processing thread and allow it to exit immediately, and\nafter that call `blockchain.ResumeInsert` to resume the block\ndownloading process.\n\nAdditionally, we add a sanity check for the input block number of\n`debug_setHead` to ensure its validity.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2025-06-22": [
            {
                "date": "2025-06-22T12:40:54Z",
                "message": "triedb/pathdb, eth: use double-buffer mechanism in pathdb (#30464)\n\nPreviously, PathDB used a single buffer to aggregate database writes,\nwhich needed to be flushed atomically. However, flushing large amounts\nof data (e.g., 256MB) caused significant overhead, often blocking the\nsystem for around 3 seconds during the flush.\n\nTo mitigate this overhead and reduce performance spikes, a double-buffer\nmechanism is introduced. When the active buffer fills up, it is marked\nas frozen and a background flushing process is triggered. Meanwhile, a\nnew buffer is allocated for incoming writes, allowing operations to\ncontinue uninterrupted.\n\nThis approach reduces system blocking times and provides flexibility in\nadjusting buffer parameters for improved performance."
            },
            {
                "date": "2025-06-22T12:28:29Z",
                "message": "core/state: fix prefetch on single core CPU (#32075)\n\nWe need at least one prefetch goroutine. SetLimit(0) would block\nprefetch.\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>"
            }
        ],
        "2025-06-21": [
            {
                "date": "2025-06-21T05:00:32Z",
                "message": "core/state: improve the prefetcher concurrency allowance (#32071)\n\nImprove the prefetcher concurrency allowance."
            },
            {
                "date": "2025-06-21T04:58:04Z",
                "message": "core/state: expose the state reader stats (#31998)\n\nThis pull request introduces a mechanism to expose statistics from the\nstate reader, specifically related to cache utilization during state prefetching.\n\nTo improve state access performance, a pair of state readers is constructed \nwith a shared local cache. One reader to execute transactions  ahead of time\nto warm up the cache. The other reader is used by the actual chain processing \nlogic, which can benefit from the prefetched states.\n\nThis PR adds visibility into how effective the cache is by exposing relevant \nusage statistics.\n\n---------\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>\nCo-authored-by: Csaba Kiraly <csaba.kiraly@gmail.com>"
            }
        ],
        "2025-06-20": [
            {
                "date": "2025-06-20T11:40:41Z",
                "message": "ethdb: Implement DeleteRange in batch (#31947)\n\nimplement #31945\n\n---------\n\nCo-authored-by: prpeh <prpeh@proton.me>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2025-06-20T11:18:20Z",
                "message": "crypto/bn256: add documentation on subgroup checks for G2 (#32066)\n\nThis PR improves the IsOnCurve methods for BN254 G2 points by:\n\n* Clarifying its behavior the docstring, making it explicit that it\nverifies both the point being on the curve and in the correct subgroup.\n\n* Adding an in-line comment explaining the subgroup membership check\n(c.Mul(Order)).\n\n * Minor wording adjustments for readability and consistency."
            },
            {
                "date": "2025-06-20T10:47:48Z",
                "message": "crypto/bn256/gnark: align marshaling behavior (#32065)\n\nAligns the marshaling behavior of gnark to google and cloudflare\n\nCo-authored-by: kevaundray <kevtheappdev@gmail.com>"
            }
        ],
        "2025-06-19": [
            {
                "date": "2025-06-19T18:37:02Z",
                "message": ".gitea: show environment in release-ppa.yml"
            },
            {
                "date": "2025-06-19T14:19:54Z",
                "message": "trie: delete secKeyCacheOwner (#31785)\n\nThe optimization tried to defer allocating the cache map until it was used for the\nfirst time. It's a relic from earlier times, when tries were copied often. This seems\nunnecessary now, so we can just create the map when the trie is created.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-06-19T12:56:12Z",
                "message": ".gitea: touch cron workflow files"
            },
            {
                "date": "2025-06-19T10:21:15Z",
                "message": "core: consolidate BlockChain constructor options (#31925)\n\nIn this pull request, the original `CacheConfig` has been renamed to `BlockChainConfig`.\n\nOver time, more fields have been added to `CacheConfig` to support\nblockchain configuration. Such as `ChainHistoryMode`, which clearly extends\nbeyond just caching concerns.\n\nAdditionally, adding new parameters to the blockchain constructor has\nbecome increasingly complicated, since it\u2019s initialized across multiple\nplaces in the codebase. A natural solution is to consolidate these arguments \ninto a dedicated configuration struct.\n\nAs a result, the existing `CacheConfig` has been redefined as `BlockChainConfig`.\nSome parameters, such as `VmConfig`, `TxLookupLimit`, and `ChainOverrides`\nhave been moved into `BlockChainConfig`. Besides, a few fields in `BlockChainConfig`\nwere renamed, specifically:\n\n- `TrieCleanNoPrefetch` -> `NoPrefetch`\n- `TrieDirtyDisabled` -> `ArchiveMode`\n\nNotably, this change won't affect the command line flags or the toml\nconfiguration file. It's just an internal refactoring and fully backward-compatible.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-06-19T09:43:24Z",
                "message": "core: simplify effectiveTip calculation (#31771)\n\nSince we have the effective gas price in the message, we can compute tip by\nsimply subtracting the basefee. No need to recompute the effective price.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-06-19T02:05:32Z",
                "message": "core/rawdb: don't decode the full block body in ReadTransaction (#32027)\n\nReading a single transaction out of a block shouldn't need decoding the\nentire body\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2025-06-19T01:44:39Z",
                "message": "eth,core: terminate the downloader immediately when shutdown signal is received (#32062)\n\nCloses https://github.com/ethereum/go-ethereum/issues/32058"
            }
        ],
        "2025-06-18": [
            {
                "date": "2025-06-18T12:17:30Z",
                "message": "crypto/bn256/cloudflare: pull in upstream fix for R27 and R29 usage (#32057)\n\nPulls in https://github.com/cloudflare/bn256/pull/48 to remove usage of\nR27 and R29 [which are reserved](https://go.dev/doc/asm#arm64)."
            },
            {
                "date": "2025-06-18T07:29:14Z",
                "message": "all: reuse the global hash buffer (#31839)\n\nAs https://github.com/ethereum/go-ethereum/pull/31769 defined a global\nhash pool, so we can reuse it, and also remove the unnecessary\nKeccakState buffering\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2025-06-18T07:06:49Z",
                "message": "eth/catalyst: fetch header on forkchoiceUpdated (#31928)\n\ncloses https://github.com/ethereum/go-ethereum/issues/31254\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2025-06-17": [
            {
                "date": "2025-06-17T21:42:06Z",
                "message": "build: upgrade -dlgo version to Go 1.24.4 (#31978)"
            },
            {
                "date": "2025-06-17T21:02:36Z",
                "message": "tests/fuzzers: added bn marshaling fuzzers (#32053)\n\nAdds marshaling fuzzing for G1 and G2 to oss-fuzz. \n\nAlso aligns the behavior of the google library to that of gnark and\ncloudflare, which only ever read the first 64 / 128 bytes of the input,\nregardless of how long the input is"
            },
            {
                "date": "2025-06-17T19:58:31Z",
                "message": "crypto/bn256: fix gnark deserialisation (#32055)\n\nfixes the gnark deserialisation\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-06-17T12:59:37Z",
                "message": "go.mod: bump golang.org/x/net from 0.36.0 to 0.38.0 (#31658)"
            },
            {
                "date": "2025-06-17T12:44:51Z",
                "message": "accounts: fix data race when closing manager (#31982)\n\nFixes a data race on the `wallets` slice when closing account Manager.\n\nAt the moment, there is a data race between a go-routine calling the\nManager's `Close` function and the background go-routine handling most\noperations on the `Manager`. The `Manager`'s `wallets` field is accessed\nwithout proper synchronization.\n\nBy moving the closing of wallets from the `Close()` function into the\nbackground thread, this issue can be resolved."
            },
            {
                "date": "2025-06-17T12:23:45Z",
                "message": "ethdb/pebble: lower the compaction debt (#31988)\n\nThis pull request reduces the threshold for triggering compaction at\nlevel0, leading to less compaction debt. This change is helpful in the\ncase of heavy write-load, mitigating the case of heavy write stalls\ncaused by compaction.\n\ncloses https://github.com/ethereum/go-ethereum/issues/31830"
            },
            {
                "date": "2025-06-17T12:13:03Z",
                "message": "fix: skip storage entries with missing preimage keys (#32051)\n\nWhen `GetKey`  is called, a missing preimage can cause the function to return a `nil`\nkey. This, in turn, makes `account.Storage` persist an incorrect value."
            }
        ],
        "2025-06-16": [
            {
                "date": "2025-06-16T22:42:07Z",
                "message": "Revert \"crypto/bn256: default to gnark (#32024)\"\n\nThis reverts commit e0cf89ecfaa29b40dc548eec16e071242b40eedd."
            },
            {
                "date": "2025-06-16T16:44:18Z",
                "message": "node: fix data race on httpConfig.prefix (#32047)\n\nThis fixes a data race when accessing the `httpConfig.prefix` field.\nThis field can be modified while the server is running through\n`enableRPC`. The fix is storing the prefix in the handler, which is\naccessed through the atomic pointer.\n\nalternative to #32035\nfixes https://github.com/ethereum/go-ethereum/issues/32019"
            },
            {
                "date": "2025-06-16T13:34:48Z",
                "message": "tracers/prestate: always remove empty accounts from pre-state (#31427)\n\nThe prestateTracer had the intention of excluding accounts that were\nempty prior to execution from the prestate. This was being done only for\ncreated contracts. This PR makes it so all such empty accounts are\nexcluded. This behavior is configurable using the `includeEmpty: true`\nflag introduced in #31855.\n\n---------\n\nSigned-off-by: Ignacio Hagopian <jsign.uy@gmail.com>\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            },
            {
                "date": "2025-06-16T11:23:10Z",
                "message": "go.mod: update gnark-crypto to v0.18.0 (#32034)\n\nmainly to pull in https://github.com/Consensys/gnark-crypto/pull/693"
            },
            {
                "date": "2025-06-16T11:10:14Z",
                "message": "crypto/bn256: default to gnark (#32024)"
            },
            {
                "date": "2025-06-16T10:31:09Z",
                "message": "eth/tracers: flag for empty acounts in prestateTracer (#31855)\n\nThis PR introduces a flag that enables returning of newly created state\nobjects in the prestateTracer.\n\n**Rationale**\nHaving this information is useful because local execution can more\neasily distinguish between newly created objects and system contracts.\n\n---------\n\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            }
        ],
        "2025-06-13": [
            {
                "date": "2025-06-13T14:16:49Z",
                "message": "Makefile: add make evm (#32029)"
            },
            {
                "date": "2025-06-13T12:01:50Z",
                "message": "core/vm: implement updates to modexp gas cost changes in EIP-7883 (#32015)\n\nImplements the updated gas cost changes introduced in\nhttps://github.com/ethereum/EIPs/commit/5cdd75157d78522bde8dc58977717c14cd7f2789"
            },
            {
                "date": "2025-06-13T11:47:26Z",
                "message": "metrics: remove use of reflect in metrics registration code (#31962)\n\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
            },
            {
                "date": "2025-06-13T07:04:24Z",
                "message": "trie: no need to store preimage if not enabled (#32012)\n\nAs the preimage will only be stored if `t.preimages != nil`, so no need\nto save them into local cache if not enabled. This will reduce the memory \nwasted to copy the bytes\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
            }
        ],
        "2025-06-12": [
            {
                "date": "2025-06-12T12:30:54Z",
                "message": "metrics: add chain/gas for cumulative gas usage (#32004)\n\nThis is a followup to #31753.\n\nA cumulative counter is more useful when we need to measure / aggregate\nthe metric over a longer period of time. It also means we won't miss data,\ne.g. our prometheus scrapes every 30 seconds, and so may miss a transient \nspike in the pre-aggregated mgas/s.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2025-06-12T09:53:16Z",
                "message": "crypto/kzg4844: remove kzg initialization (#32017)\n\nThis fixes a regression in the state tests where we always initialized\nthe KZG library. This was added to test some stuff in #31791"
            }
        ],
        "2025-06-11": [
            {
                "date": "2025-06-11T12:50:46Z",
                "message": "core/vm, cmd/evm: remove EOF (#32000)\n\nWith EOF removed from the Osaka fork, and no longer being tested, the\nimplementation will now just be bitrotting. I'm opting to remove it so\nit doesn't get in the way of other changes."
            }
        ],
        "2025-06-10": [
            {
                "date": "2025-06-10T09:52:02Z",
                "message": "eth/filters: add timestamp to derived logs (#31887)\n\nThe block timestamp field is now added to the logs returned\nby eth_getLogs."
            }
        ],
        "2025-06-09": [
            {
                "date": "2025-06-09T14:44:42Z",
                "message": "params: enable osaka fork in MergedTestChainConfig (#31993)"
            },
            {
                "date": "2025-06-09T14:36:24Z",
                "message": "cmd/workload: introduce transaction-trace test (#31288)\n\nThis pull request introduces a new test suite in workload framework, for\ntransaction tracing.\n\n**test generation**\n`go run . tracegen --trace-tests trace-test.json http://host:8545`\n\nand you can choose to store the trace result in a specific folder\n`go run . tracegen --trace-tests trace-test.json --trace-output\n./trace-result http://host:8545`\n\n**test run**\n`./workload test -run Trace/Transaction --trace-invalid ./trace-invalid\nhttp://host:8545`\n\nThe mismatched trace result will be saved in the specific folder for\nfurther investigation."
            },
            {
                "date": "2025-06-09T13:16:06Z",
                "message": "eth: initialize blobTxPool (#31992)\n\nFixes a regression introduced in #31791, see\nhttps://github.com/ethereum/go-ethereum/pull/31791#issuecomment-2955554641"
            },
            {
                "date": "2025-06-09T10:01:38Z",
                "message": "ethdb/pebble: adjust the number of memory tables (#31970)\n\nThis pull request adjusts the number of allowed memory tables in Pebble.\n\nPebble allows configuring an arbitrary number of memory tables to hold \nunflushed data. When the current memtable becomes full, it is scheduled \nfor flushing, and a new memtable is allocated to accept subsequent\nwrites. However, if too many memtables accumulate and are waiting to be \nflushed, subsequent writes will stall.\n\nOriginally, only two memtables were configured, each with a size of 512\nMB for Ethereum mainnet. While this setup works well under normal\nconditions, it becomes problematic under heavy write loads. In such scenarios,\nflushing is only triggered when more than 512 MB of data is pending, which may\nnot be responsive enough. Even worse, if compactions are running\nconcurrently, flushing memtables can become slow due to the heavy IO \noverhead, leading to write stalls across the system.\n\nThis pull request tries to mitigate the performance degradation by having \nmore memory tables but with a smaller size. In this case, the pending\nwrites can be flushed more smoothly and responsively."
            },
            {
                "date": "2025-06-09T09:34:24Z",
                "message": "eth/catalyst: implement getBlobsV2 (#31791)\n\nImplements `engine_getBlobsV2` which is needed for PeerDAS.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2025-06-05": [
            {
                "date": "2025-06-05T14:47:49Z",
                "message": "core/vm: implement EIP 7883 - ModExp Gas Cost Increase (#31606)\n\nhttps://eips.ethereum.org/EIPS/eip-7883\n\n---------\n\nCo-authored-by: MariusVanDerWijden <m.vanderwijden@live.de>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-06-05T14:19:47Z",
                "message": "cmd/geth: fix era1 download location to match store (#31951)\n\nThis changes the era1 downloader to place the files into the correct\nlocation where geth will actually use them. Also adds integration with\nthe new --datadir.era flag."
            },
            {
                "date": "2025-06-05T10:14:35Z",
                "message": "eth, p2p: improve dial speed by pre-fetching dial candidates (#31944)\n\nThis PR improves the speed of Disc/v4 and Disc/v5 based discovery by\nadding a prefetch buffer to discovery sources, eliminating slowdowns\ndue to timeouts and rate mismatch between the two processes.\n\nSince we now want to filter the discv4 nodes iterator, it is being removed\nfrom the default discovery mix in p2p.Server. To keep backwards-compatibility,\nthe default unfiltered discovery iterator will be utilized by the server when\nno protocol-specific discovery is configured.\n\n---------\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2025-06-04": [
            {
                "date": "2025-06-04T18:52:27Z",
                "message": "crypto/kzg4844: avoid copying blobs for marshaling (#31911)\n\nLLVM is not able to handle large arrays on stack"
            },
            {
                "date": "2025-06-04T16:19:11Z",
                "message": "core/vm: implement EIP 7823 - Set upper bounds for MODEXP (#31818)"
            },
            {
                "date": "2025-06-04T14:07:16Z",
                "message": "eth/downloader: fix missing receipt (#31952)\n\nThis fixes a regression introduced by #29158 where receipts of empty blocks\nwere stored into the database as an empty byte array, instead of an RLP empty list.\n\nFixes #31938\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-06-04T13:07:15Z",
                "message": "cmd/utils: update SepoliaFlag usage (#31961)\n\nThe Sepolia testnet has transitioned to pos following The Merge."
            },
            {
                "date": "2025-06-04T12:47:01Z",
                "message": "accounts/abi:  error when packing negative values in unsigned types (#31790)\n\nThis is an alternative approach to\nhttps://github.com/ethereum/go-ethereum/pull/31607 , that doesn't break\nbackwards-compatibility with abigen.\n\nNote that this does change the behavior of `Argument.Pack`: previously,\npacking negative values for a `uint` parameter would cause them to be\nrepresented in signed binary representation via two's complement. Now,\nit will fail explicitly in this case.\n\nHowever, I don't see a reason to support this functionality. The ABI\nalready explicitly supports signed integers. There's no reason that a\nsmart contract author would choose to store signed values in a `uint`\nafaict.\n\n---------\n\nCo-authored-by: MariusVanDerWijden <m.vanderwijden@live.de>"
            },
            {
                "date": "2025-06-04T04:18:20Z",
                "message": "eth/catalyst: use atomics instead of locks (#31955)"
            }
        ],
        "2025-06-03": [
            {
                "date": "2025-06-03T22:19:23Z",
                "message": "metrics: disable CPU metrics on tinygo (#31953)"
            },
            {
                "date": "2025-06-03T15:13:35Z",
                "message": "eth/filters: fix pruned history error for genesis block (#31941)\n\nFixes an issue where querying logs for block ranges starting from 0 would fail with an irrelevant\nerror on a pruned node. Now the correct \"history is pruned\" error will be returned."
            },
            {
                "date": "2025-06-03T12:36:00Z",
                "message": "eth/catalyst: change warning to error for 'too many bad block attempts' (#31940)\n\nThis situation was failing quietly for me recently when I had a partial\ndata corruption issue. Changing the log level to Error would increase\nvisibility for me."
            },
            {
                "date": "2025-06-03T10:54:13Z",
                "message": "core/filtermaps: remove filter base row cache, add group read (#31852)\n\nThis PR changes the database access of the base part of filter rows that\nare stored in groups of 32 adjacent maps for improved database storage\nsize and data access efficiency.\nBefore this grouped storage was introduced, filter rows were not cached\nbecause the access pattern of either the index rendering or the search\ndoes not really benefit from caching. Also no mutex was necessary for\nfilter row access. Storing adjacent rows in groups complicated the\nsituation as a search typically required reading all or most of adjacent\nrows of a group, so in order to implement the single row read operation\nwithout having to read the entire group up to 32 times, a cache for the\nbase row groups was added. This also introduced data race issues for\nconcurrenct read/write in the same group which was avoided by locking\nthe `indexLock` mutex. Unfortunately this also led to slowed down or\ntemporarily blocked search operations when indexing was in progress.\nThis PR returns to the original concept of uncached, no-mutex filter map\naccess by increasing read efficiency in a better way; similiarly to\nwrite operations that already operate on groups of filter maps, now\n`getFilterMapRow` is also replaced by `getFilterMapRows` that accepts a\nsingle `rowIndex` and a list of `mapIndices`. It slightly complicates\n`singleMatcherInstance.getMatchesForLayer` which now has to collect\ngroups of map indices accessed in the same row, but in exchange it\nguarantees maximum read efficiency while avoiding read/write mutex\ninterference.\n\nNote: a follow-up refactoring is WIP that further changes the database\naccess scheme by prodiving an immutable index view to the matcher, makes\nthe whole indexer more straightforward with no callbacks, and entirely\nremoves the concept of matcher syncing with `validBlocks` and the\nresulting multiple retry logic in `eth/filters/filter.go`. This might\ntake a bit longer to finish though and in the meantime this change could\nhopefully already solve the blocked request issues."
            },
            {
                "date": "2025-06-03T08:47:38Z",
                "message": "core/rawdb: integrate eradb backend for RPC (#31604)\n\nThis implements a backing store for chain history based on era1 files.\nThe new store is integrated with the freezer. Queries for blocks and receipts\nbelow the current freezer tail are handled by the era store.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            }
        ],
        "2025-06-02": [
            {
                "date": "2025-06-02T14:11:19Z",
                "message": "eth: return null for not-found in BlockByNumberOrHash (#31949)\n\nThis changes the API backend to return null for not-found blocks. This behavior\nis required by the RPC When `BlockByNumberOrHash` always returned an error\nfor this case ever since being added in https://github.com/ethereum/go-ethereum/pull/19491.\nThe backend method has a couple of call sites, and all of them handle a `nil`\nblock result because `BlockByNumber` returns `nil` for not-found.\n\nThe only case where this makes a real difference is for `eth_getBlockReceipts`,\nwhich was changed in #31361 to actually forward the error from `BlockByNumberOrHash`\nto the caller."
            },
            {
                "date": "2025-06-02T11:00:58Z",
                "message": ".gitea: modify scheduled workflow times (#31946)"
            }
        ],
        "2025-05-29": [
            {
                "date": "2025-05-29T10:26:50Z",
                "message": "go.mod: bump flock package version (#31909)\n\nThe newer version has a stub implementation for unsupported targets,\nwhich allows us to compile to more exotic targets."
            },
            {
                "date": "2025-05-29T10:23:38Z",
                "message": ".travis.yml: remove master branch push builds (#31927)\n\nRelease artefact building has been migrated to another system (Gitea),\nso we can finally stop using Travis CI. However, in order to have a\nfail-safe for the release, I'm leaving the config in and it will still\ntrigger builds on Travis for tagged releases. That way, if our new\nsystem fails to work for the next release, we will still have the option\nof using Travis."
            },
            {
                "date": "2025-05-29T04:20:39Z",
                "message": "cmd/geth, cmd/utils: log prefunded account/key in ephemeral development mode (#31898)\n\nThis PR modifies the disclaimer/banner that is printed when starting up\nGeth in dev mode:\n* if the client is spun up in ephemeral dev mode with a keystore\noverride, the address of the first (prefunded) account is printed.\n* if the client is spun up in ephemeral mode without a keystore\noverride, the genesis allocation contains a single static prefunded EOA\naccount. It's address and private key are logged.\n* the banner is printed at the end of client initialization to make it\nmore prominent. Previously, it was logged towards the beginning of\nclient initialization and subsequent logging from startup filled the\nterminal, pushing it out of view of the user.\n\nOther change is that we now use a static prefunded dev account instead\nof generating a random one when instantiating a new dev mode chain.\n\nThis is an example of what the banner looks like:\n```\nWARN [05-28|23:05:16.475] You are running Geth in --dev mode. Please note the following:\nWARN [05-28|23:05:16.475] \nWARN [05-28|23:05:16.475]   1. This mode is only intended for fast, iterative development without assumptions on\nWARN [05-28|23:05:16.475]      security or persistence.\nWARN [05-28|23:05:16.475]   2. The database is created in memory unless specified otherwise. Therefore, shutting down\nWARN [05-28|23:05:16.475]      your computer or losing power will wipe your entire block data and chain state for\nWARN [05-28|23:05:16.475]      your dev environment.\nWARN [05-28|23:05:16.475]   3. A random, pre-allocated developer account will be available and unlocked as\nWARN [05-28|23:05:16.475]      eth.coinbase, which can be used for testing. The random dev account is temporary,\nWARN [05-28|23:05:16.475]      stored on a ramdisk, and will be lost if your machine is restarted.\nWARN [05-28|23:05:16.475]   4. Mining is enabled by default. However, the client will only seal blocks if transactions\nWARN [05-28|23:05:16.475]      are pending in the mempool. The miner's minimum accepted gas price is 1.\nWARN [05-28|23:05:16.475]   5. Networking is disabled; there is no listen-address, the maximum number of peers is set\nWARN [05-28|23:05:16.475]      to 0, and discovery is disabled.\nWARN [05-28|23:05:16.475] \nWARN [05-28|23:05:16.475] \nWARN [05-28|23:05:16.475]  Running in ephemeral mode.  The following account has been prefunded in the genesis:\nWARN [05-28|23:05:16.475] \nWARN [05-28|23:05:16.475]        Account\nWARN [05-28|23:05:16.475]        ------------------\nWARN [05-28|23:05:16.475]        0x71562b71999873db5b286df957af199ec94617f7 (10^49 ETH)\nWARN [05-28|23:05:16.475]  \nWARN [05-28|23:05:16.475]        Private Key\nWARN [05-28|23:05:16.475]        ------------------\nWARN [05-28|23:05:16.475]        0xb71c71a67e1177ad4e901695e1b4b9ee17ae16c6668d313eac2f96dbcda3f291\nWARN [05-28|23:05:16.475] \n```\n\ncloses #31796\n\n---------\n\nCo-authored-by: jwasinger <j-wasinger@hotmail.com>"
            }
        ],
        "2025-05-28": [
            {
                "date": "2025-05-28T21:19:13Z",
                "message": ".gitea: run release build on tag push (#31924)"
            },
            {
                "date": "2025-05-28T21:16:51Z",
                "message": ".gitea: fix arm64 build (#31923)"
            },
            {
                "date": "2025-05-28T20:57:58Z",
                "message": ".gitea: fix archive uploads and run PPA upload on release push (#31922)"
            },
            {
                "date": "2025-05-28T20:40:26Z",
                "message": ".gitea: fix apt update (#31921)"
            },
            {
                "date": "2025-05-28T18:14:48Z",
                "message": ".gitea: fix secrets passing (#31920)"
            },
            {
                "date": "2025-05-28T17:01:33Z",
                "message": ".gitea: port more builds from travis and fix PPA env (#31919)"
            },
            {
                "date": "2025-05-28T16:24:43Z",
                "message": ".gitea: add env to scheduled builds (#31918)"
            },
            {
                "date": "2025-05-28T15:51:47Z",
                "message": ".gitea: adjust cron schedule (#31915)\n\nThis should make the scheduled build actually run."
            },
            {
                "date": "2025-05-28T11:31:42Z",
                "message": "triedb/pathdb: introduce lookup structure to optimize state access (#30971)\n\nThis pull request introduces a mechanism to improve state lookup\nefficiency in pathdb by maintaining a lookup structure that eliminates\nunnecessary iteration over diff layers.\n\nThe core idea is to track a mutation history for each dirty state entry\nresiding in the diff layers. This history records the state roots of all layers\nin which the entry was modified, sorted from oldest to newest.\n\nDuring state lookup, this mutation history is queried to find the most\nrecent layer whose state root either matches the target root or is a\ndescendant of it. This allows us to quickly identify the layer containing\nthe relevant data, avoiding the need to iterate through all diff layers from\ntop to bottom.\n\nBesides, the overhead for state lookup is constant, no matter how many\ndiff layers are retained in the pathdb, which unlocks the potential to hold\nmore diff layers.\n\nOf course, maintaining this lookup structure introduces some overhead.\nFor each state transition, we need to:\n(a) update the mutation records for the modified state entries, and\n(b) remove stale mutation records associated with outdated layers.\n\nOn our benchmark machine, it will introduce around 1ms overhead which is\nacceptable."
            }
        ],
        "2025-05-26": [
            {
                "date": "2025-05-26T08:45:41Z",
                "message": "core/vm: fix bls benchmark (#31896)\n\nFixes #31893"
            }
        ],
        "2025-05-23": [
            {
                "date": "2025-05-23T15:50:25Z",
                "message": "core: remove unused queued import status (#31870)"
            },
            {
                "date": "2025-05-23T15:48:15Z",
                "message": "internal/build: add support for Github Actions CI environment (#31891)\n\nThis adds support for the Github actions environment in the build tool.\nInformation from environment variables, like the build number and\nbranch/tag name, is used to make decisions about uploads and package\nfilenames."
            },
            {
                "date": "2025-05-23T14:21:08Z",
                "message": ".gitea: add cron build script (#31890)\n\nAlso swaps the push build scripts and adds environment output."
            },
            {
                "date": "2025-05-23T11:10:10Z",
                "message": "core/state: fix copy of storageChange (#31874)\n\nMissing field origvalue when copying storageChange."
            },
            {
                "date": "2025-05-23T10:44:30Z",
                "message": ".gitea: update release build actions (#31886)\n\nTrying to make the docker build work."
            },
            {
                "date": "2025-05-23T10:33:43Z",
                "message": ".gitea: add initial workflow file (#31885)"
            },
            {
                "date": "2025-05-23T09:29:01Z",
                "message": "consensus: remove clique RPC APIs (#31875)"
            },
            {
                "date": "2025-05-23T09:14:40Z",
                "message": "crypto: use pure Go signature implementation in tinygo (#31878)\n\ntinygo is having problems compiling the C implementation"
            },
            {
                "date": "2025-05-23T07:21:03Z",
                "message": "internal/era: update link to documentation (#31879)\n\nUpdated reference URL in accumulator.go comment to point to the correct\nlocation of the historical-hashes-accumulator documentation in the\nEthereum portal network specs"
            }
        ],
        "2025-05-22": [
            {
                "date": "2025-05-22T21:49:11Z",
                "message": "build: Update EEST to v4.5.0 (#31880)\n\nWe deleted outdated pectra-devnet-6@v1.0.0 release by mistake, so this\nPR updates the referenced EEST release to the correct latest version.\n\n@s1na I removed the TODO comment because I think this solves it, unless\nit meant something else.\n\n---------\n\nCo-authored-by: MariusVanDerWijden <m.vanderwijden@live.de>"
            },
            {
                "date": "2025-05-22T09:30:20Z",
                "message": "core/txpool: add explicit max blob count limit (#31837)\n\nFixes #31792.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            }
        ],
        "2025-05-21": [
            {
                "date": "2025-05-21T12:20:36Z",
                "message": "eth/tracers: Improve test coverage for toWord (#31846)"
            },
            {
                "date": "2025-05-21T09:53:29Z",
                "message": "eth/catalyst: move witness methods from engine api (#31867)\n\nNo functional changes, just moves the witness methods into its own file"
            }
        ],
        "2025-05-20": [
            {
                "date": "2025-05-20T16:31:01Z",
                "message": "core/state: reduce allocation in updateStateObject (#31861)\n\nOptimize updateStateObject to reduce an allocation."
            },
            {
                "date": "2025-05-20T13:38:33Z",
                "message": "eth/tracers/native: add erc7562 tracer (#31006)\n\nThis PR introduces a new native tracer for AA bundlers. Bundlers participating in the alternative\nmempool will need to validate userops. This tracer will return sufficient information for them to\ndecide whether griefing is possible. Resolves #30546\n\n---------\n\nCo-authored-by: Sina M <1591639+s1na@users.noreply.github.com>"
            },
            {
                "date": "2025-05-20T12:57:01Z",
                "message": "core/txpool/legacypool: fix flaky test TestAllowedTxSize #30975 (#31836)\n\nSome tests involving transactions near the txMaxSize limit were flaky.\nThis was due to ECDSA signatures occasionally having leading zeros,\nwhich are omitted during RLP encoding \u2014 making the final transaction\nsize 1 byte smaller than expected.\n\nTo address this, a new helper function pricedDataTransactionWithFixedSignature\nwas added. It ensures both r and s are exactly 32 bytes (i.e., no leading zeros),\nproducing transactions with deterministic size."
            },
            {
                "date": "2025-05-20T08:04:37Z",
                "message": "README: update broken JSON-RPC API documentation link (#31860)\n\nI've updated the broken link to point to the current official Ethereum\nJSON-RPC API documentation at\nhttps://ethereum.org/en/developers/docs/apis/json-rpc/. This is the\ncorrect and up-to-date location for the Ethereum Execution Layer APIs\ndocumentation. The link should now work properly."
            },
            {
                "date": "2025-05-20T07:58:00Z",
                "message": "internal/reexec: fix broken link to Docker/Moby in comment (#31859)\n\nHey team\u2014noticed a dead link, replaced it with a working URL\n\nhttps://github.com/moby/moby/blob/master/pkg/reexec/reexec.go - old link\n\nhttps://github.com/moby/moby/blob/master/pkg/reexec/reexec_deprecated.go\n- new link"
            }
        ],
        "2025-05-19": [
            {
                "date": "2025-05-19T13:55:17Z",
                "message": "internal: remove eth_{compile,getWork,submitWork} from console (#31856)\n\nThe `compile` and `eth_getWork` `eth_submitWork` apis were not available\nanymore, so try to remove them"
            },
            {
                "date": "2025-05-19T10:56:12Z",
                "message": "cmd/utils: remove duplicate code for influxDB tags (#31854)\n\nremove duplicate code\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>"
            },
            {
                "date": "2025-05-19T02:03:59Z",
                "message": "trie: use common.Hash as the key in secKeyCache map (#31786)"
            },
            {
                "date": "2025-05-19T01:59:35Z",
                "message": "core: don't emit the warning of log indexing if the db was not initialized (#31845)"
            }
        ],
        "2025-05-18": [
            {
                "date": "2025-05-18T08:25:16Z",
                "message": "cmd/devp2p/internal/ethtest: tests for BlockRangeUpdate (#31843)\n\nI added a test for BlockRangeUpdate in #29158 but forgot to enable it.\nHere I'm adding two more tests for it. Also applied a small refactoring\nto combine calls to `dial()` and `peer()` into a single function, since\nthese two calls are duplicated in each test."
            }
        ],
        "2025-05-16": [
            {
                "date": "2025-05-16T17:35:17Z",
                "message": "eth: use headers in debug.GetModifiedAccountsBy* (#31765)\n\nSmall optimization in debug_getModifiedAccountsBy* to avoid fetching block body."
            },
            {
                "date": "2025-05-16T15:10:47Z",
                "message": "eth/protocols/eth: implement eth/69 (#29158)\n\nThis PR implements eth/69. This protocol version drops the bloom filter\nfrom receipts messages, reducing the amount of data needed for a sync\nby ~530GB (2.3B txs * 256 byte) uncompressed. Compressed this will\nbe reduced to ~100GB\n\nThe new version also changes the Status message and introduces the\nBlockRangeUpdate message to relay information about the available history\nrange.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-05-16T10:29:38Z",
                "message": "core, triedb/pathdb: final integration (snapshot integration pt 5) (#30661)\n\nIn this pull request, snapshot generation in pathdb has been ported from \nthe legacy state snapshot implementation. Additionally, when running in \npath mode, legacy state snapshot data is now managed by the pathdb\nbased snapshot logic.\n\nNote: Existing snapshot data will be re-generated, regardless of whether \nit was previously fully constructed."
            },
            {
                "date": "2025-05-16T08:20:36Z",
                "message": "cmd/utils: remove deprecated LES flags (#31838)\n\nThey were not widely used in users setups."
            }
        ],
        "2025-05-15": [
            {
                "date": "2025-05-15T20:54:18Z",
                "message": "build: upgrade -dlgo version to Go 1.24.3 (#31774)\n\nNew security fix: https://groups.google.com/g/golang-announce/c/UZoIkUT367A"
            },
            {
                "date": "2025-05-15T20:53:26Z",
                "message": "cmd/geth, internal/era/eradl: add era1 downloader tool (#31823)\n\nThis adds a geth subcommand for downloading era1 files and placing them into\nthe correct location. The tool can be used even while geth is already running\non the datadir. Downloads are checked against a hard-coded list of checksums\nfor mainnet and sepolia.\n\n```\n./geth download-era --server $SERVER --block 333333\n./geth download-era --server $SERVER --block 333333-444444\n./geth download-era --server $SERVER --epoch 0-10\n./geth download-era --server $SERVER --all\n```\n\nThe implementation reuses the file downloader we already had for\nfetching build tools. I've done some refactoring on it to make sure it\ncan support the new use case, and there are some changes to the build\nhere as well."
            },
            {
                "date": "2025-05-15T19:55:38Z",
                "message": "AUTHORS, .mailmap: update name and email attribution (#31624)"
            },
            {
                "date": "2025-05-15T12:43:52Z",
                "message": "core/state, core/vm: update stateless gas costs to follow the verkle-gen-7 testnet (#31014)\n\nAdding values to the witness introduces a new class of issues for\ncomputing gas: if there is not enough gas to cover adding an item to the\nwitness, then the item should not be added to the witness.\n\nThe problem happens when several items are added together, and that\nprocess runs out of gas. The witness gas computation needs a way to\nsignal that not enough gas was provided. These values can not be\nhardcoded, however, as they are context dependent, i.e. two calls to the\nsame function with the same parameters can give two different results.\n\nThe approach is to return both the gas that was actually consumed, and\nthe gas that was necessary. If the values don't match, then a witness\nupdate OOG'd. The caller should then charge the `consumed` value\n(remaining gas will be 0) and error out.\n\nWhy not return a boolean instead of the wanted value? Because when\nseveral items are touched, we want to distinguish which item lacked gas.\n\n---------\n\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>"
            },
            {
                "date": "2025-05-15T12:17:58Z",
                "message": "p2p/enode: add support for naming iterator sources (#31779)\n\nThis adds support for naming the source iterators of FairMix, like so:\n\n  mix.AddSource(enode.WithSourceName(\"mySource\", iter))\n\nThe source that produced the latest node is returned by the new NodeSource method."
            },
            {
                "date": "2025-05-15T07:32:20Z",
                "message": "cmd/utils: always record preimages in dev mode (#31821)\n\nFix a todo: force-enable this in --dev mode\n\n---------\n\nCo-authored-by: jwasinger <j-wasinger@hotmail.com>"
            }
        ],
        "2025-05-14": [
            {
                "date": "2025-05-14T14:50:02Z",
                "message": "eth/catalyst: refactor engine api checks (#31182)\n\nThis PR contains three refactors:\n- refactor the latest fork check that we use quite extensively \n- refactor the nil checks in NewPayloads\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            },
            {
                "date": "2025-05-14T01:26:08Z",
                "message": "core: use unix time to check fork readiness (#31800)"
            }
        ],
        "2025-05-13": [
            {
                "date": "2025-05-13T13:28:16Z",
                "message": "eth: fix returned blockContext for empty blocks in stateAtTransaction (#31768)\n\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            },
            {
                "date": "2025-05-13T12:11:27Z",
                "message": "crypto/kzg4844: use package github.com/crate-crypto/go-eth-kzg (#31806)\n\nI saw in https://github.com/ethereum/go-ethereum/pull/31378 introduced\ngithub.com/crate-crypto/go-eth-kzg to calculate the kzg hash, and\ngithub.com/crate-crypto/go-kzg-4844 was only used in the test files, so\npropose to drop it with go-eth-kzg instead"
            }
        ],
        "2025-05-12": [
            {
                "date": "2025-05-12T09:31:48Z",
                "message": "accounts/abi/abigen: remove unnecessary test files (#31804)\n\nfix #31793: resolve conflict markers in structs-abi.go.txt"
            },
            {
                "date": "2025-05-12T07:41:24Z",
                "message": "core/state: fix incorrect description of function behavior (#31809)"
            },
            {
                "date": "2025-05-12T06:37:01Z",
                "message": "ethdb/pebble: expose stall counter of pebble (#31782)\n\nThis pull request adds a more Pebble metrics, tracking the amount of\nwrite stalls with specific reasons"
            }
        ],
        "2025-05-10": [
            {
                "date": "2025-05-10T00:27:27Z",
                "message": "metrics: add chain/mgasps to track gas usage rate (#31753)\n\nThis adds a metric called `chain/mgasps`, which records how many million\ngas per second are being used during block insertion.\n\nThe value is calculated as `usedGas * 1000 / elapsed`, and it's updated\nin the `insertStats.report` method. Also cleaned up the log output to\nreuse the same value instead of recalculating it.\n\nUseful for monitoring block processing throughput.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2025-05-09": [
            {
                "date": "2025-05-09T10:56:00Z",
                "message": "core/types: reduce allocations in tx.EffectiveGasTip (#31598)\n\nThis PR introduces an allocation-free version of the\nTransaction.EffectiveGasTip method to improve performance by reducing\nmemory allocations.\n\n## Changes\n- Added a new `EffectiveGasTipInto` method that accepts a destination\nparameter to avoid memory allocations\n- Refactored the existing `EffectiveGasTip` method to use the new\nallocation-free implementation\n- Updated related methods (`EffectiveGasTipValue`, `EffectiveGasTipCmp`,\n`EffectiveGasTipIntCmp`) to use the allocation-free approach\n- Added tests and benchmarks to verify correctness and measure\nperformance improvements\n\n## Motivation\nIn high-transaction-volume environments, the `EffectiveGasTip` method is\ncalled frequently. Reducing memory allocations in this method decreases\ngarbage collection pressure and improves overall system performance.\n\n## Benchmark Results\n\nAs-Is\nBenchmarkEffectiveGasTip/Original-10 42089140 27.45 ns/op 8 B/op 1\nallocs/op\n\nTo-Be\nBenchmarkEffectiveGasTip/IntoMethod-10 72353263 16.73 ns/op 0 B/op 0\nallocs/op\n\n\n## Summary of Improvements\n- **Performance**: ~39% faster execution (27.45 ns/op \u2192 16.73 ns/op)\n- **Memory**: Eliminated all allocations (8 B/op \u2192 0 B/op)\n- **Allocation count**: Reduced from 1 to 0 allocations per operation\n\nThis optimization follows the same pattern successfully applied to other\nmethods in the codebase, maintaining API compatibility while improving\nperformance.\n\n## Safety & Compatibility\nThis optimization has no side effects or adverse impacts because:\n- It maintains functional equivalence as confirmed by comprehensive\ntests\n- It preserves API compatibility with existing callers\n- It follows clear memory ownership patterns with the destination\nparameter\n- It maintains thread safety by only modifying the caller-provided\ndestination parameter\n\nThis optimization follows the same pattern successfully applied to other\nmethods in the codebase, providing better performance without\ncompromising stability or correctness.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            },
            {
                "date": "2025-05-09T05:52:40Z",
                "message": "all: create global hasher pool (#31769)\n\nThis PR creates a global hasher pool that can be used by all packages.\nIt also removes a bunch of the package local pools.\n\nIt also updates a few locations to use available hashers or the global\nhashing pool to reduce allocations all over the codebase.\nThis change should reduce global allocation count by ~1%\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2025-05-08": [
            {
                "date": "2025-05-08T14:28:16Z",
                "message": "core: implement in-block prefetcher (#31557)\n\nThis pull request enhances the block prefetcher by executing transactions \nin parallel to warm the cache alongside the main block processor.\n\nUnlike the original prefetcher, which only executes the next block and\nis limited to chain syncing, the new implementation can be applied to any \nblock. This makes it useful not only during chain sync but also for regular \nblock insertion after the initial sync.\n\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
            },
            {
                "date": "2025-05-08T14:27:01Z",
                "message": "core, triedb/pathdb: bail out error if write state history fails (#31781)\n\nThis PR fixes an issue that could lead to data corruption.\n\nWriting the state history may fail due to insufficient disk space or\nother potential errors. With this change, the entire state insertion \nwill be aborted instead of silently ignoring the error.\n\nWithout this fix, state transitions would continue while the associated\nstate history is lost. After a restart, the resulting gap would be detected, \nmaking recovery impossible."
            },
            {
                "date": "2025-05-08T13:21:48Z",
                "message": "core/types: delete unused test variable (#31776)\n\nDelete the unused `Account.PrivateKey` variable."
            },
            {
                "date": "2025-05-08T13:15:36Z",
                "message": "cmd/geth, internal: fix flaky console tests (#31784)\n\nThis pull request bumps the timeout for flaky console tests on appveyor."
            },
            {
                "date": "2025-05-08T11:10:26Z",
                "message": "core, ethdb: introduce database sync function (#31703)\n\nThis pull request introduces a SyncKeyValue function to the\nethdb.KeyValueStore\ninterface, providing the ability to forcibly flush all previous writes\nto disk.\n\nThis functionality is critical for go-ethereum, which internally uses\ntwo independent\ndatabase engines: a key-value store (such as Pebble, LevelDB, or\nmemoryDB for\ntesting) and a flat-file\u2013based freezer. To ensure write-order\nconsistency between\nthese engines, the key-value store must be explicitly synced before\nwriting to the\nfreezer and vice versa.\n\nFixes \n- https://github.com/ethereum/go-ethereum/issues/31405\n- https://github.com/ethereum/go-ethereum/issues/29819"
            },
            {
                "date": "2025-05-08T06:57:17Z",
                "message": "internal/web3ext: remove the legacy backtraceAt method (#31783)\n\nThe function `BacktraceAt` has been removed in #28187 . But the API\nend-point `debug_backtraceAt` is not removed from the file\n`internal/web3ext/web3ext.go`."
            }
        ],
        "2025-05-07": [
            {
                "date": "2025-05-07T13:34:52Z",
                "message": "p2p: add metrics for inbound connection errors (#31652)\n\nAdd metics detailing reasons we reject inbound connections for, and\nreasons these connections fail during the handshake."
            },
            {
                "date": "2025-05-07T10:53:45Z",
                "message": "beacon/blsync: fix requests encoding in engine_newPayloadV4 (#31775)\n\nThis fixes an issue where blocks containing CL requests triggered an\nerror in the engine API. The encoding of requests used base64 instead of\nhex."
            }
        ],
        "2025-05-06": [
            {
                "date": "2025-05-06T04:40:03Z",
                "message": "cmd/utils:  don't allow network ID override if a preset network is specified (#31630)"
            },
            {
                "date": "2025-05-06T03:30:19Z",
                "message": "go.mod: update pebble to v1.1.5 to reduce clutter in go.sum (#31541)\n\n```\ngo get github.com/cockroachdb/pebble@v1.1.5\ngo mod tidy\n```\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            }
        ],
        "2025-05-05": [
            {
                "date": "2025-05-05T14:20:38Z",
                "message": "version: begin v1.15.12 release cycle"
            },
            {
                "date": "2025-05-05T14:19:58Z",
                "message": "version: release go-ethereum v1.15.11 stable"
            },
            {
                "date": "2025-05-05T14:15:59Z",
                "message": "eth/tracers: fix `standardTraceBlockToFile` (#31763)\n\nFixes methods debug_standardTraceBlockToFile\nand debug_standardTraceBadBlockToFile which were\noutputting empty files.\n\n---------\n\nCo-authored-by: maskpp <maskpp266@gmail.com>\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            },
            {
                "date": "2025-05-05T12:43:47Z",
                "message": "rpc: add method name length limit (#31711)\n\nThis change adds a limit for RPC method names to prevent potential abuse\nwhere large method names could lead to large response sizes.\n\nThe limit is enforced in:\n- handleCall for regular RPC method calls\n- handleSubscribe for subscription method calls\n\nAdded tests in websocket_test.go to verify the length limit\nfunctionality for both regular method calls and subscriptions.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-05-05T10:42:19Z",
                "message": "internal/ethapi: fix tx.from in eth_simulateV1 (#31480)\n\nIssue statement: when user requests eth_simulateV1 to return full\ntransaction objects, these objects always had an empty `from` field. The\nreason is we lose the sender when translation the message into a\ntypes.Transaction which is then later on serialized.\n\nI did think of an alternative but opted to keep with this approach as it\nkeeps complexity at the edge. The alternative would be to pass down a\nsigner object to RPCMarshal* methods and define a custom signer which\nkeeps the senders in its state and doesn't attempt the signature\nrecovery."
            },
            {
                "date": "2025-05-05T06:01:53Z",
                "message": "triedb: add test suite for preimage store (#31574)"
            },
            {
                "date": "2025-05-05T02:09:58Z",
                "message": "logs(indexer)Clean up log format in head index progress messages (#31761)\n\nupdates the log entries in `core/filtermaps/indexer.go` to remove double\nquotes around keys like \"first block\" and \"last block\", changing them to\n`firstblock` and `lastblock`. This brings them in line with the general\nlogging style used across the codebase, where log keys are unquoted\nsingle words.\n\nFor example, the log:\n`  INFO [...] \"first block\"=..., \"last block\"=...`\n\nIs now rendered as:\n`  INFO [...] firstblock=..., lastblock=...`\n\nThis change improves readability and maintains consistency with logs\nsuch as:\n`  INFO [...] number=2 sealhash=... uncles=0 txs=0 ...`\n\nNo functional behavior is changed \u2014 this is purely a formatting cleanup\nfor better developer experience."
            },
            {
                "date": "2025-05-05T02:07:55Z",
                "message": "core: reduce load on txindexer from API (#31752)\n\nFixes https://github.com/ethereum/go-ethereum/issues/31732.\n\nThis logic was removed in the recent refactoring in the txindexer to\nhandle history cutoff (#31393). It was first introduced in this PR:\nhttps://github.com/ethereum/go-ethereum/pull/28908.\n\nI have tested it and it works as an alternative to #31745.\n\nThis PR packs 3 changes to the flow of fetching txs from the API:\n\n- It caches the indexer tail after each run is over to avoid hitting the\ndb all the time as was done originally in #28908.\n\n- Changes `backend.GetTransaction`. It doesn't return an error anymore\nwhen tx indexer is in progress. It shifts the responsibility to the\ncaller to check the progress. The reason is that in most cases we anyway\ncheck the txpool for the tx. If it was indeed a pending tx we can avoid\nthe indexer progress check.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2025-05-04": [
            {
                "date": "2025-05-04T12:40:31Z",
                "message": "params: fix comment for `DefaultBlobSchedule` (#31760)\n\n`DefaultBlobSchedule` is actually used downstream to calculate blob fees\n(e.g.,\n[src](https://github.com/ethereum-optimism/optimism/blob/601a380e47853c2922ea1f8944cda05f0eac16f4/op-service/eth/blob.go#L301)),\nthis PR makes it explicit that these params are for `Ethereum prod`\ninstead of `test chains`."
            },
            {
                "date": "2025-05-04T02:16:33Z",
                "message": "core/txpool/legacypool: fix data race of pricedList access (#31758)"
            }
        ],
        "2025-05-03": [
            {
                "date": "2025-05-03T16:40:24Z",
                "message": "core/filtermaps: fix log index initialization (#31750)\n\nThis PR fixes an initialization bug that in some cases caused the map\nrenderer to leave the last, partially rendered map as is and resume\nrendering from the next map. At initialization we check whether the\nexisting rendered maps are consistent with the current chain view and\nrevert them if necessary. Until now this happened through an ugly hacky\nsolution, a \"limited\" chain view that was supposed to trigger a rollback\nof some maps in the renderer logic if necessary. This whole setup worked\nunder assumptions that just weren't true any more. As a result it always\ntried to revert the last map but also it did not shorten the indexed\nrange, only set `headIndexed` to false which indicated to the renderer\nlogic that the last map is fully populated (which it wasn't).\nNow an explicit rollback of any unusable (reorged) maps happens at\nstartup, which also means that no hacky chain view is necessary, as soon\nas the new `FilterMaps` is returned, the indexed range and view are\nconsistent with each other.\n\nIn the first commit an extra check is also added to `writeFinishedMaps`\nso that if there is ever again a bug that would result in a gapped index\nthen it will not break the db with writing the incomplete data. Instead\nit will return an indexing error which causes the indexer to revert to\nunindexed mode and print an error log instantly. Hopefully this will not\never happen in the future, but in order to test this safeguard check I\nmanually triggered the bug with only the first commit enabled, which\ncaused an indexing error as expected. With the second commit added (the\nactual fix) the same operation succeeded without any issues.\n\nNote that the database version is also bumped in this PR in order to\nenforce a full reindexing as any existing database might be potentially\nbroken.\n\nFixes https://github.com/ethereum/go-ethereum/issues/31729"
            }
        ],
        "2025-05-02": [
            {
                "date": "2025-05-02T15:50:22Z",
                "message": "core/filtermaps: fix log value search range (#31734)\n\nThis PR fixes the out-of-range block number logic of `getBlockLvPointer`\nwhich sometimes caused searches to fail if the head was updated in the\nwrong moment. This logic ensures that querying the pointer of a future\nblock returns the pointer after the last fully indexed block (instead of\nfailing) and therefore an async range update will not cause the search\nto fail. Earier this behaviour only worked when `headIndexed` was true\nand `headDelimiter` pointed to the end of the indexed range. Now it also\nworks for an unfinished index.\n\nThis logic is also moved from `FilterMaps.getBlockLvPointer` to\n`FilterMapsMatcherBackend.GetBlockLvPointer` because it is only required\nby the search anyways. `FilterMaps.getBlockLvPointer` now only returns a\npointer for existing blocks, consistently with how it is used in the\nindexer/renderer.\n\nNote that this unhandled case has been present in the code for a long\ntime but went unnoticed because either one of two previously fixed bugs\ndid prevent it from being triggered; the incorrectly positive\n`tempRange.headIndexed` (fixed in\nhttps://github.com/ethereum/go-ethereum/pull/31680), though caused other\nproblems, prevented this one from being triggered as with a positive\n`headIndexed` no database read was triggered in `getBlockLvPointer`.\nAlso, the unnecessary `indexLock` in `synced()` (fixed in\nhttps://github.com/ethereum/go-ethereum/pull/31708) usually did prevent\nthe search seeing the temp range and therefore avoided noticeable\nissues."
            },
            {
                "date": "2025-05-02T15:43:06Z",
                "message": "core, eth/gasestimator: introduce MaxGasUsed for estimation (#31735)\n\nThis PR improves gas estimation for data-heavy transactions which hit the floor data gas cost."
            },
            {
                "date": "2025-05-02T15:21:17Z",
                "message": "node: avoid double close resp.Body (#31710)\n\nThe functions `rpcRequest` and `batchRpcRequest` call `baseRpcRequest`.\nAnd `resp.Body` will be closed in the function `baseRpcRequest` later by\n`t.Cleanup`:\n\n```go\nfunc baseRpcRequest(t *testing.T, url, bodyStr string, extraHeaders ...string) *http.Response {\n        // ......\n\tt.Cleanup(func() { resp.Body.Close() })\n\treturn resp\n}\n```"
            },
            {
                "date": "2025-05-02T14:31:50Z",
                "message": "cmd/devp2p: test for non-existent block request (#31506)\n\nAdd tests for GetBlockHeaders that verify client does not disconnect when unlikely block numbers are requested, e.g. max uint64.\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            },
            {
                "date": "2025-05-02T13:19:54Z",
                "message": "ethclient: fix retrieval of pending block (#31504)\n\nSince the block hash is not returned for pending blocks, ethclient cannot unmarshal into RPC block. This makes hash optional on rpc block and compute the hash locally for pending blocks to correctly key the tx sender cache.\n\n\nhttps://github.com/ethereum/go-ethereum/blob/a82303f4e3cedcebe31540a53dde4f24fc93da80/internal/ethapi/api.go#L500-L504\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            }
        ],
        "2025-04-30": [
            {
                "date": "2025-04-30T10:37:48Z",
                "message": "cmd/geth: fix compatErr in initGenesis (#31746)"
            },
            {
                "date": "2025-04-30T07:23:08Z",
                "message": "core/filtermaps: do not derive full receipts during rendering (#31716)\n\nThis changes the filtermaps to only pull up the raw receipts, not the\nderived receipts which saves a lot of allocations.\n\nDuring normal execution this will reduce the allocations of the whole\ngeth node by ~15%."
            },
            {
                "date": "2025-04-30T03:02:11Z",
                "message": "eth/fetcher: define BatchSize as a constant (#31742)"
            },
            {
                "date": "2025-04-30T03:00:17Z",
                "message": "cmd/geth: print crit log if chain config is not compatible (#31743)"
            }
        ],
        "2025-04-29": [
            {
                "date": "2025-04-29T12:42:17Z",
                "message": "crypto/kzg4844: add ComputeCells functionality (#31378)\n\nFor PeerDAS, we need to compute cell proofs. Both ckzg and gokzg support\ncomputing these cell proofs.\nThis PR does the following:\n\n- Update the go-kzg library from \"github.com/crate-crypto/go-kzg-4844\"\nto \"github.com/crate-crypto/go-eth-kzg\" which will be the new upstream\nfor go-kzg moving forward\n- Update ckzg from v1.0.0 to v2.0.1 and switch to /v2\n- Updates the trusted setup to contain the g1 points both in lagrange\nand monomial form\n- Expose `ComputeCells` to compute the cell proofs"
            },
            {
                "date": "2025-04-29T11:21:18Z",
                "message": "beacon/engine: omit empty witness in payload response (#31739)\n\nFixes https://github.com/ethereum/go-ethereum/issues/31737"
            },
            {
                "date": "2025-04-29T06:29:56Z",
                "message": "core: apply overrides to mainnet chainconfig (#31733)\n\nThis PR applies the config overrides to the new config as well,\notherwise they will not be applied to defined configs, making\nshadowforks impossible.\n\nTo test:\n```\n>  ./build/bin/geth --override.prague 123 --dev --datadir /tmp/geth\nINFO [04-28|21:20:47.009]  - Prague:                      @123\n> ./build/bin/geth --override.prague 321 --dev --datadir /tmp/geth\nINFO [04-28|21:23:59.760]  - Prague:                      @321\n``"
            }
        ],
        "2025-04-28": [
            {
                "date": "2025-04-28T06:37:02Z",
                "message": "trie: add edgecase for rangeproof correctness (#31667)\n\nThis PR adds checking for an edgecase which theoretically can happen in\nthe range-prover. Right now, we check that a key does not overwrite a\nprevious one by checking that the key is increasing. However, if keys\nare of different lengths, it is possible to create a key which is\nincreasing _and_ overwrites the previous key. Example: `0xaabbcc`\nfollowed by `0xaabbccdd`.\n\nThis can not happen in go-ethereum, which always uses fixed-size paths\nfor accounts and storage slot paths in the trie, but it might happen if\nthe range prover is used without guaranteed fixed-size keys.\n\nThis PR also adds some testcases for the errors that are expected."
            },
            {
                "date": "2025-04-28T06:26:27Z",
                "message": "core/txpool/legacypool: refactor truncatePending (#31715)\n\nTruncatePending shows up bright red on our nodes, because it computes\nthe length of a map multiple times.\nI don't know why this is so expensive, but around 20% of our time is\nspent on this, which is super weird.\n\n```\n//PR: BenchmarkTruncatePending-24    \t   17498\t     69397 ns/op\t   32872 B/op\t       3 allocs/op\n//Master: BenchmarkTruncatePending-24    \t    9960\t    123954 ns/op\t   32872 B/op\t       3 allocs/op\n```\n\n```\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkTruncatePending-24     123954        69397         -44.01%\n\nbenchmark                       old allocs     new allocs     delta\nBenchmarkTruncatePending-24     3              3              +0.00%\n\nbenchmark                       old bytes     new bytes     delta\nBenchmarkTruncatePending-24     32872         32872         +0.00%\n```\nThis simple PR is a 44% improvement over the old state\n\n\n``` \nOUTINE ======================== github.com/ethereum/go-ethereum/core/txpool/legacypool.(*LegacyPool).truncatePending in github.com/ethereum/go-ethereum/core/txpool/legacypool/legacypool.go\n     1.96s     18.02s (flat, cum) 19.57% of Total\n         .          .   1495:func (pool *LegacyPool) truncatePending() {\n         .          .   1496:\tpending := uint64(0)\n      60ms      2.99s   1497:\tfor _, list := range pool.pending {\n     250ms      5.48s   1498:\t\tpending += uint64(list.Len())\n         .          .   1499:\t}\n         .          .   1500:\tif pending <= pool.config.GlobalSlots {\n         .          .   1501:\t\treturn\n         .          .   1502:\t}\n         .          .   1503:\n         .          .   1504:\tpendingBeforeCap := pending\n         .          .   1505:\t// Assemble a spam order to penalize large transactors first\n         .      510ms   1506:\tspammers := prque.New[int64, common.Address](nil)\n     140ms      2.50s   1507:\tfor addr, list := range pool.pending {\n         .          .   1508:\t\t// Only evict transactions from high rollers\n      50ms      5.08s   1509:\t\tif uint64(list.Len()) > pool.config.AccountSlots {\n         .          .   1510:\t\t\tspammers.Push(addr, int64(list.Len()))\n         .          .   1511:\t\t}\n         .          .   1512:\t}\n         .          .   1513:\t// Gradually drop transactions from offenders\n         .          .   1514:\toffenders := []common.Address{}\n```\n\n```go\n// Benchmarks the speed of batch transaction insertion in case of multiple accounts.\nfunc BenchmarkTruncatePending(b *testing.B) {\n\t// Generate a batch of transactions to enqueue into the pool\n\tpool, _ := setupPool()\n\tdefer pool.Close()\n\tb.ReportAllocs()\n\tbatches := make(types.Transactions, 4096+1024+1)\n\tfor i := range len(batches) {\n\t\tkey, _ := crypto.GenerateKey()\n\t\taccount := crypto.PubkeyToAddress(key.PublicKey)\n\t\tpool.currentState.AddBalance(account, uint256.NewInt(1000000), tracing.BalanceChangeUnspecified)\n\t\ttx := transaction(uint64(0), 100000, key)\n\t\tbatches[i] = tx\n\t}\n\tfor _, tx := range batches {\n\t\tpool.addRemotesSync([]*types.Transaction{tx})\n\t}\n\tb.ResetTimer()\n\t// benchmark truncating the pending\n\tfor range b.N {\n\t\tpool.truncatePending()\n\t}\n}\n```"
            }
        ],
        "2025-04-25": [
            {
                "date": "2025-04-25T11:27:24Z",
                "message": "version: begin v1.15.11 release cycle"
            },
            {
                "date": "2025-04-25T10:44:25Z",
                "message": "version: release go-ethereum v1.15.10 stable"
            },
            {
                "date": "2025-04-25T09:57:38Z",
                "message": "core/filtermaps: fix deadlock in filtermap callback (#31708)\n\nThis PR fixes a deadlock situation is deleteTailEpoch that might arise\nwhen\nrange delete is running in iterator based fallback mode (either using\nleveldb\ndatabase or the hashdb state storage scheme). \n\nIn this case a stopCb callback is called periodically that does check\nevents,\nincluding matcher sync requests, in which case it tries to acquire\nindexLock\nfor read access, while deleteTailEpoch already held it for write access.\n\nThis pull request removes the indexLock acquiring in\n`FilterMapsMatcherBackend.synced`\nas this function is only called in the indexLoop.\n\nFixes https://github.com/ethereum/go-ethereum/issues/31700"
            }
        ],
        "2025-04-24": [
            {
                "date": "2025-04-24T19:40:12Z",
                "message": "beacon/params: add mainnet electra config (#31706)\n\nThis PR adds the electra beacon chain configuration for mainnet."
            },
            {
                "date": "2025-04-24T16:19:10Z",
                "message": "miner: increase default gas limit to 36M (#31705)"
            }
        ],
        "2025-04-23": [
            {
                "date": "2025-04-23T19:01:03Z",
                "message": "ethclient: allow passing AuthorizationList to calls (#31198)\n\nThis PR adds the `AuthorizationList` field to the `CallMsg` interface to support `eth_call`\nand `eth_estimateGas` of set-code transactions.\n\n---------\n\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            }
        ],
        "2025-04-22": [
            {
                "date": "2025-04-22T04:57:17Z",
                "message": "internal/debug: add debug_setMemoryLimit (#31441)"
            }
        ],
        "2025-04-21": [
            {
                "date": "2025-04-21T12:57:25Z",
                "message": "version: begin v1.15.10 release cycle"
            },
            {
                "date": "2025-04-21T12:56:16Z",
                "message": "version: release go-ethereum v1.15.9 stable"
            },
            {
                "date": "2025-04-21T07:27:24Z",
                "message": "core/filtermaps: clone cached slices, fix tempRange (#31680)\n\nThis PR ensures that caching a slice or a slice of slices will never\naffect the original version by always cloning a slice fetched from cache\nif it is not used in a guaranteed read only way."
            }
        ],
        "2025-04-20": [
            {
                "date": "2025-04-20T10:54:40Z",
                "message": "beacon/params, core/filtermaps: update checkpoints (#31674)\n\nThis PR updates checkpoints for blsync and filtermaps."
            },
            {
                "date": "2025-04-20T07:48:49Z",
                "message": "eth/filters, core/filtermaps: safe chain view update (#31590)\n\nThis PR changes the chain view update mechanism of the log filter.\nPreviously the head updates were all wired through the indexer, even in\nunindexed mode. This was both a bit weird and also unsafe as the\nindexer's chain view was updates asynchronously with some delay, making\nsome log related tests flaky. Also, the reorg safety of the indexed\nsearch was integrated with unindexed search in a weird way, relying on\n`syncRange.ValidBlocks` in the unindexed case too, with a special\ncondition added to only consider the head of the valid range but not the\ntail in the unindexed case.\n\nIn this PR the current chain view is directly accessible through the\nfilter backend and unindexed search is also chain view based, making it\ninherently safe. The matcher sync mechanism is now only used for indexed\nsearch as originally intended, removing a few ugly special conditions.\n\nThe PR is currently based on top of\nhttps://github.com/ethereum/go-ethereum/pull/31642\nTogether they fix https://github.com/ethereum/go-ethereum/issues/31518\nand replace https://github.com/ethereum/go-ethereum/pull/31542\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2025-04-19": [
            {
                "date": "2025-04-19T14:02:31Z",
                "message": "eth/gasprice: fix eth_feeHistory blobGasUsedRatio divide zero (#31663)\n\nThe API `eth_feeHistory` returns\n`{\"jsonrpc\":\"2.0\",\"id\":1,\"error\":{\"code\":-32603,\"message\":\"json:\nunsupported value: NaN\"}}`, when we query `eth_feeHistory` with a old\nblock that without a blob, or when the field\n`config.blobSchedule.cancun.max` in genesis.config is 0 (that happens\nfor some projects fork geth but they don't have blob).\n\nSo here we specially handle the case when maxBlobGas == 0 to prevent\nthis issue from happening."
            },
            {
                "date": "2025-04-19T11:42:54Z",
                "message": "core: fail execution if system call fails to execute (#31639)\n\nsee: https://github.com/ethereum/pm/issues/1450#issuecomment-2800911584"
            }
        ],
        "2025-04-18": [
            {
                "date": "2025-04-18T12:00:11Z",
                "message": "core/filtermaps: make ChainView thread safe (#31671)\n\nThis PR makes `filtermaps.ChainView` thread safe because it is used\nconcurrently both by the indexer and multiple matcher threads. Even\nthough it represents an immutable view of the chain, adding a mutex lock\nto the `blockHash` function is necessary because it does so by extending\nits list of non-canonical hashes if the underlying blockchain is\nchanged.\n\nThe unsafe concurrency did cause a panic once after running the unit\ntests for several hours and it could also happen during live operation."
            },
            {
                "date": "2025-04-18T11:39:11Z",
                "message": "core/filtermaps: only use common ancestor snapshots (#31668)\n\nThis PR makes the conditions for using a map rendering snapshot stricter\nso that whenever a reorg happens, only a snapshot of a common ancestor\nblock can be used. The issue fixed in\nhttps://github.com/ethereum/go-ethereum/pull/31642 originated from using\na snapshot that wasn't a common ancestor. For example in the following\nreorg scenario: `A->B`, then `A->B2`, then `A->B2->C2`, then `A->B->C`\nthe last reorg triggered a render from snapshot `B` saved earlier. Now\nthis is possible under certain conditions but extra care is needed, for\nexample if block `B` crosses a map boundary then it should not be\nallowed. With the latest fix the checks are sufficient but I realized I\nwould just feel safer if we disallowed this rare and risky scenario\naltogether and just render from snapshot `A` after the last reorg in the\nexample above. The performance difference if a few milliseconds and it\noccurs rarely (about once a day on Holesky, probably much more rare on\nMainnet).\nNote that this PR only makes the snapshot conditions stricter and\n`TestIndexerRandomRange` does check that snapshots are still used\nwhenever it's obviously possible (adding blocks after the current head\nwithout a reorg) so this change can be considered safe. Also I am\nrunning the unit tests and the fuzzer and everything seems to be fine."
            }
        ],
        "2025-04-17": [
            {
                "date": "2025-04-17T19:27:48Z",
                "message": "eth: add tx to locals only if it has a chance of acceptance (#31618)\n\nThis pull request improves error handling for local transaction submissions.\n\nSpecifically, if a transaction fails with a temporary error but might be\naccepted later, the error will not be returned to the user; instead, the\ntransaction will be tracked locally for resubmission. \n\nHowever, if the transaction fails with a permanent error (e.g., invalid\ntransaction or insufficient balance), the error will be propagated to the user.\n\nThese errors returned in the legacyPool are regarded as temporary failure:\n\n- `ErrOutOfOrderTxFromDelegated`\n- `txpool.ErrInflightTxLimitReached`\n- `ErrAuthorityReserved`\n- `txpool.ErrUnderpriced`\n- `ErrTxPoolOverflow`\n- `ErrFutureReplacePending`\n\nNotably, InsufficientBalance is also treated as a permanent error, as\nit\u2019s highly unlikely that users will transfer funds into the sender account\nafter submitting the transaction. Otherwise, users may be confused\u2014seeing\ntheir transaction submitted but unaware that the sender lacks sufficient funds\u2014and\ncontinue waiting for it to be included.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            },
            {
                "date": "2025-04-17T12:23:31Z",
                "message": "eth/catalyst: sanitize simulated beacon period to avoid overflowing time.Duration (#31407)\n\ncloses #31401\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\nCo-authored-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-04-17T08:46:47Z",
                "message": "core,params: add fork readiness indicator in logs (#31340)\n\ncloses #31310 \n\nThis has been requested a few times in the past and I think it is a nice\nquality-of-life improvement for users. At a predetermined interval,\nthere will now be a \"Fork ready\" log when a future fork is scheduled,\nbut not yet active.\n\nIt can only possibly print after block import, which kinda avoids the\nscenario where the client isn't progressing or is syncing and the user\nthinks it's \"ready\" because it sees a ready log.\n\nNew output:\n\n```console\nINFO [03-08|21:32:57.472] Imported new potential chain segment     number=7 hash=aa24ee..f09e62 blocks=1 txs=0 mgas=0.000 elapsed=\"874.916\u00b5s\" mgasps=0.000 snapdiffs=973.00B triediffs=7.05KiB triedirty=0.00B\nINFO [03-08|21:32:57.473] Ready for fork activation                fork=Prague date=\"18 Mar 25 19:29 CET\" remaining=237h57m0s timestamp=1,742,322,597\nINFO [03-08|21:32:57.475] Chain head was updated                   number=7 hash=aa24ee..f09e62 root=19b0de..8d32f2 elapsed=\"129.125\u00b5s\"\n```\n\nEasiest way to verify this behavior is to apply this patch and run `geth\n--dev --dev.period=12`\n\n```patch\ndiff --git a/params/config.go b/params/config.go\nindex 9c7719d901..030c4f80e7 100644\n--- a/params/config.go\n+++ b/params/config.go\n@@ -174,7 +174,7 @@ var (\n                ShanghaiTime:            newUint64(0),\n                CancunTime:              newUint64(0),\n                TerminalTotalDifficulty: big.NewInt(0),\n-               PragueTime:              newUint64(0),\n+               PragueTime:              newUint64(uint64(time.Now().Add(time.Hour * 300).Unix())),\n                BlobScheduleConfig: &BlobScheduleConfig{\n                        Cancun: DefaultCancunBlobConfig,\n                        Prague: DefaultPragueBlobConfig,\n```"
            },
            {
                "date": "2025-04-17T08:46:00Z",
                "message": "params: add prague timestamp for mainnet (#31535)\n\nhttps://eips.ethereum.org/EIPS/eip-7600#activation\n\nTimestamp: `1746612311`\nFork id: `0xc376cf8b`"
            },
            {
                "date": "2025-04-17T08:33:59Z",
                "message": "eth: fix transaction sender cache miss before broadcast (#31657)\n\nBroadcastTransactions needs the Sender address to route message flows\nfrom the same Sender address consistently to the same random subset of\npeers. It however spent considerable time calculating the Sender\naddresses, even if the Sender address was already calculated and cached\nin other parts of the code.\n\nSince we only need the mapping, we can use any signer, and the one that\nhad already been used is a better choice because of cache reuse."
            },
            {
                "date": "2025-04-17T08:32:40Z",
                "message": "core: fix sync reset in pruned nodes (#31638)\n\nThis is an attempt at fixing #31601. I think what happens is the startup\nlogic will try to get the full block body (it's `bc.loadLastState`) and\nfail because genesis block has been pruned from the freezer. This will\ncause it to keep repeating the reset logic, causing a deadlock.\n\nThis can happen when due to an unsuccessful sync we don't have the state\nfor the head (or any other state) fully, and try to redo the snap sync.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2025-04-17T02:39:21Z",
                "message": "core: fix history pruning initialization for empty DB (#31656)\n\nThis fixes an issue where running geth with `--history.chain postmerge`\nwould not work on an empty database.\n\n```\nERROR[04-16|23:11:12.913] Chain history database is pruned to unknown block tail=0\nFatal: Failed to register the Ethereum service: unexpected database tail\n```"
            },
            {
                "date": "2025-04-17T02:36:53Z",
                "message": "core/txpool/legacypool: fix data race of txlookup access (#31641)"
            }
        ],
        "2025-04-16": [
            {
                "date": "2025-04-16T21:46:38Z",
                "message": "core/state: fix log format (#31610)\n\nLog `key` in hexadecimal string format."
            },
            {
                "date": "2025-04-16T21:30:13Z",
                "message": "core/filtermaps: fix map renderer reorg issue (#31642)\n\nThis PR fixes a bug in the map renderer that sometimes used an obsolete\nblock log value pointer to initialize the iterator for rendering from a\nsnapshot. This bug was triggered by chain reorgs and sometimes caused\nindexing errors and invalid search results. A few other conditions are\nalso made safer that were not reported to cause issues yet but could\npotentially be unsafe in some corner cases. A new unit test is also\nadded that reproduced the bug but passes with the new fixes.\n\nFixes https://github.com/ethereum/go-ethereum/issues/31593\nMight also fix https://github.com/ethereum/go-ethereum/issues/31589\nthough this issue has not been reproduced yet, but it appears to be\nrelated to a log index database corruption around a specific block,\nsimilarly to the other issue.\n\nNote that running this branch resets and regenerates the log index\ndatabase. For this purpose a `Version` field has been added to\n`rawdb.FilterMapsRange` which will also make this easier in the future\nif a breaking database change is needed or the existing one is\nconsidered potentially broken due to a bug, like in this case."
            },
            {
                "date": "2025-04-16T07:50:05Z",
                "message": "cmd/geth: remove the unused bloomfilter.size flag (#31646)"
            }
        ],
        "2025-04-15": [
            {
                "date": "2025-04-15T18:40:30Z",
                "message": "p2p: fix dial metrics not picking up the right error (#31621)\n\nOur metrics related to dial errors were off. The original error was not\nwrapped, so the caller function had no chance of picking it up.\nTherefore the most common error, which is \"TooManyPeers\", was not\ncorrectly counted.\n\nThe metrics were originally introduced in\nhttps://github.com/ethereum/go-ethereum/pull/27621\n\nI was thinking of various possible solutions.\n- the one proposed here wraps both the new error and the origial error.\nIt is not a pattern we use in other parts of the code, but works. This\nis maybe the smallest possible change.\n- as an alternate, I could write a proper `errProtoHandshakeError` with\nit's own wrapped error\n- finally, I'm not even sure we need `errProtoHandshakeError`, maybe we\ncould just pass up the original error.\n\n---------\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-04-15T12:34:34Z",
                "message": "all: remove martin from CODEOWNERS (#31637)\n\nThank you, @holiman, for being an integral part of the Go-Ethereum \nand for your invaluable contributions over the years.\n\nThis will always be your home and you're welcome back anytime!"
            },
            {
                "date": "2025-04-15T12:32:46Z",
                "message": "core: initialize history pruning in BlockChain (#31636)\n\nI added the history mode configuration in eth/ethconfig initially, since\nit seemed like the logical place. But it turns out we need access to the\nintended pruning setting at a deeper level, and it actually needs to be\nintegrated with the blockchain startup procedure.\n\nWith this change applied, if a node previously had its history pruned,\nand is subsequently restarted **without** the `--history.chain\npostmerge` flag, the `BlockChain` initialization code will now verify\nthe freezer tail against the known pruning point of the predefined\nnetwork and will restore pruning status. Note that this logic is quite\nrestrictive, we allow non-zero tail only for known networks, and only\nfor the specific pruning point that is defined."
            }
        ],
        "2025-04-14": [
            {
                "date": "2025-04-14T10:45:27Z",
                "message": "eth: add logic to drop peers randomly when saturated (#31476)\n\nAs of now, Geth disconnects peers only on protocol error or timeout,\nmeaning once connection slots are filled, the peerset is largely fixed.\n\nAs mentioned in https://github.com/ethereum/go-ethereum/issues/31321,\nGeth should occasionally disconnect peers to ensure some churn.\nWhat/when to disconnect could depend on:\n- the state of geth (e.g. sync or not)\n- current number of peers\n- peer level metrics\n\nThis PR adds a very slow churn using a random drop.\n\n---------\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-04-14T08:13:45Z",
                "message": "p2p: better dial/serve success metrics (#31629)\n\nOur previous success metrics gave success even if a peer disconnected\nright after connection. These metrics only count peers that stayed\nconnected for at least 1 min. The 1 min limit is an arbitrary choice. We do\nnot use this for decision logic, only statistics."
            }
        ],
        "2025-04-11": [
            {
                "date": "2025-04-11T09:31:56Z",
                "message": "version: begin v1.15.9 release cycle"
            },
            {
                "date": "2025-04-11T09:31:16Z",
                "message": "version: release go-ethereum v1.15.8 stable"
            },
            {
                "date": "2025-04-11T09:28:14Z",
                "message": "build: upgrade -dlgo version to Go 1.24.2 (#31538)"
            }
        ],
        "2025-04-10": [
            {
                "date": "2025-04-10T21:54:44Z",
                "message": "tests/testdata: revert to v17.0\n\nThe submodule was accidentally updated to another commit by f64aa6eaf7."
            },
            {
                "date": "2025-04-10T16:21:32Z",
                "message": "internal/testlog: fix log output from sub-loggers (#31539)\n\nWhen we instantiate a sub-logger via\n`go-ethereum/internal/testlog/logger.With`, we copy the reference to the\n`bufHandler` from the parent logger. However, internally,\n`go-ethereum/internal/testlog/logger.With` calls `log/slog/Logger.With`\nwhich creates a new handler instance (via\n`internal/bufHandler.WithAttrs`).\n\nThis PR modifies sub-logger instantiation to use the newly-instantiated\nhandler, instead of copying the reference from the parent instance. The\ntype cast from `slog.Handler` to `*bufHandler` in\n`internal/testlog/Logger.With` is safe here because a\n`internal/testlog/Logger` can only be instantiated with a `*bufHandler`\nas the underlying handler type.\n\nNote, that I've also removed a pre-existing method that broke the above\nassumption. However, this method is not used in our codebase.\n\nI'm not sure if the assumption holds for forks of geth (e.g. optimism\nhas modified the testlogger somewhat allowing test loggers to accept\narbitrary handler types), but it seems okay to break API compatibility\ngiven that this is in the `internal` package.\n\ncloses https://github.com/ethereum/go-ethereum/issues/31533"
            },
            {
                "date": "2025-04-10T11:49:54Z",
                "message": "eth/catalyst:  in tests, manually sync txpool after initial chain insertion to prevent race between txpool head reset and promotion of txs that will be subsequently added (#31595)\n\nbefore this changes, this will result in numerous test failures:\n```\n> go test -run=Eth2AssembleBlock -c\n> stress ./catalyst.test\n```\n\nThe reason is that after creating/inserting the test chain, there is a\nrace between the txpool head reset and the promotion of txs added from\ntests.\n\nEnsuring that the txpool state is up to date with the head of the chain\nbefore proceeding fixes these flaky tests."
            },
            {
                "date": "2025-04-10T10:46:54Z",
                "message": "accounts/usbwallet: full 32bit chainId support for Trezor (#17439)\n\nThis fix allows Trezor to support full 32bit chainId in geth, with the\nnext version of firmware.\n\nFor `chainId > 2147483630` case, Trezor returns signature bit only.\n- Trezor returns only signature parity for `chainId > 2147483630` case.\n- for `chainId == 2147483630` case, Trezor returns `MAX_UINT32` or `0`,\nbut it doesn't matter.\n  (`2147483630 * 2 + 35` = `4294967295`(`MAX_UINT32`))\n\nchainId | returned signature_v | compatible issue\n---------|------------------------|--------------------\n0 < chainId <= 255 | chainId * 2 + 35 + v | no issue (firmware `1.6.2`\nfor Trezor one)\n255 < chainId <= 2147483630 | chainId * 2 + 35 + v | ***fixed.***\n*firmware `1.6.3`*\nchainId > 2147483630 | v | *firmware `1.6.3`*\n\nPlease see also: full 32bit chainId support for Trezor\n- Trezor one: https://github.com/trezor/trezor-mcu/pull/399 ***merged***\n- Trezor model T: https://github.com/trezor/trezor-core/pull/311\n***merged***\n\n---------\n\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\nCo-authored-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>"
            },
            {
                "date": "2025-04-10T09:26:35Z",
                "message": "eth/fetcher: Fix flaky TestTransactionForgotten test using mock clock (#31468)\n\nFixes #31169\n\nThe TestTransactionForgotten test was flaky due to real time\ndependencies. This PR:\n\n- Replaces real time with mock clock for deterministic timing control\n- Adds precise state checks at timeout boundaries\n- Verifies underpriced cache states and cleanup\n- Improves test reliability by controlling transaction timestamps\n- Adds checks for transaction re-enqueueing behavior\n\nThe changes ensure consistent test behavior without timing-related\nflakiness.\n\n---------\n\nCo-authored-by: Zsolt Felfoldi <zsfelfoldi@gmail.com>"
            },
            {
                "date": "2025-04-10T01:11:24Z",
                "message": "core/txpool: allow tx and authority regardless of admission order (#31373)\n\nThis PR proposes a change to the authorizations' validation introduced\nin commit cdb66c8. These changes make the expected behavior independent\nof the order of admission of authorizations, improving the\npredictability of the resulting state and the usability of the system\nwith it.\n\nThe current implementation behavior is dependent on the transaction\nsubmission order: This issue is related to authorities and the sender of\na transaction, and can be reproduced respecting the normal nonce rules.\n\nThe issue can be reproduced by the two following cases:\n**First case**\n- Given an empty pool.\n- Submit transaction `{ from: B, auths [ A ] }`: is accepted.\n- Submit transaction `{ from: A }`: Is accepted: it becomes the one\nin-flight transaction allowed.\n\n**Second case**\n- Given an empty pool.\n- Submit transaction `{ from: A }`:  is accepted\n- Submit transaction `{ from: B, auths [ A ] }`: is rejected since there\nis already a queued/pending transaction from A.\n\nThe expected behavior is that both sequences of events would lead to the\nsame sets of accepted and rejected transactions.\n\n**Proposed changes** \nThe queued/pending transactions issued from any authority of the\ntransaction being validated have to be counted, allowing one transaction\nfrom accounts submitting an authorization.\n\n- Notice that the expected behavior was explicitly forbidden in the case\n\"reject-delegation-from-pending-account\", I believe that this behavior\nconflicts to the definition of the limitation, and it is removed in this\nPR. The expected behavior is tested in\n\"accept-authorization-from-sender-of-one-inflight-tx\".\n- Replacement tests have been separated to improve readability of the\nacceptance test.\n- The test \"allow-more-than-one-tx-from-replaced-authority\" has been\nextended with one extra transaction, since the system would always have\naccepted one transaction (but not two).\n- The test \"accept-one-inflight-tx-of-delegated-account\" is extended to\nclean-up state, avoiding leaking the delegation used into the other\ntests. Additionally, replacement check is removed to be tested in its\nown test case.\n\n**Expected behavior** \nThe expected behavior of the authorizations' validation shall be as\nfollows:\n\n![image](https://github.com/user-attachments/assets/dbde7a1f-9679-4691-94eb-c197a0cbb823)\nNotice that replacement shall be allowed, and behavior shall remain\ncoherent with the table, according to the replaced transaction.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            }
        ],
        "2025-04-09": [
            {
                "date": "2025-04-09T20:19:28Z",
                "message": "core/txpool: add notice to` Clear` that is not meant for production code (#31567)\n\nThe `Sync(..)` function explicitly says not to rely on in production\ncode, but it is used in `Clear(..)` so should add a similar mention."
            },
            {
                "date": "2025-04-09T09:28:29Z",
                "message": "p2p/nat: fix UPnP port reset (#31566)\n\nMake UPnP more robust\n\n- Once a random port was mapped, we try to stick to it even if a UPnP\nrefresh fails. Previously we were immediately moving back to try the\ndefault port, leading to frequent ENR changes.\n\n- We were deleting port mappings before refresh as a possible\nworkaround. This created issues in some UPnP servers. The UPnP (and PMP)\nspecification is explicit about the refresh requirements, and delete is\nclearly not needed (see\nhttps://github.com/ethereum/go-ethereum/pull/30265#issuecomment-2766987859).\nFrom now on we only delete when closing.\n\n- We were trying to add port mappings only once, and then moved on to\nrandom ports. Now we insist a bit more, so that a simple failed request\nwon't lead to ENR changes.\n\nFixes https://github.com/ethereum/go-ethereum/issues/31418\n\n---------\n\nSigned-off-by: Csaba Kiraly <csaba.kiraly@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2025-04-08": [
            {
                "date": "2025-04-08T17:57:45Z",
                "message": "core/vm: optimize push2 opcode (#31267)\n\nDuring my benchmarks on Holesky, around 10% of all CPU time was spent in\nPUSH2\n```\nROUTINE ======================== github.com/ethereum/go-ethereum/core/vm.newFrontierInstructionSet.makePush.func1 in github.com/ethereum/go-ethereum/core/vm/instructions.go\n    16.38s     20.35s (flat, cum) 10.31% of Total\n     740ms      740ms    976:\treturn func(pc *uint64, interpreter *EVMInterpreter, scope *ScopeContext) ([]byte, error) {\n         .          .    977:\t\tvar (\n      40ms       40ms    978:\t\t\tcodeLen = len(scope.Contract.Code)\n     970ms      970ms    979:\t\t\tstart   = min(codeLen, int(*pc+1))\n     200ms      200ms    980:\t\t\tend     = min(codeLen, start+pushByteSize)\n         .          .    981:\t\t)\n     670ms      2.39s    982:\t\ta := new(uint256.Int).SetBytes(scope.Contract.Code[start:end])\n         .          .    983:\n         .          .    984:\t\t// Missing bytes: pushByteSize - len(pushData)\n     410ms      410ms    985:\t\tif missing := pushByteSize - (end - start); missing > 0 {\n         .          .    986:\t\t\ta.Lsh(a, uint(8*missing))\n         .          .    987:\t\t}\n    12.69s     14.94s    988:\t\tscope.Stack.push2(*a)\n      10ms       10ms    989:\t\t*pc += size\n     650ms      650ms    990:\t\treturn nil, nil\n         .          .    991:\t}\n         .          .    992:}\n```\n\nWhich is quite crazy. We have a handwritten encoder for PUSH1 already,\nthis PR adds one for PUSH2.\n\nPUSH2 is the second most used opcode as shown here:\nhttps://gist.github.com/shemnon/fb9b292a103abb02d98d64df6fbd35c8 since\nit is used by solidity quite significantly. Its used ~20 times as much\nas PUSH20 and PUSH32.\n\n# Benchmarks\n\n```\nBenchmarkPush/makePush-14         \t94196547\t        12.27 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkPush/push-14             \t429976924\t         2.829 ns/op\t       0 B/op\t       0 allocs/op\n``` \n\n---------\n\nCo-authored-by: jwasinger <j-wasinger@hotmail.com>"
            },
            {
                "date": "2025-04-08T13:46:27Z",
                "message": "core/txpool: add 7702 protection to blobpool (#31526)\n\nThis pull request introduces two constraints in the blobPool:\n\n(a) If the sender has a pending authorization or delegation, only one\nin-flight\nexecutable transaction can be cached.\n(b) If the authority address in a SetCode transaction is already\nreserved by\nthe blobPool, the transaction will be rejected.\n\nThese constraints mitigate an attack where an attacker spams the pool\nwith\nnumerous blob transactions, evicts other transactions, and then cancels\nall\npending blob transactions by draining the sender\u2019s funds if they have a\ndelegation.\n\nNote, because there is no exclusive lock held between different subpools\nwhen processing transactions, it's totally possible the SetCode\ntransaction\nand blob transactions with conflict sender and authorities are accepted\nsimultaneously. I think it's acceptable as it's very hard to be\nexploited.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            },
            {
                "date": "2025-04-08T12:44:13Z",
                "message": "eth/remotedb: improve error handling (#31331)\n\nThis PR improves error handling in the remotedb package by fixing two\nissues:\n\n1. In the `Has` method, we now properly propagate errors instead of\nsilently returning false. This makes the behavior more predictable and\nhelps clients better understand when there are connection issues.\n\n2. In the `New` constructor, we add a nil check for the client parameter\nto prevent potential panics. This follows Go best practices for\nconstructor functions.\n\nThese changes make the code more robust and follow Go's error handling\nidioms without requiring any changes to other parts of the codebase.\n\nChanges:\n- Modified `Has` method to return errors instead of silently returning\nfalse\n- Added nil check in `New` constructor\n- Fixed field name in constructor to match struct definition"
            }
        ],
        "2025-04-07": [
            {
                "date": "2025-04-07T05:16:26Z",
                "message": "cmd/geth: set trie,gc and other cache flags for import chain (#31577)\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
            }
        ],
        "2025-04-04": [
            {
                "date": "2025-04-04T12:07:46Z",
                "message": "internal/era: random access to header and receipts (#31544)\n\nCo-authored-by: lightclient <lightclient@protonmail.com>\n\nAdd GetHeaderByNumber and GetReceiptsByNumber to allow more efficient API request filling from Era files."
            },
            {
                "date": "2025-04-04T08:56:55Z",
                "message": "p2p/nat: remove forceful port mapping in upnp (#30265)\n\nHere we are modifying the port mapping logic so that existing port\nmappings will only be removed when they were previously created by geth.\n\nThe AddAnyPortMapping functionality has been adapted to work consistently\nbetween the IGDv1 and IGDv2 backends."
            }
        ],
        "2025-04-03": [
            {
                "date": "2025-04-03T14:04:11Z",
                "message": "beacon/blsync: add checkpoint import/export file feature (#31469)\n\nThis PR adds a new `--beacon.checkpoint.file` config flag to geth and\nblsync which specifies a checkpoint import/export file. If a file with\nan existing checkpoint is specified, it is used for initialization\ninstead of the hardcoded one (except when `--beacon.checkpoint` is also\nspecified simultaneously). Whenever the client encounters a new valid\nfinality update with a suitable finalized beacon block root at an epoch\nboundary, it saves the block root in hex format to the checkpoint file."
            },
            {
                "date": "2025-04-03T14:03:03Z",
                "message": "core, eth, node: use sync write option in pebble (#31519)\n\nFixes #31499"
            },
            {
                "date": "2025-04-03T13:58:37Z",
                "message": "cmd/devp2p/internal/v5test: log test descriptions (#31551)\n\nThis adds the test description text to the output, instead of keeping it\nas a Go comment. Logs are visible in the hive UI where these tests run,\nwhile Go comments are not."
            },
            {
                "date": "2025-04-03T13:44:07Z",
                "message": "eth: fix calls to HistoryPruningCutoff (#31552)\n\nThese were caused by crossed merges of recent PRs #31414 and #31361"
            },
            {
                "date": "2025-04-03T13:18:35Z",
                "message": "build: upgrade to golangci-lint v2 (#31530)"
            },
            {
                "date": "2025-04-03T13:16:35Z",
                "message": "core, eth/downloader: implement pruning mode sync (#31414)\n\nThis pull request introduces new sync logic for pruning mode. The downloader will now skip\ninsertion of block bodies and receipts before the configured history cutoff point.\n\nOriginally, in snap sync, the header chain and other components (bodies and receipts) were\ninserted separately. However, in Proof-of-Stake, this separation is unnecessary since the\nsync target is already verified by the CL.\n\nTo simplify the process, this pull request modifies `InsertReceiptChain` to insert headers\nalong with block bodies and receipts together. Besides, `InsertReceiptChain` doesn't have\nthe notion of reorg, as the common ancestor is always be found before the sync and extra\nside chain is truncated at the beginning if they fall in the ancient store. The stale\ncanonical chain flags will always be rewritten by the new chain. Explicit reorg logic is\nno longer required in `InsertReceiptChain`."
            },
            {
                "date": "2025-04-03T04:35:52Z",
                "message": "eth/protocols/eth: improve over/underflow handling in  `GetBlockHeaders` (#31522)"
            }
        ],
        "2025-04-02": [
            {
                "date": "2025-04-02T19:52:40Z",
                "message": "all: fix typos in docs and comments (#31548)\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            },
            {
                "date": "2025-04-02T17:19:25Z",
                "message": "README: fixup typos (#31540)\n\nFixes a few typos in readme."
            },
            {
                "date": "2025-04-02T12:56:21Z",
                "message": "p2p/discover: pass node instead of node ID to TALKREQ handler (#31075)\n\nThis is for the implementation of Portal Network in the Shisui client.\nTheir handler needs access to the node object in order to send further\ncalls to the requesting node. This is a breaking API change but it\nshould be fine, since there are basically no known users of TALKREQ\noutside of Portal network.\n\n---------\n\nSigned-off-by: thinkAfCod <q315xia@163.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-04-02T11:47:44Z",
                "message": "p2p/discover: repeat exact encoding when resending WHOAREYOU packet (#31543)\n\nWhen resending the WHOAREYOU packet, a new nonce and random IV should not\nbe generated. The sent packet needs to match the previously-sent one exactly\nin order to make the handshake retry work.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-04-02T07:47:56Z",
                "message": "core/txpool: add GetMetadata to transaction pool (#31433)\n\nThis is an alternative to #31309\n\nWith eth/68, transaction announcement must have transaction type and\nsize. So in announceTransactions, we need to query the transaction from\ntransaction pool with its hash. This creates overhead in case of blob\ntransaction which needs to load data from billy and RLP decode. This\ncommit creates a lightweight lookup from transaction hash to transaction\nsize and a function GetMetadata to query transaction type and\ntransaction size given the transaction hash.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2025-04-02T07:06:54Z",
                "message": "triedb/pathdb: improve perf by separating nodes map (#31306)\n\nThis PR refactors the `nodeSet` structure in the path database to use\nseparate maps for account and storage trie nodes, resulting in\nperformance improvements. The change maintains the same API while\noptimizing the internal data structure."
            }
        ],
        "2025-04-01": [
            {
                "date": "2025-04-01T14:13:37Z",
                "message": "accounts/abi/abigen: fix a flaky bind test case `NewSingleStructArgument` (#31501)\n\nfound the failed testcase here\nhttps://ci.appveyor.com/project/ethereum/go-ethereum/builds/51767091/job/rbjke432c05pufja\n\nadd a timeout to wait the tx to be mined.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>\nCo-authored-by: Jared Wasinger <j-wasinger@hotmail.com>"
            },
            {
                "date": "2025-04-01T12:29:20Z",
                "message": "core/filtermaps: add metrics (#31511)\n\nThis PR adds metrics related to map rendering and pattern matching to\nthe `core/filtermaps` package."
            },
            {
                "date": "2025-04-01T12:10:22Z",
                "message": "cmd: apply snapshot cache flag in the MakeChain (#31534)"
            },
            {
                "date": "2025-04-01T12:07:47Z",
                "message": "p2p/nat: improve AddMapping code (#31486)\n\nIt introduces a new variable to store the external port returned by the\naddAnyPortMapping function and ensures that the correct external port is\nreturned even in case of an error.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-04-01T11:42:01Z",
                "message": "eth, eth/filters: implement API error code for pruned blocks (#31361)\n\nImplements #31275\n\n---------\n\nCo-authored-by: Jared Wasinger <j-wasinger@hotmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2025-03-31": [
            {
                "date": "2025-03-31T16:29:33Z",
                "message": "version: begin v1.15.8 release cycle reloaded"
            },
            {
                "date": "2025-03-31T16:27:43Z",
                "message": ".travis.yml: remove macos build"
            },
            {
                "date": "2025-03-31T16:26:56Z",
                "message": "version: back to v1.15.7, to fix the build"
            },
            {
                "date": "2025-03-31T13:30:31Z",
                "message": "version: begin v1.15.8 release cycle"
            },
            {
                "date": "2025-03-31T13:29:03Z",
                "message": "version: release go-ethereum v1.15.7 stable"
            },
            {
                "date": "2025-03-31T12:47:56Z",
                "message": "core/filtermaps: hashdb safe delete range (#31525)\n\nThis PR adds `rawdb.SafeDeleteRange` and uses it for range deletion in\n`core/filtermaps`. This includes deleting the old bloombits database,\nresetting the log index database and removing index data for unindexed\ntail epochs (which previously weren't properly implemented for the\nfallback case).\n`SafeDeleteRange` either calls `ethdb.DeleteRange` if the node uses the\nnew path based state scheme or uses an iterator based fallback method\nthat safely skips trie nodes in the range if the old hash based state\nscheme is used. Note that `ethdb.DeleteRange` also has its own iterator\nbased fallback implementation in `ethdb/leveldb`. If a path based state\nscheme is used and the backing db is pebble (as it is on the majority of\nnew nodes) then `rawdb.SafeDeleteRange` uses the fast native range\ndelete.\nAlso note that `rawdb.SafeDeleteRange` has different semantics from\n`ethdb.DeleteRange`, it does not automatically return if the operation\ntakes a long time. Instead it receives a `stopCallback` that can\ninterrupt the process if necessary. This is because in the safe mode\npotentially a lot of entries are iterated without being deleted (this is\ndefinitely the case when deleting the old bloombits database which has a\nsingle byte prefix) and therefore restarting the process every time a\nfixed number of entries have been iterated would result in a quadratic\nrun time in the number of skipped entries.\n\nWhen running in safe mode, unindexing an epoch takes about a second,\nremoving bloombits takes around 10s while resetting a full log index\nmight take a few minutes. If a range delete operation takes a\nsignificant amount of time then log messages are printed. Also, any\nrange delete operation can be interrupted by shutdown (tail uinindexing\ncan also be interrupted by head indexing, similarly to how tail indexing\nworks). If the last unindexed epoch might have \"dirty\" index data left\nthen the indexed map range points to the first valid epoch and\n`cleanedEpochsBefore` points to the previous, potentially dirty one. At\nstartup it is always assumed that the epoch before the first fully\nindexed one might be dirty. New tail maps are never rendered and also no\nfurther maps are unindexed before the previous unindexing is properly\ncleaned up.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-03-31T07:49:19Z",
                "message": ".gitignore: ignore binaries (#31531)\n\nIgnores all hand-built binaries (built with go build, everything built\nwith make is already ignored)"
            }
        ],
        "2025-03-28": [
            {
                "date": "2025-03-28T15:17:28Z",
                "message": "core/filtermaps: revert to unindexed mode in case of indexing error (#31500)\n\nThis PR changes log indexer error handling so that if an indexing error\nhappens then it disables the indexer and reverts to unindexed more\nwithout resetting the database (except in case of a failed database\ninit).\nResetting the database on the first error would probably be overkill as\na client update might fix this without having to reindex the entire\nhistory. It would also make debugging very hard. On the other hand,\nthese errors do not resolve themselves automatically so constantly\nretrying makes no sense either. With these changes a new attempt to\nresume indexing is made every time the client is restarted.\nThe PR also fixes https://github.com/ethereum/go-ethereum/issues/31491\nwhich originated from the tail indexer trying to resume processing a\nfailed map renderer.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-03-28T11:32:24Z",
                "message": "core/txpool: fix nonce assignment in local tracker (#31496)\n\nFixes #31494"
            },
            {
                "date": "2025-03-28T07:16:37Z",
                "message": "core/txpool/legacypool: fix data race in checkDelegationLimit (#31475)"
            },
            {
                "date": "2025-03-28T07:15:13Z",
                "message": "cmd/geth: update geth subcommand arguments (#31293)"
            }
        ],
        "2025-03-27": [
            {
                "date": "2025-03-27T17:40:15Z",
                "message": "Merge pull request #31228 from curvegrid/fix-sim-rollback\n\neth/catalyst: force sync of txpool before clearing subpools in Rollback"
            },
            {
                "date": "2025-03-27T11:22:17Z",
                "message": "internal/ethapi: CreateAccessList with stateOverrides (#31497)\n\nAdd support for state overrides in eth_createAccessList. This will make the method consistent\nwith other execution methods.\n\n---------\n\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            }
        ],
        "2025-03-26": [
            {
                "date": "2025-03-26T15:14:17Z",
                "message": "accounts/abi: include access-list in gas estimation (#31394)\n\nSimple bugfix to include the access-list in the gas-estimation step of\nthe ABI bindings code."
            },
            {
                "date": "2025-03-26T11:57:08Z",
                "message": "eth: downgrade peer removal error to warning level (#31492)"
            },
            {
                "date": "2025-03-26T11:48:04Z",
                "message": "core/rawdb: remove LES database stats (#31495)\n\nThis removes DB schema for LES related db entries. LES has been non-functional\nsince the merge."
            },
            {
                "date": "2025-03-26T04:59:40Z",
                "message": "core/state: fix double-increment of accountLoaded counter (#31493)"
            }
        ],
        "2025-03-25": [
            {
                "date": "2025-03-25T14:01:21Z",
                "message": "internal/ethapi: exclude 7702 authorities from result in eth_createAccessList (#31336)\n\ncloses https://github.com/ethereum/go-ethereum/issues/31335\n\n---------\n\nCo-authored-by: sashabeton <sashabeton2007@gmail.com>"
            },
            {
                "date": "2025-03-25T13:59:44Z",
                "message": "trie: optimize memory allocation (#30932)\n\nThis pull request removes the node copy operation to reduce memory\nallocation. Key Changes as below:\n\n**(a) Use `decodeNodeUnsafe` for decoding nodes retrieved from the trie\nnode reader**\n\nIn the current implementation of the MPT, once a trie node blob is\nretrieved, it is passed to `decodeNode` for decoding. However,\n`decodeNode` assumes the supplied byte slice might be mutated later, so\nit performs a deep copy internally before parsing the node.\n\nGiven that the node reader is implemented by the path database and the\nhash database, both of which guarantee the immutability of the returned\nbyte slice. By restricting the node reader interface to explicitly\nguarantee that the returned byte slice will not be modified, we can\nsafely replace `decodeNode` with `decodeNodeUnsafe`. This eliminates the\nneed for a redundant byte copy during each node resolution.\n\n**(b) Modify the trie in place**\n\nIn the current implementation of the MPT, a copy of a trie node is\ncreated before any modifications are made. These modifications include:\n- Node resolution: Converting the value from a hash to the actual node.\n- Node hashing: Tagging the hash into its cache.\n- Node commit: Replacing the children with its hash.\n- Structural changes: For example, adding a new child to a fullNode or\nreplacing a child of a shortNode.\n\nThis mechanism ensures that modifications only affect the live tree,\nleaving all previously created copies unaffected.\n\nUnfortunately, this property leads to a huge memory allocation\nrequirement. For example, if we want to modify the fullNode for n times,\nthe node will be copied for n times.\n\nIn this pull request, all the trie modifications are made in place. In\norder to make sure all previously created copies are unaffected, the\n`Copy` function now will deep-copy all the live nodes rather than the\nroot node itself.\n\nWith this change, while the `Copy` function becomes more expensive, it's\ntotally acceptable as it's not a frequently used one. For the normal\ntrie operations (Get, GetNode, Hash, Commit, Insert, Delete), the node\ncopy is not required anymore."
            },
            {
                "date": "2025-03-25T13:53:02Z",
                "message": "all: use fmt.Appendf instead of fmt.Sprintf where possible (#31301)"
            },
            {
                "date": "2025-03-25T13:13:05Z",
                "message": "core: process EL requests in GenerateVerkleChain (#31175)"
            },
            {
                "date": "2025-03-25T11:26:15Z",
                "message": "version: begin v1.15.7 release cycle"
            },
            {
                "date": "2025-03-25T10:30:13Z",
                "message": "version: release v1.15.6 stable"
            },
            {
                "date": "2025-03-25T10:16:26Z",
                "message": "core/txpool: reject stale transaction for local tracking (#31473)\n\nFixes https://github.com/ethereum/go-ethereum/issues/31451"
            }
        ],
        "2025-03-24": [
            {
                "date": "2025-03-24T18:08:53Z",
                "message": "internal/ethapi: support for beacon root and withdrawals in simulate api (#31304)\n\nAdds block override fields for beacon block root and withdrawals to the eth_simulateV1.\nAddresses https://github.com/ethereum/go-ethereum/issues/31264"
            },
            {
                "date": "2025-03-24T14:19:14Z",
                "message": "tests: update test submodule (#31479)\n\nThis commit upgrades the test submodule to latest version:\n\nLatest:\nhttps://github.com/ethereum/tests/commit/81862e4848585a438d64f911a19b3825f0f4cd95\nOld:\nhttps://github.com/ethereum/tests/commit/faf33b471465d3c6cdc3d04fbd690895f78d33f2"
            },
            {
                "date": "2025-03-24T11:27:40Z",
                "message": "beacon/params: new checkpoints (#31470)\n\nThis PR updates beacon checkpoints. The checkpoints are now stored as\nembedded hex files, in the same format that\nhttps://github.com/ethereum/go-ethereum/pull/31469 uses."
            },
            {
                "date": "2025-03-24T11:27:11Z",
                "message": "core/filtermaps: fix log indexer init conditions (#31455)\n\nThis PR adds an extra condition to the log indexer initialization in\norder to avoid initializing with block 0 as target head. Previously this\ncaused the indexer to initialize without a checkpoint. Later, when the\nreal chain head was set, it indexed the entire history, then unindexed\nmost of it if only the recent history was supposed to be indexed. Now\nthe init only happens when there is an actual synced chain head and\ntherefore the index is initialized at the most recent checkpoint and\nonly the last year is indexed according to the default parameters.\nDuring checkpoint initialization the best available checkpoint is also\nchecked against the history cutoff point and fails if the indexing would\nhave to start from a block older than the cutoff. If initialization\nfails then the indexer reverts to unindexed mode instead of retrying\nbecause the the failure conditions cannot be expected to recover later."
            },
            {
                "date": "2025-03-24T09:07:38Z",
                "message": "core/rawdb: improve database stats output (#31463)\n\nInstead of reporting all filtermaps stuff in one line, I'm breaking it\ndown into the three separate kinds of entries here.\n\n```\n+-----------------------+-----------------------------+------------+------------+\n|       DATABASE        |          CATEGORY           |    SIZE    |   ITEMS    |\n+-----------------------+-----------------------------+------------+------------+\n| Key-Value store       | Log index filter-map rows   | 59.21 GiB  |  616077345 |\n| Key-Value store       | Log index last-block-of-map | 12.35 MiB  |     269755 |\n| Key-Value store       | Log index block-lv          | 421.70 MiB |   22109169 |\n```\n\nAlso added some other changes to make it easier to debug:\n\n- restored bloombits into the inspect output, so we notice if it doesn't\nget deleted for some reason\n- tracking of unaccounted key examples"
            }
        ],
        "2025-03-23": [
            {
                "date": "2025-03-23T16:38:26Z",
                "message": "internal/ethapi: return code 3 from call/estimateGas even if a revert reason was not returned (#31456)"
            }
        ],
        "2025-03-21": [
            {
                "date": "2025-03-21T13:08:51Z",
                "message": "eth/filter: downgrade log level (#31450)"
            },
            {
                "date": "2025-03-21T12:12:56Z",
                "message": "cmd/geth: add prune history command (#31384)\n\nThis adds a new subcommand 'geth prune-history' that removes the pre-merge history\non supported networks. Geth is not fully ready to work in this mode, please do not run\nthis command on your production node.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-03-21T10:29:51Z",
                "message": "core: respect history cutoff in txindexer (#31393)\n\nIn #31384 we unindex TXes prior to the merge block. However when the\nnode starts up it will try to re-index those back if the config is to index the\nwhole chain. This change makes the indexer aware of the history cutoff block,\navoiding reindexing in that segment.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-03-21T09:47:58Z",
                "message": "core/bloombits: remove old bloombits logic and chain indexer (#31081)\n\nThis PR is #3 of a 3-part series that implements the new log index\nintended to replace core/bloombits.\nBased on https://github.com/ethereum/go-ethereum/pull/31079 and\nhttps://github.com/ethereum/go-ethereum/pull/31080\nReplaces https://github.com/ethereum/go-ethereum/pull/30370\n\nThis part removes the old bloombits package and the chain indexer that\nwas only used by bloombits. Deletes the old bloombits database.\n\nFilterMaps data structure explanation:\nhttps://gist.github.com/zsfelfoldi/a60795f9da7ae6422f28c7a34e02a07e\n\nLog index generator code overview:\nhttps://gist.github.com/zsfelfoldi/97105dff0b1a4f5ed557924a24b9b9e7\n\nSearch pattern matcher code overview:\nhttps://gist.github.com/zsfelfoldi/5981735641c956afb18065e84f8aff34\n\nNote that the possibility of a tree hashing scheme and remote proof\nprotocol are mentioned in the documents above but they are not exactly\nspecified yet. These specs are WIP and will be finalized after the local\nlog indexer/filter code is finalized and merged.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2025-03-20": [
            {
                "date": "2025-03-20T21:05:15Z",
                "message": "core/txpool/legacypool: reject gapped tx from delegated account (#31430)\n\nThis pull request improves the protection mechanism in the txpool for \nsenders with delegation. A sender with either delegation or pending \ndelegation is now limited to a maximum of one in-flight executable \ntransaction, while gapped transactions will be rejected.\n\nReason:\nIf nonce-gapped transaction from delegated/pending-delegated senders\ncan be acceptable, then it's no-longer possible to send another\n\"executable\" transaction with correct nonce due to the policy of at most\none inflight tx. The gapped transaction will be stuck in the txpool, with no\nmeaningful way to unlock the sender.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            },
            {
                "date": "2025-03-20T16:11:40Z",
                "message": "p2p/discover: repeat WHOAREYOU challenge when handshake in progress (#31356)\n\nThis fixes the handshake in a scenario where the remote end sends two unknown\npackets in a row. When this happens, we would previously respond to both with\na WHOAREYOU challenge, but keep only the latest sent challenge. Transmission is\nassumed to be unreliable, so any client that sends two request packets simultaneously\nhas to be prepared to follow up on whichever request leads to a handshake. With\nthis fix, we force them to do the handshake that we can actually complete.\n\nFixes #30581"
            },
            {
                "date": "2025-03-20T13:13:58Z",
                "message": "core/filtermaps: allow log search while head indexing (#31429)\n\nThis PR changes the matcher syncing conditions so that it is possible to\nrun a search while head indexing is in progress. Previously it was a\nrequirement to have the head indexed in order to perform matcher sync\nbefore and after a search. This was unnecessarily strict as the purpose\nwas just to avoid syncing the valid range with the temporary shortened\nindexed range applied while updating existing head maps. Now the sync\ncondition explicitly checks whether the indexer has a temporary indexed\nrange with some head maps being partially updated.\nIt also fixes a deadlock that happened when matcher synchronization was\nattempted in the event handler called from the `writeFinishedMaps`\nperiodical callback."
            },
            {
                "date": "2025-03-20T12:33:13Z",
                "message": "eth/tracers: fix test (#31445)\n\nThis pull request fixes a broken unit test\n\n```\n=== CONT  TestTracingWithOverrides\n    api_test.go:1012: result: {\"gas\":21167,\"failed\":false,\"returnValue\":\"0x0000000000000000000000000000000000000000000000000000000000000002\",\"structLogs\":[{\"pc\":0,\"op\":\"PUSH1\",\"gas\":24978860,\"gasCost\":3,\"depth\":1,\"stack\":[]},{\"pc\":2,\"op\":\"CALLDATALOAD\",\"gas\":24978857,\"gasCost\":3,\"depth\":1,\"stack\":[\"0x0\"]},{\"pc\":3,\"op\":\"PUSH1\",\"gas\":24978854,\"gasCost\":3,\"depth\":1,\"stack\":[\"0x1\"]},{\"pc\":5,\"op\":\"ADD\",\"gas\":24978851,\"gasCost\":3,\"depth\":1,\"stack\":[\"0x1\",\"0x1\"]},{\"pc\":6,\"op\":\"PUSH1\",\"gas\":24978848,\"gasCost\":3,\"depth\":1,\"stack\":[\"0x2\"]},{\"pc\":8,\"op\":\"MSTORE\",\"gas\":24978845,\"gasCost\":6,\"depth\":1,\"stack\":[\"0x2\",\"0x0\"]},{\"pc\":9,\"op\":\"PUSH1\",\"gas\":24978839,\"gasCost\":3,\"depth\":1,\"stack\":[]},{\"pc\":11,\"op\":\"PUSH1\",\"gas\":24978836,\"gasCost\":3,\"depth\":1,\"stack\":[\"0x20\"]},{\"pc\":13,\"op\":\"RETURN\",\"gas\":24978833,\"gasCost\":0,\"depth\":1,\"stack\":[\"0x20\",\"0x0\"]}]}\n    api_test.go:1013: test 10, result mismatch, have\n        {21167 false 0x0000000000000000000000000000000000000000000000000000000000000002}\n        , want\n        {21167 false 0000000000000000000000000000000000000000000000000000000000000002}\n    api_test.go:1012: result: {\"gas\":25664,\"failed\":false,\"returnValue\":\"0x000000000000000000000000c6e93f4c1920eaeaa1e699f76a7a8c18e3056074\",\"structLogs\":[]}\n    api_test.go:1013: test 11, result mismatch, have\n        {25664 false 0x000000000000000000000000c6e93f4c1920eaeaa1e699f76a7a8c18e3056074}\n        , want\n        {25664 false 000000000000000000000000c6e93f4c1920eaeaa1e699f76a7a8c18e3056074}\n\n```"
            },
            {
                "date": "2025-03-20T09:20:51Z",
                "message": "eth/tracers: hex-encode returnValue (#31216)\n\nThis is a **breaking change** to the opcode tracer. The top-level\n`returnValue` field of a trace will be now hex-encoded. If the return\ndata is empty, this field will contain \"0x\".\n\nFixes #31196"
            },
            {
                "date": "2025-03-20T08:23:10Z",
                "message": "cmd/workload: fixed filter test request error handling (#31424)\n\nThis PR fixes the broken request error handling of the workload filter\ntests. Until now `validateHistoryPruneErr` was invoked with `fq.Err` as\nan input which was always nil and a timeout or http error was reported\nas a result content mismatch.\nAlso, in case of `errPrunedHistory` it is wrong to return here without\nsetting an error because then it will look like a valid empty result and\nthe check will later fail. So instead `errPrunedHistory` is always\nreturned now (without printing an error message) and the callers of\n`run` should handle this special case (typically ignore silently)."
            },
            {
                "date": "2025-03-20T05:14:13Z",
                "message": "cmd/utils: force hash scheme for archive mode (#31439)"
            }
        ],
        "2025-03-19": [
            {
                "date": "2025-03-19T15:05:44Z",
                "message": "core/types: cleanup tx signer logic (#31434)\n\nThis removes the signer type-train in favor of defining a single object\nthat can handle all tx types. Supported types are enabled via a map.\nNotably, the new signer also supports disabling legacy transactions."
            },
            {
                "date": "2025-03-19T06:21:40Z",
                "message": "core/types: reduce allocs in transaction signing (#31258)\n\nThis PR roughly halves the number of allocations needed to compute the\nsigHash for a transaction.\n\nThis sigHash is used whenever we recover a signature of a transaction,\nso quite often. During a recent benchmark full syncing on Holesky,\nroughly 2.8% of all allocations were happening here because the fields\nfrom the transaction would be copied multiple times.\n\n```\n66168733  153175654 (flat, cum)  2.80% of Total\n         .          .    368:func (s londonSigner) Hash(tx *Transaction) common.Hash {\n         .          .    369:\tif tx.Type() != DynamicFeeTxType {\n         .          .    370:\t\treturn s.eip2930Signer.Hash(tx)\n         .          .    371:\t}\n         .   19169966    372:\treturn prefixedRlpHash(\n         .          .    373:\t\ttx.Type(),\n  26442187   26442187    374:\t\t[]interface{}{\n         .          .    375:\t\t\ts.chainId,\n   6848616    6848616    376:\t\t\ttx.Nonce(),\n         .   19694077    377:\t\t\ttx.GasTipCap(),\n         .   18956774    378:\t\t\ttx.GasFeeCap(),\n   6357089    6357089    379:\t\t\ttx.Gas(),\n         .   12321050    380:\t\t\ttx.To(),\n         .   16865054    381:\t\t\ttx.Value(),\n  13435187   13435187    382:\t\t\ttx.Data(),\n  13085654   13085654    383:\t\t\ttx.AccessList(),\n         .          .    384:\t\t})\n         .          .    385:}\n```\n\nThis PR reduces the allocations and speeds up the computation of the\nsigHash by ~22%, which is quite significantly given that this operation\ninvolves a call to Keccak\n```\n// BenchmarkHash-8   \t  440082\t      2639 ns/op\t     384 B/op\t      13 allocs/op\n// BenchmarkHash-8   \t  493566\t      2033 ns/op\t     240 B/op\t       6 allocs/op\n```\n\n```\nHash-8   2.691\u00b5 \u00b1 8%   2.097\u00b5 \u00b1 9%  -22.07% (p=0.000 n=10)\n```\n\nIt also kinda cleans up stuff in my opinion, since the transaction\nshould itself know best how to compute the sighash\n\n\n\n\n![Screenshot_2025-02-25_13-52-41](https://github.com/user-attachments/assets/e2b268aa-e137-417d-926b-f3619daef748)\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2025-03-19T06:20:50Z",
                "message": "core/txpool, eth: add GetRLP to transaction pool (#31307)\n\nCurrently, when answering GetPooledTransaction request, txpool.Get() is\nused. When the requested hash is blob transaction, blobpool.Get() is\ncalled. This function loads the RLP-encoded transaction from limbo then\ndecodes and returns. Later, in answerGetPooledTransactions, we need to\nRLP encode again. This decode then encode is wasteful. This commit adds\nGetRLP to transaction pool interface so that answerGetPooledTransactions\ncan use the RLP-encoded from limbo directly.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2025-03-18": [
            {
                "date": "2025-03-18T14:41:34Z",
                "message": "ethclient: Add EstimateGasAtBlock[Hash] to estimate against a specific block (#27508)\n\nThe main use case I see of this is that it allows users to estimate gas\nagainst the same state that they query for their nonce, and the same\nstate they base the data of their transaction against. This helps ensure\nthat gas estimation won't fail and the transaction won't revert on-chain\nbecause of a mismatch between the state used for gas estimation and the\nstate used to generate the inputs to gas estimation or the transaction's\nnonce when submitted to the mempool.\n\nThis PR also updates the EstimateGas comment based on the new geth\n`eth_estimateGas` default of using latest state as of v1.12.0:\nhttps://github.com/ethereum/go-ethereum/pull/24363\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-03-18T13:32:29Z",
                "message": "cmd: set name to chaindata for all the opened db (#31352)\n\nWhen I'm running `geth import --metrics`, the metrics is different to\nnormal `geth --metrics`, so the grafana dashboard needs to be updated,\neg: `eth_db_chaindata_disk_read` vs `disk_read`.\n\nSo I think we should always set the name to `eth/db/chaindata` for more\nconvenient.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
            },
            {
                "date": "2025-03-18T12:46:23Z",
                "message": "core/filtermaps: fixed indexer checkpoint initialization (#31419)\n\nThis PR fixes a bug in the `lastMapBoundaryBefore` logic that resulted\nin incorrect checkpoint initialization (started rendering from the\nprevious epoch boundary which caused the `needTailEpoch` check to fail).\nApparently the bug was present before but went unnoticed because\n`needTailEpoch` behaved differently.\nFixes https://github.com/ethereum/go-ethereum/issues/31413"
            },
            {
                "date": "2025-03-18T11:40:38Z",
                "message": "internal/ethapi: fix logs bloom in eth_simulateV1 (#31411)\n\nGeth was returning empty logsBloom for the simulated block."
            },
            {
                "date": "2025-03-18T11:07:49Z",
                "message": "params: add hoodi testnet definition (#31406)\n\nAdds support for the new hoodi testnet. Hoodi is meant for stakers to test\ntheir setup. For more info please refer to https://hoodi.ethpandaops.io/."
            },
            {
                "date": "2025-03-18T11:05:12Z",
                "message": "eth/tracers: fix precompile move feat for debug_traceCall (#31348)\n\n`debug_traceCall` was ignoring the override `movePrecompileToAddress`. Now it is\nat feature-parity with eth_call."
            }
        ],
        "2025-03-17": [
            {
                "date": "2025-03-17T17:59:04Z",
                "message": "eth/filters: implement log filter using new log index (#31080)\n\nThis PR is #2 of a 3-part series that implements the new log index\nintended to replace core/bloombits.\nBased on https://github.com/ethereum/go-ethereum/pull/31079\nReplaces https://github.com/ethereum/go-ethereum/pull/30370\n\nThis part replaces the old bloombits based log search logic in\n`eth/filters` to use the new `core/filtermaps` logic.\n\nFilterMaps data structure explanation:\nhttps://gist.github.com/zsfelfoldi/a60795f9da7ae6422f28c7a34e02a07e\n\nLog index generator code overview:\nhttps://gist.github.com/zsfelfoldi/97105dff0b1a4f5ed557924a24b9b9e7\n\nSearch pattern matcher code overview:\nhttps://gist.github.com/zsfelfoldi/5981735641c956afb18065e84f8aff34\n\nNote that the possibility of a tree hashing scheme and remote proof\nprotocol are mentioned in the documents above but they are not exactly\nspecified yet. These specs are WIP and will be finalized after the local\nlog indexer/filter code is finalized and merged.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-03-17T15:01:37Z",
                "message": "core/rawdb: allow for truncation in the freezer (#31362)\n\nHere we add the notion of prunable tables for the `TruncateTail` operation\nin the freezer. TruncateTail for the chain freezer now only truncates the body and\nreceipts tables, leaving headers and hashes as-is.\n\nThis change also requires changing the validation/repair at startup to allow for\ntables with different tail. For the header and hash tables, we now require them to start\nat number zero.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2025-03-17T14:56:55Z",
                "message": "cmd/abigen, accounts/abi/bind: implement abigen version 2 (#31379)\n\nThis PR implements a new version of the abigen utility (v2) which exists\nalong with the pre-existing v1 version.\n\nAbigen is a utility command provided by go-ethereum that, given a\nsolidity contract ABI definition, will generate Go code to transact/call\nthe contract methods, converting the method parameters/results and\nstructures defined in the contract into corresponding Go types. This is\nuseful for preventing the need to write custom boilerplate code for\ncontract interactions.\n\nMethods in the generated bindings perform encoding between Go types and\nSolidity ABI-encoded packed bytecode, as well as some action (e.g.\n`eth_call` or creating and submitting a transaction). This limits the\nflexibility of how the generated bindings can be used, and prevents\neasily adding new functionality, as it will make the generated bindings\nlarger for each feature added.\n\nAbigen v2 was conceived of by the observation that the only\nfunctionality that generated Go bindings ought to perform is conversion\nbetween Go types and ABI-encoded packed data. Go-ethereum already\nprovides various APIs which in conjunction with conversion methods\ngenerated in v2 bindings can cover all functionality currently provided\nby v1, and facilitate all other previously-desired use-cases.\n\n## Generating Bindings\n\nTo generate contract bindings using abigen v2, invoke the `abigen`\ncommand with the `--v2` flag. The functionality of all other flags is\npreserved between the v2 and v1 versions.\n\n## What is Generated in the Bindings\n\nThe execution of `abigen --v2` generates Go code containing methods\nwhich convert between Go types and corresponding ABI-encoded data\nexpected by the contract. For each input-accepting contract method and\nthe constructor, a \"packing\" method is generated in the binding which\nconverts from Go types to the corresponding packed solidity expected by\nthe contract. If a method returns output, an \"unpacking\" method is\ngenerated to convert this output from ABI-encoded data to the\ncorresponding Go types.\n\nFor contracts which emit events, an unpacking method is defined for each\nevent to unpack the corresponding raw log to the Go type that it\nrepresents.\n\nLikewise, where custom errors are defined by contracts, an unpack method\nis generated to unpack raw error data into a Go type.\n\n## Using the Generated Bindings\n\nFor a smooth user-experience, abigen v2 comes with a number of utility\nfunctions to be used in conjunction with the generated bindings for\nperforming common contract interaction use-cases. These include:\n\n* filtering for historical logs of a given topic\n* watching the chain for emission of logs with a given topic\n* contract deployment methods\n* Call/Transact methods\n\nhttps://geth.ethereum.org will be updated to include a new tutorial page\nfor abigen v2 with full code examples. The page currently exists in a\nPR: https://github.com/ethereum/go-ethereum/pull/31390 .\n\nThere are also extensive examples of interactions with contract bindings\nin [test\ncases](https://github.com/ethereum/go-ethereum/blob/cc855c7ede460270ae9c83bba278b23cb4f26a00/accounts/abi/bind/v2/lib_test.go)\nprovided with this PR.\n\n---------\n\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-03-17T08:32:44Z",
                "message": "eth/catalyst: set FeeRecipient in dev mode (#31316)\n\nthis adds 2 features to improve `geth --dev` experience.\n\n1. we don't need to use `dev_SetFeeRecipient` to set initial coinbase\naddress. it was a pain.\n2. we don't need to unlock keystore if we don't use it. we had it\nbecause of clique."
            },
            {
                "date": "2025-03-17T08:22:12Z",
                "message": "go.mod: bump golang.org/x/net from 0.34.0 to 0.36.0 (#31369)\n\nBumps [golang.org/x/net](https://github.com/golang/net) from 0.34.0 to\n0.36.0.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a\nhref=\"https://github.com/golang/net/commit/85d1d54551b68719346cb9fec24b911da4e452a1\"><code>85d1d54</code></a>\ngo.mod: update golang.org/x dependencies</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/cde1dda944dcf6350753df966bb5bda87a544842\"><code>cde1dda</code></a>\nproxy, http/httpproxy: do not mismatch IPv6 zone ids against hosts</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/fe7f0391aa994a401c82d829183c1efab7a64df4\"><code>fe7f039</code></a>\npublicsuffix: spruce up code gen and speed up PublicSuffix</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/459513d1f8abff01b4854c93ff0bff7e87985a0a\"><code>459513d</code></a>\ninternal/http3: move more common stream processing to genericConn</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/aad0180cad195ab7bcd14347e7ab51bece53f61d\"><code>aad0180</code></a>\nhttp2: fix flakiness from t.Log when GOOS=js</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/b73e5746f64471c22097f07593643a743e7cfb0f\"><code>b73e574</code></a>\nhttp2: don't log expected errors from writing invalid trailers</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/5f45c776a9c4d415cbe67d6c22c06fd704f8c9f1\"><code>5f45c77</code></a>\ninternal/http3: make read-data tests usable for server handlers</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/43c2540165a4d1bc9a81e06a86eb1e22ece64145\"><code>43c2540</code></a>\nhttp2, internal/httpcommon: reject userinfo in :authority</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/1d78a085008d9fedfe3f303591058325f99727d7\"><code>1d78a08</code></a>\nhttp2, internal/httpcommon: factor out server header logic for\nh2/h3</li>\n<li><a\nhref=\"https://github.com/golang/net/commit/0d7dc54a591c12b4bd03bcd745024178d03d9218\"><code>0d7dc54</code></a>\nquic: add Conn.ConnectionState</li>\n<li>Additional commits viewable in <a\nhref=\"https://github.com/golang/net/compare/v0.34.0...v0.36.0\">compare\nview</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=golang.org/x/net&package-manager=go_modules&previous-version=0.34.0&new-version=0.36.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't\nalter it yourself. You can also trigger a rebase manually by commenting\n`@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits\nthat have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after\nyour CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge\nand block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating\nit. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all\nof the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop\nDependabot creating any more for this major version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop\nDependabot creating any more for this minor version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop\nDependabot creating any more for this dependency (unless you reopen the\nPR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the\n[Security Alerts\npage](https://github.com/ethereum/go-ethereum/network/alerts).\n\n</details>\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
            },
            {
                "date": "2025-03-17T06:13:12Z",
                "message": "eth/catalyst: fix flaky test (#31403)\n\nThis pull request enhances the unit test, avoiding unnecessary failure\nin CI.\n\n```\n--- FAIL: TestSimulatedBeaconSendWithdrawals (12.08s)\n    simulated_beacon_test.go:139: timed out without including all withdrawals/txs\nFAIL\n```"
            },
            {
                "date": "2025-03-17T01:48:08Z",
                "message": "metrics: spin up meter ticker routine when enabling metric system (#31400)\n\nAddresses https://github.com/ethereum/go-ethereum/issues/31244"
            }
        ],
        "2025-03-15": [
            {
                "date": "2025-03-15T17:35:10Z",
                "message": "cmd/utils: fix geth test issue on OpenBSD (#31357)"
            }
        ],
        "2025-03-14": [
            {
                "date": "2025-03-14T17:53:05Z",
                "message": "tests: update ethereum/tests to v17.0 (#31381)\n\nGet the re-filled tests (plus removal of outdated EIP-2537 tests)"
            },
            {
                "date": "2025-03-14T16:56:24Z",
                "message": "cmd/evm: fix statetest with multi-fork statetest fixtures (#31374)\n\nFixes `evm statetest` for state test fixtures with multiple fork entries\nin their `post` field (e.g.,\n[chainId.json](https://github.com/ethereum/tests/blob/81862e4848585a438d64f911a19b3825f0f4cd95/GeneralStateTests/stChainId/chainId.json#L39)).\n\nWhen these re-activated flags aren't exposed, `statetest` only executes\nthe fixture for a single fork entry instead of all of the forks as\nexpected.\n\nThis only affects ethereum/tests state test fixtures, not\nethereum/execution-spec-tests (EEST) state tests. EEST writes a separate\nfixture/test case (i.e. a separate top-level dict entry in the .json)\nfor each fork configuration as apposed to combining multiple forks in\none fixture test case: New EEST state tests targeting Prague behavior\nare not affected."
            },
            {
                "date": "2025-03-14T15:56:53Z",
                "message": "log: fix SetDefault for custom loggers (#31368)\n\nCurrently, even though it takes in a `Logger` interface,\n`log.SetDefualt` enforces that the concrete type of the provided logger\nis `*logger` because:\n1. in `init` `root.Store` is called with a `*logger`\n2. `atomic.Value` panics if the concrete type provided in `Store` is not\nconsistent across calls.\n([ref](https://pkg.go.dev/sync/atomic#Value.Store))\n\n> All calls to Store for a given Value must use values of the same\nconcrete type.\n\nThis PR changes to use `sync.RWMutex` and adds a test that panics on\n`master`."
            },
            {
                "date": "2025-03-14T14:27:38Z",
                "message": "accounts/abi: improve unpack performance (#31387)\n\nSlightly improves performance of abi.Unpack\n\n```\nBefore\nBenchmarkUnpack/0-14   5965714       210.9 ns/op     280 B/op       5 allocs/op\nBenchmarkUnpack/1-14   2148283       569.7 ns/op     688 B/op      16 allocs/op\n\nAfter:\nBenchmarkUnpack/0-14  \t 7693365\t       151.2 ns/op\t     136 B/op\t       4 allocs/op\nBenchmarkUnpack/1-14  \t 2261294\t       508.9 ns/op\t     544 B/op\t      15 allocs/op\n```\n\nreplaces https://github.com/ethereum/go-ethereum/pull/31292 since I was\nunable to push to your branch @Exca-DK\n\n---------\n\nCo-authored-by: Exca-DK <dawidk.info@gmail.com>"
            }
        ],
        "2025-03-13": [
            {
                "date": "2025-03-13T18:04:16Z",
                "message": "core/filtermaps: FilterMaps log index generator and search logic (#31079)\n\nThis PR is #1 of a 3-part series that implements the new log index\nintended to replace core/bloombits.\nReplaces https://github.com/ethereum/go-ethereum/pull/30370\n\nThis part implements the new data structure, the log index generator and\nthe search logic. This PR has most of the complexity but it does not\naffect any existing code yet so maybe it is easier to review separately.\n\nFilterMaps data structure explanation:\nhttps://gist.github.com/zsfelfoldi/a60795f9da7ae6422f28c7a34e02a07e\n\nLog index generator code overview:\nhttps://gist.github.com/zsfelfoldi/97105dff0b1a4f5ed557924a24b9b9e7\n\nSearch pattern matcher code overview:\nhttps://gist.github.com/zsfelfoldi/5981735641c956afb18065e84f8aff34\n\nNote that the possibility of a tree hashing scheme and remote proof\nprotocol are mentioned in the documents above but they are not exactly\nspecified yet. These specs are WIP and will be finalized after the local\nlog indexer/filter code is finalized and merged.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-03-13T17:54:20Z",
                "message": "eth/ethconfig: fix history prune blocks (#31383)"
            },
            {
                "date": "2025-03-13T14:21:47Z",
                "message": "cmd/workload: implement checks for history-pruned node (#31355)\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-03-13T14:16:01Z",
                "message": "p2p/discover: expose discv5 functions for portal JSON-RPC interface (#31117)\n\nFixes #31093\n\nHere we add some API\u00a0functions on the UDPv5 object for the purpose of implementing\nthe Portal Network JSON-RPC API in the shisui client.\n\n---------\n\nSigned-off-by: Chen Kai <281165273grape@gmail.com>"
            },
            {
                "date": "2025-03-13T11:35:10Z",
                "message": "core: update blockProcFeed in insertChain (#31065)\n\nThis PR moves the updating of the `blockProcFeed` event feed from\n`InsertChain` to `insertChain` in order to ensure that the feed\nsubscribers are notified whenever block processing happens.\nNote that this event is not subscribed to anywhere in our codebase at\nthe moment, earlier it was used by the LES server to avoid slowing down\nblock processing. Now I want to do the same with the log indexer, the\nproblem is that back then every block insertion was done by\n`InsertChain`, now the regular payload insertion is done by\n`InsertBlockWithoutSetHead`. Both of these (and also `SetCanonical` if\nneeded) calls `insertChain` so I moved the feed update there."
            },
            {
                "date": "2025-03-13T10:43:00Z",
                "message": "eth/ethconfig: add HistoryMode (#31365)\n\nHere I am adding a config option and geth flag (`--history.chain`) for\nconfiguring history pruning. There are two options available:\n\n- `--history.chain all` is the default and will keep all history like\nbefore.\n- `--history.chain postmerge` will configure the history cutoff point to\nthe merge block.\n\nThe option doesn't actually do anything right now, but we need it as a\nprecursor for other history pruning changes."
            }
        ],
        "2025-03-11": [
            {
                "date": "2025-03-11T09:26:16Z",
                "message": "Update core/txpool/txpool.go\n\nCo-authored-by: jwasinger <j-wasinger@hotmail.com>"
            },
            {
                "date": "2025-03-11T21:30:45Z",
                "message": "go.mod: update crypto to remove dependency warning (#31334)"
            },
            {
                "date": "2025-03-11T21:30:02Z",
                "message": "ethdb: no need to check the metric nilness (#31353)\n\nThe metric always has a value, no need to check for the nil. \n\nSeems this code was first introduced here\nhttps://github.com/ethereum/go-ethereum/blob/054412e33528e53f6deae940c870217b614707b9/metrics/meter.go#L45-L48\n\nAs the `nilMeter` was removed, so this check seems is useless.\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
            },
            {
                "date": "2025-03-11T16:17:47Z",
                "message": "beacon/types, beacon/blsync: update for electra (#31243)\n\nThis updates the blsync base types for the Electra fork. I've been\ntesting, and it doesn't seem to make blsync fully work on Electra. But\nI'd still like to get this in to make some progress.\n\n---------\n\nCo-authored-by: Zsolt Felfoldi <zsfelfoldi@gmail.com>"
            },
            {
                "date": "2025-03-11T15:15:07Z",
                "message": "core: prefund pectra precompiles in developer genesis (#31342)\n\nPrefund the precompile addresses for the new precompiles in the\ndeveloper genesis block."
            },
            {
                "date": "2025-03-11T15:00:50Z",
                "message": "core/txpool: demote error log to warn (#31332)\n\nThis error log in `legacypool.go` isn't necessary, since even though the\nbehavior is unexpected, it is handled correctly. A discussion on issue\n#22301 concluded that this should instead be a warning log."
            }
        ],
        "2025-03-12": [
            {
                "date": "2025-03-12T11:21:50Z",
                "message": "crypto/secp256k1: update libsecp256k1 (#31242)\n\nUpdates the libsecp256k1 dependency to commit:\nc0d9480fbbf8eccbd4be23ed27f6f2af6f3b211e\n\nPR:\n```\nBenchmarkSign-24    \t   57756\t     21214 ns/op\t     164 B/op\t       3 allocs/op\nBenchmarkRecover-24    \t   37156\t     33044 ns/op\t      80 B/op\t       1 allocs/op\nBenchmarkEcrecoverSignature-24    \t   36889\t     32935 ns/op\t      80 B/op\t       1 allocs/op\nBenchmarkVerifySignature-24    \t   41163\t     29207 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkDecompressPubkey-24    \t  318624\t      4062 ns/op\t     304 B/op\t       6 allocs/op\n```\n\nMaster:\n```\nBenchmarkSign-24    \t   34509\t     35330 ns/op\t     164 B/op\t       3 allocs/op\nBenchmarkRecover-24    \t   25418\t     47725 ns/op\t      80 B/op\t       1 allocs/op\nBenchmarkEcrecoverSignature-24    \t   25735\t     47591 ns/op\t      80 B/op\t       1 allocs/op\nBenchmarkVerifySignature-24    \t   29108\t     41097 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkDecompressPubkey-24    \t  294747\t      4143 ns/op\t     304 B/op\t       6 allocs/op\n```\n\nPerformance seems to be improved significantly:\n```\nSign-24      34.86\u00b5 \u00b1 3%   21.66\u00b5 \u00b1 2%  -37.86% (p=0.000 n=10)\nRecover-24   46.14\u00b5 \u00b1 3%   33.24\u00b5 \u00b1 2%  -27.95% (p=0.000 n=10)\n```"
            },
            {
                "date": "2025-03-12T11:20:40Z",
                "message": "cmd: ctrl-c to halt the whole import process (#31360)\n\nWhen I press Ctrl-C during the import of multiple files, the import\nprocess will still attempt to import the subsequent files. However, in\nnormal circumstances, users would expect the import to stop immediately\nupon pressing Ctrl-C.\n\nAnd because the current file was not finished importing, subsequent\nimport tasks often fail due to an `unknown ancestor` error.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2025-03-10": [
            {
                "date": "2025-03-10T13:10:16Z",
                "message": "cmd,eth,les: replace Cancun override flag with Prague (#31341)\n\nIt's that time of the cycle, should have this ready to go for mainnet\nPrague release."
            }
        ],
        "2025-03-07": [
            {
                "date": "2025-03-07T10:23:19Z",
                "message": "core/rawdb,state: add preimage miss metric (#31295)\n\n1. The metric of preimage/hits are always the same as preimage/total, prefer to replace\n   the hits with miss instead.\n2. For the state/read/accounts metric, follow the same naming of others,\n  change into singuar."
            }
        ],
        "2025-03-05": [
            {
                "date": "2025-03-05T11:51:53Z",
                "message": "build: fix execution-spec-tests sanitycheck URL (#31314)"
            },
            {
                "date": "2025-03-05T10:57:18Z",
                "message": "version: begin v1.15.6 release cycle"
            },
            {
                "date": "2025-03-05T10:55:17Z",
                "message": "version: release v1.15.5 stable"
            },
            {
                "date": "2025-03-05T10:04:24Z",
                "message": "core: match on deposit contract log topic (#31317)\n\nThis resolves a situation on the Sepolia testnet, which has a different\ndeposit contract. The contract on that network emits two kinds of logs,\ninstead of only deposit events like the deposit contract on mainnet. So\nwe need to skip events with mismatched topics."
            },
            {
                "date": "2025-03-05T10:02:18Z",
                "message": "build: upgrade to Go 1.24.1 and golangci-lint 1.64.4 (#31313)\n\n- upgrade -dlgo version to Go 1.24.1\n- upgrade golangci-lint version to 1.64.6"
            }
        ],
        "2025-03-04": [
            {
                "date": "2025-03-04T08:30:03Z",
                "message": "eth/tracers: fix omitempty for memory and storage (#31289)\n\nThis fixes a regression in the opcode tracer API where we would log\nempty memory and storage fields."
            }
        ],
        "2025-03-01": [
            {
                "date": "2025-03-01T20:40:14Z",
                "message": "version: begin v1.15.5 release cycle"
            },
            {
                "date": "2025-03-01T20:37:47Z",
                "message": "version: release go-ethereum v1.15.4 stable"
            },
            {
                "date": "2025-03-01T13:11:51Z",
                "message": "ethclient: add BlobBaseFee method (#31290)"
            },
            {
                "date": "2025-03-01T13:10:38Z",
                "message": "eth: check blob transaction validity on the peer goroutine when received (#31219)\n\nThis ensures that if we receive a blob transaction announcement where we cannot\nlink the tx to the sidecar commitments, we will drop the sending peer. This check\nis added in the protocol handler for the PooledTransactions message.\n\nTests for this have also been added in the cross-client \"eth\" protocol test suite.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-03-01T12:58:57Z",
                "message": "eth: do not add failed tx to localTxTracker (#31202)\n\nIn transaction-sending APIs such as `eth_sendRawTransaction`, a submitted transaction \nfailing the configured txpool validation rules (i.e. fee too low) would cause an error to be\nreturned, even though the transaction was successfully added into the locals tracker.\nOnce added there, the transaction may even be included into the chain at a later time,\nwhen fee market conditions change.\n\nThis change improves on this by performing the validation in the locals tracker, basically\nskipping some of the validation rules for local transactions. We still try to add the tx to the\nmain pool immediately, but an error will only be returned for transactions which are \nfundamentally invalid.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2025-02-28": [
            {
                "date": "2025-02-28T12:07:21Z",
                "message": "eth: remove EventMux accessors (#30017)\n\nHi, it seems these methods in the `backend.go` and `api_backend.go`\nfiles are not used that expose the eventMux, but that is not needed."
            },
            {
                "date": "2025-02-28T11:53:56Z",
                "message": "core/tracing: stringer for gas and nonce change reasons (#31234)"
            }
        ],
        "2025-02-27": [
            {
                "date": "2025-02-27T16:52:22Z",
                "message": "build/deb: add step for new Go bootstrap to debian rules (#31283)\n\nNext attempt at fixing the build on launchpad.net"
            },
            {
                "date": "2025-02-27T14:53:52Z",
                "message": "all: drop x/exp direct dependency (#30558)\n\nThis is a not-particularly-important \"cleanliness\" PR. It removes the\nlast remnants of the `x/exp` package, where we used the `maps.Keys`\nfunction.\n\nThe original returned the keys in a slice, but when it became 'native'\nthe signature changed to return an iterator, so the new idiom is\n`slices.Collect(maps.Keys(theMap))`, unless of course the raw iterator\ncan be used instead.\n\nIn some cases, where we previously collect into slice and then sort, we\ncan now instead do `slices.SortXX` on the iterator instead, making the\ncode a bit more concise.\n\nThis PR might be _slighly_ less optimal, because the original `x/exp`\nimplementation allocated the slice at the correct size off the bat,\nwhich I suppose the new code won't.\n\nPutting it up for discussion.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-02-27T14:52:00Z",
                "message": "build: simplify go mod tidy check (#31266)\n\nThis changes the go mod tidy check to use the go mod tidy -diff command,\nremoving the custom diffing for go.mod. The check for go.mod/go.sum is now\nperformed in the check_generate action.\n\nAlso included is a change where check_generate and check_baddeps will now\nrun on the GitHub Actions lint step.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-02-27T11:07:36Z",
                "message": "build: update PPA Go bootstrap version to 1.23 (#31282)\n\nThis is for fixing the PPA build, which has been failing since the\nupdate to Go 1.24. In Go 1.24, the required Go version for bootstrapping\nwas updated to 1.22. In general, they are following through with always\ndepending on the Go version two releases ago for bootstrapping.\n\nSince we still support Ubuntu Xenial (16.04) until its EOL date of\n04/2026, and Xenial only has golang 1.10 as a package, we now need to\nbuild Go a total of four times to get the most recent version. I'm adding a step\nfor Go 1.23 here. This should last us until Go 1.25, which should be out around\n04/2026, and we can hopefully drop the first bootstrapping step at that time."
            },
            {
                "date": "2025-02-27T09:08:33Z",
                "message": "core/txpool: fix error logs flood caused by removeAuthorities (#31249)\n\nwhen remove an non-SetCodeTxType transaction, error logs flood\n```\nt=2025-02-25T03:11:06+0000 lvl=error msg=\"Authority with untracked tx\" addr=0xD5bf9221fCB1C31Cd1EE477a60c148d40dD63DC1 hash=0x626fdf205a5b1619deb2f9e51fed567353f80acbd522265b455daa0821c571d9\n```\n\nin this PR, only try to removeAuthorities for txs with SetCodeTxType\n\nin addition, the performance of removeAuthorities improved a lot,\nbecause no need range all `t.auths` now.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            },
            {
                "date": "2025-02-27T07:40:35Z",
                "message": "eth/gasprice: sanity check ratio values (#31270)\n\nFollow on to #31246. Adds a sanity check in the test to make sure the\nratio value never goes over 1. Would have avoided the issue in #31245."
            }
        ],
        "2025-02-26": [
            {
                "date": "2025-02-26T23:07:14Z",
                "message": "cmd/workload: RPC workload tests for filters and history (#31189)\n\n\nCo-authored-by: Felix Lange <fjl@twurst.com>\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            },
            {
                "date": "2025-02-26T18:24:14Z",
                "message": "eth/gasprice: fix eth_feeHistory blobGasRatio (#31246)\n\nThis change divides BlobGasUsed by MaxBlobGasPerBlock instead of\nMaxBlobsPerBlock. Dividing by MaxBlobsPerBlock\nmeant the blobGasUsedRatio was an incorrect large number. This bug was\nintroduced by a typo\n[here](https://github.com/ethereum/go-ethereum/commit/e6f3ce7b168b8f346de621a8f60d2fa57c2ebfb0#diff-3357b2399699d7cf954c543cbfb02ff442eb24491e55f5e813e3cc85829b3e8dR110)\n\nFixes https://github.com/ethereum/go-ethereum/issues/31245"
            },
            {
                "date": "2025-02-26T10:49:02Z",
                "message": "build: filter out .git folder for go generate check (#31265)\n\nFixes lint issue\n\n    >>> /home/appveyor/.gvm/gos/go1.24.0/bin/go generate ./...\n    ci.go:404: File changed: .git/index\n    ci.go:407: One or more generated files were updated by running 'go generate ./...'\n    exit status 1"
            }
        ],
        "2025-02-25": [
            {
                "date": "2025-02-25T15:20:50Z",
                "message": "version: begin v1.15.4 release cycle"
            },
            {
                "date": "2025-02-25T15:18:34Z",
                "message": "version: release go-ethereum v1.15.3 stable"
            },
            {
                "date": "2025-02-25T12:40:57Z",
                "message": "eth/protocols/eth: fix loading \"eth\" ENR key in dial filter (#31251)\n\nThis fixes an issue where dial candidates from discv5 would be ignored\nbecause the \"eth\" ENR entry was not loaded correctly."
            },
            {
                "date": "2025-02-25T11:21:35Z",
                "message": "ethclient/simulated: add goroutine leak test  (#31033)\n\nAdds a basic sanity test case to catch any go-routines leaked from\ninstantiation/closing of a simulated backend."
            }
        ],
        "2025-02-21": [
            {
                "date": "2025-02-21T02:28:11Z",
                "message": "Fix flakey behavior in simulated backend Rollback"
            },
            {
                "date": "2025-02-21T12:36:18Z",
                "message": "build: replace `tenv` linter with `usetesting` (#31172)"
            },
            {
                "date": "2025-02-21T10:45:02Z",
                "message": "cmd/clef: improve documentation in readme (#31218)\n\nFixed broken or outdated links and improved documentation formatting to\nensure consistency and correct references.\n\n---------\n\nCo-authored-by: Sina M <1591639+s1na@users.noreply.github.com>"
            },
            {
                "date": "2025-02-21T08:52:55Z",
                "message": "internal/ethapi: fix prev hashes in eth_simulate (#31122)\n\nShout-out to @Gabriel-Trintinalia for discovering this issue. The gist\nof it as follows:\n\nWhen processing a block, we should provide the parent block as well as\nthe last 256 block hashes. Some of these parents data (specifically the\nhash) was incorrect because even though during the processing of the\nparent block we have updated the header, that header was not updating\nthe TransactionsRoot and ReceiptsRoot fields (types.NewBlock makes a new\ncopy of the header and changes it only on that instance).\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            },
            {
                "date": "2025-02-21T08:48:24Z",
                "message": "signer/core:  fix encoding of `bytes` nested within array (#31049)\n\nFixes an incorrect encoding of recursive bytes types.\ncloses https://github.com/ethereum/go-ethereum/issues/30979"
            },
            {
                "date": "2025-02-21T05:45:29Z",
                "message": "core/types: remove unneeded todo marker (#31179)"
            },
            {
                "date": "2025-02-21T02:42:54Z",
                "message": "p2p/nat: remove test with default servers (#31225)\n\nThe test occasionally fails when network connectivity is bad or if it\nhits the wrong server. We usually don't add tests with external network\ndependency so I'm removing them.\n\nFixes #31220"
            }
        ],
        "2025-02-24": [
            {
                "date": "2025-02-24T23:42:00Z",
                "message": "params: add deposit contract addresses (#31247)\n\nWe forgot to add the deposit contract address for holesky, causing\ndeposits to not be flagged correctly\n\n---------\n\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>"
            },
            {
                "date": "2025-02-24T21:17:21Z",
                "message": "core/txpool: move setcode tx validation into legacyPool (#31209)\n\nIn this PR, several improvements have been made:\n\nAuthorization-related validations have been moved to legacyPool. \nPreviously, these checks were part of the standard validation procedure,\nwhich applies common validations across different pools. Since these \nchecks are specific to SetCode transactions, relocating them to\nlegacyPool\nis a more reasonable choice.\n\nAdditionally, authorization conflict checks are now performed regardless\nof whether the transaction is a replacement or not.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            },
            {
                "date": "2025-02-24T11:23:25Z",
                "message": "crypto: add comment to FromECDSAPub (#31241)\n\ncloses https://github.com/ethereum/go-ethereum/issues/26240"
            },
            {
                "date": "2025-02-24T09:31:33Z",
                "message": "go.mod: update cloudflare-go (#31240)\n\nUpdates cloudflare-go from v0.79.0 to v0.114.0 which also gets rid of a\ndependency to `github.com/hashicorp/go-retryablehttp` which had a\nsecurity flaw.\n\nDiff:\nhttps://github.com/cloudflare/cloudflare-go/compare/v0.79.0...v0.114.0\n\nI did a quick sanity check on the diff on all methods that we use and\nwent through the release notes, there was nothing related to how we use\nit afaict"
            }
        ],
        "2025-02-23": [
            {
                "date": "2025-02-23T16:38:32Z",
                "message": "eth: report error from setupDiscovery at startup (#31233)\n\nI ran into this while trying to debug a discv5 thing. I tried to disable\nDNS discovery using `--discovery.dns=false`, which doesn't work.\nAnnoyingly, geth started anyway and discarded the error silently. I\neventually found my mistake, but it took way longer than it should have.\n\nAlso including a small change to the error message for invalid DNS URLs\nhere. The user actually needs to see the URL to make sense of the error."
            }
        ],
        "2025-02-20": [
            {
                "date": "2025-02-20T17:46:25Z",
                "message": "oss-fuzz: remove deprecated targets (#31224)\n\nFixes https://github.com/ethereum/go-ethereum/issues/31223\n\n(sorry, I thought the fork fork would be created on my repo, not\nupstream, when I used the GH editor)"
            },
            {
                "date": "2025-02-20T14:04:35Z",
                "message": "eth/tracers: refactor block context in test runner (#29450)\n\nThis commit contains a minor refactoring of the block context\nused within the test runners.\n\n---------\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
            },
            {
                "date": "2025-02-20T13:30:55Z",
                "message": "internal/ethapi: handle prague system calls in eth_simulate (#31176)\n\neth_simulate was not processing prague system calls for history contract and EL\nrequests resulting in inaccurate stateRoot and requestsRoot fields in the block."
            },
            {
                "date": "2025-02-20T12:11:48Z",
                "message": "core/txpool/legacypool: add setCodeTx reorg test (#31206)\n\nThis PR adds a test that makes sure that a node can send multiple\ntransactions again once a authorization is removed"
            },
            {
                "date": "2025-02-20T09:27:13Z",
                "message": ".github: downgrade go for lint step (#31217)"
            }
        ],
        "2025-02-19": [
            {
                "date": "2025-02-19T13:57:08Z",
                "message": "core/asm: delete assembler/disassembler (#31211)\n\nI maintain an improved version of the go-ethereum assembler at\nhttps://github.com/fjl/geas. We don't really use core/asm in our tests,\nand it has some bugs that prevent it from being useful, so I'm removing\nthe package."
            },
            {
                "date": "2025-02-19T10:21:22Z",
                "message": "build: upgrade -dlgo version to Go 1.24.0 (#31159)\n\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2025-02-18": [
            {
                "date": "2025-02-18T20:08:43Z",
                "message": "eth/catalyst: support earlier forks in SimulatedBeacon (#31084)\n\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
            },
            {
                "date": "2025-02-18T14:03:48Z",
                "message": "params: add osaka blob schedule (#31174)\n\nPrevents crashes when running execution spec tests for osaka"
            },
            {
                "date": "2025-02-18T13:53:33Z",
                "message": "core/vm: clean up EVM environmental structure (#31061)\n\nThis PR does a few things including:\r\n\r\n- Remove `ContractRef` interface\r\n- Remove `vm.AccountRef` which implements `ContractRef` interface\r\n- Maintain the `jumpDests` struct in EVM for sharing between call frames\r\n- Simplify the delegateCall context initialization"
            },
            {
                "date": "2025-02-18T10:15:36Z",
                "message": "ethclient: add comment describing block number tags (#30984)\n\nAdds a comment on how to use rpc.*BlockNumber and the explanation of the block number tags\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2025-02-18T05:50:19Z",
                "message": "utils: clarify description for history.state flag (#31164)"
            },
            {
                "date": "2025-02-18T02:48:42Z",
                "message": "trie: do not expect ordering in stacktrie during fuzzing (#31170)\n\nThis PR removes the assumption of the stacktrie and trie to have the\r\nsame ordering. This was hit by the fuzzers on oss-fuzz\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2025-02-17": [
            {
                "date": "2025-02-17T11:01:20Z",
                "message": "version: begin v1.15.3 release cycle"
            },
            {
                "date": "2025-02-17T10:59:48Z",
                "message": "version: release go-ethereum v1.15.2 stable"
            },
            {
                "date": "2025-02-17T09:12:03Z",
                "message": "eth/protocols/eth: add discovery iterator to protocol (#31185)\n\nWe somehow forgot to add this in #30302, so discv5 and DNS have actually\nbeen disabled since then.\n\nFixes #31168"
            },
            {
                "date": "2025-02-17T08:47:12Z",
                "message": "p2p: fix marshaling of NAT in TOML (#31192)\n\nThis fixes an issue where a nat.Interface unmarshaled from the TOML\nconfig file could not be re-marshaled to TOML correctly.\n\nFixes #31183"
            },
            {
                "date": "2025-02-17T06:30:06Z",
                "message": "consensus/beacon: fix isPostMerge for mainnet (#31191)\n\nThis fixes a regression introduced in #31153 where we didn't consider\r\nmainnet to be in PoS, causing #31190.\r\nThe problem is, `params.MainnetChainConfig` does not have a defined\r\n`MergeNetsplitBlock`, so it isn't considered to be in PoS in\r\n`CalcDifficulty`."
            }
        ],
        "2025-02-13": [
            {
                "date": "2025-02-13T17:05:58Z",
                "message": "core/types: create block's bloom by merging receipts' bloom (#31129)\n\nCurrently, when calculating block's bloom, we loop through all the\r\nreceipt logs to calculate the hash value. However, normally, after going\r\nthrough applyTransaction, the receipt's bloom is already calculated\r\nbased on the receipt log, so the block's bloom can be calculated by just\r\nORing these receipt's blooms.\r\n```\r\ngoos: darwin\r\ngoarch: arm64\r\npkg: github.com/ethereum/go-ethereum/core/types\r\ncpu: Apple M1 Pro\r\nBenchmarkCreateBloom\r\nBenchmarkCreateBloom/small\r\nBenchmarkCreateBloom/small-10             810922              1481 ns/op             104 B/op          5 allocs/op\r\nBenchmarkCreateBloom/large\r\nBenchmarkCreateBloom/large-10               8173            143764 ns/op            9614 B/op        401 allocs/op\r\nBenchmarkCreateBloom/small-mergebloom\r\nBenchmarkCreateBloom/small-mergebloom-10                 5178918               232.0 ns/op             0 B/op          0 allocs/op\r\nBenchmarkCreateBloom/large-mergebloom\r\nBenchmarkCreateBloom/large-mergebloom-10                   54110             22207 ns/op               0 B/op          0 allocs/op\r\n```\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\r\nCo-authored-by: Zsolt Felfoldi <zsfelfoldi@gmail.com>"
            },
            {
                "date": "2025-02-13T15:26:36Z",
                "message": "version: begin v1.15.2 release cycle"
            },
            {
                "date": "2025-02-13T15:21:36Z",
                "message": "version: release go-ethereum v1.15.1 stable"
            },
            {
                "date": "2025-02-13T13:48:03Z",
                "message": "core/rawdb: skip setting flushOffset in read-only mode (#31173)\n\nThis PR addresses a flaw in the freezer table upgrade path.\n\nIn v1.15.0, freezer table v2 was introduced, including an additional \nfield (`flushOffset`) maintained in the metadata file. To ensure \nbackward compatibility, an upgrade path was implemented for legacy\nfreezer tables by setting `flushOffset` to the size of the index file.\n\nHowever, if the freezer table is opened in read-only mode, this file \nwrite operation is rejected, causing Geth to shut down entirely.\n\nGiven that invalid items in the freezer index file can be detected and \ntruncated, all items in freezer v0 index files are guaranteed to be\ncomplete. Therefore, when operating in read-only mode, it is safe to\nuse the  freezer data without performing an upgrade."
            },
            {
                "date": "2025-02-13T12:05:05Z",
                "message": "core: sanity-check fork configuration in genesis (#31171)\n\nThis is to prevent a crash on startup with a custom genesis configuration.\nWith this change in place, upgrading a chain created by geth v1.14.x and\nbelow will now print an error instead of crashing:\n\n    Fatal: Failed to register the Ethereum service: invalid chain configuration: missing entry for fork \"cancun\" in blobSchedule\n\nArguably this is not great, and it should just auto-upgrade the config.\nWe'll address this in a follow-up PR for geth v1.15.2"
            },
            {
                "date": "2025-02-13T08:45:27Z",
                "message": "go.mod: update blst to v0.3.14 (#31165)\n\ncloses https://github.com/ethereum/go-ethereum/issues/31072\r\n\r\nBLST released their newest version which includes a fix for go v.1.24:\r\nhttps://github.com/supranational/blst/releases/tag/v0.3.14\r\n\r\nI went through all commits between 0.3.14 and 0.3.13 for a sanity check"
            }
        ],
        "2025-02-12": [
            {
                "date": "2025-02-12T01:55:00Z",
                "message": "trie: copy preimage store pointer in StateTrie.Copy (#31158)\n\nThis fixes an error where executing `evm run --dump ...` omits preimages\r\nfrom the dump (because the statedb used for execution is a copy of\r\nanother instance)."
            }
        ],
        "2025-02-11": [
            {
                "date": "2025-02-11T15:02:30Z",
                "message": "internal/ethapi: fix panic in debug methods (#31157)\n\nFixes an error when the block is not found in debug methods."
            },
            {
                "date": "2025-02-11T13:15:04Z",
                "message": "core/txpool/legacypool: add support for SetCode transactions (#31073)\n\nThe new SetCode transaction type introduces some additional complexity\nwhen handling the transaction pool.\n\nThis complexity stems from two new account behaviors:\n\n1. The balance and nonce of an account can change during regular\n   transaction execution *when they have a deployed delegation*.\n2. The nonce and code of an account can change without any EVM execution\n   at all. This is the \"set code\" mechanism introduced by EIP-7702.\n\nThe first issue has already been considered extensively during the design\nof ERC-4337, and we're relatively confident in the solution of simply\nlimiting the number of in-flight pending transactions an account can have\nto one. This puts a reasonable bound on transaction cancellation. Normally\nto cancel, you would need to spend 21,000 gas. Now it's possible to cancel\nfor around the cost of warming the account and sending value\n(`2,600+9,000=11,600`). So 50% cheaper.\n\nThe second issue is more novel and needs further consideration.\nSince authorizations are not bound to a specific transaction, we\ncannot drop transactions with conflicting authorizations. Otherwise,\nit might be possible to cherry-pick authorizations from txs and front\nrun them with different txs at much lower fee amounts, effectively DoSing\nthe authority. Fortunately, conflicting authorizations do not affect the\nunderlying validity of the transaction so we can just accept both.\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-02-11T12:52:43Z",
                "message": "p2p/discover: make discv5 response timeout configurable (#31119)"
            },
            {
                "date": "2025-02-11T12:45:44Z",
                "message": "p2p/discover: remove unused parameter in revalidationList.get (#31155)"
            },
            {
                "date": "2025-02-11T12:44:25Z",
                "message": "consensus/beacon: remove TestingTTDBlock (#31153)\n\nThis removes the method `TestingTTDBlock` introduced by #30744. It was\nadded to make the beacon consensus engine aware of the merge block in\ntests without relying on the total difficulty. However, tracking the\nmerge block this way is very annoying. We usually configure forks in the\n`ChainConfig`, but the method is on the consensus engine, which isn't\nalways created in the same place. By sidestepping the `ChainConfig` we\ndon't get the usual fork-order checking, so it's possible to enable the\nmerge before the London fork, for example. This in turn can lead to very\nhard-to-debug outputs and validation errors.\n\nSo here I'm changing the consensus engine to check the\n`MergeNetsplitBlock` instead. Alternatively, we assume a network is\nmerged if it has a `TerminalTotalDifficulty` of zero, which is a very\ncommon configuration in tests."
            }
        ],
        "2025-02-08": [
            {
                "date": "2025-02-08T12:26:15Z",
                "message": "params,core/forkid: enable prague on holesky and sepolia (#31139)\n\nAgreed to the following fork dates for Holesky and Sepolia on ACDC 150\n\nHolesky slot: 3710976\t(Mon, Feb 24 at 21:55:12 UTC)\nSepolia slot: 7118848\t(Wed, Mar 5 at 07:29:36 UTC)"
            }
        ],
        "2025-02-07": [
            {
                "date": "2025-02-07T01:59:12Z",
                "message": "cmd/devp2p/internal/ethtest: remove TD from status validation (#31137)\n\nAfter recent changes in Geth (removing TD):\r\n\r\nhttps://github.com/ethereum/go-ethereum/commit/39638c81c56db2b2dfe6f51999ffd3029ee212cb#diff-d70a44d4b7a0e84fe9dcca25d368f626ae6c9bc0b8fe9690074ba92d298bcc0d\r\n\r\nNon-Geth clients are failing many devp2p tests with an error:\r\n`peering failed: status exchange failed: wrong TD in status: have 1 want 0`\r\n\r\nRight now only Geth is passing it - all other clients are affected by\r\nthis change. I think there should be no validation of TD when checking `Status`\r\nmessage in hive tests. Now Geth has 0 (and hive tests requires 0) and\r\nall other clients have actual TD. And on real networks there is no validation\r\nof TD when peering"
            }
        ],
        "2025-02-06": [
            {
                "date": "2025-02-06T14:06:46Z",
                "message": "version: begin v1.15.1 release cycle"
            },
            {
                "date": "2025-02-06T14:05:41Z",
                "message": "version: release go-ethereum v1.15.0"
            },
            {
                "date": "2025-02-06T11:33:40Z",
                "message": "build: update EEST fixtures to prague devnet-6 (#31088)\n\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            }
        ],
        "2025-02-05": [
            {
                "date": "2025-02-05T22:19:09Z",
                "message": "build: update to Go 1.23.6 (#31130)\n\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-02-05T22:01:17Z",
                "message": "all: update license comments and AUTHORS (#31133)"
            },
            {
                "date": "2025-02-05T12:58:25Z",
                "message": "core/tracing: state journal wrapper (#30441)\n\nHere we add some more changes for live tracing API v1.1:\n\n- Hook `OnSystemCallStartV2` was introduced with `VMContext` as parameter.\n- Hook `OnBlockHashRead` was introduced.\n- `GetCodeHash` was added to the state interface\n- The new `WrapWithJournal` construction helps with tracking EVM reverts in the tracer.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-02-05T09:35:03Z",
                "message": "consensus/misc/eip4844: more changes for blob gas calculation (#31128)\n\nThis PR changes the signature of `CalcExcessBlobGas` to take in just\nthe header timestamp instead of the whole object. It also adds a sanity\ncheck for the parent->child block order to `VerifyEIP4844Header`."
            }
        ],
        "2025-02-04": [
            {
                "date": "2025-02-04T20:43:18Z",
                "message": "consensus/misc/eip4844: use head's target blobs, not parent (#31101)\n\nA clarification was made to EIP-7691 stating that at the fork boundary\nit is required to use the target blob count associated with the head\nblock, rather than the parent as implemented here.\n\nSee for more: https://github.com/ethereum/EIPs/pull/9249"
            },
            {
                "date": "2025-02-04T17:10:40Z",
                "message": "core/txpool/blobpool: fix incorrect arguments in test (#31127)\n\nFixes the linter on master which was broken by\r\nhttps://github.com/ethereum/go-ethereum/pull/30559"
            },
            {
                "date": "2025-02-04T16:23:01Z",
                "message": "core/txpool: remove locals-tracking from txpools (#30559)\n\nReplaces  #29297, descendant from #27535\r\n\r\n---------\r\n\r\nThis PR removes `locals` as a concept from transaction pools. Therefore,\r\nthe pool now acts as very a good simulation/approximation of how our\r\npeers' pools behave. What this PR does instead, is implement a\r\nlocals-tracker, which basically is a little thing which, from time to\r\ntime, asks the pool \"did you forget this transaction?\". If it did, the\r\ntracker resubmits it.\r\n\r\nIf the txpool _had_ forgotten it, chances are that the peers had also\r\nforgotten it. It will be propagated again.\r\n\r\nDoing this change means that we can simplify the pool internals, quite a\r\nlot.\r\n\r\n### The semantics of `local` \r\n\r\nHistorically, there has been two features, or usecases, that has been\r\ncombined into the concept of `locals`.\r\n\r\n1. \"I want my local node to remember this transaction indefinitely, and\r\nresubmit to the network occasionally\"\r\n2. \"I want this (valid) transaction included to be top-prio for my\r\nminer\"\r\n\r\n\r\nThis PR splits these features up, let's call it `1: local` and `2:\r\nprio`. The `prio` is not actually individual transaction, but rather a\r\nset of `address`es to prioritize.\r\nThe attribute `local` means it will be tracked, and `prio` means it will\r\nbe prioritized by miner.\r\n\r\nFor `local`: anything transaction received via the RPC is marked as\r\n`local`, and tracked by the tracker.\r\nFor `prio`: any transactions from this sender is included first, when\r\nbuilding a block. The existing commandline-flag `--txpool.locals` sets\r\nthe set of `prio` addresses.\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2025-02-04T16:16:26Z",
                "message": "core: assign default difficulty to zero for chain without ethash (#31067)\n\nI hit this case while trying something with the simulated backend. The\nEVM only enables instruction set forks after the merge when 'Random' is\nset. In the simulated backend, the random value will be set via the\nengine API for all blocks after genesis. But for the genesis block\nitself, the random value will not be assigned in the vm.BlockContext\nbecause the genesis has a non-zero difficulty. For my case, this meant\nthat estimateGas did not work for the first transaction sent on the\nsimulated chain, since the contract contained a PUSH0 instruction.\n\nThis could also be fixed by explicitly configuring a zero difficulty in\nthe simulated backend. However, I think that zero difficulty is a better\ndefault these days.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            },
            {
                "date": "2025-02-04T14:43:18Z",
                "message": "params,core: add max and target value to chain config (#31002)\n\nImplements [EIP-7840](https://github.com/ethereum/EIPs/pull/9129) and\r\n[EIP-7691](https://github.com/ethereum/EIPs/blob/d96625a4dcbbe2572fa006f062bd02b4582eefd5/EIPS/eip-7691.md).\r\n\r\n---------\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-02-04T14:29:51Z",
                "message": "params: start osaka fork (#31125)\n\nThis PR defines the Osaka fork. An easy first step to start our work on\nthe next hardfork\n\n(This is needed for EOF testing as well)\n\n---------\n\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>"
            },
            {
                "date": "2025-02-04T13:22:30Z",
                "message": "core: copy genesis before modifying (#31097)\n\nThis PR fixes a data race in SetupGenesisWithOverride."
            },
            {
                "date": "2025-02-04T10:45:45Z",
                "message": "core/rawdb: introduce flush offset in freezer (#30392)\n\nThis is a follow-up PR to #29792 to get rid of the data file sync.\n\n**This is a non-backward compatible change, which increments the\ndatabase version from 8 to 9**.\n\nWe introduce a flushOffset for each freezer table, which tracks the position\nof the most recently fsync\u2019d item in the index file. When this offset moves\nforward, it indicates that all index entries below it, along with their corresponding\ndata items, have been properly persisted to disk. The offset can also be moved\nbackward when truncating from either the head or tail of the file.\n\nPreviously, the data file required an explicit fsync after every mutation, which\nwas highly inefficient. With the introduction of the flush offset, the synchronization\nstrategy becomes more flexible, allowing the freezer to sync every 30 seconds\ninstead.\n\nThe data items above the flush offset are regarded volatile and callers must ensure\nthey are recoverable after the unclean shutdown, or explicitly sync the freezer\nbefore any proceeding operations.\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-02-04T06:09:06Z",
                "message": "tests/fuzzers/bls12381: fix error message in fuzzCrossG2Add (#31113)\n\nFixes a typo in the error message within the `fuzzCrossG2Add`\r\nfunction. The panic message incorrectly references \"G1 point addition\r\nmismatch\" when it should be \"G2 point addition mismatch,\" as the\r\nfunction deals with G2 points.\r\n\r\nThis doesn't affect functionality but could cause confusion during\r\ndebugging. I've updated the message to reflect the correct curve."
            }
        ],
        "2025-02-03": [
            {
                "date": "2025-02-03T17:44:26Z",
                "message": "core/vm: simplify tracer hook invocation in interpreter loop (#31074)\n\nRemoves duplicate code in the interpreter loop."
            }
        ],
        "2025-01-31": [
            {
                "date": "2025-01-31T17:34:22Z",
                "message": "eth/catalyst: fix validation of type 0 request (#31103)\n\nI caught this error on Hive. It was introduced by\nhttps://github.com/ethereum/go-ethereum/pull/31071 because after adding\nthe equality check the request type 0 will be rejected."
            },
            {
                "date": "2025-01-31T09:36:49Z",
                "message": "params: update system contract addresses for devnet-6 (#31102)\n\nFinalize Prague system contract addresses. Reference:\n\n* https://github.com/ethereum/EIPs/pull/9287\n* https://github.com/ethereum/EIPs/pull/9288\n* https://github.com/ethereum/EIPs/pull/9289"
            }
        ],
        "2025-01-30": [
            {
                "date": "2025-01-30T16:08:42Z",
                "message": "core/vm: EXTCODE* return delegation designator for 7702 (#31089)\n\nImplements https://github.com/ethereum/EIPs/pull/9248"
            },
            {
                "date": "2025-01-30T16:07:45Z",
                "message": "core: implement eip-7623 floor data gas (#30946)\n\nThis PR builds on #29040 and updates it to the new version of the spec.\nI filled the EEST tests and they pass.\n\nLink to spec: https://eips.ethereum.org/EIPS/eip-7623\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            },
            {
                "date": "2025-01-30T15:58:53Z",
                "message": "all: add build tags for wasip1 (#31090)"
            },
            {
                "date": "2025-01-30T14:00:50Z",
                "message": "version: begin v1.15.0 release cycle"
            },
            {
                "date": "2025-01-30T13:52:02Z",
                "message": "build: provide a flag to disable publishing in dockerx build (#31098)\n\nThis changes the `-upload` flag to just toggle the upload. The remote\nimage name is now configured using the `-hub` flag."
            },
            {
                "date": "2025-01-30T13:10:36Z",
                "message": "crypto: add IsOnCurve check (#31100)"
            },
            {
                "date": "2025-01-30T13:06:50Z",
                "message": "build: retry PPA upload up to three times (#31099)"
            },
            {
                "date": "2025-01-30T10:21:23Z",
                "message": "Revert \".travis.yml: change arch for Docker build to arm64 (#31096)\"\n\nThis reverts commit 7b96ec4dae8d4ddeffc761c7757c12e2d2b8bf74."
            },
            {
                "date": "2025-01-30T10:10:45Z",
                "message": ".travis.yml: change arch for Docker build to arm64 (#31096)\n\nThis is an attempt to work around a gcc issue in the Docker build."
            },
            {
                "date": "2025-01-30T09:58:44Z",
                "message": "build: bump test timeout (#31095)\n\nTravis often fails because the test times out."
            }
        ],
        "2025-01-29": [
            {
                "date": "2025-01-29T13:31:25Z",
                "message": "core/{.,state,vm},miner,eth/tracers,tests: implement 7709 with a syscall flag (#31036)\n\nSame as #31015 but requires the contract to exist. Not compatible with\nany verkle testnet up to now.\n\nThis adds a `isSytemCall` flag so that it is possible to detect when a\nsystem call is executed, so that the code execution and other locations\nare not added to the witness.\n\n---------\n\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\nCo-authored-by: Ignacio Hagopian <jsign.uy@gmail.com>\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2025-01-28": [
            {
                "date": "2025-01-28T17:56:20Z",
                "message": ".github: add lint step (#31068)"
            },
            {
                "date": "2025-01-28T17:55:41Z",
                "message": "all: nuke total difficulty (#30744)\n\nThe total difficulty is the sum of all block difficulties from genesis\nto a certain block. This value was used in PoW for deciding which chain\nis heavier, and thus which chain to select. Since PoS has a different\nfork selection algorithm, all blocks since the merge have a difficulty\nof 0, and all total difficulties are the same for the past 2 years.\n\nWhilst the TDs are mostly useless nowadays, there was never really a\nreason to mess around removing them since they are so tiny. This\nreasoning changes when we go down the path of pruned chain history. In\norder to reconstruct any TD, we **must** retrieve all the headers from\nchain head to genesis and then iterate all the difficulties to compute\nthe TD.\n\nIn a world where we completely prune past chain segments (bodies,\nreceipts, headers), it is not possible to reconstruct the TD at all. In\na world where we still keep chain headers and prune only the rest,\nreconstructing it possible as long as we process (or download) the chain\nforward from genesis, but trying to snap sync the head first and\nbackfill later hits the same issue, the TD becomes impossible to\ncalculate until genesis is backfilled.\n\nAll in all, the TD is a messy out-of-state, out-of-consensus computed\nfield that is overall useless nowadays, but code relying on it forces\nthe client into certain modes of operation and prevents other modes or\nother optimizations. This PR completely nukes out the TD from the node.\nIt doesn't compute it, it doesn't operate on it, it's as if it didn't\neven exist.\n\nCaveats:\n\n- Whenever we have APIs that return TD (devp2p handshake, tracer, etc.)\nwe return a TD of 0.\n- For era files, we recompute the TD during export time (fairly quick)\nto retain the format content.\n- It is not possible to \"verify\" the merge point (i.e. with TD gone, TTD\nis useless). Since we're not verifying PoW any more, just blindly trust\nit, not verifying but blindly trusting the many year old merge point\nseems just the same trust model.\n- Our tests still need to be able to generate pre and post merge blocks,\nso they need a new way to split the merge without TTD. The PR introduces\na settable ttdBlock field on the consensus object which is used by tests\nas the block where originally the TTD happened. This is not needed for\nlive nodes, we never want to generate old blocks.\n- One merge transition consensus test was disabled. With a\nnon-operational TD, testing how the client reacts to TTD is useless, it\ncannot react.\n\nQuestions:\n\n- Should we also drop total terminal difficulty from the genesis json?\nIt's a number we cannot react on any more, so maybe it would be cleaner\nto get rid of even more concepts.\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2025-01-28T15:56:23Z",
                "message": "chore: fix various comments (#31082)"
            }
        ],
        "2025-01-25": [
            {
                "date": "2025-01-25T23:53:14Z",
                "message": "fix README.md (#31076)\n\nHi\nI fixed 2 minor spelling issues.\n\n---------\n\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>"
            }
        ],
        "2025-01-24": [
            {
                "date": "2025-01-24T15:16:02Z",
                "message": "p2p/nat: add stun protocol (#31064)\n\nThis implements a basic mechanism to query the node's external IP using\na STUN server. There is a built-in list of public STUN servers for convenience.\nThe new detection mechanism must be selected explicitly using `--nat=stun` \nand is not enabled by default in Geth.\n\nFixes #30881\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-01-24T14:38:17Z",
                "message": "core/vm: implement EIP-2537 spec updates (#30978)\n\nReference:\n\n- Remove MUL precompiles: https://github.com/ethereum/EIPs/pull/8945\n- Pricing change for pairing operation:\nhttps://github.com/ethereum/EIPs/pull/9098\n- Pricing change for add, mapping and mul operations:\nhttps://github.com/ethereum/EIPs/pull/9097\n- Pricing change for MSM operations:\nhttps://github.com/ethereum/EIPs/pull/9116\n\n---------\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
            },
            {
                "date": "2025-01-24T09:59:33Z",
                "message": "accounts/usbwallet: fix ledger access for latest firmware and add Ledger Flex (#31004)\n\nThe latest firmware for Ledger Nano S Plus now returns `0x5000` for it's\nproduct ID, which doesn't match any of the product IDs enumerated in\n`hub.go`.\n\nThis PR removes the assumption about the interfaces exposed, and simply\nchecks the upper byte for a match.\n\nAlso adds support for the `0x0007` / `0x7000` product ID (Ledger Flex)."
            }
        ],
        "2025-01-23": [
            {
                "date": "2025-01-23T19:38:09Z",
                "message": "eth/catalyst: fail on duplicate request types (#31071)\n\nRefer to: https://github.com/ethereum/execution-apis/pull/623"
            },
            {
                "date": "2025-01-23T09:17:12Z",
                "message": "trie: reduce allocations in stacktrie (#30743)\n\nThis PR uses various tweaks and tricks to make the stacktrie near\nalloc-free.\n\n```\n[user@work go-ethereum]$ benchstat stacktrie.1 stacktrie.7\ngoos: linux\ngoarch: amd64\npkg: github.com/ethereum/go-ethereum/trie\ncpu: 12th Gen Intel(R) Core(TM) i7-1270P\n             \u2502 stacktrie.1  \u2502             stacktrie.7              \u2502\n             \u2502    sec/op    \u2502    sec/op     vs base                \u2502\nInsert100K-8   106.97m \u00b1 8%   88.21m \u00b1 34%  -17.54% (p=0.000 n=10)\n\n             \u2502   stacktrie.1    \u2502             stacktrie.7              \u2502\n             \u2502       B/op       \u2502     B/op      vs base                \u2502\nInsert100K-8   13199.608Ki \u00b1 0%   3.424Ki \u00b1 3%  -99.97% (p=0.000 n=10)\n\n             \u2502  stacktrie.1   \u2502             stacktrie.7             \u2502\n             \u2502   allocs/op    \u2502 allocs/op   vs base                 \u2502\nInsert100K-8   553428.50 \u00b1 0%   22.00 \u00b1 5%  -100.00% (p=0.000 n=10)\n```\nAlso improves derivesha:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/ethereum/go-ethereum/core/types\ncpu: 12th Gen Intel(R) Core(TM) i7-1270P\n                          \u2502 derivesha.1 \u2502             derivesha.2              \u2502\n                          \u2502   sec/op    \u2502    sec/op     vs base                \u2502\nDeriveSha200/stack_trie-8   477.8\u00b5 \u00b1 2%   430.0\u00b5 \u00b1 12%  -10.00% (p=0.000 n=10)\n\n                          \u2502 derivesha.1  \u2502             derivesha.2              \u2502\n                          \u2502     B/op     \u2502     B/op      vs base                \u2502\nDeriveSha200/stack_trie-8   45.17Ki \u00b1 0%   25.65Ki \u00b1 0%  -43.21% (p=0.000 n=10)\n\n                          \u2502 derivesha.1 \u2502            derivesha.2             \u2502\n                          \u2502  allocs/op  \u2502 allocs/op   vs base                \u2502\nDeriveSha200/stack_trie-8   1259.0 \u00b1 0%   232.0 \u00b1 0%  -81.57% (p=0.000 n=10)\n\n```\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2025-01-22": [
            {
                "date": "2025-01-22T13:06:36Z",
                "message": "triedb/pathdb: fix state revert on v2 history (#31060)\n\nState history v2 has been shipped and will take effect after the Cancun fork.\r\nHowever, the state revert function does not differentiate between v1 and v2,\r\ninstead blindly using the storage map key for state reversion. \r\n\r\nThis mismatch between the keys of the live state set and the state history\r\ncan trigger a panic: `non-existent storage slot for reverting`.\r\n\r\nThis flaw has been fixed in this PR."
            },
            {
                "date": "2025-01-22T12:53:01Z",
                "message": "go.mod: gencodec stable v0.1.0 (#31062)"
            },
            {
                "date": "2025-01-22T08:29:34Z",
                "message": "p2p: support configuring NAT in TOML file (#31041)\n\nThis is an alternative for #27407 with a solution based on gencodec.\nWith the PR, one can now configure like this:\n\n```\n# config.toml\n[Node.P2P]\nNAT = \"extip:33.33.33.33\"\n```\n\n```shell\n$ geth --config config.toml\n...\nINFO [01-17|16:37:31.436] Started P2P networking      self=enode://2290...ab@33.33.33.33:30303\n```"
            }
        ],
        "2025-01-21": [
            {
                "date": "2025-01-21T22:02:17Z",
                "message": "cmd/evm: restore --bench flag to evm statetest (#31055)\n\nRefactoring of the `evm` command moved where some commands were valid.\nOne command, `--bench`, used to work in `evm statetest`. The pluming is\nstill in place. This PR puts the `--bench` flag in the place the trace\nflags were moved, and adds tests to validate the bench flag operates in\n`run` and `statetest`\n\n---------\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-01-21T21:23:46Z",
                "message": "go.mod: remove toolchain line (#31057)\n\nWe have our own system for downloading the toolchain, and really don't\nwant Go's to get in the way of that. We may switch to Go's builtin\ntoolchain support, but not now."
            },
            {
                "date": "2025-01-21T12:11:05Z",
                "message": "eth/filters: ensure API timeoutLoop terminates with event system (#31056)\n\nDiscovered from failing test introduced\nhttps://github.com/ethereum/go-ethereum/pull/31033 . We should ensure\n`timeoutLoop` terminates if the filter event system is terminated."
            },
            {
                "date": "2025-01-21T07:35:03Z",
                "message": "cmd/evm: refactor handling output-files for `t8n` (#30854)\n\nAs part of trying to make the inputs and outputs of the evm subcommands\r\nmore streamlined and aligned, this PR modifies how `evm t8n` manages\r\noutput-files.\r\n\r\nPreviously, we do a kind of wonky thing where between each transaction,\r\nwe invoke a `getTracer` closure. In that closure, we create a new\r\noutput-file, a tracer, and then make the tracer stream output to the\r\nfile. We also fiddle a bit to ensure that the file becomes properly\r\nclosed.\r\n\r\nIt is a kind of hacky solution we have in place. This PR changes it, so\r\nthat from the execution-pipeline point of view, we have just a regular\r\ntracer. No fiddling with re-setting it or closing files.\r\n\r\nThat particular tracer, however, is a bit special: it takes care of\r\ncreating new files per transaction (in the tx-start-hook) and closing\r\n(on tx-end-hook). Also instantiating the right type of underlying\r\ntracer, which can be a json-logger or a custom tracer.\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2025-01-21T03:42:05Z",
                "message": "core/txpool:  terminate subpool reset goroutine if pool was closed (#31030)\n\nif the pool terminates before `resetDone` can be read, then the\r\ngo-routine will hang."
            }
        ],
        "2025-01-20": [
            {
                "date": "2025-01-20T16:06:39Z",
                "message": "core/types: initialize ChainID in SetCodeTx copy method (#31054)"
            },
            {
                "date": "2025-01-20T16:04:29Z",
                "message": "build: upgrade -dlgo version to Go 1.23.5 (#31037)"
            },
            {
                "date": "2025-01-20T09:12:36Z",
                "message": "core/types: correct chainId check for pragueSigner (#31032)\n\nUse zero value check for the pragueSigner\n\nThis aligns with cancunSigner and londonSigner as well."
            },
            {
                "date": "2025-01-20T07:39:55Z",
                "message": "cmd/abigen: require either `--abi` or `--combined-json` (#31045)\n\nThis PR addresses issue #30768 , which highlights that running\r\ncmd/abigen/abigen --pkg my_package example.json (erroneously omitting\r\nthe --abi flag) generates an empty binding, when it should fail\r\nexplicitly.\r\n\r\n---------\r\n\r\nCo-authored-by: jwasinger <j-wasinger@hotmail.com>"
            }
        ],
        "2025-01-17": [
            {
                "date": "2025-01-17T15:54:19Z",
                "message": "ethdb/memorydb: faster DeleteRange (#31038)\n\nThis PR replaces the iterator based DeleteRange implementation of\nmemorydb with a simpler and much faster loop that directly deletes keys\nin the order of iteration instead of unnecessarily collecting keys in\nmemory and sorting them.\n\n---------\n\nCo-authored-by: Martin HS <martin@swende.se>"
            },
            {
                "date": "2025-01-17T01:59:02Z",
                "message": "all: implement state history v2 (#30107)\n\nThis pull request delivers the new version of the state history, where\r\nthe raw storage key is used instead of the hash.\r\n\r\nBefore the cancun fork, it's supported by protocol to destruct a\r\nspecific account and therefore, all the storage slot owned by it should\r\nbe wiped in the same transition.\r\n\r\nTechnically, storage wiping should be performed through storage\r\niteration, and only the storage key hash will be available for traversal\r\nif the state snapshot is not available. Therefore, the storage key hash\r\nis chosen as the identifier in the old version state history.\r\n\r\nFortunately, account self-destruction has been deprecated by the\r\nprotocol since the Cancun fork, and there are no empty accounts eligible\r\nfor deletion under EIP-158. Therefore, we can conclude that no storage\r\nwiping should occur after the Cancun fork. In this case, it makes no\r\nsense to keep using hash.\r\n\r\nBesides, another big reason for making this change is the current format\r\nstate history is unusable if verkle is activated. Verkle tree has a\r\ndifferent key derivation scheme (merkle uses keccak256), the preimage of\r\nkey hash must be provided in order to make verkle rollback functional.\r\nThis pull request is a prerequisite for landing verkle.\r\n\r\nAdditionally, the raw storage key is more human-friendly for those who\r\nwant to manually check the history, even though Solidity already\r\nperforms some hashing to derive the storage location.\r\n\r\n---\r\n\r\nThis pull request doesn't bump the database version, as I believe the\r\ndatabase should still be compatible if users degrade from the new geth\r\nversion to old one, the only side effect is the persistent new version\r\nstate history will be unusable.\r\n\r\n---------\r\n\r\nCo-authored-by: Zsolt Felfoldi <zsfelfoldi@gmail.com>"
            }
        ],
        "2025-01-16": [
            {
                "date": "2025-01-16T14:58:16Z",
                "message": "core/tracing: document `OnCodeChange` now being called from SelfDestruct (#31007)\n\nCo-authored-by: Sina M <1591639+s1na@users.noreply.github.com>"
            },
            {
                "date": "2025-01-16T13:40:15Z",
                "message": "core/txpool/legacypool: ensure pending nonces are reset by SubPool.Clear (#31020)\n\ncloses https://github.com/ethereum/go-ethereum/issues/30842"
            },
            {
                "date": "2025-01-16T13:36:45Z",
                "message": "core: use sync.Once for SenderCacher initialization (#31029)\n\nThis changes the SenderCacher so its goroutines will only be started on first use.\nAvoids starting them when package core is just imported but core.BlockChain isn't used."
            }
        ],
        "2025-01-15": [
            {
                "date": "2025-01-15T18:45:20Z",
                "message": "beacon/engine: check for empty requests (#31010)\n\nAccording to\nhttps://github.com/ethereum/execution-apis/blob/main/src/engine/prague.md#engine_newpayloadv4:\n\n> Elements of the list MUST be ordered by request_type in ascending\norder. Elements with empty request_data MUST be excluded from the list.\n\n---------\n\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>"
            }
        ],
        "2025-01-14": [
            {
                "date": "2025-01-14T15:26:24Z",
                "message": "eth/gasprice: ensure cache purging goroutine terminates with subscription (#31025)"
            },
            {
                "date": "2025-01-14T13:42:18Z",
                "message": "core/types: change SetCodeTx.ChainID to uint256 (#30982)\n\nWe still need to decide how to handle non-specfic `chainId` in the JSON\nencoding of authorizations. With `chainId` being a uint64, the previous\nimplementation just used value zero. However, it might actually be more\ncorrect to use the value `null` for this case."
            },
            {
                "date": "2025-01-14T13:16:15Z",
                "message": "all: fix some typos in comments and names (#31023)"
            },
            {
                "date": "2025-01-14T10:49:30Z",
                "message": "cmd, core, miner: rework genesis setup (#30907)\n\nThis pull request refactors the genesis setup function, the major\nchanges are highlighted here:\n\n**(a) Triedb is opened in verkle mode if `EnableVerkleAtGenesis` is\nconfigured in chainConfig or the database has been initialized previously with\n`EnableVerkleAtGenesis` configured**.\n\nA new config field `EnableVerkleAtGenesis` has been added in the\nchainConfig. This field must be configured with True if Geth wants to initialize \nthe genesis in Verkle mode.\n\nIn the verkle devnet-7, the verkle transition is activated at genesis.\nTherefore, the verkle rules should be used since the genesis. In production\nnetworks (mainnet and public testnets), verkle activation always occurs after\nthe genesis block. Therefore, this flag is only made for devnet and should be\ndeprecated later. Besides, verkle transition at non-genesis block hasn't been\nimplemented yet, it should be done in the following PRs.\n\n**(b) The genesis initialization condition has been simplified**\nThere is a special mode supported by the Geth is that: Geth can be\ninitialized with an existing chain segment, which can fasten the node sync\nprocess by retaining the chain freezer folder.\n\nOriginally, if the triedb is regarded as uninitialized and the genesis block can\nbe found in the chain freezer, the genesis block along with genesis state will be\ncommitted. This condition has been simplified to checking the presence of chain\nconfig in key-value store. The existence of chain config can represent the genesis\nhas been committed."
            }
        ],
        "2025-01-13": [
            {
                "date": "2025-01-13T18:35:49Z",
                "message": "core: remove unused function parameters (#31001)"
            },
            {
                "date": "2025-01-13T18:33:49Z",
                "message": "core/txpool/legacypool: fix flaky test TestAllowedTxSize (#30975)\n\n- it was failing because the maximum data length (previously `dataSize`)\nwas set to `txMaxSize - 213` but should had been `txMaxSize - 103` and\nthe last call `dataSize+1+uint64(rand.Intn(10*txMaxSize)))` would\nsometimes fail depending on rand.Intn.\n- Maximal transaction data size comment (invalid) replaced by code logic\nto find the maximum tx length without its data length\n- comments and variable naming improved for clarity\n- 3rd pool add test replaced to add just 1 above the maximum length,\nwhich is important to ensure the logic is correct"
            },
            {
                "date": "2025-01-13T17:00:25Z",
                "message": "cmd/devp2p/internal/ethtest: using slices.SortFunc to simplify the code (#31012)\n\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2025-01-13T15:12:15Z",
                "message": "eth/tracers/logger: return revert reason (#31013)\n\nFix the error comparison in tracer to prevent dropping revert reason data\r\n\r\n---------\r\n\r\nCo-authored-by: Martin <mrscdevel@gmail.com>\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
            },
            {
                "date": "2025-01-13T07:26:10Z",
                "message": "build: upgrade golangci-lint to v1.63.4 (#31019)\n\nThis PR upgrades `golangci-lint` to v1.63.4 and fixes a warn message\r\nwhich is reported by v1.63.4:\r\n\r\n```text\r\nWARN [config_reader] The configuration option `run.skip-dirs-use-default` is deprecated, please use `issues.exclude-dirs-use-default`.\r\n```\r\n\r\nAlso fixes 2 warnings which are reported by v1.63.4:\r\n\r\n```text\r\ncore/txpool/blobpool/blobpool.go:1754:12: S1005: unnecessary assignment to the blank identifier (gosimple)\r\n        for acct, _ := range p.index {\r\n                  ^\r\ncore/txpool/legacypool/legacypool.go:1989:19: S1005: unnecessary assignment to the blank identifier (gosimple)\r\n        for localSender, _ := range pool.locals.accounts {\r\n                         ^\r\n```"
            }
        ],
        "2025-01-10": [
            {
                "date": "2025-01-10T12:51:19Z",
                "message": "triedb/pathdb: configure different node hasher in pathdb (#31008)\n\nAs the node hash scheme in verkle and merkle are totally different, the\r\noriginal default node hasher in pathdb is no longer suitable. Therefore,\r\nthis pull request configures different node hasher respectively."
            }
        ],
        "2025-01-08": [
            {
                "date": "2025-01-08T13:22:37Z",
                "message": "README: remove private network section from readme (#31005)"
            }
        ],
        "2025-01-07": [
            {
                "date": "2025-01-07T10:49:13Z",
                "message": "triedb/pathdb: fix tester generator (#30972)\n\nThis change fixes is a rare bug in test generator: If the run is very unlucky it\r\ncan use `modifyAccountOp` / `deleteAccountOp` without creating any\r\naccount, leading to have a trie root same as the parent.\r\n\r\nThis change makes the first operation always be a creation."
            },
            {
                "date": "2025-01-07T09:31:10Z",
                "message": "cmd/clef: fix JS issues in documentation (#30980)\n\nFixes a couple of js-flaws in the docs"
            }
        ],
        "2025-01-06": [
            {
                "date": "2025-01-06T15:31:53Z",
                "message": "eth/protocols/eth: prevent hanging dispatch (#30918)\n\nThis PR attempts to fix a strange test-failure (timeout) observed on a\nwindows-32 platform.\n\nhttps://ci.appveyor.com/project/ethereum/go-ethereum/builds/51174391/job/d8ascanwwltrlqd5\n\nA goroutine is stuck trying to deliver a response:\n```\ngoroutine 9632 [select, 29 minutes]:\ngithub.com/ethereum/go-ethereum/eth/protocols/eth.(*Peer).dispatchResponse(0x314f100, 0x3e5f6d0, 0x3acbb84)\n\tC:/projects/go-ethereum/eth/protocols/eth/dispatcher.go:172 +0x2a5\ngithub.com/ethereum/go-ethereum/eth/protocols/eth.handleBlockHeaders({0x12abe68, 0x30021b8}, {0x12a815c, 0x40b41c0}, 0x314f100)\n\tC:/projects/go-ethereum/eth/protocols/eth/handlers.go:301 +0x173\ngithub.com/ethereum/go-ethereum/eth/protocols/eth.handleMessage({0x12abe68, 0x30021b8}, 0x314f100)\n\tC:/projects/go-ethereum/eth/protocols/eth/handler.go:205 +0x4f6\ngithub.com/ethereum/go-ethereum/eth/protocols/eth.Handle({0x12abe68, 0x30021b8}, 0x314f100)\n\tC:/projects/go-ethereum/eth/protocols/eth/handler.go:149 +0x33\ngithub.com/ethereum/go-ethereum/eth.testSnapSyncDisabling.func1(0x314f100)\n\tC:/projects/go-ethereum/eth/sync_test.go:65 +0x33\ngithub.com/ethereum/go-ethereum/eth.(*handler).runEthPeer(0x30021b8, 0x314f100, 0x427f648)\n\tC:/projects/go-ethereum/eth/handler.go:355 +0xe65\ncreated by github.com/ethereum/go-ethereum/eth.testSnapSyncDisabling in goroutine 11\n\tC:/projects/go-ethereum/eth/sync_test.go:64 +0x54f\nFAIL\tgithub.com/ethereum/go-ethereum/eth\t1800.138s\n\n```\n\n---------\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2025-01-06T15:28:28Z",
                "message": "core/types: improve printList in DeriveSha test (#30969)"
            },
            {
                "date": "2025-01-06T06:52:01Z",
                "message": "core/rawdb: fix panic in freezer (#30973)\n\nFixes an issue where the node panics when an LStat fails with something \r\nother than os.ErrNotExist\r\n\r\ncloses https://github.com/ethereum/go-ethereum/issues/30968"
            }
        ],
        "2025-01-03": [
            {
                "date": "2025-01-03T12:15:06Z",
                "message": "internal/ethapi: update default simulation timestamp increment to 12 (#30981)\n\nUpdate the default timestamp increment to 12s for `eth_simulate` endpoint"
            }
        ],
        "2025-01-02": [
            {
                "date": "2025-01-02T17:37:58Z",
                "message": "eth/tracers/logger: skip system calls (#30923)\n\nThis commit makes it so that the struct logger will not emit logs while\nsystem calls are being executed. This will make it consistent with\nthe JSON and MD loggers. It is as it stands hard to distinguish when\nsystem calls are being processed vs when a tx is being processed.\n\n---------\n\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            },
            {
                "date": "2025-01-02T13:06:47Z",
                "message": "all: use cmp.Compare (#30958)"
            },
            {
                "date": "2025-01-02T13:04:06Z",
                "message": "crypto/bn256: fix MulScalar (#30974)\n\nThe `a` parameter should be used in the `MulScalar` function. The\nupstream cloudflare and google repos have already merged fixes.\n\nReference:\n*\nhttps://cs.opensource.google/go/x/crypto/+/8d7daa0c54b357f3071e11eaef7efc4e19a417e2\n* https://github.com/cloudflare/bn256/pull/33"
            },
            {
                "date": "2025-01-02T01:48:25Z",
                "message": "internal/flags: update copyright year to 2025 (#30976)"
            }
        ],
        "2024-12-19": [
            {
                "date": "2024-12-19T15:03:05Z",
                "message": "params: update system contracts for prague devnet-5 (#30938)"
            },
            {
                "date": "2024-12-19T09:06:33Z",
                "message": "core, core/types: rename AuthList to SetCodeAuthorizations (#30935)\n\nAs a follow-up to #30933, I propose to also use the SetCode prefix in\r\nour internal APIs for the authorization list."
            }
        ],
        "2024-12-18": [
            {
                "date": "2024-12-18T19:17:49Z",
                "message": "cmd/evm: update tests for SetCodeAuthorization JSON encoding change (#30936)\n\nFixing a regression introduced by 73a4ecf675f6, which I accidentally\r\npushed to the master branch directly."
            },
            {
                "date": "2024-12-18T18:46:15Z",
                "message": "core/types: rename SetCodeAuthorization 'v' to 'yParity'\n\nThe API spec requires the name yParity."
            },
            {
                "date": "2024-12-18T18:10:53Z",
                "message": "core/types: updates for EIP-7702 API functions (#30933)\n\nHere I am proposing two small changes to the exported API for EIP-7702:\r\n\r\n(1) `Authorization` has a very generic name, but it is in fact only used\r\nfor one niche use case: authorizing code in a `SetCodeTx`. So I propose\r\ncalling it `SetCodeAuthorization` instead. The signing function is\r\nrenamed to `SignSetCode` instead of `SignAuth`.\r\n   \r\n(2) The signing function for authorizations should take key as the first\r\nparameter, and the authorization second. The key will almost always be\r\nin a variable, while the authorization can be given as a literal."
            }
        ],
        "2024-12-17": [
            {
                "date": "2024-12-17T23:18:36Z",
                "message": "cmd/evm: make evm statetest accept non-json files (#30927)\n\nThis fixes a regression introduced recently. Without this fix, it's not\r\npossible to use statetests without `.json` suffix. This is problematic for\r\ngoevmlab `minimizer`, which appends the suffix `.min` during processing."
            },
            {
                "date": "2024-12-17T18:47:10Z",
                "message": "core/types, internal/ethapi: fixes for prague RPC encoding (#30926)\n\nFixing some issues I found while regenerating RPC tests for Prague:\r\n\r\n- Authorization signature values were not encoded as hex\r\n- `requestsRoot` in block should be `requestsHash`\r\n- `authorizationList` should work for `eth_call`"
            },
            {
                "date": "2024-12-17T17:37:29Z",
                "message": "core/vm: make all opcodes proper type (#30925)\n\nNoticed this omission while doing some work on goevmlab. We don't\r\nproperly type some of the opcodes, but apparently implicit casting works\r\nin all the internal usecases."
            },
            {
                "date": "2024-12-17T14:26:03Z",
                "message": "build(deps): bump golang.org/x/crypto from 0.26.0 to 0.31.0 (#30921)\n\nBumps [golang.org/x/crypto](https://github.com/golang/crypto) from\r\n0.26.0 to 0.31.0.\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
            },
            {
                "date": "2024-12-17T14:16:17Z",
                "message": "core: fixes for Prague fork in GenerateChain (#30924)\n\nAdding some missing functionality I noticed while updating the hivechain\r\ntool for the Prague fork:\r\n\r\n- we forgot to process the parent block hash\r\n- added `ConsensusLayerRequests` to get the requests list of the block"
            },
            {
                "date": "2024-12-17T08:12:10Z",
                "message": "accounts/abi/bind: make it possible to wait for tx hash (#30079)\n\nThis change adds methods which makes it possible for to wait for a transaction with a specific hash when deploying contracts during abi bind interaction.\r\n\r\n---------\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
            },
            {
                "date": "2024-12-17T07:58:26Z",
                "message": "core/vm, go.mod: update uint256 and use faster method to write to memory (#30868)\n\nUpdates geth to use the latest uint256, and use faster memory-writer"
            }
        ],
        "2024-12-16": [
            {
                "date": "2024-12-16T13:10:08Z",
                "message": "trie/pathdb: state iterator (snapshot integration pt 4) (#30654)\n\nIn this pull request, the state iterator is implemented. It's mostly a copy-paste\r\nfrom the original state snapshot package, but still has some important changes\r\nto highlight here:\r\n\r\n(a) The iterator for the disk layer consists of a diff iterator and a disk iterator.\r\n\r\nOriginally, the disk layer in the state snapshot was a wrapper around the disk, \r\nand its corresponding iterator was also a wrapper around the disk iterator.\r\nHowever, due to structural differences, the disk layer iterator is divided into\r\ntwo parts:\r\n\r\n- The disk iterator, which traverses the content stored on disk.\r\n- The diff iterator, which traverses the aggregated state buffer.\r\n\r\nCheckout `BinaryIterator` and `FastIterator` for more details.\r\n\r\n(b) The staleness management is improved in the diffAccountIterator and\r\ndiffStorageIterator\r\n\r\nOriginally, in the `diffAccountIterator`, the layer\u2019s staleness had to be checked \r\nwithin the Next function to ensure the iterator remained usable. Additionally, \r\na read lock on the associated diff layer was required to first retrieve the account \r\nblob. This read lock protection is essential to prevent concurrent map read/write. \r\nAfterward, a staleness check was performed to ensure the retrieved data was \r\nnot outdated.\r\n\r\nThe entire logic can be simplified as follows: a loadAccount callback is provided \r\nto retrieve account data. If the corresponding state is immutable (e.g., diff layers\r\nin the path database), the staleness check can be skipped, and a single account \r\ndata retrieval is sufficient. However, if the corresponding state is mutable (e.g., \r\nthe disk layer in the path database), the callback can operate as follows:\r\n\r\n```go\r\nfunc(hash common.Hash) ([]byte, error) {\r\n    dl.lock.RLock()\r\n    defer dl.lock.RUnlock()\r\n\r\n    if dl.stale {\r\n        return nil, errSnapshotStale\r\n    }\r\n    return dl.buffer.states.mustAccount(hash)\r\n}\r\n```\r\n\r\nThe callback solution can eliminate the complexity for managing\r\nconcurrency with the read lock for atomic operation."
            },
            {
                "date": "2024-12-16T10:29:37Z",
                "message": "all: implement eip-7702 set code tx (#30078)\n\nThis PR implements EIP-7702: \"Set EOA account code\". \r\nSpecification: https://eips.ethereum.org/EIPS/eip-7702\r\n\r\n> Add a new transaction type that adds a list of `[chain_id, address,\r\nnonce, y_parity, r, s]` authorization tuples. For each tuple, write a\r\ndelegation designator `(0xef0100 ++ address)` to the signing account\u2019s\r\ncode. All code reading operations must load the code pointed to by the\r\ndesignator.\r\n\r\n---------\r\n\r\nCo-authored-by: Mario Vega <marioevz@gmail.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2024-12-13": [
            {
                "date": "2024-12-13T11:46:12Z",
                "message": "p2p: DNS resolution for static nodes (#30822)\n\nCloses #23210 \r\n\r\n# Context \r\nWhen deploying Geth in Kubernetes with ReplicaSets, we encountered two\r\nDNS-related issues affecting node connectivity. First, during startup,\r\nGeth tries to resolve DNS names for static nodes too early in the config\r\nunmarshaling phase. If peer nodes aren't ready yet (which is common in\r\nKubernetes rolling deployments), this causes an immediate failure:\r\n\r\n\r\n```\r\nINFO [11-26|10:03:42.816] Starting Geth on Ethereum mainnet...\r\nINFO [11-26|10:03:42.817] Bumping default cache on mainnet         provided=1024 updated=4096\r\nFatal: config.toml, line 81: (p2p.Config.StaticNodes) lookup idontexist.geth.node: no such host\r\n``` \r\n\r\nThe second issue comes up when pods get rescheduled to different nodes -\r\ntheir IPs change but peers keep using the initially resolved IP, never\r\nupdating the DNS mapping.\r\n\r\nThis PR adds proper DNS support for enode:// URLs by deferring resolution\r\nto connection time. It also handles DNS failures gracefully instead of failing\r\nfatally during startup, making it work better in container environments where\r\nIPs are dynamic and peers come and go during rollouts.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2024-12-12": [
            {
                "date": "2024-12-12T11:39:03Z",
                "message": "internal/ethapi: add block override to estimateGas (#30695)\n\nAdd block overrides to `eth_estimateGas` to align consistency with\r\n`eth_call`.\r\n\r\n\r\nhttps://github.com/ethereum/go-ethereum/issues/27800#issuecomment-1658186166\r\n\r\nFixes https://github.com/ethereum/go-ethereum/issues/28175\r\n\r\n---------\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            },
            {
                "date": "2024-12-12T11:33:42Z",
                "message": "p2p: fix DiscReason encoding/decoding (#30855)\n\nThis fixes an issue where the disconnect message was not wrapped in a list.\r\nThe specification requires it to be a list like any other message.\r\n\r\nIn order to remain compatible with legacy geth versions, we now accept both\r\nencodings when parsing a disconnect message.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2024-12-11": [
            {
                "date": "2024-12-11T10:05:59Z",
                "message": "core/state: remove pointless wrapper functions (#30891)"
            }
        ],
        "2024-12-10": [
            {
                "date": "2024-12-10T13:30:24Z",
                "message": "accounts/abi: support unpacking solidity errors (#30738)\n\nThis PR adds the error fragments to `func (abi ABI) getArguments` which\r\nallows typed decoding of errors."
            },
            {
                "date": "2024-12-10T13:22:43Z",
                "message": "build: update to Go 1.23.4 (#30872)"
            },
            {
                "date": "2024-12-10T12:27:29Z",
                "message": "metrics, cmd/geth: change init-process of metrics (#30814)\n\nThis PR modifies how the metrics library handles `Enabled`: previously,\r\nthe package `init` decided whether to serve real metrics or just\r\ndummy-types.\r\n\r\nThis has several drawbacks: \r\n- During pkg init, we need to determine whether metrics are enabled or\r\nnot. So we first hacked in a check if certain geth-specific\r\ncommandline-flags were enabled. Then we added a similar check for\r\ngeth-env-vars. Then we almost added a very elaborate check for\r\ntoml-config-file, plus toml parsing.\r\n\r\n- Using \"real\" types and dummy types interchangeably means that\r\neverything is hidden behind interfaces. This has a performance penalty,\r\nand also it just adds a lot of code.\r\n\r\nThis PR removes the interface stuff, uses concrete types, and allows for\r\nthe setting of Enabled to happen later. It is still assumed that\r\n`metrics.Enable()` is invoked early on.\r\n\r\nThe somewhat 'heavy' operations, such as ticking meters and exp-decay,\r\nnow checks the enable-flag to prevent resource leak.\r\n\r\nThe change may be large, but it's mostly pretty trivial, and from the\r\nlast time I gutted the metrics, I ensured that we have fairly good test\r\ncoverage.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-12-10T12:10:17Z",
                "message": "core/vm: remove unnecessary comment (#30887)"
            },
            {
                "date": "2024-12-10T08:43:24Z",
                "message": "cmd/evm: consolidate evm output switches (#30849)\n\nThis PR attempts to clean up some ambiguities and quirks from recent\r\nchanges to evm flag handling.\r\n\r\nThis PR mainly focuses on `evm run` subcommand, to use the same flags\r\nfor configuring tracing/output options as `statetest/blocktest` does.\r\n\r\nAdditionally, it adds quite a lot of tests for expected outputs of the\r\nvarious subcommands, to avoid accidental changes.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-12-10T02:10:49Z",
                "message": "core/state: enable partial-functional reader (snapshot integration pt 3) (#30650)\n\nIt's a pull request based on https://github.com/ethereum/go-ethereum/pull/30643\r\n\r\nIn this pull request, the partial functional state reader is enabled if **legacy snapshot\r\nis not enabled**. The tracked flat states in pathdb will be used to serve the state\r\nretrievals, as the second implementation to fasten the state access.\r\n\r\nThis pull request should be a noop change in normal cases."
            }
        ],
        "2024-12-09": [
            {
                "date": "2024-12-09T18:29:19Z",
                "message": "core/txpool: remove unused parameter `local`  (#30871)"
            }
        ],
        "2024-12-06": [
            {
                "date": "2024-12-06T11:14:05Z",
                "message": "trie/utils: ensure master can generate a correct genesis for kaustinen7 (#30856)\n\nThis imports the following fixes:\r\n\r\n - update gnark to 1.1.0\r\n - update go-verkle to 0.2.2\r\n - fix: main storage offset bug (gballet/go-ethereum#329)\r\n - fix: tree key generation (gballet/go-ethereum#401)\r\n\r\n---------\r\n\r\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\r\nCo-authored-by: Ignacio Hagopian <jsign.uy@gmail.com>"
            }
        ],
        "2024-12-04": [
            {
                "date": "2024-12-04T08:40:37Z",
                "message": "core/tracing: extends tracing.Hooks with OnSystemCallStartV2 (#30786)\n\nThis PR extends the Hooks interface with a new method,\r\n`OnSystemCallStartV2`, which takes `VMContext` as its parameter.\r\n\r\nMotivation\r\n\r\nBy including `VMContext` as a parameter, the `OnSystemCallStartV2` hook\r\nachieves parity with the `OnTxStart` hook in terms of provided insights.\r\nThis alignment simplifies the inner tracer logic, enabling consistent\r\nhandling of state changes and internal calls within the same framework.\r\n\r\n---------\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            },
            {
                "date": "2024-12-04T07:52:59Z",
                "message": "cmd/evm, eth/tracers: refactor structlogger and make it streaming (#30806)\n\nThis PR refactors the structlog a bit, making it so that it can be used\r\nin a streaming mode.\r\n\r\n-------------\r\n\r\nOBS: this PR makes a change in the input `config` config, the third\r\ninput-parem field to `debug.traceCall`. Previously, seteting it to e.g.\r\n` {\"enableMemory\": true, \"limit\": 1024}` would mean that the response\r\nwas limited to `1024` items. Since an 'item' may include both memory and\r\nstorage, the actual size of the response was undertermined.\r\nAfter this change, the response will be limited to `1024` __`bytes`__\r\n(or thereabouts).\r\n\r\n\r\n\r\n-----------\r\n\r\n\r\nThe commandline usage of structlog now uses the streaming mode, leaving\r\nthe non-streaming mode of operation for the eth_Call.\r\n\r\nThere are two benefits of streaming mode \r\n1. Not have to maintain a long list of operations, \r\n2. Not have to duplicate / n-plicate data, e.g. memory / stack /\r\nreturndata so that each entry has their own private slice.\r\n\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2024-12-03": [
            {
                "date": "2024-12-03T15:11:26Z",
                "message": "CODEOWNERS: add some more entries for auto assignment (#30851)"
            },
            {
                "date": "2024-12-03T08:30:26Z",
                "message": "eth/downloader: move SyncMode to package eth/ethconfig (#30847)\n\nLots of packages depend on eth/downloader just for the SyncMode type.\r\nSince we have a dedicated package for eth protocol configuration, it\r\nmakes more sense to define SyncMode there, turning eth/downloader into\r\nmore of a leaf package."
            }
        ],
        "2024-12-02": [
            {
                "date": "2024-12-02T17:17:43Z",
                "message": "internal/debug: rename --trace to --go-execution-trace (#30846)\n\nThis flag is very rarely needed, so it's OK for it to have a verbose\r\nname. The name --trace also conflicts with the concept of EVM tracing,\r\nwhich is much more heavily used."
            },
            {
                "date": "2024-12-02T14:43:17Z",
                "message": "fuzzing: fix oss-fuzz fuzzer (#30845)\n\nThe fuzzer added recenly to fuzz the eth handler doesn't\r\nbuild on oss-fuzz, because it also has dependencies in the peer_test.go.\r\n\r\nThis change fixes it, I hope, by adding that file also for preprocessing."
            },
            {
                "date": "2024-12-02T14:18:02Z",
                "message": "cmd/evm: improve block/state test runner (#30633)\n\n* unify `staterunner` and `blockrunner` CLI flags, especially around\r\ntracing\r\n* added support for struct logger or json logging (although having issue\r\n#30658)\r\n* new --cross-check flag to validate the stateless witness collection\r\n  / execution matches stateful\r\n* adds support for tracing the stateless execution when a tracer is set\r\n  (to more easily debug differences)\r\n* --human for more readable test summary\r\n* directory or file input, so if you pass tests/spec-tests/fixtures/blockchain_tests it will execute all\r\nblockchain tests"
            }
        ],
        "2024-11-29": [
            {
                "date": "2024-11-29T17:42:28Z",
                "message": "eth/tracers: fix state hooks in API (#30830)\n\nWhen a tx/block was being traced through the API the state hooks weren't\r\nbeing called as they should. This is due to #30745 moving the hooked\r\nstatedb one level up in the state processor. This PR fixes that.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2024-11-29T14:39:42Z",
                "message": "core: switch EVM tx context in ApplyMessage (#30809)\n\nThis change relocates the EVM tx context switching to the ApplyMessage function.\r\nWith this change, we can remove a lot of EVM.SetTxContext calls before\r\nmessage execution.\r\n\r\n### Tracing API changes\r\n\r\n- This PR replaces the `GasPrice` field of the `VMContext` struct with\r\n  `BaseFee`. Users may instead take the effective gas price from\r\n  `tx.EffectiveGasTipValue(env.BaseFee)`.\r\n\r\n---------\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            },
            {
                "date": "2024-11-29T14:32:45Z",
                "message": "core/state: introduce code reader interface (#30816)\n\nThis PR introduces a `ContractCodeReader` interface with functions defined:\r\n\r\ntype ContractCodeReader interface {\r\n\tCode(addr common.Address, codeHash common.Hash) ([]byte, error)\r\n\tCodeSize(addr common.Address, codeHash common.Hash) (int, error)\r\n}\r\n\r\nThis interface can be implemented in various ways. Although the codebase\r\ncurrently includes only one implementation, additional implementations\r\ncould be created for different purposes and scenarios, such as a code\r\nreader designed for the Verkle tree approach or one that reads code from\r\nthe witness.\r\n\r\n*Notably, this interface modifies the function\u2019s semantics. If the\r\ncontract code is not found, no error will be returned. An error should\r\nonly be returned in the event of an unexpected issue, primarily for\r\nfuture implementations.*\r\n\r\nThe original state.Reader interface is extended with ContractCodeReader\r\nmethods, it gives us more flexibility to manipulate the reader with additional\r\nlogic on top, e.g. Hooks.\r\n\r\ntype Reader interface {\r\n\tContractCodeReader\r\n\tStateReader\r\n}\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-11-29T11:30:45Z",
                "message": "triedb/pathdb: track flat state changes in pathdb (snapshot integration pt 2) (#30643)\n\nThis pull request ports some changes from the main state snapshot\r\nintegration one, specifically introducing the flat state tracking in\r\npathdb.\r\n\r\nNote, the tracked flat state changes are only held in memory and won't\r\nbe persisted in the disk. Meanwhile, the correspoding state retrieval in\r\npersistent state is also not supported yet. The states management in\r\ndisk is more complicated and will be implemented in a separate pull\r\nrequest.\r\n\r\nPart 1: https://github.com/ethereum/go-ethereum/pull/30752"
            }
        ],
        "2024-11-28": [
            {
                "date": "2024-11-28T17:43:39Z",
                "message": "core/types: add length check in CalcRequestsHash (#30829)\n\nThe existing implementation is correct when building and verifying\r\nblocks, since we will only collect non-empty requests into the block\r\nrequests list.\r\n\r\nBut it isn't correct for cases where a requests list containing empty\r\nitems is sent by the consensus layer on the engine API. We want to\r\nensure that empty requests do not cause a difference in validation\r\nthere, so the commitment computation should explicitly skip them."
            },
            {
                "date": "2024-11-28T13:37:36Z",
                "message": "cmd/bootnode: remove bootnode utility (#30813)\n\nSince we don't really support custom networks anymore, we don't need the\r\nbootnode utility. In case a discovery-only node is wanted, it can still be run using cmd/devp2p."
            },
            {
                "date": "2024-11-28T10:48:50Z",
                "message": "all: exclude empty outputs in requests commitment (#30670)\n\nImplements changes from these spec PRs:\r\n\r\n- https://github.com/ethereum/EIPs/pull/8989\r\n- https://github.com/ethereum/execution-apis/pull/599"
            },
            {
                "date": "2024-11-28T09:17:58Z",
                "message": "trie: combine validation loops in VerifyRangeProof (#30823)\n\nSmall optimization. It's guaranteed that `len(keys)` == `len(values)`,\r\nso we can combine the checks in a single loop rather than 2 separate\r\nloops."
            },
            {
                "date": "2024-11-28T03:21:31Z",
                "message": "core/state/snapshot: handle legacy journal (#30802)\n\nThis workaround is meant to minimize the possibility for snapshot generation\r\nonce the geth node upgrades to new version (specifically #30752 )\r\n\r\nIn #30752, the journal format in state snapshot is modified by removing\r\nthe destruct set. Therefore, the existing old format (version = 0) will be\r\ndiscarded and all in-memory layers will be lost. Unfortunately, the lost \r\nin-memory layers can't be recovered by some other approaches, and the \r\nentire state snapshot will be regenerated (it will last about 2.5 hours).\r\n\r\nThis pull request introduces a workaround to adopt the legacy journal if\r\nthe destruct set contained is empty. Since self-destruction has been\r\ndeprecated following the cancun fork, the destruct set is expected to be nil for\r\nlayers above the fork block. However, an exception occurs during contract \r\ndeployment: pre-funded accounts may self-destruct, causing accounts with \r\nnon-zero balances to be removed from the state. For example,\r\nhttps://etherscan.io/tx/0xa087333d83f0cd63b96bdafb686462e1622ce25f40bd499e03efb1051f31fe49).\r\n\r\n\r\nFor nodes with a fully synced state, the legacy journal is likely compatible with\r\nthe updated definition, eliminating the need for regeneration. Unfortunately,\r\nnodes performing a full sync of historical chain segments or encountering \r\npre-funded account deletions may face incompatibilities, leading to automatic \r\nsnapshot regeneration."
            }
        ],
        "2024-11-27": [
            {
                "date": "2024-11-27T06:17:03Z",
                "message": "core: better document reason for dropping error on return (#30811)\n\nAdd a comment for error return of nil\r\n\r\nSigned-off-by: wangjingcun <wangjingcun@aliyun.com>"
            }
        ],
        "2024-11-26": [
            {
                "date": "2024-11-26T15:12:38Z",
                "message": "cmd/evm: don't reuse state between iterations, show errors (#30780)\n\nReusing state between benchmark iterations resulted in inconsistent\r\nresults across runs, which surfaced in https://github.com/ethereum/go-ethereum/issues/30778 .\r\n\r\nIf these errors are triggered again, they will now trigger panic. \r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
            },
            {
                "date": "2024-11-26T10:33:59Z",
                "message": "Revert \"core/state/snapshot: simplify snapshot rebuild (#30772)\" (#30810)\n\nThis reverts commit 23800122b37695be50565f8221858a16ce1763db.\r\n\r\nThe original pull request introduces a bug and some flaky tests are\r\ndetected because of this flaw.\r\n\r\n```\r\n--- FAIL: TestRecoverSnapshotFromWipingCrash (0.27s)\r\n    blockchain_snapshot_test.go:158: The disk layer is not integrated snapshot is not constructed\r\n{\"pc\":0,\"op\":88,\"gas\":\"0x7148\",\"gasCost\":\"0x2\",\"memSize\":0,\"stack\":[],\"depth\":1,\"refund\":0,\"opName\":\"PC\"}\r\n{\"pc\":1,\"op\":255,\"gas\":\"0x7146\",\"gasCost\":\"0x1db0\",\"memSize\":0,\"stack\":[\"0x0\"],\"depth\":1,\"refund\":0,\"opName\":\"SELFDESTRUCT\"}\r\n{\"output\":\"\",\"gasUsed\":\"0x0\"}\r\n{\"output\":\"\",\"gasUsed\":\"0x1db2\"}\r\n{\"pc\":0,\"op\":116,\"gas\":\"0x13498\",\"gasCost\":\"0x3\",\"memSize\":0,\"stack\":[],\"depth\":1,\"refund\":0,\"opName\":\"PUSH21\"}\r\n```\r\n\r\nBefore the original PR, the snapshot would block the function until the\r\ndisk layer\r\nwas fully generated under the following conditions:\r\n\r\n(a) explicitly required by users with `AsyncBuild = false`.\r\n(b) the snapshot was being fully rebuilt or *the disk layer generation\r\nhad resumed*.\r\n\r\nUnfortunately, with the changes introduced in that PR, the snapshot no\r\nlonger waits\r\nfor disk layer generation to complete if the generation is resumed. It\r\nbrings lots of\r\nuncertainty and breaks this tiny debug feature."
            },
            {
                "date": "2024-11-26T07:16:00Z",
                "message": "core/tracing: add GetCodeHash to StateDB (#30784)\n\nThis PR extends the tracing.StateDB interface by adding a GetCodeHash function."
            },
            {
                "date": "2024-11-26T01:49:12Z",
                "message": "eth/ethconfig: improve error message if TTD missing (#30807)\n\nThis updates the message you get when trying to initialize Geth with\r\ngenesis.json that doesn't have `terminalTotalDifficulty`. The previous\r\nmessage was a bit obscure, I had to check the code to find out what the\r\nproblem was."
            }
        ],
        "2024-11-25": [
            {
                "date": "2024-11-25T12:43:23Z",
                "message": "core/state/snapshot: simplify snapshot rebuild (#30772)\n\nThis PR is purely for improved readability; I was doing work involving\r\nthe file and think this may help others who are trying to understand\r\nwhat's going on.\r\n\r\n1. `snapshot.Tree.Rebuild()` now returns a function that blocks until\r\nregeneration is complete, allowing `Tree.waitBuild()` to be removed\r\nentirely as all it did was search for the `done` channel behind this new\r\nfunction.\r\n2. Its usage inside `New()` is also simplified by (a) only waiting if\r\n`!AsyncBuild`; and (b) avoiding the double negative of `if !NoBuild`.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
            },
            {
                "date": "2024-11-25T12:34:50Z",
                "message": "accounts/abi:  fix MakeTopics mutation of big.Int inputs (#30785)\n\n#28764 updated `func MakeTopics` to support negative `*big.Int`s.\r\nHowever, it also changed the behavior of the function from just\r\n_reading_ the input `*big.Int` via `Bytes()`, to leveraging\r\n`big.U256Bytes` which is documented as being _destructive_:\r\n\r\nThis change updates `MakeTopics` to not mutate the original, and \r\nalso applies the same change in signer/core/apitypes."
            },
            {
                "date": "2024-11-25T12:33:28Z",
                "message": "internal/ethapi: remove double map-clone (#30803)\n\nSimilar to https://github.com/ethereum/go-ethereum/pull/30788"
            },
            {
                "date": "2024-11-25T12:29:27Z",
                "message": "eth/tracers/logger: improve markdown logger (#30805)\n\nThis PR improves the output of the markdown logger a bit.\r\n\r\n- Remove `RStack` field, \r\n- Move `Stack` last, since it may have very large vertical expansion\r\n- Make the pre- and post-exec  metadata structured into a bullet-list"
            },
            {
                "date": "2024-11-25T09:07:50Z",
                "message": "eth/tracers/logger: fix json-logger output missing (#30804)\n\nFixes a flaw introduced in\r\nhttps://github.com/ethereum/go-ethereum/pull/29795 , discovered while\r\nreviewing https://github.com/ethereum/go-ethereum/pull/30633 ."
            }
        ],
        "2024-11-24": [
            {
                "date": "2024-11-24T19:09:38Z",
                "message": "internal/flags: fix \"flag redefined\" bug for alias on custom flags (#30796)\n\nThis change fixes a bug on the `DirectoryFlag` and the `BigFlag`, which would trigger a `panic` with the message \"flag redefined\" in case an alias was added to such a flag."
            }
        ],
        "2024-11-22": [
            {
                "date": "2024-11-22T08:55:43Z",
                "message": "core, triedb: remove destruct flag in state snapshot (#30752)\n\nThis pull request removes the destruct flag from the state snapshot to\r\nsimplify the code.\r\n\r\nPreviously, this flag indicated that an account was removed during a\r\nstate transition, making all associated storage slots inaccessible.\r\nBecause storage deletion can involve a large number of slots, the actual\r\ndeletion is deferred until the end of the process, where it is handled\r\nin batches.\r\n\r\nWith the deprecation of self-destruct in the Cancun fork, storage\r\ndeletions are no longer expected. Historically, the largest storage\r\ndeletion event in Ethereum was around 15 megabytes\u2014manageable in memory.\r\n\r\nIn this pull request, the single destruct flag is replaced by a set of\r\ndeletion markers for individual storage slots. Each deleted storage slot\r\nwill now appear in the Storage set with a nil value.\r\n\r\nThis change will simplify a lot logics, such as storage accessing,\r\nstorage flushing, storage iteration and so on."
            },
            {
                "date": "2024-11-22T08:16:42Z",
                "message": "trie: replace custom logic with bytes.HasPrefix (#30771)\n\nin `trie`\r\n- Replace custom logic with `bytes.HasPrefix`\r\n- Remove unnecessary code in `GetNode`"
            },
            {
                "date": "2024-11-22T08:02:45Z",
                "message": "all: typos in comments (#30779)\n\nfixes some typos"
            },
            {
                "date": "2024-11-22T07:21:20Z",
                "message": "internal/ethapi: remove double map-clone (#30788)\n\n`ActivePrecompiledContracts()` clones the precompiled contract map, thus\r\nits callsite does not need to clone it"
            },
            {
                "date": "2024-11-22T07:17:32Z",
                "message": "core, eth, internal, miner: remove unnecessary parameters (#30776)\n\nFollow-up to #30745 , this change removes some unnecessary parameters."
            }
        ],
        "2024-11-20": [
            {
                "date": "2024-11-20T11:35:52Z",
                "message": "core, eth, internal, cmd: rework EVM constructor (#30745)\n\nThis pull request refactors the EVM constructor by removing the\r\nTxContext parameter.\r\n\r\nThe EVM object is frequently overused. Ideally, only a single EVM\r\ninstance should be created and reused throughout the entire state\r\ntransition of a block, with the transaction context switched as needed\r\nby calling evm.SetTxContext.\r\n\r\nUnfortunately, in some parts of the code, the EVM object is repeatedly\r\ncreated, resulting in unnecessary complexity. This pull request is the\r\nfirst step towards gradually improving and simplifying this setup.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2024-11-20T07:40:21Z",
                "message": "core/vm/program: evm bytecode-building utility (#30725)\n\nIn many cases, there is a need to create somewhat nontrivial bytecode. A\r\nrecent example is the verkle statetests, where we want a `CREATE2`- op\r\nto create a contract, which can then be invoked, and when invoked does a\r\nselfdestruct-to-self.\r\n\r\nIt is overkill to go full solidity, but it is also a bit tricky do\r\nassemble this by concatenating bytes. This PR takes an approach that\r\nhas been used in in goevmlab for several years.\r\n\r\nUsing this utility, the case can be expressed as: \r\n```golang\r\n\t// Some runtime code\r\n\truntime := program.New().Ops(vm.ADDRESS, vm.SELFDESTRUCT).Bytecode()\r\n\t// A constructor returning the runtime code\r\n\tinitcode := program.New().ReturnData(runtime).Bytecode()\r\n\t// A factory invoking the constructor\r\n\touter := program.New().Create2AndCall(initcode, nil).Bytecode()\r\n```\r\n\r\nWe have a lot of places in the codebase where we concatenate bytes, cast\r\nfrom `vm.OpCode` . By taking tihs approach instead, thos places can be made a\r\nbit more maintainable/robust."
            }
        ],
        "2024-11-19": [
            {
                "date": "2024-11-19T15:58:52Z",
                "message": "version: fix typo in v1.14.13 release cycle name"
            },
            {
                "date": "2024-11-19T13:51:54Z",
                "message": "version: begin v1.14.13 release cycle"
            },
            {
                "date": "2024-11-19T13:46:38Z",
                "message": "version: go-ethereum v1.14.12 stable"
            },
            {
                "date": "2024-11-19T12:43:33Z",
                "message": "rpc: run tests in parallel (#30384)\n\nContinuation of https://github.com/ethereum/go-ethereum/pull/30381"
            },
            {
                "date": "2024-11-19T12:35:52Z",
                "message": "core/txpool, eth/catalyst: clear transaction pool in Rollback (#30534)\n\nThis adds an API method `DropTransactions` to legacy pool, blob pool and\r\ntxpool interface. This method removes all txs currently tracked in the\r\npools.\r\n\r\nIt modifies the simulated beacon to use the new method in `Rollback`\r\nwhich removes previous hacky implementation that also erroneously reset\r\nthe gas tip to 1 gwei.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-11-19T12:29:23Z",
                "message": "all: remove kilic dependency from bls12381 fuzzers (#30296)\n\nThe [kilic](https://github.com/kilic/bls12-381) bls12381 implementation\r\nhas been archived. It shouldn't be necessary to include it as a fuzzing\r\ntarget any longer.\r\n\r\nThis also adds fuzzers for G1/G2 mul that use inputs that are guaranteed\r\nto be valid. Previously, we just did random input fuzzing for these\r\nprecompiles."
            },
            {
                "date": "2024-11-19T06:26:39Z",
                "message": "core: fix typos (#30767)"
            }
        ],
        "2024-11-15": [
            {
                "date": "2024-11-15T13:05:23Z",
                "message": "build: upgrade -dlgo version to Go 1.23.3 (#30742)\n\nNew release: https://groups.google.com/g/golang-announce/c/X5KodEJYuqI"
            },
            {
                "date": "2024-11-15T09:15:15Z",
                "message": "cmd/geth: remove unlock commandline flag (#30737)\n\nThis is one further step towards removing account management from\r\n`geth`. This PR deprecates the flag `unlock`, and makes the flag moot:\r\nunlock via geth is no longer possible."
            },
            {
                "date": "2024-11-15T06:59:06Z",
                "message": "core/state: tests on the binary iterator (#30754)\n\nFixes an error in the binary iterator, adds additional testcases\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2024-11-11": [
            {
                "date": "2024-11-11T11:14:18Z",
                "message": "docs: fix typo (#30740)\n\nfixes a typo on one of the postmortems"
            },
            {
                "date": "2024-11-11T10:43:22Z",
                "message": "p2p/netutil: unittests for addrutil (#30439)\n\nadd unit tests for `p2p/addrutil`\r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
            }
        ],
        "2024-11-10": [
            {
                "date": "2024-11-10T09:57:05Z",
                "message": "tests: fix test panic (#30741)\n\nFix panic in tests"
            }
        ],
        "2024-11-09": [
            {
                "date": "2024-11-09T15:07:17Z",
                "message": "eth/protocols/eth: add ETH68 protocol handler fuzzers (#30417)\n\nAdds a protocol handler fuzzer to fuzz the ETH68 protocol handlers"
            },
            {
                "date": "2024-11-09T00:08:06Z",
                "message": "core/state, triedb/database: refactor state reader (#30712)\n\nCo-authored-by: Martin HS <martin@swende.se>"
            }
        ],
        "2024-11-08": [
            {
                "date": "2024-11-08T16:20:48Z",
                "message": "travis: build and upload RISC-V docker images too (#30739)\n\nRequested by @barnabasbusa"
            },
            {
                "date": "2024-11-08T14:28:42Z",
                "message": "trie/utils: remove unneeded initialization (#30472)"
            },
            {
                "date": "2024-11-08T14:25:30Z",
                "message": "core/state: invoke OnCodeChange-hook on selfdestruct (#30686)\n\nThis change invokes the OnCodeChange hook when selfdestruct operation is performed, and a contract is removed. This is an event which can be consumed by tracers."
            },
            {
                "date": "2024-11-08T14:21:00Z",
                "message": "beacon/blsync: remove cli dependencies (#30720)\n\nThis PR moves chain config related code (config file processing, fork\r\nlogic, network defaults) from `beacon/types` and `beacon/blsync` into\r\n`beacon/params` while the command line flag logic of the chain config is\r\nmoved into `cmd/utils`, thereby removing the cli dependencies from\r\npackage `beacon` and its sub-packages."
            },
            {
                "date": "2024-11-08T14:18:42Z",
                "message": "cmd/evm:  benchmarking via `statetest` command + filter by name, index and fork (#30442)\n\nWhen `evm statetest --bench` is specified, benchmark the execution\r\nsimilarly to `evm run`.\r\n\r\nAlso adds the ability to filter tests by name, index and fork. \r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2024-11-08T14:04:17Z",
                "message": "signer/core: extended support for EIP-712 array types (#30620)\n\nThis change updates the EIP-712 implementation to resolve [#30619](https://github.com/ethereum/go-ethereum/issues/30619).\r\n\r\nThe test cases have been repurposed from the ethers.js [repository](https://github.com/ethers-io/ethers.js/blob/main/testcases/typed-data.json.gz), but have been updated to remove tests that don't have a valid domain separator; EIP-712 messages without a domain separator are not supported by geth.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2024-11-08T13:57:29Z",
                "message": "accounts/usbwallet: support dynamic tx (#30180)\n\nAdds support non-legacy transaction-signing using ledger\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2024-11-08T12:33:43Z",
                "message": "internal/ethapi:  Set basefee for `AccessList` based on given block, not chain tip (#30538)"
            },
            {
                "date": "2024-11-08T12:28:16Z",
                "message": "ethclient/gethclient: testcase for createAccessList, make tabledriven (#30194)\n\nAdds testcase for createAccessList when user requested gasPrice is less than baseFee, also makes the tests tabledriven\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2024-11-07": [
            {
                "date": "2024-11-07T19:26:02Z",
                "message": "ethclient: add RevertErrorData function and example (#30669)\n\nHere I'm adding a new helper function that extracts the revert reason of\r\na contract call. Unfortunately, this aspect of the API is underspecified.\r\nSee these spec issues for more detail:\r\n\r\n- https://github.com/ethereum/execution-apis/issues/232\r\n- https://github.com/ethereum/execution-apis/issues/463\r\n- https://github.com/ethereum/execution-apis/issues/523\r\n\r\nThe function added here only works with Geth-like servers that return\r\nerror code `3`. We will not be able to support all possible servers.\r\nHowever, if there is a specific server implementation that makes it\r\npossible to extract the same info, we could add it in the same function\r\nas well.\r\n\r\n---------\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
            },
            {
                "date": "2024-11-07T13:48:51Z",
                "message": "build(deps): bump github.com/golang-jwt/jwt/v4 from 4.5.0 to 4.5.1 (#30728)\n\nBumps [github.com/golang-jwt/jwt/v4](https://github.com/golang-jwt/jwt) from 4.5.0 to 4.5.1.\r\n\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
            }
        ],
        "2024-11-06": [
            {
                "date": "2024-11-06T17:24:55Z",
                "message": "cmd/utils: change blssync.JWTSecretFlag to DirectoryFlag (#30729)\n\ncloses https://github.com/ethereum/go-ethereum/issues/30304\r\n\r\nWe already use `DirectoryFlag` for `authrpc.jwtsecret` which expands the\r\ntilde, so this should work out of the box"
            }
        ],
        "2024-11-05": [
            {
                "date": "2024-11-05T17:29:37Z",
                "message": "core/state: small fix in hooked statedb (#30732)\n\nfixes a very tiny bug"
            },
            {
                "date": "2024-11-05T07:42:22Z",
                "message": "eth/tracers: fill the creationMethod in flatCall (#30539)\n\n`flatCallTracer` will now specify the type of a create in the action\r\nvia the `creationMethod` field.\r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            }
        ],
        "2024-11-04": [
            {
                "date": "2024-11-04T14:10:12Z",
                "message": "all: fix issues with benchmarks (#30667)\n\nThis PR fixes some issues with benchmarks\r\n\r\n- [x] Removes log output from a log-test\r\n- [x] Avoids a `nil`-defer in `triedb/pathdb`\r\n- [x] Fixes some crashes re tracers\r\n- [x] Refactors a very resource-expensive benchmark for blobpol.\r\n**NOTE**: this rewrite touches live production code (a little bit), as\r\nit makes the validator-function used by the blobpool configurable.\r\n- [x] Switch some benches over to use pebble over leveldb\r\n- [x] reduce mem overhead in the setup-phase of some tests\r\n- [x] Marks some tests with a long setup-phase to be skipped if `-short`\r\nis specified (where long is on the order of tens of seconds). Ideally,\r\nin my opinion, one should be able to run with `-benchtime 10ms -short`\r\nand sanity-check all tests very quickly.\r\n- [x]  Drops some metrics-bechmark which times the speed of `copy`.\r\n\r\n---------\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            },
            {
                "date": "2024-11-04T13:19:50Z",
                "message": "core, trie: verkle state processor tests (#30672)\n\nTests that are crucial to for verifying the verkle testnet functions properly.\r\n\r\n---------\r\n\r\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\r\nCo-authored-by: Ignacio Hagopian <jsign.uy@gmail.com>\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\r\nCo-authored-by: Martin HS <martin@swende.se>"
            },
            {
                "date": "2024-11-04T10:39:06Z",
                "message": "core/vm/runtime: invoke tx-end hook (#30711)\n\nWhen using the `core/vm/runtime` helpers to execute code, callbacks for the tx end were not invoked. This change fixes it by invoking them."
            },
            {
                "date": "2024-11-04T10:33:42Z",
                "message": "eth/catalyst: make engine api test time independent (#30713)\n\nThis test depends on a 100ms timer, which fails quite often, messing up\r\nour pipelines. Hook directly into the internal version of getPayload\r\nwhich has the capacity to wait for the full payload before returning.\r\nThis might not be absolutely correct from a test perspective, but it\r\nbeats failing ci. The alternative would be to expose the full build hook\r\ninto the outside, but it might be a bit overkill for this scenario."
            },
            {
                "date": "2024-11-04T10:32:41Z",
                "message": "core/txpool: improve error responses with wrapped errors (#30715)"
            },
            {
                "date": "2024-11-04T09:49:23Z",
                "message": "tests/fuzzers/bls12381: more verbose fuzzing-output (#30724)\n\nThis PR updates the fuzzing verbosity a bit, in case of mismatches"
            }
        ],
        "2024-11-03": [
            {
                "date": "2024-11-03T20:05:44Z",
                "message": "build: use slices.Clone for copying slice (#30716)"
            }
        ],
        "2024-11-01": [
            {
                "date": "2024-11-01T08:51:06Z",
                "message": "eth/tracers:  flatCallTracer error compatible with parity (#30497)\n\nCompatible error message in the flat call tracer with parity-style endpoints.\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
            }
        ],
        "2024-10-31": [
            {
                "date": "2024-10-31T18:53:35Z",
                "message": "all: remove `personal` RPC namespace (#30704)\n\nThis PR is a first step towards removing account management from geth,\r\nand contains a lot of the user-facing changes.\r\n\r\nWith this PR, the `personal` namespace disappears. **Note**: `personal`\r\nnamespace has been deprecated for quite some time (since\r\nhttps://github.com/ethereum/go-ethereum/pull/26390 1 year and 8 months\r\nago), and users who have wanted to use it has been forced to used the\r\nflag `--rpc.enabledeprecatedpersonal`. So I think it's fairly\r\nnon-controversial to drop it at this point.\r\n\r\nSpecifically, this means: \r\n\r\n- Account/wallet listing\r\n  -`personal.getListAccounts`  \r\n  -`personal.listAccounts`     \r\n  -`personal.getListWallets`   \r\n  -`personal.listWallets`      \r\n- Lock/unlock\r\n  -`personal.lockAccount`      \r\n  -`personal.openWallet`       \r\n  -`personal.unlockAccount`\r\n- Sign ops\r\n  -`personal.sign`             \r\n  -`personal.sendTransaction`  \r\n  -`personal.signTransaction`  \r\n- Imports / inits\r\n  -`personal.deriveAccount`    \r\n  -`personal.importRawKey`     \r\n  -`personal.initializeWallet` \r\n  -`personal.newAccount`       \r\n  -`personal.unpair` \r\n- Other: \r\n  -`personal.ecRecover`        \r\n\r\n\r\nThe underlying keystores and account managent code is still in place,\r\nwhich means that `geth --dev` still works as expected, so that e.g. the\r\nexample below still works:\r\n\r\n```\r\n> eth.sendTransaction({data:\"0x6060\", value: 1, from:eth.accounts[0]})\r\n```\t\r\n\r\nAlso, `ethkey` and `clef` are untouched. \r\n\r\nWith the removal of `personal`, as far as I know we have no more API\r\nmethods which contain credentials, and if we want to implement\r\nlogging-capabilities of RPC ingress payload, it would be possible after\r\nthis.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-10-31T18:52:39Z",
                "message": "internal/flags: remove low-use type TextMarshalerFlag (#30707)\n\nCurrently we have a custom TextMarshalerFlag. It's a nice idea, allowing\r\nanything implementing text marshaller to be used as a flag. That said,\r\nwe only ever used it in one place because it's not that obvious how to\r\nuse and it needs some boilerplate on the type itself too, apart of the\r\nheavy boilerplate got the custom flag.\r\n\r\nAll in all there's no *need* to drop this feature just now, but while\r\nporting the cmds over to cli @v3, all other custom flags worker\r\nperfectly, whereas this one started crashing deep inside the cli\r\npackage. The flag handling in v3 got rebuild on generics and there are a\r\nnumber of new methods needed; and my guess is that maybe one of them\r\ndoesn't work like this flag currently is designed too.\r\n\r\nWe could definitely try and redesign this flag for cli v3... but all\r\nthat effort and boilerplate just to use it for 1 flag in 1 location,\r\nseems not worth it. So for now I'm suggesting removing it and maybe\r\nreconsider a similar feature in cli v3 with however it will work."
            },
            {
                "date": "2024-10-31T17:26:02Z",
                "message": "internal/flags: remove Merge, it's identical to slices.Concat (#30706)\n\nThis is a noop change to not have custom code for stdlib functionality."
            },
            {
                "date": "2024-10-31T15:03:47Z",
                "message": "cmd/utils, eth/ethconfig: remove some ancient leftover flag (#30705)\n\nThis is a flag leftover from the swarm era. No need to deprecate it,\r\nit's been useless/dead forever now."
            },
            {
                "date": "2024-10-31T10:19:01Z",
                "message": "core: add code to witness when state object is accessed (#30698)\n\nI think the core code should generally be agnostic about the witness and\r\nthe statedb layer should determine what elements need to be included in\r\nthe witness. Because code is accessed via `GetCode`, and\r\n`GetCodeLength`, the statedb will always know when it needs to add that\r\ncode into the witness.\r\n\r\nThe edge case is block hashes, so we continue to add them manually in\r\nthe implementation of `BLOCKHASH`.\r\n\r\nIt probably makes sense to refactor statedb so we have a wrapped\r\nimplementation that accumulates the witness, but this is a simpler\r\nchange that makes #30078 less aggressive."
            }
        ],
        "2024-10-30": [
            {
                "date": "2024-10-30T17:01:47Z",
                "message": "core/vm: speed up push and interpreter loop (#30662)\n\nLooking at the cpu profile of a burntpix benchmark, I noticed that a lot\r\nof time was spent in gas-used, in the interpreter loop. It's an actual\r\ncall (not inlined), which explicitly wants to be ignored by tracing\r\n(\"tracing.GasChangeIgnored\"), so it can be safely and simply inlined.\r\n\r\nThe other change is in `pushX`. These also do a call to\r\n`common.RightPadBytes`. I replaced that by a doing a corresponding `Lsh`\r\non the `u256` if needed. Note: it's needed only to make the stack output\r\nlook right, for fuzzers. It technically doesn't matter what we put\r\nthere: if code ends on a pushdata immediate, nothing will consume the\r\nstack element. We could just as well just ignore it, if we didn't care\r\nabout fuzzers (which I do).\r\n\r\nSeems quite a lot faster on burntpix, according to my runs. \r\n\r\nThis PR:\r\n```\r\nEVM gas used:    5642735088\r\nexecution time:  34.84609475s\r\nallocations:     915683\r\nallocated bytes: 175334088\r\n```\r\n```\r\nEVM gas used:    5642735088\r\nexecution time:  36.671958278s\r\nallocations:     915701\r\nallocated bytes: 175340528\r\n```\r\n\r\nMaster\r\n```\r\nEVM gas used:    5642735088\r\nexecution time:  49.349209526s\r\nallocations:     915684\r\nallocated bytes: 175333368\r\n```\r\n```\r\nEVM gas used:    5642735088\r\nexecution time:  46.581006598s\r\nallocations:     915681\r\nallocated bytes: 175330728\r\n```\r\n\r\n---------\r\n\r\nCo-authored-by: Sina M <1591639+s1na@users.noreply.github.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-10-30T14:22:10Z",
                "message": "beacon/light: remove unused CommitteeChain.signerThreshold (#30484)\n\nThis field is a duplicate of UpdateScore.SignerCount and never referenced."
            }
        ],
        "2024-10-29": [
            {
                "date": "2024-10-29T11:21:17Z",
                "message": "appveyor, build, internal: ci.go cleanups, add package dep checker (#30696)"
            },
            {
                "date": "2024-10-29T08:32:40Z",
                "message": "ethdb: refactor Database interface (#30693)"
            },
            {
                "date": "2024-10-29T08:31:04Z",
                "message": "core, eth, node: break rawdb -> {leveldb, pebble} dependency (#30689)"
            },
            {
                "date": "2024-10-29T06:35:06Z",
                "message": "eth/tracers: add disableCode/Storage options for prestateTracer (#30648)\n\nWhen using the prestateTracer, in some cases users are only concerned\r\nwith balances or nonce information, and are not interested in the lengthy\r\ncontract code or storage data.\r\n\r\nTherefore, this PR introduces two new configuration options in the\r\n`prestateTracerConfig` structure:\r\n- `disableCode`\r\n- `disableStorage`\r\n\r\nThese options allow users to control whether the tracer returns contract\r\ncode and storage data during execution tracing. By setting these\r\noptions, users can more flexibly customize their needs and focus on\r\nobtaining information that is more critical and relevant to their\r\nspecific use cases.\r\n\r\nThese options work with the default mode as well as `diffMode: true`.\r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\nCo-authored-by: Sina M <1591639+s1na@users.noreply.github.com>"
            }
        ],
        "2024-10-28": [
            {
                "date": "2024-10-28T20:29:25Z",
                "message": "cmd/geth: avoid hard coding the IPC name (#30687)"
            },
            {
                "date": "2024-10-28T09:26:36Z",
                "message": "build: document doGoModTidy function in ci.go (#30685)"
            }
        ],
        "2024-10-25": [
            {
                "date": "2024-10-25T15:33:46Z",
                "message": "ethdb: add DeleteRange feature (#30668)\n\nThis PR adds `DeleteRange` to `ethdb.KeyValueWriter`. While range\r\ndeletion using an iterator can be really slow, `DeleteRange` is natively\r\nsupported by pebble and apparently runs in O(1) time (typically 20-30ms\r\nin my tests for removing hundreds of millions of keys and gigabytes of\r\ndata). For leveldb and memorydb an iterator based fallback is\r\nimplemented. Note that since the iterator method can be slow and a\r\ndatabase function should not unexpectedly block for a very long time,\r\nthe number of deleted keys is limited at 10000 which should ensure that\r\nit does not block for more than a second. ErrTooManyKeys is returned if\r\nthe range has only been partially deleted. In this case the caller can\r\nrepeat the call until it finally succeeds."
            },
            {
                "date": "2024-10-25T11:20:18Z",
                "message": "beacon/blsync: add holesky config and update checkpoints (#30671)\n\nThis PR adds the beacon chain config for the holesky testnet. It also\r\nupdates beacon checkpoints for Mainnet and Sepolia."
            }
        ],
        "2024-10-24": [
            {
                "date": "2024-10-24T07:13:01Z",
                "message": "core/vm: remove debug printout in eof test (#30665)"
            },
            {
                "date": "2024-10-24T07:11:47Z",
                "message": "core: fix tracing of system calls (#30666)\n\nThis change makes it so that the wrapped statedb with tracing-hooks is passed to the system call processing\r\n\r\nFixes #30658"
            }
        ],
        "2024-10-23": [
            {
                "date": "2024-10-23T13:12:56Z",
                "message": "docs: update security policy (#30606)\n\nprevious key expired 2023-07-27, the new one expires 2026-02-22:\r\n\r\npub   rsa4096 2016-11-11 [SC] [expires: 2026-02-22]\r\n      AE96ED969E479B0084F3E17FE88D3334FA5F6A0A\r\nuid Ethereum Foundation Security Team <security@ethereum.org>\r\nuid Ethereum Foundation Bug Bounty <bounty@ethereum.org>\r\nsub   rsa4096 2016-11-11 [E] [expires: 2026-02-22]"
            },
            {
                "date": "2024-10-23T06:33:14Z",
                "message": "eth/tracers/internal/tracertest: add missing Random to call context (#30652)\n\nFixes a configuration issue in a test-helper, so that we can do call tracing-tests post-merge"
            },
            {
                "date": "2024-10-23T06:26:18Z",
                "message": "all: remove TerminalTotalDifficultyPassed (#30609)\n\nrebased https://github.com/ethereum/go-ethereum/pull/29766 . The\r\ndownstream branch appears to have been deleted and I don't have perms to\r\npush to that fork.\r\n\r\n`TerminalTotalDifficultyPassed` is removed. `TerminalTotalDifficulty`\r\nmust now be non-nil, and it is expected that networks are already\r\nmerged: we can only import PoW/Clique chains, not produce blocks on\r\nthem.\r\n\r\n---------\r\n\r\nCo-authored-by: stevemilk <wangpeculiar@gmail.com>"
            },
            {
                "date": "2024-10-23T06:11:25Z",
                "message": "crypto, tests/fuzzers: add gnark bn254 precompile methods for fuzzing (#30585)\n\nMakes the gnark precompile methods more amenable to fuzzing"
            },
            {
                "date": "2024-10-23T06:03:36Z",
                "message": "core/state: move state log mechanism to a separate layer (#30569)\n\nThis PR moves the logging/tracing-facilities out of `*state.StateDB`,\r\nin to a wrapping struct which implements `vm.StateDB` instead.\r\n\r\nIn most places, it is a pretty straight-forward change: \r\n- First, hoisting the invocations from state objects up to the statedb. \r\n- Then making the mutation-methods simply return the previous value, so\r\nthat the external logging layer could log everything.\r\n\r\nSome internal code uses the direct object-accessors to mutate the state,\r\nparticularly in testing and in setting up state overrides, which means\r\nthat these changes are unobservable for the hooked layer. Thus, configuring\r\nthe overrides are not necessarily part of the API we want to publish.\r\n\r\nThe trickiest part about the layering is that when the selfdestructs are\r\nfinally deleted during `Finalise`, there's the possibility that someone\r\nsent some ether to it, which is burnt at that point, and thus needs to\r\nbe logged. The hooked layer reaches into the inner layer to figure out\r\nthese events.\r\n\r\nIn package `vm`, the conversion from `state.StateDB + hooks` into a\r\nhooked `vm.StateDB` is performed where needed.\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2024-10-21": [
            {
                "date": "2024-10-21T09:45:33Z",
                "message": "common: drop BigMin and BigMax, they pollute our dep graph (#30645)\n\nWay back we've added `common.math.BigMin` and `common.math.BigMax`.\r\nThese were kind of cute helpers, but unfortunate ones, because package\r\nall over out codebase added dependencies to this package just to avoid\r\nhaving to write out 3 lines of code.\r\n\r\nBecause of this, we've also started having package name clashes with the\r\nstdlib `math`, which got solves even more badly by moving some helpers\r\nover ***from*** the stdlib into our custom lib (e.g. MaxUint64). The\r\nlatter ones were nuked out in a previous PR and this PR nukes out BigMin\r\nand BigMax, inlining them at all call sites.\r\n\r\nAs we're transitioning to uint256, if need be, we can add a min and max\r\nto that."
            },
            {
                "date": "2024-10-21T06:24:28Z",
                "message": "consensus/clique, miner: remove clique -> accounts dependency (#30642)\n\nClique currently depends on the `accounts` package. This was a bit of a\r\nbig cannon even in the past, just to pass a signer \"account\" to the\r\nClique block producer. Either way, nowadays Geth does not support clique\r\nmining any more, so by removing that bit of functionality from our code,\r\nwe can also break this dependency.\r\n\r\nClique should ideally be further torn out, but this at least gets us one\r\nstep closer to cleanups."
            }
        ],
        "2024-10-20": [
            {
                "date": "2024-10-20T16:36:51Z",
                "message": "eth/tracers/js: avoid compiling js bigint when not needed (#30640)\n\nWhile looking at some mem profiles from `evm` runs, I noticed that\r\n`goja` compilation of the bigint library was present. The bigint library\r\ncompilation happens in a package `init`, whenever the package\r\n`eth/tracers/js` is loaded. This PR changes it to load lazily when\r\nneeded.\r\n\r\nIt becomes slightly faster with this change, and slightly less alloc:y. \r\n\r\nNon-scientific benchmark with 100 executions: \r\n```\r\ntime for i in {1..100}; do ./evm --code 6040 run; done;\r\n ```\r\n\r\ncurrent `master`:\r\n\r\n```\r\nreal    0m6.634s\r\nuser    0m5.213s\r\nsys     0m2.277s\r\n```\r\nWithout compiling bigint\r\n```\r\nreal    0m5.802s\r\nuser    0m4.191s\r\nsys     0m1.965s\r\n```"
            },
            {
                "date": "2024-10-20T16:28:39Z",
                "message": "build, internal, version: break ci.go/version->common dependency (#30638)\n\nThis PR tries to break the ci.go to common dependency by moving the\r\nversion number out of params."
            },
            {
                "date": "2024-10-20T12:43:39Z",
                "message": "common/math: sigh, keep deleting dead code"
            },
            {
                "date": "2024-10-20T12:38:31Z",
                "message": "common/math: delete some further dead code (#30639)"
            },
            {
                "date": "2024-10-20T11:54:06Z",
                "message": "build: get rid of ci.go -> common direct dependency (#30637)"
            },
            {
                "date": "2024-10-20T11:41:51Z",
                "message": "all: get rid of custom MaxUint64 and MaxUint64 (#30636)"
            },
            {
                "date": "2024-10-20T10:25:15Z",
                "message": "core/state: fix runaway alloc caused by prefetcher heap escape (#30629)\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            }
        ],
        "2024-10-18": [
            {
                "date": "2024-10-18T15:06:31Z",
                "message": "core, trie, triedb: minor changes from snapshot integration (#30599)\n\nThis change ports some non-important changes from https://github.com/ethereum/go-ethereum/pull/30159, including interface renaming and some trivial refactorings."
            },
            {
                "date": "2024-10-18T11:49:27Z",
                "message": "build: reenable building arm64 concurrently (#30626)"
            },
            {
                "date": "2024-10-18T09:02:32Z",
                "message": "gitignore: get rid of some relics (#30623)\n\nClean out some ancient stuff from git ignore."
            },
            {
                "date": "2024-10-18T08:34:46Z",
                "message": "swarm: nuke this leftover (#30622)\n\nSwarm moved out more than 5 years ago, time to let it go."
            }
        ],
        "2024-10-17": [
            {
                "date": "2024-10-17T16:27:35Z",
                "message": "beacon/engine, core/txpool, eth/catalyst: add engine_getBlobsV1 API (#30537)"
            },
            {
                "date": "2024-10-17T08:05:17Z",
                "message": "beacon/engine,eth/catalyst: hex marshal requests in engine api (#30603)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-10-17T08:04:20Z",
                "message": "miner: send full request when resolving full payload (#30615)\n\nFixes an issue missed in #30576 where we send empty requests for a full\r\npayload being resolved, causing hash mismatch later on when we get the\r\npayload back via `NewPayload`."
            },
            {
                "date": "2024-10-17T04:51:47Z",
                "message": "eth/tracers: various fixes (#30540)\n\nBreaking changes:\r\n\r\n- The ChainConfig was exposed to tracers via VMContext passed in\r\n`OnTxStart`. This is unnecessary specially looking through the lens of\r\nlive tracers as chain config remains the same throughout the lifetime of\r\nthe program. It was there so that native API-invoked tracers could\r\naccess it. So instead we moved it to the constructor of API tracers.\r\n\r\nNon-breaking:\r\n\r\n- Change the default config of the tracers to be `{}` instead of nil.\r\nThis way an extra nil check can be avoided.\r\n\r\nRefactoring:\r\n\r\n- Rename `supply` struct to `supplyTracer`.\r\n- Un-export some hook definitions."
            }
        ],
        "2024-10-16": [
            {
                "date": "2024-10-16T16:46:40Z",
                "message": "core: reduce peak memory usage during reorg (#30600)\n\n~~Opening this as a draft to have a discussion.~~ Pressed the wrong\r\nbutton\r\nI had [a previous PR\r\n](https://github.com/ethereum/go-ethereum/pull/24616)a long time ago\r\nwhich reduced the peak memory used during reorgs by not accumulating all\r\ntransactions and logs.\r\nThis PR reduces the peak memory further by not storing the blocks in\r\nmemory.\r\nHowever this means we need to pull the blocks back up from storage\r\nmultiple times during the reorg.\r\nI collected the following numbers on peak memory usage: \r\n\r\n// Master: BenchmarkReorg-8 10000 899591 ns/op 820154 B/op 1440\r\nallocs/op 1549443072 bytes of heap used\r\n// WithoutOldChain: BenchmarkReorg-8 10000 1147281 ns/op 943163 B/op\r\n1564 allocs/op 1163870208 bytes of heap used\r\n// WithoutNewChain: BenchmarkReorg-8 10000 1018922 ns/op 943580 B/op\r\n1564 allocs/op 1171890176 bytes of heap used\r\n\r\nEach block contains a transaction with ~50k bytes and we're doing a 10k\r\nblock reorg, so the chain should be ~500MB in size\r\n\r\n---------\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2024-10-16T07:32:58Z",
                "message": "core, eth, ethstats: simplify chain head events (#30601)"
            }
        ],
        "2024-10-15": [
            {
                "date": "2024-10-15T15:10:03Z",
                "message": "core, ethdb/pebble: run pebble in non-sync mode (#30573)\n\nImplements https://github.com/ethereum/go-ethereum/issues/29819"
            },
            {
                "date": "2024-10-15T14:00:14Z",
                "message": "ethdb/pebble: switch to increasing level sizes (#30602)"
            },
            {
                "date": "2024-10-15T08:51:20Z",
                "message": "beacon/engine: omit null witness field from payload envelope (#30597)\n\n## Description\r\n\r\nOmit null `witness` field from payload envelope.\r\n\r\n## Motivation\r\n\r\nCurrently, JSON encoded payload types always include `\"witness\": null`,\r\nwhich, I believe, is not intentional."
            },
            {
                "date": "2024-10-15T08:49:08Z",
                "message": "crypto: use decred secp256k1 directly (#30595)\n\nUse `github.com/decred/dcrd/dcrec/secp256k1/v4` directly rather than\r\n`github.com/btcsuite/btcd/btcec/v2` which is just a wrapper around the\r\nunderlying decred library. Inspired by\r\nhttps://github.com/cosmos/cosmos-sdk/pull/15018\r\n\r\n`github.com/btcsuite/btcd/btcec/v2` has a very annoying breaking change\r\nwhen upgrading from `v2.3.3` to `v2.3.4`. The easiest way to workaround\r\nthis is to just remove the wrapper.\r\n\r\nWould be very nice if you could backport this to the release branches.\r\n\r\nReferences:\r\n- https://github.com/btcsuite/btcd/issues/2221\r\n- https://github.com/cometbft/cometbft/pull/4294\r\n- https://github.com/cometbft/cometbft/pull/3728\r\n- https://github.com/zeta-chain/node/pull/2934"
            },
            {
                "date": "2024-10-15T08:02:02Z",
                "message": "internal/ethapi: refactor `TxArgs.setCancunFeeDefaults` (#30541)\n\ncalculating a reasonable tx blob fee cap (`max_blob_fee_per_gas *\r\ntotal_blob_gas`) only depends on the excess blob gas of the parent\r\nheader. The parent header is assumed to be correct, so the method should\r\nnot be able to fail and return an error."
            }
        ],
        "2024-10-14": [
            {
                "date": "2024-10-14T19:43:35Z",
                "message": "beacon/engine: strip type byte in requests (#30576)\n\nThis change brings geth into compliance with the current engine API\nspecification for the Prague fork. I have moved the assignment of\nExecutionPayloadEnvelope.Requests into BlockToExecutableData to ensure\nthere is a single place where the type is removed.\n\nWhile doing so, I noticed that handling of requests in the miner was not\nquite correct for the empty payload. It would return `nil` requests for\nthe empty payload even for blocks after the Prague fork. To fix this, I\nhave added the emptyRequests field in miner.Payload."
            },
            {
                "date": "2024-10-14T17:25:22Z",
                "message": "build: update to golangci-lint 1.61.0 (#30587)\n\nChangelog: https://golangci-lint.run/product/changelog/#1610 \r\n\r\nRemoves `exportloopref` (no longer needed), replaces it with\r\n`copyloopvar` which is basically the opposite.\r\n\r\nAlso adds: \r\n- `durationcheck`\r\n- `gocheckcompilerdirectives`\r\n- `reassign`\r\n- `mirror`\r\n- `tenv`\r\n\r\n---------\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
            },
            {
                "date": "2024-10-14T11:32:15Z",
                "message": "trie: concurrent commit (#30545)\n\nThis change makes the trie commit operation concurrent, if the number of changes exceed 100. \r\n\r\nCo-authored-by: stevemilk <wangpeculiar@gmail.com>\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2024-10-13": [
            {
                "date": "2024-10-13T16:51:51Z",
                "message": "core: enable EIP-2935 in chain maker (#30575)"
            },
            {
                "date": "2024-10-13T16:47:51Z",
                "message": "cmd/evm: fixup issues with requests in t8n (#30584)\n\nThis fixes a few issues missed in #29052:\r\n\r\n* `requests` must be hex encoded, so added a helper to marshal.\r\n* The statedb was committed too early and so the result of the system\r\ncalls was lost.\r\n* For devnet-4 we need to pull off the type byte prefix from the request\r\ndata."
            }
        ],
        "2024-10-12": [
            {
                "date": "2024-10-12T09:25:58Z",
                "message": "build: add support for ubuntu 24.10 (#30580)"
            }
        ],
        "2024-10-11": [
            {
                "date": "2024-10-11T19:36:13Z",
                "message": "all: implement EIP-7002 & EIP-7251 (#30571)\n\nThis is a redo of #29052 based on newer specs. Here we implement EIPs\r\nscheduled for the Prague fork:\r\n\r\n- EIP-7002: Execution layer triggerable withdrawals\r\n- EIP-7251: Increase the MAX_EFFECTIVE_BALANCE\r\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            }
        ],
        "2024-10-10": [
            {
                "date": "2024-10-10T11:03:03Z",
                "message": "core/tracing: add GetTransientState method to StateDB interface (#30531)\n\nAllows live custom tracers to access contract transient storage through the StateDB interface."
            },
            {
                "date": "2024-10-10T08:47:40Z",
                "message": "eth/protocols/eth: remove Requests in block body (#30562)\n\nBlock no longer has Requests. This PR just removes some code that wasn't removed in #30425."
            },
            {
                "date": "2024-10-10T05:54:07Z",
                "message": "eth/catalyst, core/txpool/blobpool: make tests output less logs (#30563)\n\nA couple of tests set the debug level to `TRACE` on stdout,\r\nand all subsequent tests in the same package are also affected\r\nby that, resulting in outputs of tens of megabytes. \r\n\r\nThis PR removes such calls from two packages where it was prevalent.\r\nThis makes getting a summary of failing tests simpler, and possibly\r\nreduces some strain from the CI pipeline."
            }
        ],
        "2024-10-09": [
            {
                "date": "2024-10-09T12:45:14Z",
                "message": "eth/tracers: do system contract processing prior to parallel-tracing  (#30520)\n\nThis fixes `debug_traceBlock` methods for JS tracers in that it correctly\r\napplies the beacon block root processing to the state."
            },
            {
                "date": "2024-10-09T10:24:58Z",
                "message": "all: implement flat deposit requests encoding (#30425)\n\nThis implements recent changes to EIP-7685, EIP-6110, and\r\nexecution-apis.\r\n\r\n---------\r\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>\r\nCo-authored-by: Shude Li <islishude@gmail.com>"
            }
        ],
        "2024-10-08": [
            {
                "date": "2024-10-08T11:30:07Z",
                "message": "log: remove unused parameter (#30432)"
            }
        ],
        "2024-10-04": [
            {
                "date": "2024-10-04T10:53:06Z",
                "message": "build: upgrade -dlgo version to Go 1.23.2 (#30544)\n\nNew release: https://groups.google.com/g/golang-announce/c/NKEc8VT7Fz0"
            }
        ],
        "2024-10-02": [
            {
                "date": "2024-10-02T14:00:36Z",
                "message": "beacon/light: optimize lock usage in `HeadTracker` (#30485)\n\nminimizes the time when the lock is held"
            },
            {
                "date": "2024-10-02T13:05:50Z",
                "message": "core/vm, cmd/evm: implement eof validation (#30418)\n\nThe bulk of this PR is authored by @lightclient , in the original\r\nEOF-work. More recently, the code has been picked up and reworked for the new EOF\r\nspecification, by @MariusVanDerWijden , in https://github.com/ethereum/go-ethereum/pull/29518, and also @shemnon has contributed with fixes.\r\n\r\nThis PR is an attempt to start eating the elephant one small bite at a\r\ntime, by selecting only the eof-validation as a standalone piece which\r\ncan be merged without interfering too much in the core stuff.\r\n\r\nIn this PR: \r\n\r\n- [x] Validation of eof containers, lifted from #29518, along with\r\ntest-vectors from consensus-tests and fuzzing, to ensure that the move\r\ndid not lose any functionality.\r\n- [x] Definition of eof opcodes, which is a prerequisite for validation\r\n- [x] Addition of `undefined` to a jumptable entry item. I'm not\r\nsuper-happy with this, but for the moment it seems the least invasive\r\nway to do it. A better way might be to go back and allowing nil-items or\r\nnil execute-functions to denote \"undefined\".\r\n- [x] benchmarks of eof validation speed \r\n\r\n\r\n---------\r\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\nCo-authored-by: Danno Ferrin <danno.ferrin@shemnon.com>"
            }
        ],
        "2024-10-01": [
            {
                "date": "2024-10-01T16:27:25Z",
                "message": "internal/web3ext: rm unused modules (#30532)\n\nRemove console extensions for already deleted API namespaces (les, vflux and ethash)."
            },
            {
                "date": "2024-10-01T16:16:16Z",
                "message": "core/rawdb: freezer index repair (#29792)\n\nThis pull request removes the `fsync` of index files in freezer.ModifyAncients function for \r\nperformance gain.\r\n\r\nOriginally, fsync is added after each freezer write operation to ensure\r\nthe written data is truly transferred into disk. Unfortunately, it turns \r\nout `fsync` can be relatively slow, especially on\r\nmacOS (see https://github.com/ethereum/go-ethereum/issues/28754 for more\r\ninformation). \r\n\r\nIn this pull request, fsync for index file is removed as it turns out\r\nindex file can be recovered even after a unclean shutdown. But fsync for data file is still kept, as\r\nwe have no meaningful way to validate the data correctness after unclean shutdown.\r\n\r\n---\r\n\r\n**But why do we need the `fsync` in the first place?** \r\n\r\nAs it's necessary for freezer to survive/recover after the machine crash\r\n(e.g. power failure).\r\nIn linux, whenever the file write is performed, the file metadata update\r\nand data update are\r\nnot necessarily performed at the same time. Typically, the metadata will\r\nbe flushed/journalled\r\nahead of the file data. Therefore, we make the pessimistic assumption\r\nthat the file is first\r\nextended with invalid \"garbage\" data (normally zero bytes) and that\r\nafterwards the correct\r\ndata replaces the garbage. \r\n\r\nWe have observed that the index file of the freezer often contain\r\ngarbage entry with zero value\r\n(filenumber = 0, offset = 0) after a machine power failure. It proves\r\nthat the index file is extended\r\nwithout the data being flushed. And this corruption can destroy the\r\nwhole freezer data eventually.\r\n\r\nPerforming fsync after each write operation can reduce the time window\r\nfor data to be transferred\r\nto the disk and ensure the correctness of the data in the disk to the\r\ngreatest extent.\r\n\r\n---\r\n\r\n**How can we maintain this guarantee without relying on fsync?**\r\n\r\nBecause the items in the index file are strictly in order, we can\r\nleverage this characteristic to\r\ndetect the corruption and truncate them when freezer is opened.\r\nSpecifically these validation\r\nrules are performed for each index file:\r\n\r\nFor two consecutive index items:\r\n\r\n- If their file numbers are the same, then the offset of the latter one\r\nMUST not be less than that of the former.\r\n- If the file number of the latter one is equal to that of the former\r\nplus one, then the offset of the latter one MUST not be 0.\r\n- If their file numbers are not equal, and the latter's file number is\r\nnot equal to the former plus 1, the latter one is valid\r\n\r\nAnd also, for the first non-head item, it must refer to the earliest\r\ndata file, or the next file if the\r\nearliest file is not sufficient to place the first item(very special\r\ncase, only theoretical possible\r\nin tests)\r\n\r\nWith these validation rules, we can detect the invalid item in index\r\nfile with greatest possibility.\r\n\r\n--- \r\n\r\nBut unfortunately, these scenarios are not covered and could still lead\r\nto a freezer corruption if it occurs:\r\n\r\n**All items in index file are in zero value**\r\n\r\nIt's impossible to distinguish if they are truly zero (e.g. all the data\r\nentries maintained in freezer\r\nare zero size) or just the garbage left by OS. In this case, these index\r\nitems will be kept by truncating\r\nthe entire data file, namely the freezer is corrupted.\r\n\r\nHowever, we can consider that the probability of this situation\r\noccurring is quite low, and even\r\nif it occurs, the freezer can be considered to be close to an empty\r\nstate. Rerun the state sync\r\nshould be acceptable.\r\n\r\n**Index file is integral while relative data file is corrupted**\r\n\r\nIt might be possible the data file is corrupted whose file size is\r\nextended correctly with garbage\r\nfilled (e.g. zero bytes). In this case, it's impossible to detect the\r\ncorruption by index validation.\r\n\r\nWe can either choose to `fsync` the data file, or blindly believe that\r\nif index file is integral then\r\nthe data file could be integral with very high chance. In this pull\r\nrequest, the first option is taken."
            },
            {
                "date": "2024-10-01T13:23:35Z",
                "message": "params: begin v1.14.12 release cycle (#30536)\n\nparams: begin v1.14.12 release cycle"
            },
            {
                "date": "2024-10-01T13:19:15Z",
                "message": "params: begin v1.14.12 release cycle"
            },
            {
                "date": "2024-10-01T13:14:30Z",
                "message": "params: go-ethereum v1.14.11 stable"
            },
            {
                "date": "2024-10-01T09:36:56Z",
                "message": "internal/ethapi: remove td field from block (#30386)\n\nimplement https://github.com/ethereum/execution-apis/pull/570"
            }
        ],
        "2024-09-30": [
            {
                "date": "2024-09-30T16:32:39Z",
                "message": "cmd/geth: remove deprecated lightchaindata db (#30527)\n\nThis PR removes the dependencies on `lightchaindata` db as the light\r\nprotocol has been deprecated and removed from the codebase."
            },
            {
                "date": "2024-09-30T12:46:39Z",
                "message": "eth/catalyst: use setcanonical instead of sethead in simulated fork (#30465)\n\nFixes https://github.com/ethereum/go-ethereum/issues/30448"
            },
            {
                "date": "2024-09-30T12:39:53Z",
                "message": " build: use buildx to build multi-platform docker images (#30530)"
            },
            {
                "date": "2024-09-30T09:06:10Z",
                "message": "core/txpool/blobpool: use types.Sender instead of signer.Sender (#30473)\n\nUse types.Sender(signer, tx) to utilize the transaction's sender cache\r\nand avoid repeated address recover."
            },
            {
                "date": "2024-09-30T08:56:14Z",
                "message": "p2p/discover: add config option for disabling FINDNODE liveness check (#30512)\n\nThis is for fixing Prysm integration tests."
            }
        ],
        "2024-09-27": [
            {
                "date": "2024-09-27T11:13:45Z",
                "message": "params: begin v1.14.11 release cycle"
            },
            {
                "date": "2024-09-27T11:09:42Z",
                "message": "params: release Geth v1.14.10"
            },
            {
                "date": "2024-09-27T10:56:25Z",
                "message": "Revert \"core/txpool, eth/catalyst:  ensure gas tip retains current value upon rollback\" (#30521)\n\nReverts ethereum/go-ethereum#30495\r\n\r\nYou are free to create a proper Clear method if that's the best way. But\r\none that does a proper cleanup, not some hacky call to set gas which\r\nscrews up logs, metrics and everything along the way. Also doesn't work\r\nfor legacy pool local transactions.\r\n\r\nThe current code had a hack in the simulated code, now we have a hack in\r\nlive txpooling code. No, that's not acceptable. I want the live code to\r\nbe proper, meaningful API, meaningful comments, meaningful\r\nimplementation."
            },
            {
                "date": "2024-09-27T10:05:35Z",
                "message": "Merge pull request #30518 from holiman/blobpool_fix\n\ncore/txpool/blobpool: return all reinject-addresses"
            },
            {
                "date": "2024-09-27T08:55:42Z",
                "message": "core/txpool/blobpool: add test to check internal shuffling"
            },
            {
                "date": "2024-09-27T06:24:23Z",
                "message": "core/txpool/blobpool: revert part of #30437, return all reinject-addresses"
            }
        ],
        "2024-09-26": [
            {
                "date": "2024-09-26T09:08:36Z",
                "message": "core/txpool, eth/catalyst: ensure gas tip retains current value upon rollback (#30495)\n\nHere we move the method that drops all transactions by temporarily increasing the fee\r\ninto the TxPool itself. It's better to have it there because we can set it back to the\r\nconfigured value afterwards. This resolves a TODO in the simulated backend."
            },
            {
                "date": "2024-09-26T07:28:40Z",
                "message": "deps: update supranational/blst (#30504)\n\nThis update should only affect the fuzzers, as far as I know. But it\r\nseems like it might also fix some arm/macos compilation issue in\r\nhttps://github.com/ethereum/go-ethereum/issues/30494\r\n\r\nCloses #30494 (I think)"
            },
            {
                "date": "2024-09-26T06:12:12Z",
                "message": "p2p/discover: fix flaky tests writing to test.log after completion (#30506)\n\nThis PR fixes two tests, which had a tendency to sometimes write to the `*testing.T` `log` facility after the test function had completed, which is not allowed. This PR fixes it by using waitgroups to ensure that the handler/logwriter terminates before the test exits.\r\n\r\ncloses #30505"
            }
        ],
        "2024-09-24": [
            {
                "date": "2024-09-24T11:53:46Z",
                "message": "core/vm: more benchmarks for bls g1/g2-multiexp precompiles (#30459)\n\nThis change adds more comprehensive benchmarks with a wider-variety of input sizes for g1 and g2 multi exponentiation."
            },
            {
                "date": "2024-09-24T11:18:36Z",
                "message": "core/tracing, core/vm: add ContractCode to the OpContext (#30466)\n\nExtends the opcontext interface to include accessor for code being executed in current context. While it is possible to get the code via `statedb.GetCode`, that approach doesn't work for initcode."
            },
            {
                "date": "2024-09-24T11:14:38Z",
                "message": "internal/ethapi: fix gascap 0 for eth_simulateV1 (#30496)\n\nSimilar to #30474."
            },
            {
                "date": "2024-09-24T07:26:29Z",
                "message": "core/rawdb: make sure specified state scheme is valid (#30499)\n\nThis change exits with error if user provided a `--state.scheme` which is neither `hash` nor `path`"
            }
        ],
        "2024-09-23": [
            {
                "date": "2024-09-23T11:31:56Z",
                "message": "internal/ethapi/api: for simulated calls, set gaspool to max value if global gascap is 0 (#30474)\n\nIn #27720, we introduced RPC global gas cap. A value of `0` means an unlimited gas cap. However, this was not the case for simulated calls. This PR fixes the behaviour."
            },
            {
                "date": "2024-09-23T11:27:29Z",
                "message": "core/state: commit snapshot only if the base layer exists (#30493)\n\nThis pull request skips the state snapshot update if the base layer is\r\nnot existent, eliminating the numerous warning logs after an unclean\r\nshutdown.\r\n\r\nSpecifically, Geth will rewind its chain head to a historical block\r\nafter unclean shutdown and state snapshot will be remained as unchanged\r\nwaiting for recovery. During this period of time, the snapshot is unusable\r\nand all state updates should be ignored/skipped for state snapshot update."
            },
            {
                "date": "2024-09-23T07:29:07Z",
                "message": "core/state: fix comment of `mode` (#30490)"
            },
            {
                "date": "2024-09-23T07:17:18Z",
                "message": "cmd/utils: fix `setEtherbase` (#30488)\n\nMake `setEtherbase` fall thorugh and handle `miner.pending.feeRecipient` after showing deprecation-warning for `miner.etherbase`-flag."
            }
        ],
        "2024-09-22": [
            {
                "date": "2024-09-22T08:12:47Z",
                "message": "travis: work around travis/osx/go1.23 setup bug (#30491)\n\nThis is a work-around for a strange issue with travis, specifically,\r\n`os=osx, go: 1.23.1`. When this is used, the actual go that ends up\r\nbeing used is `go1.19.4 darwin/amd64 `.\r\n\r\nUsing `which go`, it told me that the `go` in the path was a softlink at\r\n`/Users/travis/gopath/bin/go1.23.1 `. However, this was not true: using\r\n`command -v go`, it told me that the actual `go` that was used is a\r\nsoftlink at `/usr/local/bin/go`.\r\n\r\nThis change rewrites the `/usr/local/bin/go` softlink to point to the\r\nbinary at `/Users/travis/gopath/bin/go1.23.1`, so we get the right\r\ngo-version."
            }
        ],
        "2024-09-20": [
            {
                "date": "2024-09-20T13:43:42Z",
                "message": "beacon, core, eth, miner: integrate witnesses into production Geth (#30069)\n\nThis PR integrates witness-enabled block production, witness-creating\r\npayload execution and stateless cross-validation into the `engine` API.\r\nThe purpose of the PR is to enable the following use-cases (for API\r\ndetails, please see next section):\r\n\r\n- Cross validating locally created blocks:\r\n- Call `forkchoiceUpdatedWithWitness` instead of `forkchoiceUpdated` to\r\ntrigger witness creation too.\r\n- Call `getPayload` as before to retrieve the new block and also the\r\nabove created witness.\r\n- Call `executeStatelessPayload` against another client to\r\ncross-validate the block.\r\n\r\n- Cross validating locally processed blocks:\r\n- Call `newPayloadWithWitness` instead of `newPayload` to trigger\r\nwitness creation too.\r\n- Call `executeStatelessPayload` against another client to\r\ncross-validate the block.\r\n\r\n- Block production for stateless clients (local or MEV builders):\r\n- Call `forkchoiceUpdatedWithWitness` instead of `forkchoiceUpdated` to\r\ntrigger witness creation too.\r\n- Call `getPayload` as before to retrieve the new block and also the\r\nabove created witness.\r\n- Propagate witnesses across the consensus libp2p network for stateless\r\nEthereum.\r\n\r\n- Stateless validator validation:\r\n- Call `executeStatelessPayload` with the propagated witness to\r\nstatelessly validate the block.\r\n\r\n*Note, the various `WithWitness` methods could also *just be* an\r\nadditional boolean flag on the base methods, but this PR wanted to keep\r\nthe methods separate until a final consensus is reached on how to\r\nintegrate in production.*\r\n\r\n---\r\n\r\nThe following `engine` API types are introduced:\r\n\r\n```go\r\n// StatelessPayloadStatusV1 is the result of a stateless payload execution.\r\ntype StatelessPayloadStatusV1 struct {\r\n\tStatus          string      `json:\"status\"`\r\n\tStateRoot       common.Hash `json:\"stateRoot\"`\r\n\tReceiptsRoot    common.Hash `json:\"receiptsRoot\"`\r\n\tValidationError *string     `json:\"validationError\"`\r\n}\r\n```\r\n\r\n- Add `forkchoiceUpdatedWithWitnessV1,2,3` with same params and returns\r\nas `forkchoiceUpdatedV1,2,3`, but triggering a stateless witness\r\nbuilding if block production is requested.\r\n- Extend `getPayloadV2,3` to return `executionPayloadEnvelope` with an\r\nadditional `witness` field of type `bytes` iff created via\r\n`forkchoiceUpdatedWithWitnessV2,3`.\r\n- Add `newPayloadWithWitnessV1,2,3,4` with same params and returns as\r\n`newPayloadV1,2,3,4`, but triggering a stateless witness creation during\r\npayload execution to allow cross validating it.\r\n- Extend `payloadStatusV1` with a `witness` field of type `bytes` if\r\nreturned by `newPayloadWithWitnessV1,2,3,4`.\r\n- Add `executeStatelessPayloadV1,2,3,4` with same base params as\r\n`newPayloadV1,2,3,4` and one more additional param (`witness`) of type\r\n`bytes`. The method returns `statelessPayloadStatusV1`, which mirrors\r\n`payloadStatusV1` but replaces `latestValidHash` with `stateRoot` and\r\n`receiptRoot`."
            },
            {
                "date": "2024-09-20T12:06:12Z",
                "message": "build: fix macos builds by working around travis osx flaw (#30479)\n\nThis should fix https://github.com/ethereum/go-ethereum/issues/30471.\r\nSee investigation in https://github.com/ethereum/go-ethereum/pull/30478\r\nfor more background."
            }
        ],
        "2024-09-19": [
            {
                "date": "2024-09-19T08:23:13Z",
                "message": ".github: add release maintainers to params/ CODEOWNERS (#30458)"
            },
            {
                "date": "2024-09-19T07:41:10Z",
                "message": "ethdb/pebble: handle errors (#30367)"
            },
            {
                "date": "2024-09-19T06:38:06Z",
                "message": "core: minor fix for the log wrapper with debug purpose (#30454)\n\nAfter this PR, https://github.com/ethereum/go-ethereum/pull/28187, the\r\nway to set the default logger is different. This PR only updates the way\r\nto set logger in some test cases' comments that existed in the codebase\r\n(since this commit\r\nhttps://github.com/ethereum/go-ethereum/commit/b63e3c37a6). Although I\r\nam not sure if it a good way to leave the code in the comment, it truly\r\nmakes me more efficiently to debug and fix the failing test cases."
            },
            {
                "date": "2024-09-19T06:35:14Z",
                "message": "genesis: fix dev mode alloc (#30460)\n\nBalance being null causes `getGenesisState` to fail as the balance field\r\nis required in json marshaling of an account."
            }
        ],
        "2024-09-18": [
            {
                "date": "2024-09-18T12:48:47Z",
                "message": "params: begin v1.14.10 release cycle (#30457)"
            },
            {
                "date": "2024-09-18T12:27:03Z",
                "message": "params: release go-ethereum v1.14.9 stable (#30455)"
            },
            {
                "date": "2024-09-18T08:53:50Z",
                "message": "Revert \"core/rawdb: remove unused transition status state accessors\" (#30449)\n\nReverts ethereum/go-ethereum#30433"
            }
        ],
        "2024-09-17": [
            {
                "date": "2024-09-17T14:10:59Z",
                "message": "core/tracing: add verkle gas change reasons to changelog (#30444)\n\nAdd changes from #30409 and #29338 to changelog.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>\r\nCo-authored-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>"
            }
        ],
        "2024-09-16": [
            {
                "date": "2024-09-16T17:57:31Z",
                "message": "core/tracing: fix typo in comment (#30443)\n\nminor fix"
            },
            {
                "date": "2024-09-16T08:56:02Z",
                "message": "core, trie: prealloc capacity for maps (#30437)\n\n- preallocate capacity for map\r\n- avoid `reinject` adding empty value\r\n- use `maps.Copy`"
            },
            {
                "date": "2024-09-16T06:51:03Z",
                "message": "core/types: more easily extensible tx signing (#30372)\n\nThis change makes the code slightly easier for downstream-projects to extend with more signer-types, but if functionalily equivalent to the previous code."
            },
            {
                "date": "2024-09-16T06:44:47Z",
                "message": "internal: run tests in parallel (#30381)\n\nContinuation of https://github.com/ethereum/go-ethereum/pull/28546"
            }
        ],
        "2024-09-15": [
            {
                "date": "2024-09-15T00:55:53Z",
                "message": "core/rawdb: remove unused transition status state accessors (#30433)"
            }
        ],
        "2024-09-14": [
            {
                "date": "2024-09-14T13:45:52Z",
                "message": "core/txpool/blobpool: avoid possible zero index panic (#30430)\n\nThis situation(`len(txs) == 0`) rarely occurs, but if it does, it will\r\npanic.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
            },
            {
                "date": "2024-09-14T13:44:42Z",
                "message": "core/tracing: fix copy/paste error+comments in reason listing (#30431)\n\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>"
            }
        ],
        "2024-09-13": [
            {
                "date": "2024-09-13T21:47:18Z",
                "message": "p2p/enode: add quic ENR entry (#30283)\n\nAdd `quic` entry to the ENR as proposed in\r\nhttps://github.com/ethereum/consensus-specs/pull/3644\r\n\r\n---------\r\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            },
            {
                "date": "2024-09-13T13:37:30Z",
                "message": "core/state, core/vm: Nyota contract create init simplification (#30409)\n\nImplementation of [this EIP-4762\r\nupdate](https://github.com/ethereum/EIPs/pull/8867).\r\n\r\n---------\r\n\r\nSigned-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\r\nCo-authored-by: Tanishq Jasoria <jasoriatanishq@gmail.com>"
            },
            {
                "date": "2024-09-13T09:17:40Z",
                "message": "core/rawdb: more accurate description of freezer in docs (#30393)\n\nfixes https://github.com/ethereum/go-ethereum/issues/29793"
            },
            {
                "date": "2024-09-13T09:16:47Z",
                "message": "eth/filters: prevent concurrent access in test (#30401)\n\nuse a mutex to prevent concurrent access to the api.filters map during `TestPendingTxFilterDeadlock` test"
            }
        ],
        "2024-09-12": [
            {
                "date": "2024-09-12T14:08:29Z",
                "message": "beacon/light/api: fixed blsync update query (#30421)\n\nThis PR fixes what https://github.com/ethereum/go-ethereum/pull/30306/\r\nbroke. Escaping the `?` in the event sub query was fixed in that PR but\r\nit was still escaped in the `updates` request. This PR adds a URL params\r\nargument to `httpGet` and fixes `updates` query formatting."
            }
        ],
        "2024-09-11": [
            {
                "date": "2024-09-11T13:11:08Z",
                "message": "core/vm: remove panic when address is not present (#30414)\n\nRemove redundant address presence check in `makeGasSStoreFunc`.\r\n\r\nThis PR simplifies the `makeGasSStoreFunc` function by removing the\r\nredundant check for address presence in the access list. The updated\r\ncode now only checks for slot presence, streamlining the logic and\r\neliminating unnecessary panic conditions.\r\n\r\nThis change removes the unnecessary address presence check, simplifying\r\nthe code and improving maintainability without affecting functionality.\r\nThe previous panic condition was intended as a canary during the testing\r\nphases (i.e. _YOLOv2_) and is no longer needed."
            }
        ],
        "2024-09-10": [
            {
                "date": "2024-09-10T18:52:20Z",
                "message": "beacon/engine/types: remove PayloadV4 (#30415)\n\nh/t @MariusVanDerWijden for finding and fixing this on devnet 3.\r\n\r\nI made the mistake of thinking `PayloadVersion` was correlated with the\r\n`GetPayloadVX` method, but it actually tracks which version of\r\n`PayloadAttributes` were passed to `forkchoiceUpdated`. So far, Prague\r\ndoes not necessitate a new version of fcu, so there is no need for\r\n`PayloadV4`.\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
            }
        ],
        "2024-09-06": [
            {
                "date": "2024-09-06T15:02:34Z",
                "message": "core/state/snapshot: port changes from 29995 (#30040)\n\n#29995 has been reverted due to an unexpected flaw in the state snapshot\r\nprocess.\r\n\r\nSpecifically, it attempts to stop the state snapshot generation, which\r\ncould potentially\r\ncause the system to halt if the generation is not currently running.\r\n\r\nThis pull request ports the changes made in #29995 and fixes the flaw."
            },
            {
                "date": "2024-09-06T10:32:01Z",
                "message": "eth/fetcher: fix blob transaction propagation (#30125)\n\nThis PR fixes an issue with blob transaction propagation due to the blob\r\ntransation txpool rejecting transactions with gapped nonces. The\r\nspecific changes are:\r\n\r\n- fetch transactions from a peer in the order they were announced to\r\nminimize nonce-gaps (which cause blob txs to be rejected\r\n\r\n- don't wait on fetching blob transactions after announcement is\r\nreceived, since they are not broadcast\r\n\r\nTesting:\r\n- unit tests updated to reflect that fetch order should always match tx\r\nannouncement order\r\n- unit test added to confirm blob transactions are scheduled immediately\r\nfor fetching\r\n  - running the PR on an eth mainnet full node without incident so far\r\n\r\n---------\r\n\r\nSigned-off-by: Roberto Bayardo <bayardo@alum.mit.edu>\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2024-09-06T09:31:00Z",
                "message": "internal/ethapi: eth_multicall (#27720)\n\nThis is a successor PR to #25743. This PR is based on a new iteration of\r\nthe spec: https://github.com/ethereum/execution-apis/pull/484.\r\n\r\n`eth_multicall` takes in a list of blocks, each optionally overriding\r\nfields like number, timestamp, etc. of a base block. Each block can\r\ninclude calls. At each block users can override the state. There are\r\nextra features, such as:\r\n\r\n- Include ether transfers as part of the logs\r\n- Overriding precompile codes with evm bytecode\r\n- Redirecting accounts to another address\r\n\r\n## Breaking changes\r\n\r\nThis PR includes the following breaking changes:\r\n\r\n- Block override fields of eth_call and debug_traceCall have had the\r\nfollowing fields renamed\r\n  - `coinbase` -> `feeRecipient`\r\n  - `random` -> `prevRandao`\r\n  - `baseFee` -> `baseFeePerGas`\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2024-09-06T08:11:14Z",
                "message": "build: upgrade -dlgo version to Go 1.23.1 (#30404)\n\nNew security fix:\r\nhttps://groups.google.com/g/golang-announce/c/K-cEzDeCtpc"
            },
            {
                "date": "2024-09-06T07:42:59Z",
                "message": "core/state: get rid of field pointer in journal (#30361)\n\nThis pull request replaces the field pointer in journal entry with the\r\nfield itself, specifically the address of mutated account.\r\n\r\nWhile it will introduce the extra allocation cost, but it's easier for\r\ncode reading. Let's measure the overhead overall to see if the change is\r\nacceptable or not."
            }
        ],
        "2024-09-05": [
            {
                "date": "2024-09-05T10:10:47Z",
                "message": "core/state: state reader abstraction (#29761)\n\nThis pull request introduces a state.Reader interface for state\r\naccessing.\r\n\r\nThe interface could be implemented in various ways. It can be pure trie\r\nonly reader, or the combination of trie and state snapshot. What's more,\r\nthis interface allows us to have more flexibility in the future, e.g.\r\nthe\r\narchive reader (for accessing archive state).\r\n\r\nAdditionally, this pull request removes the following metrics\r\n\r\n- `chain/snapshot/account/reads`\r\n- `chain/snapshot/storage/reads`"
            },
            {
                "date": "2024-09-05T08:50:34Z",
                "message": "build: increase go test timeout (#30398)\n\nThis increases the timeout for the go tests on ci, this should prevent\r\ntravis from erroring.\r\n\r\nsee:\r\nhttps://app.travis-ci.com/github/ethereum/go-ethereum/jobs/625803693"
            }
        ],
        "2024-09-04": [
            {
                "date": "2024-09-04T14:15:41Z",
                "message": "node: fix flaky jwt-test (#30388)\n\nThis PR fixes a flaky jwt-test. \r\n\r\nThe test is a jwt \"from one second in the future\". The test passes; the\r\nreason for this is that the CI-system is slow, and by the time the jwt\r\nis actually evaluated, that second has passed, and it's no longer\r\nfuture.\r\n\r\nAlternative to #30380"
            },
            {
                "date": "2024-09-04T13:19:18Z",
                "message": "all: remove funding verifier (#30391)\n\nNow that verification is done, we can remove the funding information."
            },
            {
                "date": "2024-09-04T13:13:20Z",
                "message": "core: fix compilation error (#30394)\n\nun-borks a compilation error from a recent merge to master"
            },
            {
                "date": "2024-09-04T13:03:06Z",
                "message": "all: remove forkchoicer and reorgNeeded (#29179)\n\nThis PR changes how sidechains are handled. \r\n\r\nBefore the merge, it was possible to import a chain with lower td and not set it as canonical. After the merge, we expect every chain that we get via InsertChain to be canonical. Non-canonical blocks can still be inserted\r\nwith InsertBlockWIthoutSetHead.\r\n\r\nIf during the InsertChain, the existing chain is not canonical anymore, we mark it as a sidechain and send the SideChainEvents normally."
            },
            {
                "date": "2024-09-04T12:33:51Z",
                "message": "all: implement EIP-6110, execution layer triggered deposits (#29431)\n\nThis PR implements EIP-6110: Supply validator deposits on chain. It also sketches\r\nout the base for Prague in the engine API types."
            }
        ],
        "2024-09-03": [
            {
                "date": "2024-09-03T14:22:32Z",
                "message": "funding.json: add funding information file (#30385)\n\nAdds a list of funding identifiers."
            }
        ],
        "2024-09-02": [
            {
                "date": "2024-09-02T08:41:44Z",
                "message": "core/state: pull the verkle trie from prefetcher for empty storage root (#30369)\n\nThis pull request fixes a flaw in prefetcher.\r\n\r\nIn verkle tree world, both accounts and storage slots are committed into\r\na single tree instance for state hashing. If the prefetcher is activated, we will\r\ntry to pull the trie for the prefetcher for performance speedup. \r\n\r\nHowever, we had a special logic to skip pulling storage trie if the\r\nstorage root is empty. While it's true for merkle as we have nothing to\r\ndo with an empty storage trie, it's totally wrong for verkle. The consequences\r\nfor skipping pulling is the storage changes are committed into trie A, while the\r\naccount changes are committed into trie B (pulled from the prefetcher), boom."
            },
            {
                "date": "2024-09-02T08:30:33Z",
                "message": "Include tracerConfig in created tracing test (#30364)\n\nFixes the tracer test filler for when there is tracerConfig."
            }
        ],
        "2024-08-30": [
            {
                "date": "2024-08-30T12:13:02Z",
                "message": "trie, core/state: Nyota EIP-6800 & EIP-4762 spec updates (#30357)\n\nThis PR implements changes related to\r\n[EIP-6800](https://eips.ethereum.org/EIPS/eip-6800) and\r\n[EIP-4762](https://eips.ethereum.org/EIPS/eip-4762) spec updates.\r\n\r\nA TL;DR of the changes is that `Version`, `Balance`, `Nonce` and\r\n`CodeSize` are encoded in a single leaf named `BasicData`. For more\r\ndetails, see the [_Header Values_ table in\r\nEIP-6800](https://eips.ethereum.org/EIPS/eip-6800#header-values).\r\n\r\nThe motivation for this was simplifying access event patterns, reducing\r\ncode complexity, and, as a side effect, saving gas since fewer leaf\r\nnodes must be accessed.\r\n\r\n---------\r\n\r\nCo-authored-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2024-08-29": [
            {
                "date": "2024-08-29T12:50:27Z",
                "message": "consensus/beacon, core/types: add verkle witness builder (#30129)\n\nThis PR adds the bulk verkle witness+proof production at the end of block\r\nproduction. It reads all data from the tree in one swoop and produces\r\na verkle proof.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2024-08-28": [
            {
                "date": "2024-08-28T12:12:09Z",
                "message": "signer/core/apitypes: support fixed size arrays for EIP-712 typed data (#30175)\n\nWhen attempting to hash a typed data struct that includes a type\r\nreference with a fixed-size array, the validation process fails.\r\nAccording to EIP-712, arrays can be either fixed-size or dynamic,\r\ndenoted by `Type[n]` or `Type[]` respectively, although it appears this\r\ncurrently isn't supported.\r\n\r\nThis change modifies  the validation logic to accommodate types\r\ncontaining fixed-size arrays."
            },
            {
                "date": "2024-08-28T06:18:23Z",
                "message": "core/state: semantic journalling (part 1) (#28880)\n\nThis is a follow-up to #29520, and a preparatory PR to a more thorough\r\nchange in the journalling system.\r\n\r\n### API methods instead of `append` operations\r\n\r\nThis PR hides the journal-implementation details away, so that the\r\nstatedb invokes methods like `JournalCreate`, instead of explicitly\r\nappending journal-events in a list. This means that it's up to the\r\njournal whether to implement it as a sequence of events or\r\naggregate/merge events.\r\n\r\n### Snapshot-management inside the journal \r\n\r\nThis PR also makes it so that management of valid snapshots is moved\r\ninside the journal, exposed via the methods `Snapshot() int` and\r\n`RevertToSnapshot(revid int, s *StateDB)`.\r\n\r\n\r\n### SetCode\r\n\r\nJournalSetCode journals the setting of code: it is implicit that the\r\nprevious values were \"no code\" and emptyCodeHash. Therefore, we can\r\nsimplify the setCode journal.\r\n\r\n### Selfdestruct\r\n\r\nThe self-destruct journalling is a bit strange: we allow the\r\nselfdestruct operation to be journalled several times. This makes it so\r\nthat we also are forced to store whether the account was already\r\ndestructed.\r\n\r\nWhat we can do instead, is to only journal the first destruction, and\r\nafter that only journal balance-changes, but not journal the\r\nselfdestruct itself.\r\n\r\nThis simplifies the journalling, so that internals about state\r\nmanagement does not leak into the journal-API.\r\n\r\n### Preimages\r\n\r\nPreimages were, for some reason, integrated into the journal management,\r\ndespite not being a consensus-critical data structure. This PR undoes\r\nthat.\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2024-08-27": [
            {
                "date": "2024-08-27T15:11:50Z",
                "message": "accounts/abi/bind, ethclient/simulated: check SendTransaction error in tests (#30349)\n\nIn few tests the returned error from `SendTransaction` is not being\r\nchecked. This PR checks the returned err in tests.\r\n\r\nReturning errors also revealed tx in `TestCommitReturnValue` is not\r\nactually being sent, and returns err ` only replay-protected (EIP-155)\r\ntransactions allowed over RPC`. Fixed the transaction by using the\r\n`testTx` function."
            },
            {
                "date": "2024-08-27T12:10:32Z",
                "message": "p2p/discover: fix Write method in metered connection (#30355)\n\n`WriteToUDP` was never called, since `meteredUdpConn` exposed directly\r\nall the methods from the underlying `UDPConn` interface.\r\n\r\nThis fixes the `discover/egress` metric never being updated."
            }
        ],
        "2024-08-26": [
            {
                "date": "2024-08-26T14:18:47Z",
                "message": "core/state: fix trie prefetcher for verkle (#30354)\n\nThis pull request fixes the panic issue in prefetcher once the verkle is\r\nactivated."
            },
            {
                "date": "2024-08-26T12:02:10Z",
                "message": "core: add metrics for state access (#30353)\n\nThis pull request adds a few more performance metrics, specifically:\r\n\r\n- The average time cost of an account read\r\n- The average time cost of a storage read\r\n- The rate of account reads\r\n- The rate of storage reads"
            },
            {
                "date": "2024-08-26T08:39:35Z",
                "message": "core: implement EIP-2935 (#29465)\n\nhttps://eips.ethereum.org/EIPS/eip-2935\r\n\r\n---------\r\n\r\nCo-authored-by: Guillaume Ballet <gballet@gmail.com>\r\nCo-authored-by: Ignacio Hagopian <jsign.uy@gmail.com>\r\nCo-authored-by: Martin HS <martin@swende.se>"
            },
            {
                "date": "2024-08-26T01:29:24Z",
                "message": "doc: update 2021-08-22-split-postmortem (#30351)\n\nUpdate 2021-08-22-split-postmortem"
            }
        ],
        "2024-08-23": [
            {
                "date": "2024-08-23T14:48:20Z",
                "message": "gitignore: ignore build signatures (#30346)\n\nIgnore files are generated during signing of download-binaries, which 'dirty' the vcs for subsequent builds."
            },
            {
                "date": "2024-08-23T14:30:30Z",
                "message": "build: debug travis build (#30344)\n\ndebugging travis build pipeline"
            },
            {
                "date": "2024-08-23T10:31:24Z",
                "message": "beacon/light/sync: basic tests for rangeLock (#30269)\n\nadds simple tests for lock and firstUnlocked method from rangeLock\r\ntype\r\n\r\n---------\r\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            },
            {
                "date": "2024-08-23T10:29:02Z",
                "message": "beacon/blsync: better error information in test (#30336)\n\nthis change reports the error instead of ignoring it"
            },
            {
                "date": "2024-08-23T10:27:06Z",
                "message": "trie: avoid un-needed map copy (#30343)\n\nThis change avoids the an unnecessary map copy if the preimage recording is not enabled."
            },
            {
                "date": "2024-08-23T07:48:24Z",
                "message": "build: make go buildid static (#30342)\n\nThe previous clearing of buildid did fully work, turns out we need to\r\nset it in `ldflags`\r\n\r\nThe go buildid is the only remaining hurdle for reproducible builds, see\r\nhttps://github.com/ethereum/go-ethereum/issues/28987#issuecomment-2306412590\r\n\r\nThis PR changes the go build id application note to say literally `none`\r\n\r\nhttps://github.com/golang/go/issues/33772#issuecomment-528176001:\r\n\r\n> This difference is due to the .note.go.buildid section added by the\r\nlinker. It can be set to something static e.g. -ldflags=-buildid= (empty\r\nstring) to gain reproducibility."
            }
        ],
        "2024-08-22": [
            {
                "date": "2024-08-22T11:29:40Z",
                "message": "build: fix hash for go1.23.0.linux-riscv64.tar.gz (#30335)\n\nbuild: fix hash for go1.23.0.linux-riscv64.tar.gz"
            }
        ],
        "2024-08-21": [
            {
                "date": "2024-08-21T13:16:08Z",
                "message": "eth/tracers: avoid panic in state test runner (#30332)\n\nMake tracers more robust by handling `nil` receipt as input. \r\nAlso pass in a receipt with gas used in the state test runner.\r\nCloses https://github.com/ethereum/go-ethereum/issues/30117.\r\n\r\n---------\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            },
            {
                "date": "2024-08-21T07:22:33Z",
                "message": "eth/protocols/eth: handle zero-count header requests (#30305)\n\nProper fix for handling `count=0` get header requests. \r\n\r\nhttps://en.wikipedia.org/wiki/Count_Zero"
            },
            {
                "date": "2024-08-21T02:00:31Z",
                "message": "trie: use go-verkle helper for speedier (*VerkleTrie).RollBackAccount (#30242)\n\nThis is a performance improvement on the account-creation rollback code\r\nrequired for the archive node to support verkle. It uses the utility\r\nfunction `DeleteAtStem` to remove code and account data per-group\r\ninstead of doing it leaf by leaf.\r\n\r\nIt also fixes an index bug, as code is chunked in 31-byte chunks, so\r\ncomparing with the code size should use 31 as its stride.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2024-08-20": [
            {
                "date": "2024-08-20T15:34:03Z",
                "message": "travis.yml: use focal for builds (#30319)"
            },
            {
                "date": "2024-08-20T14:02:54Z",
                "message": "cmd/utils,p2p: enable discv5 by default (#30327)"
            },
            {
                "date": "2024-08-20T13:59:48Z",
                "message": "all: clean up goerli flag and config (#30289)\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            },
            {
                "date": "2024-08-20T13:59:16Z",
                "message": "cmd/devp2p: require dns:read, dns:edit permissions for cloudflare deploy  (#30326)\n\nThis PR adds the `dns:read` and `dns:edit` permissions to the required\r\nset of permissions checked before deploying an ENR tree to Cloudflare.\r\nThese permissions are necessary for a successful publish.\r\n\r\n**Background**:\r\nThe current logic for `devp2p dns to-cloudflare` checks for `zone:edit`\r\nand `zone:read` permissions. However, when running the command with only\r\nthese two permissions, the following error occurs:\r\n```\r\nwrong permissions on zone REMOVED-ZONE: map[#zone:edit:false #zone:read:true]\r\n```\r\n\r\nAdding `zone:read` and `zone:edit` to the API token led to a different\r\nerror:\r\n```\r\nINFO [08-19|14:06:16.782] Retrieving existing TXT records on pos-nodes.hardfork.dev\r\nAuthentication error (10000)\r\n```\r\n\r\nThis suggested that additional permissions were required. I added\r\n`dns:read`, but encountered another error:\r\n```\r\nINFO [08-19|14:11:42.342] Retrieving existing TXT records on pos-nodes.hardfork.dev\r\nINFO [08-19|14:11:42.851] Updating DNS entries\r\nfailed to publish REMOVED.pos-nodes.hardfork.dev: Authentication error (10000)\r\n```\r\n\r\nFinally, after adding both `dns:read` and `dns:edit` permissions, the\r\ncommand executed successfully with the following output:\r\n```\r\nINFO [08-19|14:13:07.677] Checking Permissions on zone REMOVED-ZONE\r\nINFO [08-19|14:13:08.014] Retrieving existing TXT records on pos-nodes.hardfork.dev\r\nINFO [08-19|14:13:08.440] Updating DNS entries\r\nINFO [08-19|14:13:08.440] \"Updating pos-nodes.hardfork.dev from \\\"enrtree-root:v1 e=FSED3EDKEKRDDFMCLP746QY6CY l=FDXN3SN67NA5DKA4J2GOK7BVQI seq=1 sig=Glja2c9RviRqOpaaHR0MnHsQwU76nJXadJwFeiXpp8MRTVIhvL0LIireT0yE3ETZArGEmY5Ywz3FVHZ3LR5JTAE\\\" to \\\"enrtree-root:v1 e=AB66M4ULYD5OYN4XFFCPVZRLUM l=FDXN3SN67NA5DKA4J2GOK7BVQI seq=1 sig=H8cqDzu0FAzBplK4g3yudhSaNtszIebc2aj4oDm5a5ZE5PAg-xpCnQgVE_53CsgsqQpalD9byafx_FrUT61sagA\\\"\"\r\nINFO [08-19|14:13:16.932] Updated DNS entries                      new=32 updated=1 untouched=100\r\nINFO [08-19|14:13:16.932] Deleting stale DNS entries\r\nINFO [08-19|14:13:24.663] Deleted stale DNS entries                count=31\r\n```\r\n\r\nWith this PR, the required permissions for deploying an ENR tree to\r\nCloudflare now include `zone:read`, `zone:edit`, `dns:read`, and\r\n`dns:edit`. The initial check now includes all of the necessary\r\npermissions and indicates in the error message which permissions are\r\nmissing:\r\n```\r\nINFO [08-19|14:17:20.339] Checking Permissions on zone REMOVED-ZONE\r\nwrong permissions on zone REMOVED-ZONE: map[#dns_records:edit:false #dns_records:read:false #zone:edit:false #zone:read:true]\r\n```"
            },
            {
                "date": "2024-08-20T13:54:28Z",
                "message": "rpc: add timeout to rpc client Unsubscribe (#30318)\n\nFixes #30156\r\n\r\nThis adds a repro of the linked issue. I fixed it by adding a timeout\r\nwhen issuing the call to unsubscribe."
            },
            {
                "date": "2024-08-20T13:50:07Z",
                "message": "all: update to go version 1.23.0 (#30323)\n\nThis PR updates the version of go used in builds and docker to\r\n1.23.0. Release notes: https://go.dev/doc/go1.23\r\n\r\nMore importantly, following our policy of maintaining the last two\r\nversions (which now becomes 1.23 and 1.22), we can now make use of\r\nthe things that were introduced in 1.22: https://go.dev/doc/go1.22\r\n\r\nGo 1.22 makes two changes to \u201cfor\u201d loops.\r\n- each iteration creates new variables, \r\n- for loops may range over integers\r\n\r\nOther than that, some interesting library changes and other stuff."
            },
            {
                "date": "2024-08-20T13:33:28Z",
                "message": "build: attempt at reproducible builds (#30321)\n\nThis PR implements the conclusions from\r\nhttps://github.com/ethereum/go-ethereum/issues/28987#issuecomment-2296075028,\r\nthat is:\r\n\r\nBuilding with `--strip-all` as a ld-flag to the cgo linker, to remove\r\nsymbols. Without that, some spurious reference to a temporary file is\r\nincluded into the kzg-related library.\r\n\r\nBuilding with `--build-id=none`, to avoid putting a `build id` into the file."
            },
            {
                "date": "2024-08-20T12:31:06Z",
                "message": "core/vm: reuse Memory instances (#30137)\n\nThis PR adds a sync.Pool to reuse instances of Memory in EVMInterpreter."
            },
            {
                "date": "2024-08-20T12:06:00Z",
                "message": "core/rawdb: drop MigrateTable (#30331)\n\nThese are the leftovers from #24028."
            },
            {
                "date": "2024-08-20T10:26:35Z",
                "message": "accounts/abi: handle ABIs with contract type parameter (#30315)\n\nconvert parameter of type contract to the basic `address` type\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
            }
        ],
        "2024-08-19": [
            {
                "date": "2024-08-19T21:32:15Z",
                "message": "eth/catalyst: ensure period zero mode leaves no pending txs in pool (#30264)\n\ncloses #29475, replaces #29657, #30104 \r\n\r\nFixes two issues. First is a deadlock where the txpool attempts to reorg, but can't complete because there are no readers left for the new txs subscription. Second, resolves a problem with on demand mode where txs may be left pending when there are more pending txs than block space.\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2024-08-19T18:06:57Z",
                "message": "gitignore: ignore upload-artefacts (#30325)\n\nOur `WriteArchive`, used by ci builder, creates files in the repo root,in order to upload. After we've built the amd64-builds, we create the uploads, and cause the repo to be flagged as dirty for the remaining builds.\r\n\r\nThis change fixes it by adding the artefacts to gitignore. Closes #30324"
            },
            {
                "date": "2024-08-19T11:35:41Z",
                "message": "build: remove mantic from ppa builds (#30322)\n\nremoves ppa-build for ubuntu `mantic`"
            },
            {
                "date": "2024-08-19T11:35:04Z",
                "message": "internal/build: include git-date on detached head (#30320)\n\nWhen we are building in detached head, we cannot easily obtain the same information as we can if we're in non-detached head.\r\n\r\nHowever, one thing we _can_ obtain is the git-hash and git-date. Currently, we omit to include the git-date into the build-info, which causes problem for reproducable builds which are on a detached head.\r\n\r\nThis change fixes it to include the date-info always."
            }
        ],
        "2024-08-16": [
            {
                "date": "2024-08-16T14:41:44Z",
                "message": "vm: simplify error handling in `vm.EVM.create()` (#30292)\n\nTo allow all error paths in `vm.EVM.create()` to consume the necessary\r\ngas, there is currently a pattern of gating code on `if err == nil`\r\ninstead of returning as soon as the error occurs. The same behaviour can\r\nbe achieved by abstracting the gated code into a method that returns\r\nimmediately on error, improving readability and thus making it easier to\r\nunderstand and maintain."
            },
            {
                "date": "2024-08-16T14:33:41Z",
                "message": "core: remove withdrawal length check for state processor (#30286)\n\nThe withdrawal length is already verified by the beacon consensus package, so the check in the state processor is a duplicate."
            },
            {
                "date": "2024-08-16T12:39:57Z",
                "message": "beacon/light: handle endpoint URL more gracefully (#30306)\n\nblsync was failing if the light endpoint it was provided ended with a\n`/`. This change should handle the joining more gracefully."
            }
        ],
        "2024-08-15": [
            {
                "date": "2024-08-15T20:14:42Z",
                "message": "eth: dial nodes from discv5 (#30302)\n\nHere I am adding a discv5 nodes source into the p2p dial iterator. It's\r\nan improved version of #29533.\r\n\r\nUnlike discv4, the discv5 random nodes iterator will always provide full\r\nENRs. This means we can apply filtering to the results and will only try\r\ndialing nodes which explictly opt into the eth protocol with a matching\r\nchain.\r\n\r\nI have also removed the dial iterator from snap. We don't have an\r\nofficial DNS list for snap anymore, and I doubt anyone else is running\r\none. While we could potentially filter for snap on discv5, there will be\r\nvery few nodes announcing it, and the extra iterator would just stall\r\nthe dialer.\r\n\r\n---------\r\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            },
            {
                "date": "2024-08-15T14:36:35Z",
                "message": "eth/tracers/js: add coinbase addr to ctx (#30231)\n\nAdd coinbase address to javascript tracer context.\r\n\r\nThis PR adds the `coinbase` address to `jsTracer.ctx`, allowing access\r\nto the coinbase address (fee receipient) in custom JavaScript tracers.\r\n\r\nExample usage:\r\n\r\n```javascript\r\nresult: function(ctx) {\r\n  return toAddress(ctx.coinbase);\r\n}\r\n```\r\n\r\nThis change enables custom tracers to access coinbase address,\r\npreviously unavailable, enhancing their capabilities to match built-in\r\ntracers."
            },
            {
                "date": "2024-08-15T09:42:39Z",
                "message": "eth/ethconfig: remove LES server config (#30298)"
            },
            {
                "date": "2024-08-15T09:35:16Z",
                "message": "eth/fetcher: always expect transaction metadata in announcement (#30288)\n\nThis pull request drops the legacy transaction retrieval support from before\r\neth68, adding the restrictions that transaction metadata must be provided\r\nalong with the transaction announment."
            },
            {
                "date": "2024-08-15T08:11:03Z",
                "message": ".golangci.yml: remove lint warning for TxLookupLimit"
            },
            {
                "date": "2024-08-15T07:16:23Z",
                "message": "core: only compute state root once (#30299)\n\nThis PR refactors the genesis initialization a bit, s.th. we only\r\ncompute the blockhash once instead of twice as before (during hashAlloc\r\nand flushAlloc)\r\n\r\nThis will significantly reduce the amount of memory allocated during\r\ngenesis init\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2024-08-14": [
            {
                "date": "2024-08-14T09:45:51Z",
                "message": "go.mod: upgrade to pebble v1.1.2 (#30297)\n\nIncludes a fix for MIPS32 support.\r\n\r\nPebble release:\r\nhttps://github.com/cockroachdb/pebble/releases/tag/v1.1.2\r\nKey fix for mips32:\r\nhttps://github.com/cockroachdb/pebble/commit/9f3904a705d60b9832febb6c6494183d92c8f556\r\n(also the only change from v1.1.1."
            }
        ],
        "2024-08-13": [
            {
                "date": "2024-08-13T11:49:31Z",
                "message": "core/txpool/blobpool: fix error message (#30247)\n\nthe validation process only checks for 'less than', which is\r\ninconsistent with the error output"
            }
        ],
        "2024-08-12": [
            {
                "date": "2024-08-12T18:46:15Z",
                "message": "build: run 'go mod tidy' check as part of lint (#30291)"
            },
            {
                "date": "2024-08-12T18:42:36Z",
                "message": "go.mod: remove github.com/julienschmidt/httprouter (#30290)"
            },
            {
                "date": "2024-08-12T12:19:35Z",
                "message": "params: begin v1.14.9 release cycle"
            },
            {
                "date": "2024-08-12T12:15:30Z",
                "message": "params: release go-ethereum v1.14.8 stable"
            },
            {
                "date": "2024-08-12T08:43:54Z",
                "message": "eth/protocols/snap: cleanup dangling account trie nodes due to incomplete storage (#30258)\n\nThis pull request fixes #30229.\r\n \r\nDuring snap sync, large storage will be split into several pieces and\r\nsynchronized concurrently. Unfortunately, the tradeoff is that the respective\r\nmerkle trie of each storage chunk will be incomplete due to the incomplete\r\nboundaries. The trie nodes on these boundaries will be discarded, and any\r\ndangling nodes on disk will also be removed if they fall on these paths,\r\nensuring the state healer won't be blocked.\r\n\r\nHowever, the dangling account trie nodes on the path from the root to the\r\nassociated account are left untouched. This means the dangling account trie\r\nnodes could potentially stop the state healing and break the assumption that the\r\nentire subtrie should exist if the subtrie root exists. We should consider the\r\naccount trie node as the ancestor of the corresponding storage trie node.\r\n\r\nIn the scenarios described in the above ticket, the state corruption could occur\r\nif there is a dangling account trie node while some storage trie nodes are\r\nremoved due to synchronization redo.\r\n\r\nThe fixing idea is pretty straightforward, the trie nodes on the path from root\r\nto account should all be explicitly removed if an incomplete storage trie\r\noccurs. Therefore, a `delete` operation has been added into `gentrie` to\r\nexplicitly clear the account along with all nodes on this path. The special\r\nthing is that it's a cross-trie clearing. In theory, there may be a dangling\r\nnode at any position on this account key and we have to clear all of them."
            },
            {
                "date": "2024-08-12T08:36:48Z",
                "message": "p2p/simulations: remove packages (#30250)\n\nLooking at the history of these packages over the past several years, there\r\nhaven't been any meaningful contributions or usages:\r\nhttps://github.com/ethereum/go-ethereum/commits/master/p2p/simulations?before=de6d5976794a9ed3b626d4eba57bf7f0806fb970+35\r\n\r\nAlmost all of the commits are part of larger refactors or low-hanging-fruit contributions.\r\nSeems like it's not providing much value and taking up team + contributor time."
            }
        ],
        "2024-08-10": [
            {
                "date": "2024-08-10T10:44:31Z",
                "message": "beacon/engine, consensus/beacon: use params.MaximumExtraDataSize instead of hard-coded value (#29721)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            }
        ],
        "2024-08-09": [
            {
                "date": "2024-08-09T20:11:22Z",
                "message": "go.mod: update uint256 to 1.3.1 (#30280)\n\nRelease notes: https://github.com/holiman/uint256/releases/tag/v1.3.1"
            }
        ],
        "2024-08-08": [
            {
                "date": "2024-08-08T16:58:08Z",
                "message": "cmd/evm: fix evm basefee (#30281)\n\nfixes #30279 -- previously we did not use the basefee from the genesis, and instead the defaults were used from `runtime.go/setDefaults`-function"
            },
            {
                "date": "2024-08-08T13:14:00Z",
                "message": "eth/downloader, core/types: take withdrawals-size into account in downloader queue (#30276)\n\nFixes a slight miscalculation in the downloader queue, which was not accurately taking block withdrawals into account when calculating the size of the items in the queue"
            },
            {
                "date": "2024-08-08T11:50:00Z",
                "message": "tests: fix TransactionTest to actually run (#30272)\n\nDue to https://github.com/ethereum/tests/releases/tag/v10.1, the format\r\nof the TransactionTest changed, but it was not properly addressed, causing the test\r\nto pass unexpectedly.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2024-08-08T11:47:43Z",
                "message": "build: upgrade -dlgo version to Go 1.22.6 (#30273)"
            },
            {
                "date": "2024-08-08T08:27:38Z",
                "message": "core/vm: use uint64 in memory for indices everywhere (#30252)\n\nConsistently use `uint64` for indices in `Memory` and drop lots of type\r\nconversions from `uint64` to `int64`.\r\n\r\n---------\r\n\r\nCo-authored-by: lmittmann <lmittmann@users.noreply.github.com>"
            },
            {
                "date": "2024-08-08T07:13:18Z",
                "message": "signer/core: improve performance of isPrimitiveTypeValid function (#30274) (#30277)\n\nPrecomputes valid primitive types into a map to use for validation, thus removing sprintf."
            }
        ],
        "2024-08-06": [
            {
                "date": "2024-08-06T12:38:47Z",
                "message": "core/vm: improved stack swap performance (#30249)\n\nThis PR adds the methods `Stack.swap1..16()` that faster than `Stack.swap(1..16)`. \r\n\r\nCo-authored-by: lmittmann <lmittmann@users.noreply.github.com>"
            },
            {
                "date": "2024-08-06T12:14:37Z",
                "message": "ethclient: support networkID in hex format (#30263)\n\nSome chains\u2019 network IDs use hexadecimal such as Optimism (\"0xa\" instead\r\nof \"10\"), so when converting the string to big.Int, we cannot specify\r\nbase 10; otherwise, it will encounter errors with hexadecimal network\r\nIDs."
            },
            {
                "date": "2024-08-06T11:51:48Z",
                "message": "core/vm/runtime: ensure tracer benchmark calls `OnTxStart` (#30257)\n\nThe struct-based tracing added in #29189 seems to have caused an issue\r\nwith the benchmark `BenchmarkTracerStepVsCallFrame`. On master we see\r\nthe following panic:\r\n\r\n```console\r\nBenchmarkTracerStepVsCallFrame\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x2 addr=0x40 pc=0x1019782f0]\r\n\r\ngoroutine 37 [running]:\r\ngithub.com/ethereum/go-ethereum/eth/tracers/js.(*jsTracer).OnOpcode(0x140004c4000, 0x0, 0x10?, 0x989680, 0x1, {0x101ea2298, 0x1400000e258}, {0x1400000e258?, 0x14000155928?, 0x10173020c?}, ...)\r\n        /Users/matt/dev/go-ethereum/eth/tracers/js/goja.go:328 +0x140\r\ngithub.com/ethereum/go-ethereum/core/vm.(*EVMInterpreter).Run(0x14000307da0, 0x140003cc0d0, {0x0, 0x0, 0x0}, 0x0)\r\n ...\r\nFAIL    github.com/ethereum/go-ethereum/core/vm/runtime 0.420s\r\nFAIL\r\n```\r\n\r\nThe issue seems to be that `OnOpcode` expects that `OnTxStart` has\r\nalready been called to initialize the `env` value in the tracer. The JS\r\ntracer uses it in `OnOpcode` for the `GetRefund()` method.\r\n\r\nThis patch resolves the issue by reusing the `Call` method already\r\ndefined in `runtime_test.go` which correctly calls `OnTxStart`."
            },
            {
                "date": "2024-08-06T11:49:48Z",
                "message": "params: remove unused les parameters (#30268)"
            }
        ],
        "2024-08-05": [
            {
                "date": "2024-08-05T17:14:22Z",
                "message": "eth/catalyst: get params.ExcessBlobGas but check with params.BlobGasUsed (#30267)\n\nSeems it is checked with the wrong argument\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
            }
        ],
        "2024-08-02": [
            {
                "date": "2024-08-02T15:49:01Z",
                "message": "cmd/evm: don't overwrite sender account (#30259)\n\nFixes #30254 \r\n\r\nIt seems like the removed CreateAccount call is very old and not needed anymore.\r\nAfter removing it, setting a sender that does not exist in the state doesn't seem to cause\r\nan issue."
            },
            {
                "date": "2024-08-02T15:36:28Z",
                "message": "eth/downloader: gofmt (#30261)\n\nFixes a regression introduced in\r\nhttps://github.com/ethereum/go-ethereum/pull/30219"
            },
            {
                "date": "2024-08-02T04:44:03Z",
                "message": "internal/debug: remove memsize (#30253)\n\nRemoving because memsize will very likely be broken by Go 1.23. See\nhttps://github.com/fjl/memsize/issues/4"
            }
        ],
        "2024-08-01": [
            {
                "date": "2024-08-01T18:09:04Z",
                "message": "accounts/abi/bind: add accessList support to base bond contract (#30195)\n\nAdding the correct accessList parameter when calling a contract can\r\nreduce gas consumption. However, the current version only allows adding\r\nthe accessList manually when constructing the transaction. This PR can\r\nprovide convenience for saving gas."
            },
            {
                "date": "2024-08-01T14:25:55Z",
                "message": "all: remove deprecated protobuf dependencies (#30232)\n\nThe package `github.com/golang/protobuf/proto` is deprecated in favor\r\n`google.golang.org/protobuf/proto`. We should update the codes to\r\nrecommended package.\r\n\r\nSigned-off-by: Icarus Wu <icaruswu66@qq.com>"
            },
            {
                "date": "2024-08-01T14:10:43Z",
                "message": "eth/downloader: correct sync mode logging to show old mode (#30219)\n\nThis PR fixes an issue in the setMode method of beaconBackfiller where the\r\nlog message was not displaying the previous mode correctly. The log message\r\nnow shows both the old and new sync modes."
            },
            {
                "date": "2024-08-01T14:06:43Z",
                "message": "miner: remove outdated comment (#30248)"
            }
        ],
        "2024-07-31": [
            {
                "date": "2024-07-31T19:38:23Z",
                "message": "p2p/discover: schedule revalidation also when all nodes are excluded (#30239)\n\n## Issue\n\nIf `nextTime` has passed, but all nodes are excluded, `get` would return\n`nil` and `run` would therefore not invoke `schedule`. Then, we schedule\na timer for the past, as neither `nextTime` value has been updated. This\ncreates a busy loop, as the timer immediately returns.\n\n## Fix\n\nWith this PR, revalidation will be also rescheduled when all nodes are\nexcluded.\n\n---------\n\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            }
        ],
        "2024-07-30": [
            {
                "date": "2024-07-30T13:31:27Z",
                "message": "p2p: fix flaky test TestServerPortMapping (#30241)\n\nThe test specifies `ListenAddr: \":0\"`, which means a random ephemeral\r\nport will be chosen for the TCP listener by the OS. Additionally, since\r\nno `DiscAddr` was specified, the same port that is chosen automatically\r\nby the OS will also be used for the UDP listener in the discovery UDP\r\nsetup. This sometimes leads to test failures if the TCP listener picks a\r\nfree TCP port that is already taken for UDP. By specifying `DiscAddr:\r\n\":0\"`, the UDP port will be chosen independently from the TCP port,\r\nfixing the random failure.\r\n\r\nSee issue #29830.\r\n\r\nVerified using\r\n```\r\ncd p2p\r\ngo test -c -race\r\nstress ./p2p.test -test.run=TestServerPortMapping\r\n...\r\n5m0s: 4556 runs so far, 0 failures\r\n```\r\n\r\nThe issue described above can technically lead to sporadic failures on\r\nsystems that specify a listen address via the `--port` flag of 0 while\r\nnot setting `--discovery.port`. Since the default is using port `30303`\r\nand using a random ephemeral port is likely not used much to begin with,\r\nnot addressing the root cause might be acceptable."
            }
        ],
        "2024-07-27": [
            {
                "date": "2024-07-27T08:18:05Z",
                "message": "p2p/nat: return correct port for ExtIP NAT (#30234)\n\nReturn the actually requested external port instead of 0 in the\r\nAddMapping implementation for `--nat extip:<IP>`."
            }
        ],
        "2024-07-26": [
            {
                "date": "2024-07-26T03:02:37Z",
                "message": "internal/ethapi: fix state override test (#30228)\n\nLooks like #30094 became a bit stale after #30185 was merged and now we\r\nhave a stale ref to a state override object causing CI to fail on\r\nmaster."
            }
        ],
        "2024-07-24": [
            {
                "date": "2024-07-24T23:01:59Z",
                "message": "eth/tracers, internal/ethapi: remove unnecessary map pointer in state override (#30094)"
            },
            {
                "date": "2024-07-24T22:32:58Z",
                "message": "beacon/types, cmd/devp2p, p2p/enr: clean up uses of fmt.Errorf (#30182)"
            },
            {
                "date": "2024-07-24T12:32:28Z",
                "message": "triedb/pathdb: print out all trie owner and hash information (#30200)\n\nThis pull request explicitly prints out the full hash for debugging\r\npurpose."
            }
        ],
        "2024-07-23": [
            {
                "date": "2024-07-23T12:54:35Z",
                "message": "core/state: fix SetStorage override behavior (#30185)\n\nThis pull request fixes the broken feature where the entire storage set is overridden.\r\n\r\nOriginally, the storage set override was achieved by marking the associated account\r\nas deleted, preventing access to the storage slot on disk. However, since #29520, this\r\nflag is also checked when accessing the account, rendering the account unreachable.\r\n\r\nA fix has been applied in this pull request, which re-creates a new state object with all\r\naccount metadata inherited."
            },
            {
                "date": "2024-07-23T12:44:01Z",
                "message": "cmd/utils: allow configurating blob pool from flags (#30203)\n\nCurrently, we have 3 flags to configure blob pool. However, we don't\r\nread these flags and set the blob pool configuration in eth config\r\naccordingly. This commit adds a function to check if these flags are\r\nprovided and set blob pool configuration based on them."
            },
            {
                "date": "2024-07-23T12:40:12Z",
                "message": "core/state: check db error after intermediate call (#30171)\n\nThis pull request adds an additional error check after statedb.IntermediateRoot,\r\nensuring that no errors occur during this call. This step is essential, as the call might\r\nencounter database errors."
            },
            {
                "date": "2024-07-23T12:07:06Z",
                "message": "core/txpool: use the cached address in ValidateTransactionWithState (#30208)\n\nThe address recover is executed and cached in ValidateTransaction already. It's\r\nexpected that the cached one is returned in ValidateTransaction. However,\r\ncurrently, we use the wrong function signer.Sender instead of types.Sender which\r\nwill do all the address recover again."
            },
            {
                "date": "2024-07-23T12:05:46Z",
                "message": "core/tracing: update latest release version (#30211)"
            },
            {
                "date": "2024-07-23T09:55:56Z",
                "message": "rpc: show more error detail for `invalidMessageError` (#30191)\n\nHere we add distinct error messages for network timeouts and JSON parsing errors.\r\nNote this specifically applies to HTTP connections serving a single RPC request.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2024-07-22": [
            {
                "date": "2024-07-22T21:44:31Z",
                "message": "core/state: remove useless metrics (#30184)\n\nOriginally, these metrics were added to track the largest storage wiping.\r\nSince account self-destruction was deprecated with the Cancun fork,\r\nthese metrics have become meaningless."
            },
            {
                "date": "2024-07-22T21:38:04Z",
                "message": "rpc: use stable object in notifier test (#30193)\n\nThis makes the test resilient to changes of types.Header -- otherwise the test needs to be\r\nupdated each time the header structure is modified."
            },
            {
                "date": "2024-07-22T07:58:53Z",
                "message": "eth/gasprice: remove default from config (#30080)\n\n* eth/gasprice: remove default from config\r\n\r\n* eth/gasprice: sanitize startPrice"
            },
            {
                "date": "2024-07-22T03:40:14Z",
                "message": "ethdb: remove snapshot (#30189)"
            }
        ],
        "2024-07-25": [],
        "2024-07-28": [],
        "2024-07-29": [],
        "2024-08-03": [],
        "2024-08-04": [],
        "2024-08-07": [],
        "2024-08-11": [],
        "2024-08-17": [],
        "2024-08-18": [],
        "2024-08-24": [],
        "2024-08-25": [],
        "2024-08-31": [],
        "2024-09-01": [],
        "2024-09-07": [],
        "2024-09-08": [],
        "2024-09-09": [],
        "2024-09-21": [],
        "2024-09-25": [],
        "2024-09-28": [],
        "2024-09-29": [],
        "2024-10-03": [],
        "2024-10-05": [],
        "2024-10-06": [],
        "2024-10-07": [],
        "2024-10-19": [],
        "2024-10-22": [],
        "2024-10-26": [],
        "2024-10-27": [],
        "2024-11-02": [],
        "2024-11-12": [],
        "2024-11-13": [],
        "2024-11-14": [],
        "2024-11-16": [],
        "2024-11-17": [],
        "2024-11-18": [],
        "2024-11-21": [],
        "2024-11-23": [],
        "2024-11-30": [],
        "2024-12-01": [],
        "2024-12-05": [],
        "2024-12-07": [],
        "2024-12-08": [],
        "2024-12-14": [],
        "2024-12-15": [],
        "2024-12-20": [],
        "2024-12-21": [],
        "2024-12-22": [],
        "2024-12-23": [],
        "2024-12-24": [],
        "2024-12-25": [],
        "2024-12-26": [],
        "2024-12-27": [],
        "2024-12-28": [],
        "2024-12-29": [],
        "2024-12-30": [],
        "2024-12-31": [],
        "2025-01-01": [],
        "2025-01-04": [],
        "2025-01-05": [],
        "2025-01-09": [],
        "2025-01-11": [],
        "2025-01-12": [],
        "2025-01-18": [],
        "2025-01-19": [],
        "2025-01-26": [],
        "2025-01-27": [],
        "2025-02-01": [],
        "2025-02-02": [],
        "2025-02-09": [],
        "2025-02-10": [],
        "2025-02-14": [],
        "2025-02-15": [],
        "2025-02-16": [],
        "2025-02-22": [],
        "2025-03-02": [],
        "2025-03-03": [],
        "2025-03-06": [],
        "2025-03-08": [],
        "2025-03-09": [],
        "2025-03-16": [],
        "2025-03-22": [],
        "2025-03-29": [],
        "2025-03-30": [],
        "2025-04-05": [],
        "2025-04-06": [],
        "2025-04-12": [],
        "2025-04-13": [],
        "2025-04-26": [],
        "2025-04-27": [],
        "2025-05-01": [],
        "2025-05-11": [],
        "2025-05-17": [],
        "2025-05-24": [],
        "2025-05-25": [],
        "2025-05-27": [],
        "2025-05-30": [],
        "2025-05-31": [],
        "2025-06-01": [],
        "2025-06-06": [],
        "2025-06-07": [],
        "2025-06-08": [],
        "2025-06-14": [],
        "2025-06-15": [],
        "2025-06-28": [],
        "2025-06-29": [],
        "2025-07-05": [],
        "2025-07-06": [],
        "2025-07-10": [],
        "2025-07-12": [],
        "2025-07-13": [],
        "2025-07-19": [],
        "2025-07-20": [],
        "2024-07-18": [
            {
                "date": "2024-07-18T10:38:42Z",
                "message": "go.mod: upgrade to btcsuite/btcd/btcec v2.3.4 (#30181)"
            },
            {
                "date": "2024-07-18T09:09:02Z",
                "message": "p2p/discover: remove type encPubkey (#30172)\n\nThe pubkey type was moved to package v4wire a long time ago. Remaining uses of\r\nencPubkey were probably left in due to laziness."
            }
        ],
        "2024-07-16": [
            {
                "date": "2024-07-16T13:17:58Z",
                "message": "core/rawdb, triedb, cmd: create an isolated disk namespace for verkle (#30105)\n\n* core, triedb/pathdb, cmd: define verkle state ancient store\r\n\r\n* core/rawdb, triedb: add verkle namespace in pathdb"
            },
            {
                "date": "2024-07-16T13:06:22Z",
                "message": "core/state: don't compute verkle storage tree roots (#30130)"
            },
            {
                "date": "2024-07-16T11:42:30Z",
                "message": "core/txpool/legacypool: use maps.Keys and maps.Copy (#30091)"
            },
            {
                "date": "2024-07-16T10:52:19Z",
                "message": "trie, triedb: remove unnecessary child resolver interface (#30167)"
            },
            {
                "date": "2024-07-16T09:47:11Z",
                "message": "eth/catalyst: fix (*SimulatedBeacon).AdjustTime() conversion (#30138)"
            }
        ],
        "2024-07-15": [
            {
                "date": "2024-07-15T13:26:58Z",
                "message": "all: simplify tests using t.TempDir() (#30150)"
            },
            {
                "date": "2024-07-15T12:29:13Z",
                "message": "SECURITY.md: correct PGP key block formatting (#30123)"
            },
            {
                "date": "2024-07-15T10:09:32Z",
                "message": "core/types: don't modify signature V when reading large chainID (#30157)"
            },
            {
                "date": "2024-07-15T09:36:21Z",
                "message": "cmd/utils: fix typo in flag description (#30127)"
            },
            {
                "date": "2024-07-15T08:15:35Z",
                "message": "p2p: fix ip change log parameter (#30158)"
            },
            {
                "date": "2024-07-15T07:05:59Z",
                "message": "trie: add RollBackAccount function to verkle trees (#30135)"
            },
            {
                "date": "2024-07-15T02:28:06Z",
                "message": "core/txpool/blobpool: use nonce from argument instead of tx.Nonce() (#30148)\n\nThis does not change the behavior here as the nonce in the argument is\r\ntx.Nonce(). This commit helps to make the function easier to read and avoid\r\ncapturing the tx in the function."
            }
        ],
        "2024-07-11": [
            {
                "date": "2024-07-11T14:09:24Z",
                "message": "core/state: fix prefetcher for verkle (#29760)"
            },
            {
                "date": "2024-07-11T12:24:09Z",
                "message": "params: begin v1.14.8 release cycle"
            },
            {
                "date": "2024-07-11T12:23:27Z",
                "message": "params: go-ethereum v1.14.7 stable"
            },
            {
                "date": "2024-07-11T07:28:27Z",
                "message": "core/txpool/blobpool: revert #29989, WLock on Nonce (#30142)"
            }
        ],
        "2024-07-09": [
            {
                "date": "2024-07-09T12:19:55Z",
                "message": "eth/catalyst: fix params in failure log (#30131)"
            },
            {
                "date": "2024-07-09T12:17:43Z",
                "message": "go.mod: update uint256 to 1.3.0 (#30134)"
            },
            {
                "date": "2024-07-09T11:19:25Z",
                "message": "crypto: remove hardcoded value for secp256k1.N (#30126)"
            }
        ],
        "2024-07-03": [
            {
                "date": "2024-07-03T10:11:43Z",
                "message": "build: upgrade -dlgo version to Go 1.22.5 (#30112)"
            }
        ],
        "2024-07-02": [
            {
                "date": "2024-07-02T15:45:10Z",
                "message": "Merge remote-tracking branch 'gballet/release-1.14.6'"
            },
            {
                "date": "2024-07-02T12:59:41Z",
                "message": "params: begin v1.14.7 release cycle"
            },
            {
                "date": "2024-07-02T12:58:42Z",
                "message": "params: release Geth v1.14.6"
            },
            {
                "date": "2024-07-02T12:58:15Z",
                "message": "accounts/abi: embed Go template instead of string literal (#30098)\n\nrefactor(accounts/abi): use embed pkg to split default template to file"
            }
        ],
        "2024-07-01": [
            {
                "date": "2024-07-01T19:57:04Z",
                "message": "core/state: fix inconsistent verkle test error messages (#29753)"
            },
            {
                "date": "2024-07-01T15:16:15Z",
                "message": "build:  add check for stale generated files (#30037)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-07-01T14:18:38Z",
                "message": "accounts/usbwallet/trezor: upgrade to generate with protoc 27.1 (#30058)"
            }
        ],
        "2024-06-28": [
            {
                "date": "2024-06-28T18:37:58Z",
                "message": "rpc: truncate call error data logs (#30028)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-06-28T16:08:31Z",
                "message": "all: replace division with right shift if possible (#29911)"
            },
            {
                "date": "2024-06-28T16:05:57Z",
                "message": "cmd/evm/internal/t8ntool: log writeTraceResult error message (#30038)"
            },
            {
                "date": "2024-06-28T13:51:27Z",
                "message": "core/txpool/blobpool: improve newPriceHeap function (#30050)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-06-28T13:15:54Z",
                "message": "triedb/pathdb: fix flaky test in pathdb (#29901)"
            }
        ],
        "2024-06-27": [
            {
                "date": "2024-06-27T12:30:39Z",
                "message": "trie: relocate state execution logic into pathdb package (#29861)"
            },
            {
                "date": "2024-06-27T09:29:50Z",
                "message": "eth/tracers,trie: remove unnecessary check (#30071)"
            }
        ],
        "2024-06-25": [
            {
                "date": "2024-06-25T13:45:33Z",
                "message": "trie/trienode: remove unnecessary check in Summary (#30047)"
            },
            {
                "date": "2024-06-25T12:19:04Z",
                "message": "core/txpool/blobpool: avoid use *map as parameter. (#30048)"
            },
            {
                "date": "2024-06-25T11:48:08Z",
                "message": "all: stateless witness builder and (self-)cross validator (#29719)\n\n* all: add stateless verifications\r\n\r\n* all: simplify witness and integrate it into live geth\r\n\r\n---------\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2024-06-25T09:30:58Z",
                "message": "internal/debug: remove unnecessary log level assignment (#30044)\n\nLog level is specified in L259 so it's unnecessary to specify it for handlers (L234, L236)."
            },
            {
                "date": "2024-06-25T09:24:33Z",
                "message": "accounts/keystore: use t.TempDir in test (#30052)"
            },
            {
                "date": "2024-06-25T09:16:27Z",
                "message": ".github: add lightclient as codeowner to relevant packages (#30062)"
            },
            {
                "date": "2024-06-25T09:14:12Z",
                "message": "cmd/blsync: use debug.Setup for logging configuration (#30065)"
            }
        ],
        "2024-06-21": [
            {
                "date": "2024-06-21T13:29:07Z",
                "message": "p2p/discover: improve flaky revalidation tests (#30023)"
            },
            {
                "date": "2024-06-21T07:42:43Z",
                "message": "Revert \"core/state/snapshot: tiny fixes\" (#30039)\n\nRevert \"core/state/snapshot: tiny fixes (#29995)\"\r\n\r\nThis reverts commit e0e45dbc32501d7917edb07083aa1c34ab7b0fb4."
            },
            {
                "date": "2024-06-21T01:51:03Z",
                "message": "core/state/snapshot: tiny fixes (#29995)"
            }
        ],
        "2024-06-20": [
            {
                "date": "2024-06-20T12:08:54Z",
                "message": "p2p/rlpx: 2KB maximum size for handshake messages (#30029)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-06-20T03:47:29Z",
                "message": "trie/trienode: avoid unnecessary copy (#30019)\n\n* avoid unnecessary copy\r\n\r\n* delete the never used function ProofList\r\n\r\n* eth/protocols/snap, trie/trienode: polish the code\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2024-06-19": [
            {
                "date": "2024-06-19T12:46:57Z",
                "message": "core/txpool/blobpool: change rw-lock to r-lock (#29989)"
            },
            {
                "date": "2024-06-19T09:06:52Z",
                "message": "common: using `ParseUint` instead of `ParseInt` (#30020)\n\nSince Decimal is defined as unsiged `uint64`, we should use `strconv.ParseUint` instead of `strconv.ParseInt` during unmarshalling.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2024-06-19T07:58:22Z",
                "message": "trie: don't reset tracer at the end of Commit (#30024)\n\n* trie: don't reset tracer at the end of Commit\r\n\r\n* Update trie.go\r\n\r\n---------\r\n\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
            },
            {
                "date": "2024-06-19T06:47:17Z",
                "message": "cmd/geth, ethdb/pebble: improve database statistic (#29948)\n\n* cmd/geth, ethdb/pebble: polish method naming and code comment\r\n\r\n* implement db stat for pebble\r\n\r\n* cmd, core, ethdb, internal, trie: remove db property selector\r\n\r\n* cmd, core, ethdb: fix function description\r\n\r\n---------\r\n\r\nCo-authored-by: prpeh <prpeh@proton.me>\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2024-06-18": [
            {
                "date": "2024-06-18T02:52:49Z",
                "message": "core/state/snapshot: acquire the lock on Release (#30011)\n\n* core/state/snapshot: acquire the lock on release\r\n\r\n* core/state/snapshot: only acquire read-lock when iterating"
            }
        ],
        "2024-06-17": [
            {
                "date": "2024-06-17T19:53:00Z",
                "message": "common/math: fix out of bounds access in json unmarshalling (#30014)\n\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2024-06-17T15:09:29Z",
                "message": "triedb/pathdb: use maps.Clone and maps.Keys (#29985)"
            },
            {
                "date": "2024-06-17T09:42:41Z",
                "message": "trie, triedb/pathdb: prealloc capacity for map and slice (#29986)"
            },
            {
                "date": "2024-06-17T09:03:27Z",
                "message": "log: fix some functions comments (#29907)\n\nupdates some docstrings\r\n---------\r\n\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
            },
            {
                "date": "2024-06-17T08:15:27Z",
                "message": "go.mod: update Pebble to sort out a deleted upstream dependency (#30010)"
            },
            {
                "date": "2024-06-17T07:42:39Z",
                "message": "core/state/snapshot: add a missing lock (#30001)\n\n* upgrade lock usage\r\n\r\n* revert unnecessary change"
            }
        ],
        "2024-06-14": [
            {
                "date": "2024-06-14T06:52:46Z",
                "message": "trie/triedb: add Reader to backend interface (#29988)"
            }
        ],
        "2024-06-12": [
            {
                "date": "2024-06-12T14:38:19Z",
                "message": "beacon/light: fix shutdown issues (#29946)\n\n* beacon/light/request: add server test for event after unsubscribe\n\n* beacon/light/api: fixed double stream.Close()\n\n* beacon/light/request: add checks for nil event callback function\n\n* beacon/light/request: unlock server mutex while unsubscribing from parent"
            },
            {
                "date": "2024-06-12T09:23:16Z",
                "message": "core/state, eth/protocols, trie, triedb/pathdb:  remove unused error from trie Commit (#29869)\n\n* core/state, eth/protocols, trie, triedb/pathdb:  remove unused error return from trie Commit\r\n\r\n* move set back to account-trie-update block scoping for easier readability\r\n\r\n* address review\r\n\r\n* undo tests submodule change\r\n\r\n* trie:  panic if BatchSerialize returns an error in Verkle trie Commit\r\n\r\n* trie: verkle comment nitpicks\r\n\r\n---------\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2024-06-12T07:46:36Z",
                "message": "accounts: avoid duplicate regex compilation (#29943)\n\n* fix: Optimize regular initialization\r\n\r\n* modify var name\r\n\r\n* variable change to private types"
            },
            {
                "date": "2024-06-12T07:45:42Z",
                "message": "all: fix inconsistent receiver name and add lint rule for it (#29974)\n\n* .golangci.yml: enable check for consistent receiver name\r\n\r\n* beacon/light/sync: fix receiver name\r\n\r\n* core/txpool/blobpool: fix receiver name\r\n\r\n* core/types: fix receiver name\r\n\r\n* internal/ethapi: use consistent receiver name 'api' for handler object\r\n\r\n* signer/core/apitypes: fix receiver name\r\n\r\n* signer/core: use consistent receiver name 'api' for handler object\r\n\r\n* log: fix receiver name"
            }
        ],
        "2024-06-11": [
            {
                "date": "2024-06-11T17:41:17Z",
                "message": "p2p/simulations: update doc of HTTP endpoints (#29894)"
            },
            {
                "date": "2024-06-11T13:57:41Z",
                "message": ".github: disable cache in actions run (#29926)"
            },
            {
                "date": "2024-06-11T13:27:35Z",
                "message": "cmd/devp2p: fix log output (#29972)"
            },
            {
                "date": "2024-06-11T12:34:56Z",
                "message": "ethconfig: regenerate config (#29970)"
            },
            {
                "date": "2024-06-11T08:24:44Z",
                "message": "core/state: rename all the AccessList receivers to 'al' (#29921)\n\nrename all the receivers to 'al'"
            },
            {
                "date": "2024-06-11T08:10:07Z",
                "message": "cmd, core: prefetch reads too from tries if requested (#29807)\n\n* cmd/utils, consensus/beacon, core/state: when configured via stub  flag: prefetch all reads from account/storage tries, terminate prefetcher synchronously.\r\n\r\n* cmd, core/state: fix nil panic, fix error handling, prefetch nosnap too\r\n\r\n* core/state: expand prefetcher metrics for reads and writes separately\r\n\r\n* cmd/utils, eth: fix noop collect witness flag\r\n\r\n---------\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            }
        ],
        "2024-06-10": [
            {
                "date": "2024-06-10T12:55:47Z",
                "message": "core, rlp: remove duplicated words (#29964)"
            },
            {
                "date": "2024-06-10T05:58:50Z",
                "message": "core: initialize developer genesis beacon root contract with 0 balance (#29963)"
            }
        ],
        "2024-06-09": [
            {
                "date": "2024-06-09T20:50:22Z",
                "message": "p2p: use package slices to sort in PeersInfo (#29957)"
            },
            {
                "date": "2024-06-09T20:47:51Z",
                "message": "p2p/discover: add missing lock when calling tab.handleAddNode (#29960)"
            }
        ],
        "2024-06-08": [
            {
                "date": "2024-06-08T11:04:16Z",
                "message": "cmd/geth: remove unused param (#29952)"
            },
            {
                "date": "2024-06-08T11:00:53Z",
                "message": "cmd/clef, cmd/evm: fix markdown issues in README (#29954)"
            }
        ],
        "2024-06-05": [
            {
                "date": "2024-06-05T17:48:22Z",
                "message": "go.mod : tidy"
            },
            {
                "date": "2024-06-05T17:31:04Z",
                "message": "p2p: use netip.Addr where possible (#29891)\n\nenode.Node was recently changed to store a cache of endpoint information. The IP address in the cache is a netip.Addr. I chose that type over net.IP because it is just better. netip.Addr is meant to be used as a value type. Copying it does not allocate, it can be compared with ==, and can be used as a map key.\r\n\r\nThis PR changes most uses of Node.IP() into Node.IPAddr(), which returns the cached value directly without allocating.\r\nWhile there are still some public APIs left where net.IP is used, I have converted all code used internally by p2p/discover to the new types. So this does change some public Go API, but hopefully not APIs any external code actually uses.\r\n\r\nThere weren't supposed to be any semantic differences resulting from this refactoring, however it does introduce one: In package p2p/netutil we treated the 0.0.0.0/8 network (addresses 0.x.y.z) as LAN, but netip.Addr.IsPrivate() doesn't. The treatment of this particular IP address range is controversial, with some software supporting it and others not. IANA lists it as special-purpose and invalid as a destination for a long time, so I don't know why I put it into the LAN list. It has now been marked as special in p2p/netutil as well."
            },
            {
                "date": "2024-06-05T13:05:00Z",
                "message": "core/rawdb: remove unused deriveLogFields (#29913)\n\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\r\nCo-authored-by: Martin HS <martin@swende.se>"
            },
            {
                "date": "2024-06-05T09:07:37Z",
                "message": "core/state, eth/tracers: fix typos (#29932)"
            },
            {
                "date": "2024-06-05T08:20:35Z",
                "message": "params: begin v1.14.5 release cycle"
            },
            {
                "date": "2024-06-05T08:06:37Z",
                "message": "params: release Geth v1.14.4"
            }
        ],
        "2024-06-07": [
            {
                "date": "2024-06-07T12:04:18Z",
                "message": "cmd/evm/internal/t8ntool: remove unused parameter (#29930)"
            }
        ],
        "2024-06-06": [
            {
                "date": "2024-06-06T13:23:44Z",
                "message": "params: begin v1.14.6 release cycle"
            },
            {
                "date": "2024-06-06T13:17:53Z",
                "message": "params: release Geth v1.14.5"
            },
            {
                "date": "2024-06-06T13:15:22Z",
                "message": "p2p/discover: unwrap 4-in-6 UDP source addresses (#29944)\n\nFixes an issue where discovery responses were not recognized."
            },
            {
                "date": "2024-06-06T07:56:41Z",
                "message": "p2p/netutil: fix comments (#29942)"
            },
            {
                "date": "2024-06-06T07:55:38Z",
                "message": "rlp: no need to repeat called len method (#29936)\n\nrlp: no need to repeat calling len"
            },
            {
                "date": "2024-06-06T07:52:57Z",
                "message": "build: upgrade -dlgo version to Go 1.22.4 (#29938)"
            }
        ],
        "2024-06-04": [
            {
                "date": "2024-06-04T12:51:34Z",
                "message": "core/state: avoid data race (#29924)"
            },
            {
                "date": "2024-06-04T07:59:41Z",
                "message": "internal/ethapi: recap higher args.Gas with block GasLimit in DoEstimateGas (#29738)\n\n* internal/ethapi: recap higher args.Gas with block GasLimit in DoEstimateGas\r\n\r\n* internal/ethapi: fix gas estimator capping code\r\n\r\n* internal/ethapi: fix test\r\n\r\n* fix goimports lint (remove space)\r\n\r\n---------\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2024-06-04T03:17:26Z",
                "message": "trie: iterate values pre-order and fix seek behavior (#27838)\n\nThis pull request fixes the pre-order trie traversal by defining \r\na more accurate iterator order and path comparison rule.\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2024-06-04T03:12:24Z",
                "message": "core/state: prefetch account trie while starting a prefetcher (#29919)\n\nAlways prefetch the account trie while starting the prefetcher.\r\n\r\nCo-authored-by: steven <steven@stevendeMacBook-Pro.local>\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
            }
        ],
        "2024-06-03": [
            {
                "date": "2024-06-03T12:51:04Z",
                "message": "core/rawdb,eth/protocols,p2p: prealloc slice size (#29893)\n\nchore: prealloc slice size"
            },
            {
                "date": "2024-06-03T12:50:24Z",
                "message": "log: fix a typo (#29883)\n\nlogger"
            },
            {
                "date": "2024-06-03T12:38:08Z",
                "message": "beacon/engine: prealloc capacity for map and slice (#29903)\n\n* prealloc capacity for map and slice\r\n\r\n* revert unnecessary change"
            },
            {
                "date": "2024-06-03T12:31:23Z",
                "message": "cmd/evm/internal/t8ntool: fix a typo (#29887)\n\n* i8ntool: fix a typo\r\n\r\n* cmd/evm/internal/t8ntool: fix typo typo\r\n\r\n---------\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2024-06-03T11:17:12Z",
                "message": "core/state: introduce stateupdate structure (#29530)\n\n* core/state: introduce stateUpate structure\r\n\r\n* core/state: remove outdated function description\r\n\r\n* core/state: address comments"
            },
            {
                "date": "2024-06-03T10:30:27Z",
                "message": "Supply delta live tracer (#29347)\n\nIntroduces the first built-in live tracer. The supply tracer tracks ETH supply changes across blocks\r\nand writes the output to disk. This will need to be enabled through CLI using the `--vmtrace supply` flag.\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            }
        ],
        "2024-05-31": [
            {
                "date": "2024-05-31T16:40:09Z",
                "message": "CODEOWNERS: @s1na owns core/tracing (#29899)\n\nUpdate CODEOWNERS"
            },
            {
                "date": "2024-05-31T07:39:40Z",
                "message": "miner: lower default min miner tip from 1 gwei to 0.001 gwei (#29895)"
            },
            {
                "date": "2024-05-31T07:25:49Z",
                "message": "common/math: rename variable name `int` to `n` (#29890)\n\n* chore: rename variable name `int` to `in`\r\n\r\n* chore: rename variable name `int` to `n`"
            }
        ],
        "2024-05-30": [
            {
                "date": "2024-05-30T16:22:23Z",
                "message": "eth/gasprice: add comment to constant (#29892)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-05-30T14:24:16Z",
                "message": "crypto/secp256k1: change receiver variable name to lowercase (#29889)"
            },
            {
                "date": "2024-05-30T13:23:04Z",
                "message": "ethdb: remove unnecessary function wrapper (#29888)"
            }
        ],
        "2024-05-29": [
            {
                "date": "2024-05-29T13:56:52Z",
                "message": "eth/catalyst: ensure TxPool is synced in Fork (#29876)\n\nThis should fix an occasional test failure in ethclient/simulated.TestForkResendTx.\r\nInspection of logs revealed the cause of the failure to be that the txpool was not done\r\nreorganizing by the time Fork is called."
            },
            {
                "date": "2024-05-29T13:55:51Z",
                "message": "cmd/devp2p: fix node.TCP -> node.UDP (#29879)"
            },
            {
                "date": "2024-05-29T13:31:27Z",
                "message": "build: upgrade to golangci-lint v1.59.0 (#29875)"
            },
            {
                "date": "2024-05-29T13:02:26Z",
                "message": "p2p/discover: refactor node and endpoint representation (#29844)\n\nHere we clean up internal uses of type discover.node, converting most code to use\r\nenode.Node instead. The discover.node type used to be the canonical representation of\r\nnetwork hosts before ENR was introduced. Most code worked with *node to avoid conversions\r\nwhen interacting with Table methods. Since *node also contains internal state of Table and\r\nis a mutable type, using *node outside of Table code is prone to data races. It's also\r\ncleaner not having to wrap/unwrap *enode.Node all the time.\r\n\r\ndiscover.node has been renamed to tableNode to clarify its purpose.\r\n\r\nWhile here, we also change most uses of net.UDPAddr into netip.AddrPort. While this is\r\ntechnically a separate refactoring from the *node -> *enode.Node change, it is more\r\nconvenient because *enode.Node handles IP addresses as netip.Addr. The switch to package\r\nnetip in discovery would've happened very soon anyway.\r\n\r\nThe change to netip.AddrPort stops at certain interface points. For example, since package\r\np2p/netutil has not been converted to use netip.Addr yet, we still have to convert to\r\nnet.IP/net.UDPAddr in a few places."
            },
            {
                "date": "2024-05-29T12:44:14Z",
                "message": "core/state: fix typo in comment (#29639)"
            },
            {
                "date": "2024-05-29T12:43:07Z",
                "message": "eth/downloader, eth/tracer: fix typos in comments (#29707)"
            },
            {
                "date": "2024-05-29T10:24:10Z",
                "message": "all: fix typos in comments (#29873)\n\nfix using `a` & `the` simutaneously"
            },
            {
                "date": "2024-05-29T10:12:57Z",
                "message": "accounts: fix TestUpdateKeyfileContents (#29867)\n\nCreate the directory before NewKeyStore. This ensures the watcher successfully starts on\r\nthe first attempt, and waitWatcherStart functions as intended."
            },
            {
                "date": "2024-05-29T10:11:18Z",
                "message": "p2p/nodestate: remove unused package (#29872)"
            },
            {
                "date": "2024-05-29T10:09:58Z",
                "message": "p2p/simulations: remove stale information about docker adapter (#29874)"
            },
            {
                "date": "2024-05-29T08:30:25Z",
                "message": "go.mod: update a number of dependencies (#29763)\n\n* deps: update go-winio\r\n\r\n* deps: update fastcache\r\n\r\n* deps: update golang-set\r\n\r\n* update fatih/color\r\n\r\n* update natefinch/lumberjack.v2"
            }
        ],
        "2024-05-28": [
            {
                "date": "2024-05-28T19:30:17Z",
                "message": "p2p/discover: fix update logic in handleAddNode (#29836)\n\nIt seems the semantic differences between addFoundNode and addInboundNode were lost in\r\n#29572. My understanding is addFoundNode is for a node you have not contacted directly\r\n(and are unsure if is available) whereas addInboundNode is for adding nodes that have\r\ncontacted the local node and we can verify they are active.\r\n\r\nhandleAddNode seems to be the consolidation of those two methods, yet it bumps the node in\r\nthe bucket (updating it's IP addr) even if the node was not an inbound. This PR fixes\r\nthis. It wasn't originally caught in tests like TestTable_addSeenNode because the\r\nmanipulation of the node object actually modified the node value used by the test.\r\n\r\nNew logic is added to reject non-inbound updates unless the sequence number of the\r\n(signed) ENR increases. Inbound updates, which are published by the updated node itself,\r\nare always accepted. If an inbound update changes the endpoint, the node will be\r\nrevalidated on an expedited schedule.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-05-28T17:54:55Z",
                "message": "core/state: remove unused error from prefetcher trie method (#29768)\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-05-28T17:52:08Z",
                "message": " eth, eth/downloader: remove references to LightChain, LightSync (#29711)\n\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2024-05-28T16:13:03Z",
                "message": "p2p/discover: fix crash when revalidated node is removed (#29864)\n\nIn #29572, I assumed the revalidation list that the node is contained in could only ever\r\nbe changed by the outcome of a revalidation request. But turns out that's not true: if the\r\nnode gets removed due to FINDNODE failure, it will also be removed from the list it is in.\r\nThis causes a crash.\r\n\r\nThe invariant is: while node is in table, it is always in exactly one of the two lists. So\r\nit seems best to store a pointer to the current list within the node itself."
            },
            {
                "date": "2024-05-28T12:41:11Z",
                "message": "core/rawdb, triedb/pathdb: fix freezer read-only option (#29823)"
            },
            {
                "date": "2024-05-28T12:16:45Z",
                "message": "cmd/geth: update testdata (vulncheck) (#29714)"
            },
            {
                "date": "2024-05-28T12:10:27Z",
                "message": "core/state: fix typos in comments (#29767)"
            },
            {
                "date": "2024-05-28T11:45:16Z",
                "message": "core/vm/runtime: set random to enable merge-opcodes (#29799)"
            },
            {
                "date": "2024-05-28T11:44:40Z",
                "message": "all: improve some error strings (#29842)"
            },
            {
                "date": "2024-05-28T11:12:46Z",
                "message": "eth/tracers: clear error for non-reverting pre-homestead fail (#29824)"
            }
        ],
        "2024-05-27": [
            {
                "date": "2024-05-27T14:26:55Z",
                "message": "eth/downloader: fix flaky test (#29852)\n\nThis pull request fixes the flay test TestSkeletonSyncRetrievals. In this test, we first\r\ntrigger a sync cycle and wait for it to meet certain expectations. We then inject a new\r\nhead and potentially also a new peer, then perform another final sync. The test now\r\nperforms the newPeer addition before launching the final sync, and waits a bit for that\r\npeer to get registered. This fixes the logic race that made the test fail sometimes.\r\n\r\nCo-authored-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>"
            },
            {
                "date": "2024-05-27T11:42:07Z",
                "message": "miner: fix TestBuildPayload sporadic failure (#29853)\n\nminer: fix TestBuildPayload sporadic failure\r\n\r\nCo-authored-by: steven <steven@stevendeMacBook-Pro.local>"
            },
            {
                "date": "2024-05-27T06:39:39Z",
                "message": "core, eth/protocols/snap, internal/ethapi: remove redundant types (#29841)"
            },
            {
                "date": "2024-05-27T06:34:53Z",
                "message": "metrics: fix function comment (#29843)"
            }
        ],
        "2024-05-26": [
            {
                "date": "2024-05-26T09:54:37Z",
                "message": "core/types: clarify set inclusion in comments (#29839)"
            }
        ],
        "2024-05-24": [
            {
                "date": "2024-05-24T09:34:30Z",
                "message": "metrics: add test for `SampleSnapshot.Sum` (#29831)"
            },
            {
                "date": "2024-05-24T09:33:19Z",
                "message": "p2p: fix typos (#29828)"
            },
            {
                "date": "2024-05-24T07:20:05Z",
                "message": "metrics: fix flaky test`TestExpDecaySampleNanosecondRegression` (#29832)"
            }
        ],
        "2024-05-23": [
            {
                "date": "2024-05-23T21:17:51Z",
                "message": "p2p/enode: fix TCPEndpoint (#29827)"
            },
            {
                "date": "2024-05-23T12:27:03Z",
                "message": "p2p/enode: fix endpoint determination for IPv6 (#29801)\n\nenode.Node has separate accessor functions for getting the IP, UDP port and TCP port.\r\nThese methods performed separate checks for attributes set in the ENR.\r\n\r\nWith this PR, the accessor methods will now return cached information, and the endpoint is\r\ndetermined when the node is created. The logic to determine the preferred endpoint is now\r\nmore correct, and considers how 'global' each address is when both IPv4 and IPv6 addresses\r\nare present in the ENR."
            },
            {
                "date": "2024-05-23T12:26:09Z",
                "message": "p2p/discover: improved node revalidation (#29572)\n\nNode discovery periodically revalidates the nodes in its table by sending PING, checking\r\nif they are still alive. I recently noticed some issues with the implementation of this\r\nprocess, which can cause strange results such as nodes dropping unexpectedly, certain\r\nnodes not getting revalidated often enough, and bad results being returned to incoming\r\nFINDNODE queries.\r\n\r\nIn this change, the revalidation process is improved with the following logic:\r\n\r\n- We maintain two 'revalidation lists' containing the table nodes, named 'fast' and 'slow'.\r\n- The process chooses random nodes from each list on a randomized interval, the interval being\r\n  faster for the 'fast' list, and performs revalidation for the chosen node.\r\n- Whenever a node is newly inserted into the table, it goes into the 'fast' list.\r\n  Once validation passes, it transfers to the 'slow' list. If a request fails, or the\r\n  node changes endpoint, it transfers back into 'fast'.\r\n- livenessChecks is incremented by one for successful checks. Unlike the old implementation,\r\n  we will not drop the node on the first failing check. We instead quickly decay the\r\n  livenessChecks give it another chance.\r\n- Order of nodes in bucket doesn't matter anymore.\r\n\r\nI am also adding a debug API endpoint to dump the node table content.\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
            },
            {
                "date": "2024-05-23T10:34:34Z",
                "message": "metrics: fix out of range error message (#29821)"
            },
            {
                "date": "2024-05-23T09:56:32Z",
                "message": "Makefile: add fmt, update help (#29777)"
            },
            {
                "date": "2024-05-23T08:55:54Z",
                "message": "eth/tracers: fix json logger for evm blocktest (#29795)"
            },
            {
                "date": "2024-05-23T08:41:51Z",
                "message": "internal/ethapi: fix typos (#29784)\n\nFix typos in api.go"
            }
        ],
        "2024-05-21": [
            {
                "date": "2024-05-21T16:27:36Z",
                "message": "eth/tracers: fix basefee context for traceBlock (#29811)\n\nThis fixes an issue for `debug_traceBlock*` methods where the BASEFEE opcode was returning always 0. This caused the method return invalid results.\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            },
            {
                "date": "2024-05-21T11:53:34Z",
                "message": "trie: update the `valid` function comments (#29809)"
            }
        ],
        "2024-05-16": [
            {
                "date": "2024-05-16T09:58:35Z",
                "message": "trie, eth/protocols/snap: sanitize the committed node data (#29485)"
            }
        ],
        "2024-05-15": [
            {
                "date": "2024-05-15T12:23:24Z",
                "message": "core: move balanceCheck addition in buyGas (#29762)\n\nIt's a bit confusing to add msg.value into the balanceCheck within the conditional.\r\nNo impact on block validation since GasFeeCap is always set when processing transactions."
            }
        ],
        "2024-05-14": [
            {
                "date": "2024-05-14T13:46:11Z",
                "message": ".github: upgrade to action versions with node20 (#29776)\n\n* github: upgrade checkout action to version with node20\r\n\r\n* Update go.yml\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-05-14T13:04:32Z",
                "message": "core: deploy EIP-4788 contract in dev mode genesis (#29655)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-05-14T12:54:49Z",
                "message": "core/state: remove useless operation (#29769)"
            }
        ],
        "2024-05-13": [
            {
                "date": "2024-05-13T13:34:29Z",
                "message": "tests: update tests (#29730)"
            },
            {
                "date": "2024-05-13T12:47:45Z",
                "message": "core/state: blocking prefetcher on term signal, parallel updates (#29519)\n\n* core/state: trie prefetcher change: calling trie() doesn't stop the associated subfetcher\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>\r\n\r\n* core/state: improve prefetcher\r\n\r\n* core/state: restore async prefetcher stask scheduling\r\n\r\n* core/state: finish prefetching async and process storage updates async\r\n\r\n* core/state: don't use the prefetcher for missing snapshot items\r\n\r\n* core/state: remove update concurrency for Verkle tries\r\n\r\n* core/state: add some termination checks to prefetcher async shutdowns\r\n\r\n* core/state: differentiate db tries and prefetched tries\r\n\r\n* core/state: teh teh teh\r\n\r\n---------\r\n\r\nCo-authored-by: Jared Wasinger <j-wasinger@hotmail.com>\r\nCo-authored-by: Martin HS <martin@swende.se>\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2024-05-10": [
            {
                "date": "2024-05-10T18:13:11Z",
                "message": "cmd, core, params, trie: add verkle access witness gas charging (#29338)\n\nImplements some of the changes required to charge and do gas accounting in verkle testnet."
            },
            {
                "date": "2024-05-10T17:48:14Z",
                "message": "core, beacon, ethdb: fix typos (#29748)\n\n* core, beacon, ethdb: fix typos\r\n\r\n* revert file that can't be changed"
            },
            {
                "date": "2024-05-10T17:44:07Z",
                "message": "event: fix typo (#29749)\n\ntypo: of -> or"
            },
            {
                "date": "2024-05-10T07:57:38Z",
                "message": "core/state: remove slot dirtyness if it's set back to origin value (#29731)\n\n* core/state: remove slot dirtiness if it's set back to origin value\r\n\r\n* core/state: suggestion from martin"
            }
        ],
        "2024-05-09": [
            {
                "date": "2024-05-09T14:07:32Z",
                "message": "params: gofmt"
            },
            {
                "date": "2024-05-09T14:05:42Z",
                "message": ".travis.yml: disable normal unit tests in cron job (#29746)"
            },
            {
                "date": "2024-05-09T10:40:37Z",
                "message": "params: begin v1.14.4 release cycle"
            },
            {
                "date": "2024-05-09T10:34:54Z",
                "message": "params: release go-ethereum v1.14.3 stable"
            }
        ],
        "2024-05-08": [
            {
                "date": "2024-05-08T18:46:54Z",
                "message": ".travis.yml: restore PPA condition and bump timeouts (#29742)"
            },
            {
                "date": "2024-05-08T18:28:05Z",
                "message": ".travis.yml: enable PPA upload on push and fix apt-get command (#29741)"
            },
            {
                "date": "2024-05-08T14:27:44Z",
                "message": "params: begin v1.14.3 release cycle"
            },
            {
                "date": "2024-05-08T14:26:01Z",
                "message": "params: release go-ethereum v1.14.2 stable"
            },
            {
                "date": "2024-05-08T12:34:58Z",
                "message": ".travis.yml: fix package install on PPA builder"
            },
            {
                "date": "2024-05-08T12:30:18Z",
                "message": "params: begin v1.14.2 release cycle"
            },
            {
                "date": "2024-05-08T12:28:40Z",
                "message": "params: release go-ethereum v1.14.1 stable"
            },
            {
                "date": "2024-05-08T09:33:07Z",
                "message": ".travis.yml: fix apt-get options (#29734)"
            },
            {
                "date": "2024-05-08T09:08:55Z",
                "message": ".travis.yml: fix install of gcc-multilib (#29733)"
            },
            {
                "date": "2024-05-08T06:43:33Z",
                "message": "core: use in-memory freezer for tests (#29720)\n\n* core: simplify chain tests\r\n\r\n* core, eth, cmd: use in-memory freezer for tests\r\n\r\n* core: restore tests"
            }
        ],
        "2024-05-07": [
            {
                "date": "2024-05-07T20:08:29Z",
                "message": "build: upgrade to go 1.22.3 (#29725)"
            },
            {
                "date": "2024-05-07T19:24:58Z",
                "message": "travis: use ubuntu noble (24.04) instead of bionic (18.04) (#29723)"
            },
            {
                "date": "2024-05-07T12:27:14Z",
                "message": "eth/gasestimator: include blobs in virtual balance computation (#29703)\n\nFixes #29702\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-05-07T07:25:15Z",
                "message": "eth/gasprice: add query limit for FeeHistory to defend DDOS attack (#29644)\n\n* eth/gasprice: add query limit for FeeHistory to defend DDOS attack\r\n\r\n* fix return values after cherry-pick\r\n\r\n---------\r\n\r\nCo-authored-by: Eric <45141191+zlacfzy@users.noreply.github.com>"
            }
        ],
        "2024-05-06": [
            {
                "date": "2024-05-06T11:42:22Z",
                "message": "ethdb/pebble: fix pebble metrics registration (#29699)\n\nethdb/pebble: use GetOrRegister instead of NewRegistered when creating metrics"
            },
            {
                "date": "2024-05-06T11:28:53Z",
                "message": "core, core/state: move TriesInMemory to state package (#29701)"
            },
            {
                "date": "2024-05-06T11:21:55Z",
                "message": "core/tracing: add system call callback when performing `ProcessBeaconBlockRoot` (#29355)\n\nAdded a start/end system where tracer can be notified that processing of some Ethereum system calls is starting processing and also notifies it when the processing has completed.\r\n\r\nDoing a start/end for system call will enable tracers to \"route\" incoming next tracing events to go to a separate bucket than other EVM calls. Those not interested by this fact can simply avoid registering the hooks.\r\n\r\nThe EVM call is going to be traced normally afterward between the signals provided by those 2 new hooks but outside of a transaction context OnTxStart/End. That something implementors of live tracers will need to be aware of (since only \"trx tracers\" are not concerned by ProcessBeaconRoot).\r\n\r\n---------\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            },
            {
                "date": "2024-05-06T11:17:19Z",
                "message": "p2p/discover/v5wire: add tests for invalid handshake and auth data size (#29708)"
            }
        ],
        "2024-05-02": [
            {
                "date": "2024-05-02T10:26:07Z",
                "message": "core/rawdb: fix ancient root folder (#29697)"
            },
            {
                "date": "2024-05-02T09:35:45Z",
                "message": "trie/pathdb: preallocate map capacity (#29690)\n\n* preallocated capacity for map's certain usege of memory\r\n\r\n* preallocated capacity for map's certain usege of memory"
            },
            {
                "date": "2024-05-02T08:21:11Z",
                "message": "params: fix misleading comments (#29684)"
            },
            {
                "date": "2024-05-02T08:18:59Z",
                "message": "core/vm: remove redundant error checks (#29692)"
            },
            {
                "date": "2024-05-02T08:18:27Z",
                "message": "core/state: parallelise parts of state commit (#29681)\n\n* core/state, internal/workerpool: parallelize parts of state commit\r\n\r\n* core, internal: move workerpool into syncx\r\n\r\n* core/state: use errgroups, commit accounts concurrently\r\n\r\n* core: resurrect detailed commit timers to almost-accuracy"
            }
        ],
        "2024-04-30": [
            {
                "date": "2024-04-30T14:25:35Z",
                "message": "core/rawdb, trie: improve db APIs for accessing trie nodes (#29362)\n\n* core/rawdb, trie: improve db APIs for accessing trie nodes\r\n\r\n* triedb/pathdb: fix"
            },
            {
                "date": "2024-04-30T13:47:21Z",
                "message": "accounts, cmd/geth, core: close opened files (#29598)\n\n* fix: open file used up but not closed\r\n\r\n* feat: more same case\r\n\r\n* feat: accept conversation"
            },
            {
                "date": "2024-04-30T13:46:53Z",
                "message": "eth/downloader:  purge pre-merge sync code (#29281)\n\nThis PR removes pre-merge sync logic from the downloader. Now-irrelevant tests are removed and others have been updated."
            },
            {
                "date": "2024-04-30T12:55:08Z",
                "message": "all: refactor so `NewBlock`, `WithBody` take `types.Body` (#29482)\n\n* all: refactor so NewBlock(..) and WithBody(..) take a types.Body\r\n\r\n* core: fixup comments, remove txs != receipts panic\r\n\r\n* core/types: add empty withdrawls to body if len == 0"
            },
            {
                "date": "2024-04-30T12:48:54Z",
                "message": "internal/ethapi: listen to ctx cancellation in access list (#29686)"
            },
            {
                "date": "2024-04-30T12:35:48Z",
                "message": "core/vm: add subgroup checks for mul/mulexp for G1/G2 (#29637)"
            },
            {
                "date": "2024-04-30T12:33:22Z",
                "message": "eth/tracers/native: fix flatCallTracer Stop() bug (#29623)\n\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            },
            {
                "date": "2024-04-30T12:08:13Z",
                "message": "core/vm: remove a redundant zero check in opAddmod (#29672)"
            },
            {
                "date": "2024-04-30T11:51:04Z",
                "message": "trie/trienode: minor speedup in nodeset merging (#29683)"
            },
            {
                "date": "2024-04-30T09:33:22Z",
                "message": "core/rawdb: implement in-memory freezer (#29135)"
            },
            {
                "date": "2024-04-30T09:22:57Z",
                "message": "cmd/utils: require TTD and difficulty to be zero at genesis for dev mode (#29579)"
            },
            {
                "date": "2024-04-30T09:22:02Z",
                "message": "params: print time value instead of pointer in ConfigCompatError (#29514)"
            },
            {
                "date": "2024-04-30T09:19:59Z",
                "message": "cmd/evm/internal/t8ntool, core: prealloc map sizes where possible (#29620)\n\nset cap for map in a certain scenario"
            }
        ],
        "2024-04-29": [
            {
                "date": "2024-04-29T17:44:41Z",
                "message": "p2p/simulations/adapters: use maps.Clone (#29626)"
            }
        ],
        "2024-04-28": [
            {
                "date": "2024-04-28T11:03:03Z",
                "message": "params: clarify consensus engine config `String`s (#29643)\n\nDefine these on a value receiever so that nil is shown differently."
            }
        ],
        "2024-04-26": [
            {
                "date": "2024-04-26T15:35:52Z",
                "message": "core/state: move metrics out of state objects (#29665)"
            },
            {
                "date": "2024-04-26T12:24:40Z",
                "message": "core/state: revert pending storage updates if they revert to original (#29661)"
            }
        ],
        "2024-04-25": [
            {
                "date": "2024-04-25T11:07:39Z",
                "message": "build: drop trusty from PPA builds, EOL and incompatible (#29651)\n\n* build: drop trusty from PPA builds, EOL and incompatible\r\n\r\n* build: add Ubuntu Noble PPA build target"
            },
            {
                "date": "2024-04-25T09:27:36Z",
                "message": "travis: revert the PPA fix hot-build, it works (#29649)"
            },
            {
                "date": "2024-04-25T09:00:59Z",
                "message": "travis: temporarilly enable PPA builds for testing (#29648)"
            },
            {
                "date": "2024-04-25T08:50:25Z",
                "message": "build: build all the builders to build all the builders (#29647)\n\n* build: build all the builders to build all the builders\r\n\r\n* build: tweak the indexes a bit to make them consistent"
            },
            {
                "date": "2024-04-25T07:56:25Z",
                "message": "core/state: better randomized testing (postcheck) on journalling (#29627)\n\nThis PR fixes some flaws with the existing tests.\r\n\r\nThe randomized testing (TestSnapshotRandom) executes a series of steps which modify the state and create journal-events. Later on, we compare the forward-going-states against the backwards-unrolling-journal-states, and check that they are identical.\r\n\r\nThe \"identical\" check is performed using various accessors. It turned out that we failed to check some things: \r\n- the accesslist contents\r\n- the transient storage contents\r\n- the 'newContract' flag\r\n- the dirty storage map\r\n\r\nThis change adds these new checks"
            },
            {
                "date": "2024-04-25T06:40:29Z",
                "message": "eth/protocols/eth,p2p/discover: remove unnecessary checks (#29590)\n\nfix useless condition"
            },
            {
                "date": "2024-04-25T05:47:29Z",
                "message": "internal/ethapi: typo (#29636)"
            }
        ],
        "2024-04-24": [
            {
                "date": "2024-04-24T15:45:24Z",
                "message": "core/state: storage journal entry should revert dirtyness too (#29641)\n\nCurrently our state journal tracks each storage update to a contract, having the ability to revert those changes to the previously set value.\r\n\r\nFor the very first modification however, it behaves a bit wonky. Reverting the update doesn't actually remove the dirty-ness of the slot, rather leaves it as \"change this slot to it's original value\". This can cause issues down the line with for example write witnesses needing to gather an unneeded proof.\r\n\r\nThis PR modifies the storageChange journal entry to not only track the previous value of a slot, but also whether there was any previous value at all set in the current execution context. In essence, the PR changes the semantic of storageChange so it does not simply track storage changes, rather it tracks dirty storage changes, an important distinction for being able to cleanly revert the journal item."
            },
            {
                "date": "2024-04-24T12:27:58Z",
                "message": "trie, consensus/clique: use maps.Clone (#29616)"
            },
            {
                "date": "2024-04-24T12:04:20Z",
                "message": "trie: preallocate capacity for fields slice (#29614)\n\ntrie: Preallocate capacity for fields slice"
            },
            {
                "date": "2024-04-24T09:59:06Z",
                "message": " core/state: remove account reset operation v2 (#29520)\n\n* core/state, tests: remove account reset operation\r\n\r\n* core/state, core/vm: implement createcontract journal event\r\n\r\n* core/state: make createcontract not emit dirtied account, unskip tests\r\n\r\n* core/state: add createcontract to journal fuzzing\r\n\r\n* core/state: fix journal\r\n\r\n* core/state: address comments\r\n\r\n* core/state: remove useless code\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2024-04-24T08:05:10Z",
                "message": "params: begin 1.14.1 release cycle"
            },
            {
                "date": "2024-04-24T08:02:49Z",
                "message": "params: release Geth v1.14.0"
            },
            {
                "date": "2024-04-24T07:07:39Z",
                "message": "eth/downloader: fix case where skeleton reorgs below the filled block (#29358)\n\nThis change adds a testcase and fixes a corner-case in the skeleton sync.\r\n\r\nWith this change, when doing the skeleton cleanup, we check if the filled header is acually within the range of what we were meant to backfill. If not, it means the backfill was a noop (possibly because we started and stopped it so quickly that it didn't have time to do any meaningful work). In that case, just don't clean up anything.\r\n\r\n---------\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2024-04-24T05:58:05Z",
                "message": "eth, eth/tracers: process beacon root before transactions (#29402)\n\nThe beacon root when applied in `state_processor.go` is performed right before executing transaction. That means that contract reliying on this value would query the same value found in the block header.\r\n\r\nIn that spirit, it means that any tracing/operation relying on state data which touches transaction must have updated the beacon root before any transaction processing."
            },
            {
                "date": "2024-04-24T05:54:59Z",
                "message": "core/tracing: Add OnClose Trace Hook (#29629)\n\nThe OnClose trace hook is being triggered on blockchain Stop, so as tracers can release any resources."
            },
            {
                "date": "2024-04-24T05:53:16Z",
                "message": "cmd/geth, cmd/utils: rename config and flag to` VMTraceJsonConfig` (#29573)\n\nrenames the yaml config field VMTraceConfig to VMTraceJsonConfig, in order to be consistent with the renaming of the CLI flag."
            }
        ],
        "2024-04-23": [
            {
                "date": "2024-04-23T13:10:24Z",
                "message": "core/vm: fix Prague contracts (#29612)\n\ncore/vm: fix prague contracts"
            },
            {
                "date": "2024-04-23T11:31:32Z",
                "message": "beacon/light: request finality update explicitly when necessary (#29567)\n\nThis PR adds an extra mechanism to sync.HeadSync that tries to retrieve the latest finality update from every server each time it sends an optimistic update in a new epoch (unless we already have a validated finality update attested in the same epoch). \r\n\r\nNote that this is not necessary and does not happen if the new finality update is delivered before the optimistic update. The spec only mandates light_client_finality_update events when a new epoch is finalized. If the chain does not finalize for a while then we might need an explicit request that returns a finality proof that proves the same finality epoch from the latest attested epoch."
            },
            {
                "date": "2024-04-23T10:09:42Z",
                "message": "all: fix various typos (#29600)\n\n* core: fix typo\r\n\r\n* rpc: fix typo\r\n\r\n* snap: fix typo\r\n\r\n* trie: fix typo\r\n\r\n* main: fix typo\r\n\r\n* abi: fix typo\r\n\r\n* main: fix field comment for basicOp"
            },
            {
                "date": "2024-04-23T10:08:02Z",
                "message": "metrics: remove librato (#29624)"
            },
            {
                "date": "2024-04-23T10:06:25Z",
                "message": "miner: fix typos (#29625)"
            },
            {
                "date": "2024-04-23T08:33:36Z",
                "message": "eth/catalyst, trie/pathdb: fix flaky tests (#29571)\n\nThis change fixes three flaky tests `TestEth2AssembleBlock`,`TestEth2NewBlock`, `TestEth2PrepareAndGetPayload` and `TestDisable`.\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2024-04-22": [
            {
                "date": "2024-04-22T17:00:42Z",
                "message": "core: remove bad block checks (#29609)"
            },
            {
                "date": "2024-04-22T11:19:42Z",
                "message": "beacon/light/sync: print error log if checkpoint retrieval fails (#29532)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-04-22T10:17:06Z",
                "message": "eth: Add eth_blobBaseFee RPC and blob fields to eth_feeHistory (#29140)\n\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-04-22T09:56:54Z",
                "message": "go.mod: update golang/x repos (#29604)"
            },
            {
                "date": "2024-04-22T08:31:17Z",
                "message": "eth/filters: remove support for pending logs (#29574)\n\nThis change removes support for subscribing to pending logs. \r\n\r\n\"Pending logs\" were always an odd feature, because it can never be fully reliable. When support for it was added many years ago, the intention was for this to be used by wallet apps to show the 'potential future token balance' of accounts, i.e. as a way of notifying the user of incoming transfers before they were mined. In order to generate the pending logs, the node must pick a subset of all public mempool transactions, execute them in the EVM, and then dispatch the resulting logs to API consumers."
            },
            {
                "date": "2024-04-22T08:13:03Z",
                "message": "cmd/geth: remove unused parameter (#29602)"
            }
        ],
        "2024-04-21": [
            {
                "date": "2024-04-21T09:14:13Z",
                "message": "build: fix string compare for SortFunc (#29595)"
            },
            {
                "date": "2024-04-21T09:13:36Z",
                "message": "p2p/discover: fix test error messages (#29592)"
            }
        ],
        "2024-04-19": [
            {
                "date": "2024-04-19T11:46:43Z",
                "message": "core/vm: add KZG benchmark (#29583)"
            },
            {
                "date": "2024-04-19T08:07:52Z",
                "message": "tests: define cancun-to-prague at 15K chainconig (#29557)\n\ntests: add cancun->prague config"
            },
            {
                "date": "2024-04-19T07:58:14Z",
                "message": "eth/catalyst: fix typo (#29580)"
            }
        ],
        "2024-04-18": [
            {
                "date": "2024-04-18T07:08:25Z",
                "message": "core/vm: enable bls-precompiles for Prague (#29552)\n\nenables the bls-contracts on the \"Prague\" config, so that the testing-team can activate them to make tests."
            },
            {
                "date": "2024-04-18T06:48:50Z",
                "message": "core: remove unused fields (#29569)"
            },
            {
                "date": "2024-04-18T06:21:23Z",
                "message": "eth/ethconfig: regenerate autogen files (#29559)\n\neth/ethconfig/gen_config.go : go generate fix"
            }
        ],
        "2024-04-17": [
            {
                "date": "2024-04-17T15:07:28Z",
                "message": "beacon/blsync: proceed with empty finalized hash if proof is not expected soon (#29449)\n\n* beacon/blsync: proceed with empty finalized hash if proof is not expected soon\r\n\r\n* Update beacon/blsync/block_sync.go\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\n\r\n* beacon/blsync: fixed linter warning\r\n\r\n* Update beacon/blsync/block_sync.go\r\n\r\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>"
            },
            {
                "date": "2024-04-17T11:55:31Z",
                "message": "core/state: fix bug in statedb.Copy and remove unnecessary preallocation (#29563)\n\nThis change removes an unnecessary preallocation and fixes a flaw with no-op copies of some parts of the statedb"
            },
            {
                "date": "2024-04-17T06:24:30Z",
                "message": "trie/utils: simplify codeChunkIndex (#29480)\n\nminor simplification to the code"
            },
            {
                "date": "2024-04-17T05:52:08Z",
                "message": "ethdb/pebble: print warning log if pebble performance degrades (#29478)"
            }
        ],
        "2024-04-16": [
            {
                "date": "2024-04-16T12:57:57Z",
                "message": "core/vm: refactor push-functions to use `min` builtin (#29515)\n\n* optimize-push\r\n\r\n* revert push1 change\r\n\r\n* Update instructions.go\r\n\r\n* core/vm: go format\r\n\r\n* core/vm: fix nit\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2024-04-16T12:44:00Z",
                "message": "all: fix various typos (#29542)\n\n* core/rawdb: fix typos\r\n\r\n* accounts/abi: fix typos\r\n\r\n* metrics: fix typo\r\n\r\n* beacon: fix typo\r\n\r\n* crypto: fix typo\r\n\r\n* rpc: fix typo\r\n\r\n* rpc: fix typo"
            },
            {
                "date": "2024-04-16T12:42:16Z",
                "message": "core: go fmt (#29544)"
            },
            {
                "date": "2024-04-16T12:32:50Z",
                "message": "go.mod: clean up indirection (#29553)"
            },
            {
                "date": "2024-04-16T12:31:19Z",
                "message": "c.d/utils: rename vmtrace.config to vmtrace.jsonconfig (#29554)\n\nrename vmtrace.config to vmtrace.jsonconfig\r\n\r\nfor consinstency with t8ntool trace.jsonconfig"
            },
            {
                "date": "2024-04-16T09:21:20Z",
                "message": "eth/catalyst: fix log (#29549)\n\nlog:output the correct variable\r\n\r\nCo-authored-by: steven <steven@stevendeMacBook-Pro.local>"
            },
            {
                "date": "2024-04-16T08:53:43Z",
                "message": "core/vm: update gascosts for BLS12-381 + use gnark instead of kilic (#29441)\n\nThis PR updates the bls contracts from our internal implementation which is an unmaintained fork of the kilic library to the gnark-crypto library that is actively maintained by consensys.\r\n\r\nIt also updates the gas-costs according to the EIP"
            },
            {
                "date": "2024-04-16T08:38:25Z",
                "message": "rpc: close Clients in tests (#29512)"
            },
            {
                "date": "2024-04-16T08:37:18Z",
                "message": "rpc: implement Unwrap() for wsHandshakeError (#29522)"
            },
            {
                "date": "2024-04-16T07:05:36Z",
                "message": "core, eth/protocols/snap, trie: fix cause for snap-sync corruption, implement gentrie (#29313)\n\nThis pull request defines a gentrie for snap sync purpose.\r\n\r\nThe stackTrie is used to generate the merkle tree nodes upon receiving a state batch. Several additional options have been added into stackTrie to handle incomplete states (either missing states before or after).\r\n\r\nIn this pull request, these options have been relocated from stackTrie to genTrie, which serves as a wrapper for stackTrie specifically for snap sync purposes.\r\n\r\nFurther, the logic for managing incomplete state has been enhanced in this change. Originally, there are two cases handled:\r\n\r\n-    boundary node filtering\r\n-    internal (covered by extension node) node clearing\r\n\r\nThis changes adds one more:\r\n \r\n- Clearing leftover nodes on the boundaries.\r\n\r\nThis feature is necessary if there are leftover trie nodes in database, otherwise node inconsistency may break the state healing."
            }
        ],
        "2024-04-15": [
            {
                "date": "2024-04-15T15:35:35Z",
                "message": "eth/filters: enforce topic-limit early on filter criterias (#29535)\n\nThis PR adds a limit of 1000 to the \"inner\" topics in a filter-criteria"
            },
            {
                "date": "2024-04-15T12:58:17Z",
                "message": "p2p/nat: fix typos in comments (#29536)"
            },
            {
                "date": "2024-04-15T12:54:51Z",
                "message": "core/rawdb: add sanity-limit to header accessor (#29534)"
            },
            {
                "date": "2024-04-15T06:40:42Z",
                "message": "cmd/utils: fix typo in comment (#29528)"
            },
            {
                "date": "2024-04-15T06:34:31Z",
                "message": "all: remove duplicate word in comments (#29531)\n\nThis change removes some duplicate words in in comments"
            }
        ],
        "2024-04-11": [
            {
                "date": "2024-04-11T11:06:49Z",
                "message": "cmd: fix some typos in readmes (#29405)\n\n* Update README.md\r\n\r\nupdated for readability\r\n\r\n* Update rules.md\r\n\r\nUpdated for readability and typos"
            },
            {
                "date": "2024-04-11T08:30:15Z",
                "message": "rpc: fix comment grammar (#29507)"
            }
        ],
        "2024-04-10": [
            {
                "date": "2024-04-10T09:02:45Z",
                "message": "eth/protocols/snap: skip retrieval for completed storages (#29378)\n\n* eth/protocols/snap: skip retrieval for completed storages\r\n\r\n* eth/protocols/snap: address comments from peter\r\n\r\n* eth/protocols/snap: add comments"
            }
        ],
        "2024-04-09": [
            {
                "date": "2024-04-09T10:14:30Z",
                "message": "all: use big.Sign to compare with zero (#29490)"
            },
            {
                "date": "2024-04-09T10:12:02Z",
                "message": "core/tracing: add changelog (#29388)\n\n\r\nCo-authored-by: Matthieu Vachon <matthieu.o.vachon@gmail.com>"
            },
            {
                "date": "2024-04-09T06:51:54Z",
                "message": "all: use timer instead of time.After in loops, to avoid memleaks (#29241)\n\ntime.After is equivalent to NewTimer(d).C, and does not call Stop if the timer is no longer needed. This can cause memory leaks. This change changes many such occations to use NewTimer instead, and calling Stop once the timer is no longer needed."
            },
            {
                "date": "2024-04-09T06:37:18Z",
                "message": "core: add txlookup lock (#29343)\n\nThis change adds a lock to the transaction lookup cache, to avoid the case where reorgs make the lookup return inconsistent results."
            },
            {
                "date": "2024-04-09T06:33:36Z",
                "message": "core/vm: move bls precompiles to correct addresses (#29445)\n\ncore: make bls precompiled contract use the correct address as in eip"
            },
            {
                "date": "2024-04-09T06:27:13Z",
                "message": "rlp: replace reflect.PtrTo with reflect.PointerTo (#29488)\n\nreflect.PtrTo has been deprecated and superseded by reflect.PointerTo"
            },
            {
                "date": "2024-04-09T06:22:53Z",
                "message": "internal, signer/core: replace path.Join with filepath.Join (#29489)"
            }
        ],
        "2024-04-08": [
            {
                "date": "2024-04-08T13:48:37Z",
                "message": "core/vm: reject contract creation if the storage is non-empty (#28912)\n\nThis change implements EIP-7610, which rejects the contract deployment if the destination has non-empty storage."
            },
            {
                "date": "2024-04-08T11:02:56Z",
                "message": "core: fix typo (#29438)"
            },
            {
                "date": "2024-04-08T11:01:22Z",
                "message": "core: fix dev mode genesis difficulty (#29469)\n\nThe dev mode is nowadays in Merge-mode from genesis, hence the difficulty of the first block should be zero."
            },
            {
                "date": "2024-04-08T10:59:17Z",
                "message": "all: replace fmt.Errorf() with errors.New() if no param required (#29472)"
            },
            {
                "date": "2024-04-08T10:58:37Z",
                "message": "signer/core/apitypes: use slices.Contains (#29474)"
            },
            {
                "date": "2024-04-08T09:29:49Z",
                "message": "all: replace path.Join with filepath.Join (#29479)\n\n* core/rawdb: replace file.Join with filepath.Join\r\n\r\nSigned-off-by: xiaochangbai <704566072@qq.com>\r\n\r\n* internal/build: replace file.Join with filepath.Join\r\n\r\nSigned-off-by: xiaochangbai <704566072@qq.com>\r\n\r\n---------\r\n\r\nSigned-off-by: xiaochangbai <704566072@qq.com>"
            }
        ],
        "2024-04-06": [
            {
                "date": "2024-04-06T10:22:55Z",
                "message": "core/vm: better error-info for vm errors (#29354)"
            },
            {
                "date": "2024-04-06T10:17:41Z",
                "message": "log: default JSON log handler should log all verbosity levels (#29471)\n\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            },
            {
                "date": "2024-04-06T10:16:25Z",
                "message": "eth/tracers: use slices.Contains (#29461)"
            },
            {
                "date": "2024-04-06T10:05:06Z",
                "message": "all: use slices.Contains (#29459)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-04-06T09:09:30Z",
                "message": "common/prque: fix godoc comments (#29460)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2024-04-05": [
            {
                "date": "2024-04-05T19:01:39Z",
                "message": "signer/core/apitypes: fix apitypes breakage due to bitrotted PR (#29470)"
            },
            {
                "date": "2024-04-05T17:29:44Z",
                "message": "signer: implement blob txs sendtxargs, enable blobtx-signing (#28976)\n\nThis change makes it possible to sign blob transactions"
            }
        ],
        "2024-04-04": [
            {
                "date": "2024-04-04T14:30:27Z",
                "message": "beacon/types: enforce fork order based on known forks list (#29380)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-04-04T13:52:38Z",
                "message": "trie/utils: change Div+Mod to DivMod (#29413)\n\n* trie/utils: change Div+Mod to DivMod\r\n\r\n* trie/utils: gofmt"
            },
            {
                "date": "2024-04-04T13:51:10Z",
                "message": "core/txpool: repair the limbo Billy too on unclean shutdowns (#29451)"
            },
            {
                "date": "2024-04-04T13:50:31Z",
                "message": "core/types: use new atomic types in caches (#29411)\n\n* use generic atomic types in tx caches\r\n\r\n* use generic atomic types in block caches\r\n\r\n* eth/catalyst: avoid copying tx in test\r\n\r\n---------\r\n\r\nCo-authored-by: lmittmann <lmittmann@users.noreply.github.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-04-04T10:26:10Z",
                "message": "internal/debug: convert legacy log level value in debug_verbosity (#29356)"
            },
            {
                "date": "2024-04-04T10:24:49Z",
                "message": "p2p/discover: using slices.Contains (#29395)"
            },
            {
                "date": "2024-04-04T10:20:54Z",
                "message": "crypto/signify: close tmp key file in test (#29444)"
            },
            {
                "date": "2024-04-04T10:19:48Z",
                "message": "p2p/dnsdisc: using clear builtin func (#29418)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-04-04T09:59:54Z",
                "message": "log: using maps.Clone (#29392)"
            },
            {
                "date": "2024-04-04T09:58:44Z",
                "message": "beacon/engine: using slices.Contains (#29396)"
            },
            {
                "date": "2024-04-04T09:00:27Z",
                "message": "build: upgrade -dlgo version to Go 1.22.2 (#29448)"
            }
        ],
        "2024-04-03": [
            {
                "date": "2024-04-03T06:08:52Z",
                "message": "eth: simplify peer counting logic (#29420)"
            }
        ],
        "2024-04-02": [
            {
                "date": "2024-04-02T19:18:28Z",
                "message": "p2p: add inbound and outbound peers metric (#29424)"
            },
            {
                "date": "2024-04-02T19:17:34Z",
                "message": "eth/fetcher: using slices.Contains (#29383)"
            },
            {
                "date": "2024-04-02T13:45:25Z",
                "message": "common/lru: use clear builtin (#29399)"
            },
            {
                "date": "2024-04-02T12:56:12Z",
                "message": "core/state: use maps.Clone (#29365)\n\ncore: using maps.Clone"
            },
            {
                "date": "2024-04-02T12:25:06Z",
                "message": "cmd/evm: reopen the statedb for dumping (#29437)"
            },
            {
                "date": "2024-04-02T09:25:57Z",
                "message": "eth/filter: using atomic.Pointer instead of atomic.Value (#29435)"
            },
            {
                "date": "2024-04-02T09:25:19Z",
                "message": "rpc: fix ipc max path size (#29385)"
            },
            {
                "date": "2024-04-02T08:47:15Z",
                "message": "rlp: using maps.Clone (#29434)"
            },
            {
                "date": "2024-04-02T07:05:53Z",
                "message": "log: replace the outdated link (#29412)"
            }
        ],
        "2024-04-01": [
            {
                "date": "2024-04-01T12:53:56Z",
                "message": "eth/tracers: fix base fee and set blob fee in tests (#29376)\n\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            },
            {
                "date": "2024-04-01T03:45:56Z",
                "message": "core/types: using maps.Clone (#29398)"
            },
            {
                "date": "2024-04-01T03:42:50Z",
                "message": "trie: using maps.Clone (#29419)"
            }
        ],
        "2024-03-29": [],
        "2024-03-30": [],
        "2024-03-31": [],
        "2024-04-07": [],
        "2024-04-12": [],
        "2024-04-13": [],
        "2024-04-14": [],
        "2024-04-20": [],
        "2024-04-27": [],
        "2024-05-01": [],
        "2024-05-03": [],
        "2024-05-04": [],
        "2024-05-05": [],
        "2024-05-11": [],
        "2024-05-12": [],
        "2024-05-17": [],
        "2024-05-18": [],
        "2024-05-19": [],
        "2024-05-20": [],
        "2024-05-22": [],
        "2024-05-25": [],
        "2024-06-01": [],
        "2024-06-02": [],
        "2024-06-13": [],
        "2024-06-15": [],
        "2024-06-16": [],
        "2024-06-22": [],
        "2024-06-23": [],
        "2024-06-24": [],
        "2024-06-26": [],
        "2024-06-29": [],
        "2024-06-30": [],
        "2024-07-04": [],
        "2024-07-05": [],
        "2024-07-06": [],
        "2024-07-07": [],
        "2024-07-08": [],
        "2024-07-10": [],
        "2024-07-12": [],
        "2024-07-13": [],
        "2024-07-14": [],
        "2024-07-17": [],
        "2024-07-19": [],
        "2024-07-20": [],
        "2024-07-21": [],
        "2024-03-28": [
            {
                "date": "2024-03-28T16:35:40Z",
                "message": "eth/tracers/js: consistent name for method receivers (#29375)"
            },
            {
                "date": "2024-03-28T13:09:21Z",
                "message": "eth/tracers/logger: using maps.Equal (#29384)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-03-28T11:13:41Z",
                "message": "core/state: using slices.Clone (#29366)"
            },
            {
                "date": "2024-03-28T11:07:38Z",
                "message": "p2p/dnsdisc: using maps.Copy (#29377)"
            },
            {
                "date": "2024-03-28T11:06:57Z",
                "message": "core: remove unused code (#29381)"
            },
            {
                "date": "2024-03-28T11:06:44Z",
                "message": "ethdb/dbtest: replace reflect.DeepEqual with slices.Equal (#29382)"
            }
        ],
        "2024-03-27": [
            {
                "date": "2024-03-27T15:12:57Z",
                "message": "t8ntool: add optional call frames to json logger (#29353)\n\nAdds a flag `--trace.callframes` to t8n which will log info when entering or exiting a call frame in addition to the execution steps.\r\n\r\n---------\r\n\r\nCo-authored-by: Mario Vega <marioevz@gmail.com>"
            },
            {
                "date": "2024-03-27T12:16:29Z",
                "message": "accounts/keystore: fix typos in comments (#29336)"
            },
            {
                "date": "2024-03-27T12:15:57Z",
                "message": "beacon/engine: Fix json param name in GetClientVersionV1 (#29351)\n\nFix json param name"
            },
            {
                "date": "2024-03-27T01:35:33Z",
                "message": "eth/protocols/snap: check storage root existence for hash scheme (#29341)"
            }
        ],
        "2024-03-26": [
            {
                "date": "2024-03-26T20:25:41Z",
                "message": "core: add an end-to-end verkle test (#29262)\n\ncore: add a simple verkle test\n\ntriedb, core: skip hash comparison in verkle\n\ncore: remove legacy daoFork logic in verkle chain maker\n\nfix: nil pointer in tests\n\ntriedb/pathdb: add blob hex\n\ncore: less defensive\n\nCo-authored-by: Ignacio Hagopian <jsign.uy@gmail.com>\nCo-authored-by: Martin HS <martin@swende.se>\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2024-03-26T20:01:28Z",
                "message": "all: fix mismatched names in comments (#29348)\n\n* all: fix mismatched names in comments\r\n\r\n* metrics: fix mismatched name in UpdateIfGt"
            },
            {
                "date": "2024-03-26T14:21:39Z",
                "message": "core/state: perform updates before deletions when mutating tries (#29201)\n\nThis addresses an edge-case (detailed in the code comment) where the computation of the intermediate trie root would force the unnecessary resolution of a hash node. The change makes it so that when we process changes from a block, we first process trie-updates and afterwards process trie-deletions."
            },
            {
                "date": "2024-03-26T14:04:15Z",
                "message": "tests: fix panic via state test runner using json logger (#29349)\n\n* tests: fix panic via state test runner using json logger\r\n\r\n* tests: also invoke OnTxEnd"
            },
            {
                "date": "2024-03-26T11:26:44Z",
                "message": "eth/catalyst: fix flaw in withdrawal-gathering in simulated beacon (#29344)\n\nreturn after reaching maxCount"
            },
            {
                "date": "2024-03-26T04:01:13Z",
                "message": "Removes some leftover `err` check (#29339)\n\nBefore, `ToMessage` was returning both the resulting `Message` and an error while no error is returned now.\r\n\r\nThose error checks were probably leftover from the past."
            }
        ],
        "2024-03-25": [
            {
                "date": "2024-03-25T19:28:55Z",
                "message": "beacon/blsync: fixed blsync command line params (#29335)"
            },
            {
                "date": "2024-03-25T19:27:50Z",
                "message": "beacon/light/api: improve handling of event stream setup failures (#29308)\n\nThe StartHeadListener method will only be called once. So it can't just make one attempt\r\nto connect to the eventsource endpoint, it has to keep trying. Note that once the stream\r\nis established, the eventsource implementation itself will keep retrying."
            },
            {
                "date": "2024-03-25T17:03:44Z",
                "message": "ethclient/simulated: clean up Node resources when simulated backend is closed (#29316)"
            },
            {
                "date": "2024-03-25T06:50:18Z",
                "message": "all: remove dependency on golang.org/exp (#29314)\n\nThis change includes a leftovers from https://github.com/ethereum/go-ethereum/pull/29307\r\n- using the [new `slices` package](https://go.dev/doc/go1.21#slices) and\r\n- using the [new `cmp.Ordered`](https://go.dev/doc/go1.21#cmp) instead of exp `constraints.Ordered`"
            },
            {
                "date": "2024-03-25T02:16:44Z",
                "message": "eth: fix typo (#29320)"
            }
        ],
        "2024-03-24": [
            {
                "date": "2024-03-24T12:51:34Z",
                "message": "metrics/influxdb: skip float64-precision-dependent tests on arm64 (#29047)\n\nmetrics/influxdb: fix failed cases caused by float64 precision on arm64"
            }
        ],
        "2024-03-22": [
            {
                "date": "2024-03-22T17:53:53Z",
                "message": "eth/tracers: live chain tracing with hooks (#29189)\n\nHere we add a Go API for running tracing plugins within the main block import process. \r\n\r\nAs an advanced user of geth, you can now create a Go file in eth/tracers/live/, and within\r\nthat file register your custom tracer implementation. Then recompile geth and select your tracer\r\non the command line. Hooks defined in the tracer will run whenever a block is processed.\r\n\r\nThe hook system is defined in package core/tracing. It uses a struct with callbacks, instead of \r\nrequiring an interface, for several reasons:\r\n\r\n- We plan to keep this API stable long-term. The core/tracing hook API does not depend on\r\n  on deep geth internals.\r\n- There are a lot of hooks, and tracers will only need some of them. Using a struct allows you\r\n   to implement only the hooks you want to actually use.\r\n\r\nAll existing tracers in eth/tracers/native have been rewritten to use the new hook system.\r\n\r\nThis change breaks compatibility with the vm.EVMLogger interface that we used to have.\r\nIf you are a user of vm.EVMLogger, please migrate to core/tracing, and sorry for breaking\r\nyour stuff. But we just couldn't have both the old and new tracing APIs coexist in the EVM.\r\n\r\n---------\r\n\r\nCo-authored-by: Matthieu Vachon <matthieu.o.vachon@gmail.com>\r\nCo-authored-by: Delweng <delweng@gmail.com>\r\nCo-authored-by: Martin HS <martin@swende.se>"
            },
            {
                "date": "2024-03-22T12:29:12Z",
                "message": "all: fix docstrings (#29311)"
            },
            {
                "date": "2024-03-22T12:17:59Z",
                "message": "log: use native log/slog instead of golang/exp (#29302)"
            },
            {
                "date": "2024-03-22T12:12:10Z",
                "message": "cmd, triedb: implement history inspection (#29267)\n\nThis pull request introduces a database tool for inspecting the state history. \r\nIt can be used for either account history or storage slot history, within a \r\nspecific block range.\r\n\r\nThe state output format can be chosen either with\r\n\r\n- the \"rlp-encoded\" values (those inserted into the merkle trie)\r\n- the \"rlp-decoded\" value (the raw state value)\r\n\r\nThe latter one needs --raw flag."
            },
            {
                "date": "2024-03-22T11:38:24Z",
                "message": "triedb/hashdb: Avoid setting db.cleans on Close (#29309)"
            }
        ],
        "2024-03-21": [
            {
                "date": "2024-03-21T12:50:13Z",
                "message": "all: use min/max/clear from go1.21 (#29307)"
            }
        ],
        "2024-03-20": [
            {
                "date": "2024-03-20T18:22:44Z",
                "message": "beacon/blsync: support for deneb fork (#29180)\n\nThis adds support for the Deneb beacon chain fork, and fork handling\r\nin general, to the beacon chain light client implementation.\r\n\r\nCo-authored-by: Zsolt Felfoldi <zsfelfoldi@gmail.com>"
            },
            {
                "date": "2024-03-20T14:22:52Z",
                "message": "eth/protocols/snap, internal/testlog: fix dataraces (#29301)"
            },
            {
                "date": "2024-03-20T13:58:47Z",
                "message": "core: refactor consensus interface (#29283)\n\nThis PR modifies the consensus interface to wrap the body fields."
            },
            {
                "date": "2024-03-20T13:51:05Z",
                "message": "core/txpool/blobpool: calculate log1.125 faster (#29300)"
            },
            {
                "date": "2024-03-20T12:11:30Z",
                "message": "core: skip the check the statefulness of head block in repair (#29245)"
            },
            {
                "date": "2024-03-20T12:09:46Z",
                "message": "Makefile: update PHONY directive (#29296)"
            },
            {
                "date": "2024-03-20T09:38:30Z",
                "message": "cmd/evm: fix flag-mismatch from #29290 (#29298)"
            },
            {
                "date": "2024-03-20T08:12:58Z",
                "message": "cmd/evm: make staterunner always output stateroot to stderr (#29290)\n\nThis changes makes it so that when `evm statetest` executes, regardless of whether `--json` is specified or not, the stateroot is printed on `stderr` as a `jsonl` line. This enables speedier execution of testcases in goevmlab, in cases where full execution op-by-op is not required."
            },
            {
                "date": "2024-03-20T07:51:45Z",
                "message": "metrics: fix docstrings (#29279)"
            },
            {
                "date": "2024-03-20T07:49:38Z",
                "message": "all: fix typos (#29288)"
            },
            {
                "date": "2024-03-20T07:46:50Z",
                "message": "core/asm: minor code-clarification (#29293)"
            }
        ],
        "2024-03-19": [
            {
                "date": "2024-03-19T14:23:55Z",
                "message": "miner: modify header before checking time-based fields (#29242)\n\nThe Prepare-method of consensus engine might modify the time-field in a header, so it should be called prior to checks that rely on it"
            },
            {
                "date": "2024-03-19T13:05:31Z",
                "message": "accounts/abi/bind: check invalid chainID first (#29275)"
            },
            {
                "date": "2024-03-19T13:05:06Z",
                "message": "beacon/light/sync: fix typo in comment (#29256)"
            },
            {
                "date": "2024-03-19T10:25:30Z",
                "message": "log: replace tmp with bytes.Buffer.AvailableBuffer (#29287)"
            },
            {
                "date": "2024-03-19T02:50:08Z",
                "message": "triedb/pathdb: improve tests (#29278)"
            }
        ],
        "2024-03-18": [
            {
                "date": "2024-03-18T16:36:50Z",
                "message": "all: update to go version 1.22.1 (#28946)\n\nSince Go 1.22 has deprecated certain elliptic curve operations, this PR removes \r\nreferences to the affected functions and replaces them with a custom implementation\r\nin package crypto. This causes backwards-incompatible changes in some places.\r\n\r\n---------\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-03-18T07:13:55Z",
                "message": "go.mod: update protobuf (#29270)"
            }
        ],
        "2024-03-15": [
            {
                "date": "2024-03-15T09:46:22Z",
                "message": "accounts/abi/bind: remove unused err set and check (#29269)\n\naccounts/abi: remove unused err set and check"
            },
            {
                "date": "2024-03-15T09:44:41Z",
                "message": "eth/catalyst: prettier output on bad new payloads (#29259)\n\nWhen we receive a bad NewPayload, we currently emit a lot of data to the logging facilities. This PR makes it so we print less data."
            },
            {
                "date": "2024-03-15T09:07:47Z",
                "message": "eth/downloader, graphql: fix typos (#29243)"
            },
            {
                "date": "2024-03-15T08:14:31Z",
                "message": "params: use the same variable name as EIP-4788 (#29195)\n\nIn https://eips.ethereum.org/EIPS/eip-4788 the name `BEACON_ROOTS_ADDRESS` is used. This change makes geth use the same variable name to avoid confusion."
            }
        ],
        "2024-03-14": [
            {
                "date": "2024-03-14T13:38:11Z",
                "message": "cmd/emv/internal/t8ntool: fix shadowing of `excessBlobGas` (#29263)\n\nfix(t8n): unexpected `excessBlobGas` shadowed"
            },
            {
                "date": "2024-03-14T09:32:49Z",
                "message": "cmd/devp2p: fix decoding of raw RLP ENR attributes (#29257)"
            }
        ],
        "2024-03-13": [
            {
                "date": "2024-03-13T23:26:46Z",
                "message": "eth/catalyst: remove error return in delayPayloadImport (#29043)\n\n\r\nCo-authored-by: tmelhao <tmelhao@gmail.com>"
            },
            {
                "date": "2024-03-13T23:25:42Z",
                "message": "go.mod: update golang.org/x/crypto from v0.17.0 to v0.21.0 (#29228)"
            },
            {
                "date": "2024-03-13T17:12:23Z",
                "message": "tests, appveyor: only execute one in four permutations on CI (#29220)\n\ntests, appveyor: only execute one in four permutations when flag -short is used\r\n\r\nAlso enable -short flag on all appveyor builds (also ubuntu)"
            },
            {
                "date": "2024-03-13T11:39:30Z",
                "message": "core: improve chain rewinding mechanism (#29196)\n\n* core: improve chain rewinding mechanism\r\n\r\n* core: address comment\r\n\r\n* core: periodically print progress log\r\n\r\n* core: address comments\r\n\r\n* core: fix comment\r\n\r\n* core: fix rewinding in path\r\n\r\n* core: fix beyondRoot condition\r\n\r\n* core: polish code\r\n\r\n* core: polish code\r\n\r\n* core: extend code comment\r\n\r\n* core: stop rewinding if chain is gapped or genesis is reached\r\n\r\n* core: fix broken tests"
            },
            {
                "date": "2024-03-13T06:54:40Z",
                "message": "accounts/usbwallet, common/bitutil: fix broken links in docs (#29078)\n\nfixes some links in documentation"
            },
            {
                "date": "2024-03-13T06:51:46Z",
                "message": "crypto/kz4844: pass blobs by ref (#29050)\n\nThis change makes use of the following underlying changes to the kzg-libraries in order to avoid passing large things on the stack:\r\n\r\n- c-kzg: https://github.com/ethereum/c-kzg-4844/pull/393 and\r\n- go-kzg: https://github.com/crate-crypto/go-kzg-4844/pull/63"
            },
            {
                "date": "2024-03-13T06:40:02Z",
                "message": "eth/tracers: fix concurrency issue for JS-tracing a block (#29238)\n\nThis change fixes a concurrency-issue where JS-tracers were accessing the block-ctx GetHash function in a in parallel, which is not safe."
            }
        ],
        "2024-03-12": [
            {
                "date": "2024-03-12T18:23:24Z",
                "message": "p2p: fix race in dialScheduler (#29235)\n\n\r\nCo-authored-by: Stefan <stefan@starflinger.eu>"
            },
            {
                "date": "2024-03-12T13:29:35Z",
                "message": "miner: add additional log (#29193)\n\nAdds a debug level log if the payload building failed for whatever reason"
            },
            {
                "date": "2024-03-12T12:05:31Z",
                "message": "common/math: copy result in Exp (#29233)\n\ncommon/math: does not change base parameter"
            },
            {
                "date": "2024-03-12T11:12:37Z",
                "message": "internal/build, rpc: add missing HTTP response body Close() calls (#29223)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-03-12T09:00:34Z",
                "message": "cmd: use package filepath over path for file system operations (#29227)\n\nPackage filepath implements utility routines for manipulating filename paths in a way compatible with the target operating system-defined file paths.\r\n\r\nPackage path implements utility routines for manipulating slash-separated paths.\r\n\r\nThe path package should only be used for paths separated by forward slashes, such as the paths in URLs"
            },
            {
                "date": "2024-03-12T08:49:53Z",
                "message": " crypto/bn256/cloudflare: fix noescape-directive (#29222)"
            }
        ],
        "2024-03-11": [
            {
                "date": "2024-03-11T10:17:16Z",
                "message": "beacon/light/request: fix typos (#29216)"
            },
            {
                "date": "2024-03-11T10:05:48Z",
                "message": "core: fix deprecation comment for GenesisAccount (#29218)\n\ncore: fix deprecation comment"
            },
            {
                "date": "2024-03-11T10:05:17Z",
                "message": "core/txpool/blobpool: return ErrAlreadyKnown for duplicate txs (#29210)\n\nSigned-off-by: Lee Bousfield <ljbousfield@gmail.com>"
            },
            {
                "date": "2024-03-11T08:06:57Z",
                "message": "cmd, core, metrics: always report expensive metrics (#29191)\n\n* cmd, core, metrics: always report expensive metrics\r\n\r\n* core, metrics: report block processing metrics as resetting timer\r\n\r\n* metrics: update reporter tests"
            }
        ],
        "2024-03-10": [
            {
                "date": "2024-03-10T19:01:26Z",
                "message": "p2p/simulations/adapters: fix error messages in TestTCPPipeBidirections (#29207)"
            }
        ],
        "2024-03-08": [
            {
                "date": "2024-03-08T11:15:52Z",
                "message": "console: fix the wrong error msg of datadir testcase (#29183)"
            },
            {
                "date": "2024-03-08T11:13:46Z",
                "message": "ethclient/gethclient: add blob transaction fields in toCallArg (#29198)"
            }
        ],
        "2024-03-07": [
            {
                "date": "2024-03-07T23:01:31Z",
                "message": "log: add Handler getter to Logger interface (#28793)\n\nlog: Add Handler getter to Logger interface"
            },
            {
                "date": "2024-03-07T21:56:19Z",
                "message": "all: fix typos in comments (#29186)"
            },
            {
                "date": "2024-03-07T21:25:08Z",
                "message": "accounts: remove redundant string conversion (#29184)"
            }
        ],
        "2024-03-06": [
            {
                "date": "2024-03-06T16:50:22Z",
                "message": "cmd/blsync, beacon/light: beacon chain light client (#28822)\n\nHere we add a beacon chain light client for use by geth.\r\n\r\nGeth can now be configured to run against a beacon chain API endpoint,\r\nwithout pointing a CL to it. To set this up, use the `--beacon.api` flag. Information\r\nprovided by the beacon chain is verified, i.e. geth does not blindly trust the beacon\r\nAPI endpoint in this mode. The root of trust are the beacon chain 'sync committees'.\r\n\r\nThe configured beacon API endpoint must provide light client data. At this time, only\r\nLodestar and Nimbus provide the necessary APIs.\r\n\r\nThere is also a standalone tool, cmd/blsync, which uses the beacon chain light client\r\nto drive any EL implementation via its engine API.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-03-06T12:45:03Z",
                "message": "miner: refactor the miner, make the pending block on demand (#28623)\n\n* miner: untangle miner\r\n\r\n* miner: use common.hash instead of *types.header\r\n\r\n* cmd/geth: deprecate --mine\r\n\r\n* eth: get rid of most miner api\r\n\r\n* console: get rid of coinbase in welcome message\r\n\r\n* miner/stress: get rid of the miner stress test\r\n\r\n* eth: get rid of miner.setEtherbase\r\n\r\n* ethstats: remove miner and hashrate flags\r\n\r\n* ethstats: remove miner and hashrate flags\r\n\r\n* cmd: rename pendingBlockProducer to miner.pending.feeRecipient flag\r\n\r\n* miner: use pendingFeeRecipient instead of etherbase\r\n\r\n* miner: add mutex to protect the pending block\r\n\r\n* miner: add mutex to protect the pending block\r\n\r\n* eth: get rid of etherbase mentions\r\n\r\n* miner: no need to lock the coinbase\r\n\r\n* eth, miner: fix linter\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2024-03-06T12:36:12Z",
                "message": "eth/tracers: prestate tracer add blob fee (#29168)\n\n* eth/tracers: prestate balance add blob fee\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* eth/tracers: prestate test support blob tx\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* eth/tracers: add prestate blob tx test\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
            },
            {
                "date": "2024-03-06T10:55:44Z",
                "message": "accounts: remove deprecated function NewPlaintextKeyStore (#29171)"
            },
            {
                "date": "2024-03-06T10:31:50Z",
                "message": "accounts/usbwallet: update hid library (#29176)"
            },
            {
                "date": "2024-03-06T09:53:12Z",
                "message": "rpc: add more test cases for arg types (#29006)"
            },
            {
                "date": "2024-03-06T09:32:17Z",
                "message": "accounts/usbwallet: revert #28945 (#29175)"
            },
            {
                "date": "2024-03-06T05:23:35Z",
                "message": "internal/ethapi: delete needless error check (#29127)"
            }
        ],
        "2024-03-05": [
            {
                "date": "2024-03-05T14:15:02Z",
                "message": "go.mod: bump pebble db to official release (#29038)\n\nbump pebble"
            },
            {
                "date": "2024-03-05T14:13:28Z",
                "message": "consensus, cmd, core, eth: remove support for non-merge mode of operation (#29169)\n\n* eth: drop support for forward sync triggers and head block packets\r\n\r\n* consensus, eth: enforce always merged network\r\n\r\n* eth: fix tx looper startup and shutdown\r\n\r\n* cmd, core: fix some tests\r\n\r\n* core: remove notion of future blocks\r\n\r\n* core, eth: drop unused methods and types"
            },
            {
                "date": "2024-03-05T13:52:44Z",
                "message": "node: remove test which doesn't do a lot (#29159)\n\n* node: fix test if directory already exists\r\n\r\n* node: remove test"
            },
            {
                "date": "2024-03-05T13:48:27Z",
                "message": "core: remove useless assignments (#29065)"
            },
            {
                "date": "2024-03-05T13:45:17Z",
                "message": "rlp: using unsafe.Slice instead of SliceHeader (#29067)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-03-05T13:44:23Z",
                "message": "rpc: remove deprecated method \"Notifier.Closed\" (#29162)"
            },
            {
                "date": "2024-03-05T13:37:26Z",
                "message": "internal/jsre: format blob fields from hexdecimal to int  (#29166)\n\n* internal/jsre: format receipt.{blobGasPrice,blobGasUsed} to int\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* internal/jsre: format tx.maxFeePerBlobGas to int\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* internal/jsre: format blob* in block\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
            },
            {
                "date": "2024-03-05T13:32:47Z",
                "message": "accounts/usbwallet: use updated hid (only) library (#28945)\n\n* accounts/usbwallet: use updated hid (only) library\r\n\r\n* deps: update karalabe/hid"
            },
            {
                "date": "2024-03-05T13:31:55Z",
                "message": "core/state, trie/triedb/pathdb: remove storage incomplete flag (#28940)\n\nAs SELF-DESTRUCT opcode is disabled in the cancun fork(unless the\r\naccount is created within the same transaction, nothing to delete\r\nin this case). The account will only be deleted in the following\r\ncases:\r\n\r\n- The account is created within the same transaction. In this case\r\nthe original storage was empty.\r\n\r\n- The account is empty(zero nonce, zero balance, zero code) and\r\nis touched within the transaction. Fortunately this kind of accounts\r\nare not-existent on ethereum-mainnet.\r\n\r\nAll in all, after cancun, we are pretty sure there is no large contract\r\ndeletion and we don't need this mechanism for oom protection."
            },
            {
                "date": "2024-03-05T09:47:56Z",
                "message": "rlp: remove a moot todo (#29154)"
            },
            {
                "date": "2024-03-05T08:47:58Z",
                "message": "core: initialize `gasRemaining` with `=` instead of `+=` (#29149)\n\ninitialize gasRemaining with = instead of +="
            },
            {
                "date": "2024-03-05T07:33:52Z",
                "message": "core/types: reuse signtx (#29152)\n\n* core/types: reuse signtx\r\n\r\n* core/types: inline signtx"
            }
        ],
        "2024-03-04": [
            {
                "date": "2024-03-04T20:58:25Z",
                "message": ".mailmap: remove invalid email address (#29163)"
            },
            {
                "date": "2024-03-04T19:21:43Z",
                "message": "eth/tracers: Fix prestateTracer pre nonce on contract creation (#29099)\n\nThe prestateTracer was reporting an inaccurate nonce for the contract being created in\r\npost EIP-158 transactions. Correct nonce is 0, due to the issue nonce was being reported as 1."
            },
            {
                "date": "2024-03-04T14:25:53Z",
                "message": "core: use finalized block as the chain freeze indicator (#28683)\n\n* core: use finalized block as the chain freeze indicator\r\n\r\n* core/rawdb: use max(finality, head-90k) as chain freezing threshold\r\n\r\n* core/rawdb: fix tests\r\n\r\n* core/rawdb: fix lint\r\n\r\n* core/rawdb: address comments from peter\r\n\r\n* core/rawdb: fix typo"
            },
            {
                "date": "2024-03-04T13:07:41Z",
                "message": "cmd/devp2p: fix commandHasFlag (#29091)\n\nIt got broken in some update of the cli library, and thus bootnodes weren't \r\nbeing configured automatically for some of the discovery commands."
            },
            {
                "date": "2024-03-04T10:03:53Z",
                "message": "triedb/pathdb: changed the test code to check for verifying state (#29150)\n\nCo-authored-by: this-is-iron <iron@superblock.co>"
            },
            {
                "date": "2024-03-04T09:31:18Z",
                "message": "all: use EmptyUncleHash, EmptyCodeHash instead of raw value (#29134)"
            },
            {
                "date": "2024-03-04T09:30:15Z",
                "message": "core: delete unused ErrMaxInitCodeSizeExceeded (#29062)"
            },
            {
                "date": "2024-03-04T09:24:24Z",
                "message": "accounts/abi: delete duplicate error check (#29136)"
            },
            {
                "date": "2024-03-04T09:16:05Z",
                "message": "p2p: remove unused argument 'flags' (#29132)"
            }
        ],
        "2024-03-02": [
            {
                "date": "2024-03-02T20:42:50Z",
                "message": "all: remove redundant import aliases (#29144)"
            },
            {
                "date": "2024-03-02T20:39:22Z",
                "message": "eth: make transaction propagation paths in the network deterministic (#29034)\n\n* eth: make transaction propagation paths in the network deterministic\r\n\r\n* eth: avoid potential division by 0\r\n\r\n* eth: make tx propagation dependent on local node id too\r\n\r\n* eth: fix review comments"
            }
        ],
        "2024-02-29": [
            {
                "date": "2024-02-29T12:17:32Z",
                "message": "eth/catalyst: update simulated beacon for cancun (#28829)\n\n* eth/catalyst: update simulated beacon for cancun\r\n\r\n* validate blob hashes\r\n\r\n* compute hashes from commitment\r\n\r\n* fix beacon root and payload version\r\n\r\n* check commitment conversion\r\n\r\n* fix random attr\r\n\r\n* flip dev to cancun"
            },
            {
                "date": "2024-02-29T10:40:59Z",
                "message": "cmd/utils, core/rawdb, triedb/pathdb: flip hash to path scheme (#29108)\n\n* cmd/utils, core/rawdb, triedb/pathdb: flip hash to path scheme\r\n\r\n* graphql: run tests in hash mode as the chain maker needs it"
            },
            {
                "date": "2024-02-29T09:56:46Z",
                "message": "all: replace fmt.Errorf() with errors.New() if no param required (#29126)\n\nreplace-fmt-errorf\r\n\r\nCo-authored-by: yzb@example.cn <yzb@example.cn>"
            },
            {
                "date": "2024-02-29T09:56:17Z",
                "message": "cmd/geth: parseDumpConfig should not return closed db (#29100)\n\n* cmd: parseDumpConfig should not return closed db\r\n\r\n* fix lint"
            },
            {
                "date": "2024-02-29T09:29:06Z",
                "message": "all: fix function names in docs (#29128)\n\nSigned-off-by: cui fliter <imcusg@gmail.com>"
            }
        ],
        "2024-02-28": [
            {
                "date": "2024-02-28T18:59:16Z",
                "message": "eth/catalyst: return invalid payload attributes instead of invalid parms for bad fcu payload (#29115)"
            },
            {
                "date": "2024-02-28T17:38:21Z",
                "message": "internal/ethapi: pass in accesslist in test (#29089)\n\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            },
            {
                "date": "2024-02-28T12:40:28Z",
                "message": "triedb/pathdb: fix panic in recoverable (#29107)\n\n* triedb/pathdb: fix panic in recoverable\r\n\r\n* triedb/pathdb: add todo\r\n\r\n* triedb/pathdb: rename\r\n\r\n* triedb/pathdb: rename"
            },
            {
                "date": "2024-02-28T12:23:52Z",
                "message": "core, triedb/pathdb: calculate the size for batch pre-allocation (#29106)\n\n* core, triedb/pathdb: calculate the size for batch pre-allocation\r\n\r\n* triedb/pathdb: address comment"
            },
            {
                "date": "2024-02-28T08:01:52Z",
                "message": "params: being major version bump cycle"
            },
            {
                "date": "2024-02-28T07:25:12Z",
                "message": "core: using math.MaxUint64 instead of 0xffffffffffffffff (#29094)"
            }
        ],
        "2024-02-27": [
            {
                "date": "2024-02-27T11:53:30Z",
                "message": "params: begin v1.13.15 cycle"
            },
            {
                "date": "2024-02-27T11:50:30Z",
                "message": "params: release Geth v1.13.14"
            },
            {
                "date": "2024-02-27T11:27:50Z",
                "message": "core/txpool: elevate the 'already reserved' error into a constant (#29095)\n\ndeclare the 'already reserved' error in errors.go"
            },
            {
                "date": "2024-02-27T09:29:12Z",
                "message": "eth/tracers: Fix callTracer logs on onlyTopCall == true (#29068)"
            }
        ],
        "2024-02-26": [
            {
                "date": "2024-02-26T16:34:45Z",
                "message": "core/txpool: no need to log loud rotate if no local txs (#29083)\n\n* core/txpool: no need to run rotate if no local txs\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* Revert \"core/txpool: no need to run rotate if no local txs\"\r\n\r\nThis reverts commit 17fab173883168c586d57ca9c05dfcbd9e7831b4.\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* use Debug if todo is empty\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
            },
            {
                "date": "2024-02-26T12:27:56Z",
                "message": "core/txpool/blobpool: reduce default database cap for rollout (#29090)\n\nxcore/txpool/blobpool: reduce default database cap for rollout"
            },
            {
                "date": "2024-02-26T12:22:13Z",
                "message": "eth/catalyst: remove variable in tx conversion loop (#29076)"
            },
            {
                "date": "2024-02-26T10:03:59Z",
                "message": "cmd/clef: add spaces in README.md table (#29077)\n\nAdd space after links in so they are clickable in vscode."
            },
            {
                "date": "2024-02-26T10:02:18Z",
                "message": "internal/ethapi: pass blob hashes to gas estimation (#29085)"
            },
            {
                "date": "2024-02-26T09:59:03Z",
                "message": "eth/catalyst: enable some commented-out testcases\u00a0\u00a0 (#29073)"
            },
            {
                "date": "2024-02-26T09:25:35Z",
                "message": "p2p, log, rpc: use errors.New to replace fmt.Errorf with no parameters (#29074)"
            },
            {
                "date": "2024-02-26T09:06:52Z",
                "message": "core/txpool: reject blob txs with blob fee cap below the minimum (#29081)\n\n* make blobpool reject blob transactions with fee below the minimum\r\n\r\n* core/txpool: some minot nitpick polishes and unified error formats\r\n\r\n* core/txpool: do less big.Int constructions with the min blob cap\r\n\r\n---------\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            }
        ],
        "2024-02-23": [
            {
                "date": "2024-02-23T08:57:47Z",
                "message": "eth/catalyst: fix wrong error message of payloadV2 after cancun (#29049)\n\n* eth/catalyst: the same error format\r\n\r\nSigned-off-by: tmelhao <tmelhao@gmail.com>\r\n\r\n* eth/catalyst: wrong error message for payloadV2 post-cancun\r\n\r\nSigned-off-by: tmelhao <tmelhao@gmail.com>\r\n\r\n* eth/catalyst: parentBeaconBlockRoot -> parentBlockBeaconRoot\r\n\r\nSigned-off-by: tmelhao <tmelhao@gmail.com>\r\n\r\n* apply commit review\r\n\r\nSigned-off-by: tmelhao <tmelhao@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: tmelhao <tmelhao@gmail.com>\r\nCo-authored-by: tmelhao <tmelhao@gmail.com>"
            }
        ],
        "2024-02-22": [
            {
                "date": "2024-02-22T15:35:23Z",
                "message": "internal/ethapi:fix zero rpc gas cap in eth_createAccessList (#28846)\n\nThis PR enhances eth_createAccessList RPC call to support scenarios where the node is launched with an unlimited gas cap (--rpc.gascap 0). The eth_createAccessList RPC call returns failure if user doesn't explicitly set a gas limit."
            },
            {
                "date": "2024-02-22T13:39:22Z",
                "message": "internal/ethapi: use overriden baseFee for gasPrice (#29051)\n\neth_call and debug_traceCall allow users to override various block fields, among them base fee. However the overriden base fee was not considered for computing the effective gas price of that message, and instead base fee of the base block was used. This has been fixed in this commit."
            }
        ],
        "2024-02-21": [
            {
                "date": "2024-02-21T14:49:50Z",
                "message": "params: begin v1.13.14 release cycle"
            },
            {
                "date": "2024-02-21T14:44:02Z",
                "message": "params: release go-ethereum v1.13.13 stable"
            },
            {
                "date": "2024-02-21T11:46:32Z",
                "message": "internal/ethapi: fix defaults for blob fields (#29037)\n\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
            },
            {
                "date": "2024-02-21T08:00:01Z",
                "message": "core/txpool: fix typo (#29036)\n\n* fix typos\r\n\r\n* address comments"
            },
            {
                "date": "2024-02-21T07:59:21Z",
                "message": "params: add cancun upgrade banner (#29042)\n\nparams: add cancun banner\r\n\r\nSigned-off-by: tmelhao <tmelhao@gmail.com>\r\nCo-authored-by: tmelhao <tmelhao@gmail.com>"
            }
        ],
        "2024-02-20": [
            {
                "date": "2024-02-20T11:42:48Z",
                "message": "core,eth,internal: fix typo (#29024)"
            },
            {
                "date": "2024-02-20T10:08:56Z",
                "message": "core/txpool: fix typo (#29031)"
            },
            {
                "date": "2024-02-20T09:37:23Z",
                "message": "core/txpool, eth, miner: retrieve plain and blob txs separately (#29026)\n\n* core/txpool, eth, miner: retrieve plain and blob txs separately\r\n\r\n* core/txpool: fix typo, no farming\r\n\r\n* miner: farm all the typos\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>\r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
            }
        ],
        "2024-02-19": [
            {
                "date": "2024-02-19T15:29:59Z",
                "message": "core/vm, params: ensure order of forks, prevent overflow (#29023)\n\nThis PR fixes an overflow which can could happen if inconsistent blockchain rules were configured. Additionally, it tries to prevent such inconsistencies from occurring by making sure that merge cannot be enabled unless previous fork(s) are also enabled."
            },
            {
                "date": "2024-02-19T13:59:40Z",
                "message": "core/txpool, miner: speed up blob pool pending retrievals (#29008)\n\n* core/txpool, miner: speed up blob pool pending retrievals\r\n\r\n* miner: fix test merge issue\r\n\r\n* eth: same same\r\n\r\n* core/txpool/blobpool: speed up blobtx creation in benchmark a bit\r\n\r\n* core/txpool/blobpool: fix linter\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2024-02-19T12:03:58Z",
                "message": "core: using math.MaxUint64 instead of 0xffffffffffffffff (#29022)"
            },
            {
                "date": "2024-02-19T06:25:53Z",
                "message": "ethstats: prevent panic if head block is not available (#29020)\n\nThis pull request fixes a flaw in ethstats which can lead to node crash\r\n\r\nA panic could happens when the local blockchain is reorging which causes the original head block not to be  reachable (since number->hash canonical mapping is deleted). In order to prevent the panic, the block nilness is now checked in ethstats."
            }
        ],
        "2024-02-17": [
            {
                "date": "2024-02-17T11:37:14Z",
                "message": "core/txpool, eth, miner: pre-filter dynamic fees during pending tx retrieval (#29005)\n\n* core/txpool, eth, miner: pre-filter dynamic fees during pending tx retrieval\r\n\r\n* miner: fix typo\r\n\r\n* core/txpool: handle init-error in blobpool without panicing\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2024-02-16": [
            {
                "date": "2024-02-16T18:05:33Z",
                "message": "core: move genesis alloc types to core/types (#29003)\n\nWe want to use these types in public user-facing APIs, so they shouldn't be in core.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-02-16T15:33:14Z",
                "message": "core/txpool/blobpool: update the blob db with corruption handling (#29001)\n\nUpdates billy to a more recent version which is more robust in the face of corrupt data (e.g. after a hard crash)"
            }
        ],
        "2024-02-15": [
            {
                "date": "2024-02-15T18:50:17Z",
                "message": "core/txpool/legacypool: remove a redundant heap.Init (#28910)\n\n\r\nCo-authored-by: Martin HS <martin@swende.se>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-02-15T18:43:37Z",
                "message": "cmd/devp2p/internal/ethtest: some fixes for the eth test suite (#28996)\n\nImproving two things here:\r\n\r\nOn hive, where we look at these tests, the Go code comment above the test\r\nis not visible. When there is a failure, it's not obvious what the test is actually\r\nexpecting. I have converted the comments in to printed log messages to\r\nexplain the test more.\r\n\r\nSecond, I noticed that besu is failing some tests because it happens to request\r\na header when we want it to send transactions. Trying the minimal fix here to\r\nserve the headers.\r\n\r\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>"
            },
            {
                "date": "2024-02-15T14:54:40Z",
                "message": "cmd/evm: fix typo in test script (#28995)"
            },
            {
                "date": "2024-02-15T13:43:45Z",
                "message": "eth/catalyst: add getClientVersion to capabilities (#28994)"
            },
            {
                "date": "2024-02-15T12:30:11Z",
                "message": "tests: update execution spec tests + split statetest exec (#28993)"
            },
            {
                "date": "2024-02-15T11:01:30Z",
                "message": "eth/catalyst,beacon/engine: implement GetClientVersionV1 (#28915)"
            },
            {
                "date": "2024-02-15T09:22:03Z",
                "message": "cmd/devp2p: fix modulo in makeBlobTxs (#28970)"
            },
            {
                "date": "2024-02-15T09:20:10Z",
                "message": "core/txpool/blobpool: rename variables in comments (#28981)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-02-15T09:08:46Z",
                "message": "ethereum, ethclient: add blob transaction fields in CallMsg (#28989)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2024-02-14": [
            {
                "date": "2024-02-14T16:02:56Z",
                "message": "tests: fix goroutine leak related to state snapshot generation (#28974)\n\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-02-14T08:26:53Z",
                "message": "cmd/utils: fix merge-breakage in test (#28985)"
            }
        ],
        "2024-02-13": [
            {
                "date": "2024-02-13T13:49:53Z",
                "message": "all: remove the dependency from trie to triedb (#28824)\n\nThis change removes the dependency from trie package to triedb package."
            },
            {
                "date": "2024-02-13T09:14:18Z",
                "message": "internal/ethapi, signer/core: fix documentation-links (#28979)\n\nfix: management api links"
            },
            {
                "date": "2024-02-13T09:10:11Z",
                "message": "core/txpool/legacypool: use uint256.Int instead of big.Int (#28606)\n\nThis change makes the legacy transaction pool use of `uint256.Int` instead of `big.Int`. The changes are made primarily only on the internal functions of legacypool. \r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2024-02-09": [
            {
                "date": "2024-02-09T19:53:04Z",
                "message": "internal/ethapi: fix gas estimation bug in eth_fillTransaction for blob tx (#28929)"
            },
            {
                "date": "2024-02-09T18:30:56Z",
                "message": "fix: update outdated link to trezor docs (#28966)\n\nfix: update link to trezor"
            },
            {
                "date": "2024-02-09T12:15:11Z",
                "message": "build: remove ubuntu 'lunar' build (#28962)"
            },
            {
                "date": "2024-02-09T07:00:05Z",
                "message": "params: begin v1.13.13 release cycle"
            },
            {
                "date": "2024-02-09T06:51:43Z",
                "message": "params: go-ethereum v1.13.12 stable"
            },
            {
                "date": "2024-02-09T06:42:50Z",
                "message": "internal/era: update block index format to be based on record offset (#28959)\n\nAs mentioned in #26621, the block index format for era1 is not in line with the regular era block index. This change modifies the index so all relative offsets are based against the beginning of the block index record."
            }
        ],
        "2024-02-08": [
            {
                "date": "2024-02-08T18:53:32Z",
                "message": "internal/ethapi: add support for blobs in eth_fillTransaction (#28839)\n\nThis change adds support for blob-transaction in certain API-endpoints, e.g. eth_fillTransaction. A follow-up PR will add support for signing such transactions."
            },
            {
                "date": "2024-02-08T18:36:38Z",
                "message": "params, core/forkid: add mainnet timestamp for Cancun (#28958)\n\n* params: add cancun timestamp for mainnet\r\n\r\n* core/forkid: add test for mainnet cancun forkid\r\n\r\n* core/forkid: update todo tests for cancun"
            },
            {
                "date": "2024-02-08T13:49:19Z",
                "message": "cmd/devp2p, eth: drop support for eth/67 (#28956)"
            },
            {
                "date": "2024-02-08T12:34:38Z",
                "message": "eth/gasprice: fix percentile validation in eth_feeHistory (#28954)"
            },
            {
                "date": "2024-02-08T10:25:13Z",
                "message": "ethclient/simulated: fix typo (#28952)\n\n(ethclient/simulated):fix typo"
            }
        ],
        "2024-02-07": [
            {
                "date": "2024-02-07T20:10:49Z",
                "message": "all: fix docstring names (#28923)\n\n* fix wrong comment\r\n\r\n* reviewers input\r\n\r\n* Update log/handler_glog.go\r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
            },
            {
                "date": "2024-02-07T20:06:38Z",
                "message": "node, rpc: add configurable HTTP request limit (#28948)\n\nAdds a configurable HTTP request limit, and bumps the engine default"
            },
            {
                "date": "2024-02-07T16:19:14Z",
                "message": "core,params: add holesky to default genesis function (#28903)"
            },
            {
                "date": "2024-02-07T16:18:27Z",
                "message": "cmd,internal/era: implement `export-history` subcommand (#26621)\n\n* all: implement era format, add history importer/export\r\n\r\n* internal/era/e2store: refactor e2store to provide ReadAt interface\r\n\r\n* internal/era/e2store: export HeaderSize\r\n\r\n* internal/era: refactor era to use ReadAt interface\r\n\r\n* internal/era: elevate anonymous func to named\r\n\r\n* cmd/utils: don't store entire era file in-memory during import / export\r\n\r\n* internal/era: better abstraction between era and e2store\r\n\r\n* cmd/era: properly close era files\r\n\r\n* cmd/era: don't let defers stack\r\n\r\n* cmd/geth: add description for import-history\r\n\r\n* cmd/utils: better bytes buffer\r\n\r\n* internal/era: error if accumulator has more records than max allowed\r\n\r\n* internal/era: better doc comment\r\n\r\n* internal/era/e2store: rm superfluous reader, rm superfluous testcases, add fuzzer\r\n\r\n* internal/era: avoid some repetition\r\n\r\n* internal/era: simplify clauses\r\n\r\n* internal/era: unexport things\r\n\r\n* internal/era,cmd/utils,cmd/era: change to iterator interface for reading era entries\r\n\r\n* cmd/utils: better defer handling in history test\r\n\r\n* internal/era,cmd: add number method to era iterator to get the current block number\r\n\r\n* internal/era/e2store: avoid double allocation during write\r\n\r\n* internal/era,cmd/utils: fix lint issues\r\n\r\n* internal/era: add ReaderAt func so entry value can be read lazily\r\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\n* internal/era: improve iterator interface\r\n\r\n* internal/era: fix rlp decode of header and correctly read total difficulty\r\n\r\n* cmd/era: fix rebase errors\r\n\r\n* cmd/era: clearer comments\r\n\r\n* cmd,internal: fix comment typos\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2024-02-07T16:01:38Z",
                "message": "core/state, core/vm: minor uint256 related perf improvements (#28944)"
            }
        ],
        "2024-02-06": [
            {
                "date": "2024-02-06T08:59:24Z",
                "message": "eth, miner: fix enforcing the minimum miner tip (#28933)\n\n* eth, miner: fix enforcing the minimum miner tip\r\n\r\n* ethclient/simulated: fix failing test due the min tip change\r\n\r\n* accounts/abi/bind: fix simulater gas tip issue"
            },
            {
                "date": "2024-02-06T02:44:42Z",
                "message": "core: cache transaction indexing tail in memory (#28908)"
            }
        ],
        "2024-02-05": [
            {
                "date": "2024-02-05T21:48:19Z",
                "message": "Makefile: add help target to display available targets (#28845)\n\n\r\nCo-authored-by: Martin HS <martin@swende.se>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-02-05T21:16:32Z",
                "message": "all: fix typos in comments (#28881)"
            },
            {
                "date": "2024-02-05T21:01:56Z",
                "message": "internal/flags: fix --miner.gasprice default listing (#28932)"
            },
            {
                "date": "2024-02-05T21:00:46Z",
                "message": "p2p: fix accidental termination of portMappingLoop (#28911)"
            }
        ],
        "2024-02-04": [
            {
                "date": "2024-02-04T05:55:30Z",
                "message": "core/types: fix typo (#28922)"
            }
        ],
        "2024-02-02": [
            {
                "date": "2024-02-02T18:39:12Z",
                "message": "core/txpool: don't inject lazy resolved transactions into the container (#28917)\n\n* core/txpool: don't inject lazy resolved transactions into the container\r\n\r\n* core/txpool: minor typo fixes"
            },
            {
                "date": "2024-02-02T16:26:35Z",
                "message": "core/txpool/blobpool: post-crash cleanup and addition/removal metrics (#28914)\n\n* core/txpool/blobpool: clean up resurrected junk after a crash\r\n\r\n* core/txpool/blobpool: track transaction insertions and rejections\r\n\r\n* core/txpool/blobpool: linnnnnnnt"
            },
            {
                "date": "2024-02-02T16:26:13Z",
                "message": "deps: update memsize (#28916)"
            }
        ],
        "2024-01-31": [
            {
                "date": "2024-01-31T08:57:33Z",
                "message": "eth/downloader: fix skeleton cleanup (#28581)\n\n* eth/downloader: fix skeleton cleanup\r\n\r\n* eth/downloader: short circuit if nothing to delete\r\n\r\n* eth/downloader: polish the logic in cleanup\r\n\r\n* eth/downloader: address comments"
            },
            {
                "date": "2024-01-31T08:45:20Z",
                "message": "build: fix problem with windows line-endings in CI download (#28900)\n\nfixes #28890"
            }
        ],
        "2024-01-30": [
            {
                "date": "2024-01-30T01:34:14Z",
                "message": "core: reset tx lookup cache if necessary (#28865)\n\nThis pull request resets the txlookup cache if chain reorg happens, \r\npreventing them from remaining reachable. It addresses failures in\r\nthe hive tests."
            }
        ],
        "2024-01-29": [
            {
                "date": "2024-01-29T15:40:57Z",
                "message": "docs/postmortems: fix outdated link (#28893)"
            },
            {
                "date": "2024-01-29T10:53:25Z",
                "message": "eth/catalyst: allow payload attributes v1 in fcu v2 (#28882)\n\nAt some point, `ForkchoiceUpdatedV2` stopped working for `PayloadAttributesV1` while `paris` was active. This was causing a few failures in hive. This PR fixes that, and also adds a gate in `ForkchoiceUpdatedV1` to disallow `PayloadAttributesV3`."
            },
            {
                "date": "2024-01-29T09:58:43Z",
                "message": "README.md: fix travis badge (#28889)\n\nThe hyperlink in the README file that directs to the Travis CI build was broken.\r\nThis commit updates the link to point to the corrent build page."
            }
        ],
        "2024-01-27": [
            {
                "date": "2024-01-27T20:16:20Z",
                "message": "core/types: fix and test handling of faulty nil-returning signer (#28879)\n\nThis adds an error if the signer returns a nil value for one of the signature value fields."
            }
        ],
        "2024-01-26": [
            {
                "date": "2024-01-26T07:57:04Z",
                "message": "internal/flags: fix typo (#28876)"
            }
        ],
        "2024-01-24": [
            {
                "date": "2024-01-24T10:53:54Z",
                "message": "params: begin v.1.13.12 release cycle"
            },
            {
                "date": "2024-01-24T10:45:29Z",
                "message": "params: go-ethereum v1.13.11 stable"
            },
            {
                "date": "2024-01-24T08:07:20Z",
                "message": "ethclient: fix flaky test (#28864)\n\nFix flaky test due to incomplete transaction indexing"
            },
            {
                "date": "2024-01-24T07:39:12Z",
                "message": "eth/catalyst: prefix payload id with version (#28246)\n\nGetPayloadVX should only return payloads which match its version. GetPayloadV2 is a special snowflake that supports v1 and v2 payloads. This change uses a a version-specific prefix within in the payload id, basically a namespace for the version number."
            }
        ],
        "2024-01-23": [
            {
                "date": "2024-01-23T20:00:50Z",
                "message": "core: move tx indexer to its own file (#28857)\n\nThis change moves all the transaction indexing functions to a separate txindexer.go file and defines a txIndexer structure as a refactoring."
            },
            {
                "date": "2024-01-23T19:59:38Z",
                "message": "core/txpool, eth/catalyst: fix racy simulator due to txpool background reset (#28837)\n\nThis PR fixes an issues in the new simulated backend. The root cause is the fact that the transaction pool has an internal reset operation that runs on a background thread.\r\n\r\nWhen a new transaction is added to the pool via the RPC, the transaction is added to a non-executable queue and will be moved to its final location on a background thread. If the machine is overloaded (or simply due to timing issues), it can happen that the simulated backend will try to produce the next block, whilst the pool has not yet marked the newly added transaction executable. This will cause the block to not contain the transaction. This is an issue because we want determinism from the simulator: add a tx, mine a block. It should be in there.\r\n\r\nThe PR fixes it by adding a Sync function to the txpool, which waits for the current reset operation (if any) to finish, and then runs an entire round of reset on top. The new round is needed because resets are only triggered by new head events, so newly added transactions will not trigger the outer resets that we can wait on. The transaction pool would eventually internally do a reset even on transaction addition, but there's no easy way to wait on that and there's no meaningful reason to bubble that across everything. A clean outer reset will at worse be a small noop goroutine."
            },
            {
                "date": "2024-01-23T15:02:08Z",
                "message": "eth/catalyst: add timestamp checks to fcu and new payload and improve param checks (#28230)\n\n This PR introduces a few changes with respect to payload verification in fcu and new payload requests:\r\n\r\n* First of all, it undoes the `verifyPayloadAttributes(..)` simplification I attempted in #27872. \r\n* Adds timestamp validation to fcu payload attributes [as required](https://github.com/ethereum/execution-apis/blob/main/src/engine/cancun.md#specification-1) (section 2) by the Engine API spec. \r\n* For the new payload methods, I also update the verification of the executable data. For `newPayloadV2`, it does not currently ensure that cancun values are `nil`. Which could make it possible to submit cancun payloads through it. \r\n* On `newPayloadV3` the same types of checks are added. All shanghai and cancun related fields in the executable data must be non-nil, with the addition that the timestamp is _only_ with cancun.\r\n* Finally it updates a newly failing catalyst test to call the correct fcu and new payload methods depending on the fork."
            },
            {
                "date": "2024-01-23T14:17:42Z",
                "message": "core/vm: fix misleading comment (#28860)\n\nfix misleading comment"
            },
            {
                "date": "2024-01-23T14:15:48Z",
                "message": "core/state/snapshot: use AddHash/ContainHash instead of Hasher interface (#28849)\n\nThis change switches from using the `Hasher` interface to add/query the bloomfilter to implementing it as methods.\r\nThis significantly reduces the allocations for Search and Rebloom."
            },
            {
                "date": "2024-01-23T14:02:58Z",
                "message": "build: upgrade -dlgo version to Go 1.21.6 (#28836)"
            },
            {
                "date": "2024-01-23T13:51:58Z",
                "message": "all: use uint256 in state (#28598)\n\nThis change makes use of uin256 to represent balance in state. It touches primarily upon statedb, stateobject and state processing, trying to avoid changes in transaction pools, core types, rpc and tracers."
            },
            {
                "date": "2024-01-23T13:46:34Z",
                "message": "core: fix genesis setup in benchReadChain (#28856)"
            },
            {
                "date": "2024-01-23T10:40:01Z",
                "message": "go.{mod,sum}: upgrade go-ole to support arm64 (#28859)\n\ngo.{mod,sum}: upgrade go-ole"
            },
            {
                "date": "2024-01-23T08:26:00Z",
                "message": "docs: remove reference to being official (#28858)"
            }
        ],
        "2024-01-22": [
            {
                "date": "2024-01-22T20:05:18Z",
                "message": "core, core/rawdb, eth/sync: no tx indexing during snap sync (#28703)\n\nThis change simplifies the logic for indexing transactions and enhances the UX when transaction is not found by returning more information to users.\r\n\r\nTransaction indexing is now considered as a part of the initial sync, and `eth.syncing` will thus be `true` if transaction indexing is not yet finished. API consumers can use the syncing status to determine if the node is ready to serve users."
            }
        ],
        "2024-01-20": [
            {
                "date": "2024-01-20T15:03:14Z",
                "message": "params, core/forkid: enable cancun on sepolia and holesky (#28834)\n\nThis change enables Cancun \r\n\r\n- Sepolia at 1706655072 (Jan 31st, 2024)\r\n- Holesky at 1707305664 (Feb 7th, 2024)\r\n\r\nSpecification: https://github.com/ethereum/execution-specs/pull/860"
            }
        ],
        "2024-01-19": [
            {
                "date": "2024-01-19T15:43:02Z",
                "message": "ethclient: apply accessList field in toCallArg (#28832)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-01-19T10:41:17Z",
                "message": "crypto/kzg4844: add helpers for versioned blob hashes (#28827)\n\nThe code to compute a versioned hash was duplicated a couple times, and also had a small\r\nissue: if we ever change params.BlobTxHashVersion, it will most likely also cause changes\r\nto the actual hash computation. So it's a bit useless to have this constant in params."
            }
        ],
        "2024-01-18": [
            {
                "date": "2024-01-18T12:08:13Z",
                "message": "eth/filters: reset filter.begin in BenchmarkFilters (#28830)"
            }
        ],
        "2024-01-17": [
            {
                "date": "2024-01-17T14:06:14Z",
                "message": "internal/ethapi: handle blobs in API methods (#28786)\n\nEIP-4844 adds a new transaction type for blobs. Users can submit such transactions via `eth_sendRawTransaction`. In this PR we refrain from adding support to `eth_sendTransaction` and in fact it will fail if the user passes in a blob hash.\r\n\r\nHowever since the chain can handle such transactions it makes sense to allow simulating them. E.g. an L2 operator should be able to simulate submitting a rollup blob and updating the L2 state. Most methods that take in a transaction object should recognize blobs. The change boils down to adding `blobVersionedHashes` and `maxFeePerBlobGas` to `TransactionArgs`. In summary:\r\n\r\n- `eth_sendTransaction`: will fail for blob txes\r\n- `eth_signTransaction`: will fail for blob txes\r\n\r\nThe methods that sign txes does not, as of this PR, add support the for new EIP-4844 transaction types. Resuming the summary:\r\n\r\n- `eth_sendRawTransaction`: can send blob txes\r\n- `eth_fillTransaction`: will fill in a blob tx. Note: here we simply fill in normal transaction fields + possibly `maxFeePerBlobGas` when blobs are present. One can imagine a more elaborate set-up where users can submit blobs themselves and we fill in proofs and commitments and such. Left for future PRs if desired.\r\n- `eth_call`: can simulate blob messages\r\n- `eth_estimateGas`: blobs have no effect here. They have a separate unit of gas which is not tunable in the transaction."
            },
            {
                "date": "2024-01-17T10:44:01Z",
                "message": "miner: fix typo in payload_building_test.go (#28825)"
            }
        ],
        "2024-01-16": [
            {
                "date": "2024-01-16T11:20:26Z",
                "message": "tracer: use proper base fee in tests (#28775)\n\n In the tracing tests, the base fee was generally set to nil. This commit changes this to pass the proper base instead, and fixes the few tests which become broken by the change."
            },
            {
                "date": "2024-01-16T11:08:49Z",
                "message": "tests: more verbosity if block decoding fails (#28814)"
            }
        ],
        "2024-01-15": [
            {
                "date": "2024-01-15T19:45:50Z",
                "message": "acounts/usbwallet: fix typo (#28815)\n\nacounts:fix typo"
            },
            {
                "date": "2024-01-15T19:45:14Z",
                "message": "core/txpool/blobpool: fix typos"
            },
            {
                "date": "2024-01-15T14:32:03Z",
                "message": "eth: fix potential hang in waitSnapExtension (#28744)\n\nThis should fix a rare hang in waitSnapExtension during shutdown."
            },
            {
                "date": "2024-01-15T10:10:26Z",
                "message": "ethclient: add tests for TransactionInBlock (#28283)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-01-15T08:15:40Z",
                "message": "tests: update reference tests (#28778)\n\nUpdates the reference tests to the latest version"
            }
        ],
        "2024-01-14": [
            {
                "date": "2024-01-14T11:32:48Z",
                "message": "cmd/rlpdump: add -pos flag, displaying byte positions (#28785)"
            },
            {
                "date": "2024-01-14T11:32:23Z",
                "message": "core/state: unexport GetOrNewStateObject (#28804)"
            }
        ],
        "2024-01-12": [
            {
                "date": "2024-01-12T18:59:36Z",
                "message": "internal/ethapi: avoid using pending for defaults (#28784)\n\nGiven the discussions around deprecating pending (see #28623 or ethereum/execution-apis#495), we can move away from using the pending block internally, and use latest instead"
            },
            {
                "date": "2024-01-12T18:57:47Z",
                "message": "p2p/dnsdisc: use strings.Cut over strings.IndexByte (#28787)"
            },
            {
                "date": "2024-01-12T14:14:03Z",
                "message": "cmd/devp2p/internal/ethtest: skip large tx test on github build (#28794)\n\nThis test was failling consistently on the github 32-bit build probably due to slow IO. Skipping it for that green check."
            },
            {
                "date": "2024-01-12T13:59:03Z",
                "message": "cmd/geth, internal/debug: get rid of by-default log config (#28801)"
            },
            {
                "date": "2024-01-12T13:58:49Z",
                "message": "accounts, ethclient: minor tweaks on the new simulated backend (#28799)\n\n* accounts, ethclient: minor tweaks on the new simulated backend\r\n\r\n* ethclient/simulated: add an initial batch of gas options\r\n\r\n* accounts, ethclient: remove mandatory gasLimit constructor param\r\n\r\n* accounts, ethclient: minor option naming tweaks"
            },
            {
                "date": "2024-01-12T13:22:45Z",
                "message": "build: fix typo in comment (#28800)"
            },
            {
                "date": "2024-01-12T08:40:00Z",
                "message": "cmd: fix typos (#28798)"
            },
            {
                "date": "2024-01-12T07:06:22Z",
                "message": "eth: minor change of config-accessor (#28782)\n\neth: refactor `GetVM`"
            },
            {
                "date": "2024-01-12T06:43:52Z",
                "message": "docs: fix badge in README (#28796)\n\n* Fix broken badge in README.md\r\n\r\nReplaced broken Github link with IPFS link for long-term storage.\r\n\r\n* update go badge\r\n\r\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>\r\n\r\n---------\r\n\r\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>"
            }
        ],
        "2024-01-11": [
            {
                "date": "2024-01-11T17:24:36Z",
                "message": "params: begin v1.13.11 release cycle"
            },
            {
                "date": "2024-01-11T17:17:54Z",
                "message": "version: release v1.13.10 to fix bad tag"
            }
        ],
        "2024-01-10": [
            {
                "date": "2024-01-10T16:32:41Z",
                "message": "params: begin v1.13.10 release cycle"
            },
            {
                "date": "2024-01-10T16:29:05Z",
                "message": "params: go-ethereum v1.13.9 stable"
            },
            {
                "date": "2024-01-10T15:45:08Z",
                "message": "ethclient/simulated: implement new sim backend (#28202)\n\nThis is a rewrite of the 'simulated backend', an implementation of the ethclient interfaces\r\nwhich is backed by a simulated blockchain. It was getting annoying to maintain the old\r\nversion of the simulated backend feature because there was a lot of code duplication with\r\nthe main client. \r\n\r\nThe new version is built using parts that we already have: an in-memory geth node instance\r\nrunning in developer mode provides the chain, while the Go API is provided by ethclient.\r\nA backwards-compatibility wrapper is provided, but the simulated backend has also moved to\r\na more sensible import path: github.com/ethereum/go-ethereum/ethclient/simulated\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2024-01-09": [
            {
                "date": "2024-01-09T14:35:49Z",
                "message": "cmd/geth: update log test data (#28780)\n\nupdate logger test data"
            },
            {
                "date": "2024-01-09T13:55:09Z",
                "message": "accounts/abi: fix bigInt topic encoding (#28764)"
            },
            {
                "date": "2024-01-09T07:56:01Z",
                "message": "cmd/geth: make it possible to autopilot removedb (#28725)\n\nWhen managing geth, it is sometimes desirable to do a partial wipe; deleting state but retaining freezer data. A partial wipe can be somewhat tricky to accomplish. \r\n\r\nThis change implements the ability to perform partial wipe by making it possible to run geth removedb non-interactive, using command line options instead."
            }
        ],
        "2024-01-08": [
            {
                "date": "2024-01-08T19:33:32Z",
                "message": "params, core/forkid: schedule cancun fork on goerli (#28719)\n\nThis PR schedules the cancun fork for the goerli testnet as discussed on ACD.\r\nSpec: ethereum/execution-specs#860\r\n\r\nWe schedule:\r\n  goerli at 1705473120"
            },
            {
                "date": "2024-01-08T19:31:22Z",
                "message": "cmd/devp2p/internal/ethtest: fix typos in comments (#28772)"
            },
            {
                "date": "2024-01-08T19:18:30Z",
                "message": "eth/filters: fix early Unsubscribe of log events (#28769)"
            },
            {
                "date": "2024-01-08T14:27:33Z",
                "message": "log: emit error level string as \"error\", not \"eror\" (#28774)"
            }
        ],
        "2024-01-05": [
            {
                "date": "2024-01-05T12:49:31Z",
                "message": "eth/downloader, eth/filters: use defer to call Unsubscribe (#28762)"
            }
        ],
        "2024-01-04": [
            {
                "date": "2024-01-04T15:32:23Z",
                "message": "ethclient: simplify error handling in TransactionReceipt (#28748)\n\n\r\nCo-authored-by: Martin HS <martin@swende.se>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2024-01-04T14:03:58Z",
                "message": "internal/flags: update copyright year to 2024 (#28760)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2024-01-03": [
            {
                "date": "2024-01-03T15:12:20Z",
                "message": "cmd/evm: Fix blob-gas-used on invalid transactions in t8n (#28734)\n\ncmd/evm: fixes the blob gas calculation if a transaction is invalid"
            }
        ],
        "2024-01-02": [
            {
                "date": "2024-01-02T10:39:53Z",
                "message": "core/vm: update comments to match eip number (#28743)"
            },
            {
                "date": "2024-01-02T10:37:22Z",
                "message": "cmd/evm: fix link in README.md (#28755)"
            }
        ],
        "2023-12-30": [
            {
                "date": "2023-12-30T20:16:02Z",
                "message": "log: avoid setting default slog logger in init (#28747)\n\nslog.SetDefault has undesirable side effects. It also sets the default logger destination,\r\nfor example. So we should not call it by default in init."
            },
            {
                "date": "2023-12-30T16:02:48Z",
                "message": "build: add support for ubuntu 23.10 (mantic minotaur) (#28728)"
            }
        ],
        "2023-12-28": [
            {
                "date": "2023-12-28T10:46:51Z",
                "message": "accounts,signer: fix typos in comments (#28730)"
            },
            {
                "date": "2023-12-28T10:39:28Z",
                "message": "tests: add currentExcessBlobGas to state tests (#28735)"
            }
        ],
        "2023-12-26": [
            {
                "date": "2023-12-26T08:38:11Z",
                "message": "core/state: logic equivalence for GetCodeHash (#28733)"
            }
        ],
        "2023-12-22": [
            {
                "date": "2023-12-22T12:46:27Z",
                "message": "params: begin v1.13.9 release cycle"
            },
            {
                "date": "2023-12-22T12:37:16Z",
                "message": "params: go-ethereum v1.13.8 stable"
            },
            {
                "date": "2023-12-22T06:50:41Z",
                "message": "core/rawdb: improve state scheme checking (#28724)\n\nThis pull request improves the condition to check if path state scheme is in use. \r\n\r\nOriginally, root node presence was used as the indicator if path scheme is used or not. However due to fact that root node will be deleted during the initial snap sync, this condition is no longer useful.\r\n\r\nIf PersistentStateID is present, it shows that we've already configured for path scheme."
            }
        ],
        "2023-12-21": [
            {
                "date": "2023-12-21T19:28:32Z",
                "message": "core, cmd, trie: fix the condition of pathdb initialization (#28718)\n\nOriginal problem was caused by #28595, where we made it so that as soon as we start to sync, the root of the disk layer is deleted. That is not wrong per se, but another part of the code uses the \"presence of the root\" as an init-check for the pathdb. And, since the init-check now failed, the code tried to re-initialize it which failed since a sync was already ongoing.\r\n\r\nThe total impact being: after a state-sync has begun, if the node for some reason is is shut down, it will refuse to start up again, with the error message: `Fatal: Failed to register the Ethereum service: waiting for sync.`. \r\n\r\nThis change also modifies how `geth removedb` works, so that the user is prompted for two things: `state data` and `ancient chain`. The former includes both the chaindb aswell as any state history stored in ancients. \r\n\r\n---------\r\n\r\nCo-authored-by: Martin HS <martin@swende.se>"
            }
        ],
        "2023-12-20": [
            {
                "date": "2023-12-20T16:23:48Z",
                "message": "cmd/devp2p: update eth/snap protocol test suites for PoS (#28340)\n\nHere we update the eth and snap protocol test suites with a new test chain,\r\ncreated by the hivechain tool. The new test chain uses proof-of-stake. As such,\r\ntests using PoW block propagation in the eth protocol are removed. The test suite\r\nnow connects to the node under test using the engine API in order to make it\r\naccept transactions. \r\n\r\nThe snap protocol test suite has been rewritten to output test descriptions and\r\nlog requests more verbosely.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-12-20T14:36:10Z",
                "message": "build: upgrade to golangci-lint v1.55.2 (#28712)\n\nThis is primarily to make lint work again on macOS 14. The older version of golangci-lint kept crashing. \r\n\r\nAlso included is a fix for a goroutine leak in the recently-introduced function MustRunCommandWithOutput."
            },
            {
                "date": "2023-12-20T12:41:40Z",
                "message": "accounts: properly close managed wallets when closing manager (#28710)"
            },
            {
                "date": "2023-12-20T06:56:41Z",
                "message": "internal/build: fix crash in MustRunCommandWithOutput (#28709)"
            }
        ],
        "2023-12-19": [
            {
                "date": "2023-12-19T12:32:25Z",
                "message": "params: begin go-ethereum v1.13.8 release cycle"
            },
            {
                "date": "2023-12-19T12:25:03Z",
                "message": "params: go-ethereum v1.13.7 stable"
            },
            {
                "date": "2023-12-19T09:50:02Z",
                "message": "build(deps): bump golang.org/x/crypto from 0.15.0 to 0.17.0 (#28702)\n\nBumps [golang.org/x/crypto](https://github.com/golang/crypto) from 0.15.0 to 0.17.0.\r\n- [Commits](https://github.com/golang/crypto/compare/v0.15.0...v0.17.0)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: golang.org/x/crypto\r\n  dependency-type: direct:production\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
            },
            {
                "date": "2023-12-19T09:35:02Z",
                "message": "ci: disable lint on travis (#28706)"
            },
            {
                "date": "2023-12-19T08:24:23Z",
                "message": ".travis: set lower GOGC value (#28705)\n\nAs documented on https://golangci-lint.run/usage/performance/ , a lower\r\nGOGC value causes less peak mem consumption when running the linter.\r\n\r\nExceeding 3Gb is a common cause for build failures, according to\r\nhttps://docs.travis-ci.com/user/common-build-problems/#my-build-script-is-killed-without-any-error"
            },
            {
                "date": "2023-12-19T07:55:04Z",
                "message": "build: make linter emit output (#28704)"
            }
        ],
        "2023-12-18": [
            {
                "date": "2023-12-18T19:10:54Z",
                "message": "core/rawdb: implement size reporting for live items in freezer_table (#28525)\n\nThis is the fix to issue #27483. A new hiddenBytes() is introduced to calculate the byte size of hidden items in the freezer table. When reporting the size of the freezer table, size of the hidden items will be subtracted from the total size.\r\n\r\n---------\r\n\r\nCo-authored-by: Yifan <Yifan Wang>\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2023-12-18T19:09:41Z",
                "message": "internal/ethapi: ethSendTransaction check baseFee (#27834)\n\nIf the EIP-1559 is activated, reject 0-priced transactions in the rpc level"
            },
            {
                "date": "2023-12-18T18:10:11Z",
                "message": "params: begin v1.13.7 release cycle"
            },
            {
                "date": "2023-12-18T17:53:47Z",
                "message": "params: release go-ethereum v1.13.6 stable"
            },
            {
                "date": "2023-12-18T14:16:25Z",
                "message": "cmd/evm: t8n support custom tracers (#28557)\n\nThis change implements ability for the `evm t8n` tool to use custom tracers; either 'native' golang tracers or javascript tracers."
            },
            {
                "date": "2023-12-18T13:11:27Z",
                "message": "cmd/evm, cmd/clef, cmd/bootnode: fix / unify logging (#28696)\n\nThis change fixes a problem with our non-core binaries: evm, clef, bootnode.\r\n\r\nFirst of all, they failed to convert from legacy loglevels 1 to 5, to the new slog loglevels -4 to 4.\r\n\r\nSecondly, the logging was actually setup in the init phase, and then overridden in the main. This is not needed for evm, since it used the same flag name as the main geth verbosity. Better to let the flags/internal handle the logging init."
            },
            {
                "date": "2023-12-18T12:56:27Z",
                "message": "cmd/evm:  default to mirror mainnet forks enabled (#28691)\n\ncmd/evm:  default to using dev chain config (all mainnet HFs activated at block/timestamp 0"
            },
            {
                "date": "2023-12-18T12:28:41Z",
                "message": "internal/flags: add missing flag types for auto-env-var generation (#28692)\n\nCertain flags, such as `--rpc.txfeecap` currently do not have an env-var auto-generated for them. This change adds three missing cli flag types to the auto env-var helper function to fix this."
            },
            {
                "date": "2023-12-18T09:47:21Z",
                "message": "p2p/discover: add liveness check in collectTableNodes (#28686)\n\n* p2p/discover: add liveness check in collectTableNodes\r\n\r\n* p2p/discover: fix test\r\n\r\n* p2p/discover: rename to appendLiveNodes\r\n\r\n* p2p/discover: add dedup logic back\r\n\r\n* p2p/discover: simplify\r\n\r\n* p2p/discover: fix issue found by test"
            },
            {
                "date": "2023-12-18T08:35:12Z",
                "message": "all: fix typos in comments (#28682)\n\nchore(core,eth):fix a couple of typos"
            }
        ],
        "2023-12-15": [
            {
                "date": "2023-12-15T03:48:55Z",
                "message": "miner: eliminate the dead loop possibility for `newWorkLoop` and `mainLoop` (#28677)\n\ndiscard the intervalAdjust message if the channel is full"
            }
        ],
        "2023-12-13": [
            {
                "date": "2023-12-13T22:33:46Z",
                "message": "all: fix typos in comments (#28662)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-12-13T22:32:17Z",
                "message": "eth/fetcher, eth/gasestimator: fix typos in comments (#28675)"
            }
        ],
        "2023-12-12": [
            {
                "date": "2023-12-12T15:23:36Z",
                "message": "core/txpool : small cleanup refactors (#28654)"
            },
            {
                "date": "2023-12-12T13:47:59Z",
                "message": "eth/protocols/eth: fix typos in comments (#28652)"
            },
            {
                "date": "2023-12-12T13:40:50Z",
                "message": "cmd/utils: fix HTTPHost, WSHost flag priority (#28669)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2023-12-08": [
            {
                "date": "2023-12-08T13:28:23Z",
                "message": "trie: remove inconsistent trie nodes during sync in path mode (#28595)\n\nThis fixes a database corruption issue that could occur during state healing.\r\nWhen sync is aborted while certain modifications were already committed, and a\r\nreorg occurs, the database would contain incorrect trie nodes stored by path.\r\nThese nodes need to detected/deleted in order to obtain a complete and fully correct state\r\nafter state healing.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-12-08T13:16:04Z",
                "message": "cmd/utils, eth: disallow invalid snap sync / snapshot flag combos (#28657)\n\n* eth: prevent startup in snap mode without snapshots\r\n\r\n* cmd/utils: try to fix bad flag combos wrt snap sync and snapshot generation"
            },
            {
                "date": "2023-12-08T12:38:00Z",
                "message": "beacon/light: add CommitteeChain (#27766)\n\nThis change implements CommitteeChain which is a key component of the beacon light client. It is a passive data structure that can validate, hold and update a chain of beacon light sync committees and updates, starting from a checkpoint that proves the starting committee through a beacon block hash, header and corresponding state. Once synced to the current sync period, CommitteeChain can also validate signed beacon headers."
            },
            {
                "date": "2023-12-08T10:06:01Z",
                "message": "cmd/evm: fix dump after state-test exec (#28650)\n\nThe dump after state-test didn't work, the problem was an error, \"Already committed\", which was silently ignored. \r\n\r\nThis change re-initialises the state, so the dumping works again."
            },
            {
                "date": "2023-12-08T08:40:50Z",
                "message": "rpc: fix ns/\u00b5s mismatch in metrics (#28649)\n\nThe rpc/duration/all meter was in nanoseconds, the individual meter in microseconds.\r\nThis PR changes it so both of them use nanoseconds."
            }
        ],
        "2023-12-07": [
            {
                "date": "2023-12-07T10:45:09Z",
                "message": "build: upgrade -dlgo version to Go 1.21.5 (#28648)"
            },
            {
                "date": "2023-12-07T09:07:20Z",
                "message": "tests/fuzzers/bls12381: deactivate BLS fuzzer when CGO_ENABLED=0 (#28653)\n\ntests/fuzzers/bls12381: deactivate fuzzer when CGO_ENABLED=0"
            }
        ],
        "2023-12-06": [
            {
                "date": "2023-12-06T10:41:04Z",
                "message": "ethdb/pebble: remove a dependency (#28627)\n\nThe dependency was not really used anyway, so we can get rid of it.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2023-12-05": [
            {
                "date": "2023-12-05T13:45:40Z",
                "message": ".github: use github actions to run 32-bit linux tests (#28549)\n\nuse github actions to run 32-bit linux tests"
            },
            {
                "date": "2023-12-05T10:54:44Z",
                "message": "log: remove lazy, remove unused interfaces, unexport methods (#28622)\n\nThis change \r\n\r\n- Removes interface `log.Format`, \r\n- Removes method `log.FormatFunc`, \r\n- unexports `TerminalHandler.TerminalFormat` formatting methods (renamed to `TerminalHandler.format`)\r\n- removes the notion of `log.Lazy` values\r\n\r\n\r\nThe lazy handler was useful in the old log package, since it\r\ncould defer the evaluation of costly attributes until later in the\r\nlog pipeline: thus, if the logging was done at 'Trace', we could\r\nskip evaluation if logging only was set to 'Info'.\r\n\r\nWith the move to slog, this way of deferring evaluation is no longer\r\nneeded, since slog introduced 'Enabled': the caller can thus do\r\nthe evaluate-or-not decision at the callsite, which is much more\r\nstraight-forward than dealing with lazy reflect-based evaluation.\r\n\r\nAlso, lazy evaluation would not work with 'native' slog, as in, these\r\ntwo statements would be evaluated differently:\r\n\r\n```golang\r\n  log.Info(\"foo\", \"my lazy\", lazyObj)\r\n  slog.Info(\"foo\", \"my lazy\", lazyObj)\r\n```"
            },
            {
                "date": "2023-12-05T08:37:48Z",
                "message": "eth/tracers/logger: make structlog/json-log stack hex again (#28628)\n\n* common/hexutil: define hex wrappers for uint256.Int\n\n* eth/tracers/logger: make structlog/json-log stack hex again\n\n* common/hexutil: goimports"
            }
        ],
        "2023-12-04": [
            {
                "date": "2023-12-04T13:55:06Z",
                "message": "accounts: run tests in parallel (#28544)"
            },
            {
                "date": "2023-12-04T12:25:17Z",
                "message": "eth/fetcher: fix invalid tracking of received at time for block (#28637)\n\neth/fetcher: fix invalid tracking of received at time"
            },
            {
                "date": "2023-12-04T09:53:42Z",
                "message": "accounts/abi/bind: fixed typos (#28634)\n\n* Update auth.go\r\n\r\n* Update backend.go\r\n\r\n* Update bind.go\r\n\r\n* Update bind_test.go"
            },
            {
                "date": "2023-12-04T09:52:55Z",
                "message": "cmd/evm: fix Env struct json tag (#28635)"
            }
        ],
        "2023-12-01": [
            {
                "date": "2023-12-01T13:08:52Z",
                "message": "eth/tracers: tx-level state in debug_traceCall (#28460)"
            },
            {
                "date": "2023-12-01T12:28:20Z",
                "message": "slog: faster and less memory-consumption (#28621)\n\nThese changes improves the performance of the non-coloured terminal formatting, _quite a lot_. \r\n\r\n```\r\nname               old time/op    new time/op    delta\r\nTerminalHandler-8    10.2\u00b5s \u00b115%     5.4\u00b5s \u00b1 9%  -47.02%  (p=0.008 n=5+5)\r\n\r\nname               old alloc/op   new alloc/op   delta\r\nTerminalHandler-8    2.17kB \u00b1 0%    0.40kB \u00b1 0%  -81.46%  (p=0.008 n=5+5)\r\n\r\nname               old allocs/op  new allocs/op  delta\r\nTerminalHandler-8      33.0 \u00b1 0%       5.0 \u00b1 0%  -84.85%  (p=0.008 n=5+5)\r\n```\r\n\r\nI tried to _somewhat_ organize the commits, but the it might still be a bit chaotic. Some core insights: \r\n\r\n- The function `terminalHandler.Handl` uses a mutex, and writes all output immediately to 'upstream'. Thus, it can reuse a scratch-buffer every time. \r\n- This buffer can be propagated internally, making all the internal formatters either write directly to it,\r\n- OR, make  use of the `tmp := buf.AvailableBuffer()` in some cases, where a byte buffer \"extra capacity\" can be temporarily used. \r\n- The `slog` package  uses `Attr` by value. It makes sense to minimize operating on them, since iterating / collecting into a new slice, iterating again etc causes copy-on-heap. Better to operate on them only once. \r\n- If we want to do padding, it's better to copy from a constant `space`-buffer than to invoke `bytes.Repeat` every single time."
            },
            {
                "date": "2023-12-01T08:51:50Z",
                "message": "accounts/abi/bind: fix typo (#28630)"
            }
        ],
        "2023-11-30": [
            {
                "date": "2023-11-30T09:50:48Z",
                "message": "trie/triedb/hashdb: take lock around access to dirties cache (#28542)\n\nAdd read locking of db lock around access to dirties cache in hashdb.Database to prevent\r\ndata race versus hashdb.Database.dereference which can modify the dirities map by deleting\r\nan item.\r\n\r\nFixes #28541\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2023-11-29": [
            {
                "date": "2023-11-29T08:07:51Z",
                "message": "core/state: make stateobject.create selfcontain (#28459)"
            },
            {
                "date": "2023-11-29T07:33:50Z",
                "message": "all: replace log15 with slog (#28187)\n\nThis PR replaces Geth's logger package (a fork of [log15](https://github.com/inconshreveable/log15)) with an implementation using slog, a logging library included as part of the Go standard library as of Go1.21.\r\n\r\nMain changes are as follows:\r\n* removes any log handlers that were unused in the Geth codebase.\r\n* Json, logfmt, and terminal formatters are now slog handlers.\r\n* Verbosity level constants are changed to match slog constant values.  Internal translation is done to make this opaque to the user and backwards compatible with existing `--verbosity` and `--vmodule` options.\r\n* `--log.backtraceat` and `--log.debug` are removed.\r\n\r\nThe external-facing API is largely the same as the existing Geth logger.  Logger method signatures remain unchanged.\r\n\r\nA small semantic difference is that a `Handler` can only be set once per `Logger` and not changed dynamically.  This just means that a new logger must be instantiated every time the handler of the root logger is changed.\r\n\r\n----\r\nFor users of the `go-ethereum/log` module. If you were using this module for your own project, you will need to change the initialization. If you previously did \r\n```golang\r\nlog.Root().SetHandler(log.LvlFilterHandler(log.LvlInfo, log.StreamHandler(os.Stderr, log.TerminalFormat(true))))\r\n```\r\nYou now instead need to do \r\n```golang\r\nlog.SetDefault(log.NewLogger(log.NewTerminalHandlerWithLevel(os.Stderr, log.LevelInfo, true)))\r\n```\r\nSee more about reasoning here: https://github.com/ethereum/go-ethereum/issues/28558#issuecomment-1820606613"
            }
        ],
        "2023-11-28": [
            {
                "date": "2023-11-28T20:31:47Z",
                "message": "eth/gasestimator: allow slight estimation error in favor of less iterations (#28618)\n\n* eth/gasestimator: early exit for plain transfer and error allowance\r\n\r\n* core, eth/gasestimator: hard guess at a possible required gas\r\n\r\n* internal/ethapi: update estimation tests with the error ratio\r\n\r\n* eth/gasestimator: I hate you linter\r\n\r\n* graphql: fix gas estimation test\r\n\r\n---------\r\n\r\nCo-authored-by: Oren <orenyomtov@users.noreply.github.com>"
            },
            {
                "date": "2023-11-28T20:29:00Z",
                "message": "consensus: verify the nonexistence of shanghai- and cancun-specific header fields (#28605)"
            },
            {
                "date": "2023-11-28T18:16:50Z",
                "message": "crypto/secp256k1: fix 32-bit tests when CGO_ENABLED=0 (#28602)"
            },
            {
                "date": "2023-11-28T14:00:35Z",
                "message": "eth/tracers/js: fix type inconsistencies (#28488)\n\nThis change fixes two type-inconsistencies in the JS tracer:\r\n\r\n- In most places we return byte arrays as a `Uint8Array` to the tracer. However it seems we missed doing the conversion for `ctx` fields which are passed to the tracer during `result`. They are passed as simple arrays. I think Uint8Arrays are more suitable and we should change this inconsistency. Note: this will be a breaking-change. But I believe the effect is small. If we look at our tracers we see that these fields (`ctx.from`, `ctx.to`, etc.) are used in 2 ways. Passed to `toHex` which takes both array or buffer. Or the length was measured which is the same for both types.\r\n- The `slice` taking in `int, int` params versus `memory.slice` taking `int64, int64` params. I suggest changing `slice` types to `int64`. This should have no effect almost in any case."
            },
            {
                "date": "2023-11-28T13:49:08Z",
                "message": "ethereum: remove TODO comment about subscription (#28609)"
            },
            {
                "date": "2023-11-28T12:54:17Z",
                "message": "cmd/evm, core/state: fix post-exec dump of state (statetests, blockchaintests) (#28504)\n\nThere were several problems related to dumping state. \r\n\r\n- If a preimage was missing, even if we had set the `OnlyWithAddresses` to `false`, to export them anyway, the way the mapping was constructed (using `common.Address` as key) made the entries get lost anyway. Concerns both state- and blockchain tests. \r\n- Blockchain test execution was not configured to store preimages.\r\n\r\nThis changes makes it so that the block test executor takes a callback, just like the state test executor already does. This callback can be used to examine the post-execution state, e.g. to aid debugging of test failures."
            },
            {
                "date": "2023-11-28T08:01:23Z",
                "message": "light: remove package light(#28614)\n\nThis changes removes the package 'light', which is currently unused."
            },
            {
                "date": "2023-11-28T07:38:30Z",
                "message": "eth/catalyst, eth/downloader: expose more sync information (#28584)\n\nThis change exposes more information from sync module internally"
            }
        ],
        "2023-11-27": [
            {
                "date": "2023-11-27T14:39:28Z",
                "message": "go.mod: update uint256 to v1.2.4 (#28612)"
            },
            {
                "date": "2023-11-27T14:20:09Z",
                "message": "eth/gasestimator, internal/ethapi: move gas estimator out of rpc (#28600)"
            }
        ],
        "2023-11-25": [
            {
                "date": "2023-11-25T13:56:22Z",
                "message": "trie: fix random test generator early terminate (#28590)\n\nThis change fixes a minor bug in the `randTest.Generate` function, which caused the `quick.Check` to be a no-op."
            }
        ],
        "2023-11-24": [
            {
                "date": "2023-11-24T11:26:42Z",
                "message": "eth, internal/ethapi: drop some weird indirection (#28597)"
            }
        ],
        "2023-11-23": [
            {
                "date": "2023-11-23T14:28:26Z",
                "message": "cmd, les, tests: remove light client code (#28586)\n\n* cmd, les, tests: remove light client code\r\n\r\nThis commit removes the light client (LES) code.\r\nSince the merge the light client has been broken and\r\nit is hard to maintain it alongside the normal client.\r\nWe decided it would be best to remove it for now and\r\nmaybe rework and reintroduce it in the future.\r\n\r\n* cmd, eth: remove some more mentions of light mode\r\n\r\n* cmd: re-add flags and mark as deprecated\r\n\r\n* cmd: warn the user about deprecated flags\r\n\r\n* eth: better error message"
            },
            {
                "date": "2023-11-23T10:14:10Z",
                "message": "params: update discV5 bootnodes (#28562)\n\nupdate discV5 bootnodes from https://github.com/eth-clients/eth2-networks/blob/master/shared/mainnet/bootstrap_nodes.txt"
            },
            {
                "date": "2023-11-23T08:22:09Z",
                "message": "cmd/devp2p/internal/ethtest: undo debug-hack (#28588)\n\ncmd/devp2p/internal/ethtest: remove a debug-hack flaw which prevented certain tests from running"
            }
        ],
        "2023-11-22": [
            {
                "date": "2023-11-22T15:32:43Z",
                "message": "cmd/geth: fix build error (#28585)"
            },
            {
                "date": "2023-11-22T13:48:25Z",
                "message": "cmd/{geth,utils}: add cmd to export preimages in snap enumeration order (#28256)\n\nAdds a subcommand: `geth snapshot export-preimages`, to export preimages of every hash found during a snapshot enumeration: that is, it exports _only the active state_, and not _all_ preimages that have been used but are no longer part of the state. \r\n\r\nThis tool is needed for the verkle transition, in order to distribute the preimages needed for the conversion. Since only the 'active' preimages are exported, the output is shrunk from ~70GB to ~4GB.\r\n\r\nThe order of the output is the order used by the snapshot enumeration, which avoids database thrashing. However, it also means that storage-slot preimages are not deduplicated."
            },
            {
                "date": "2023-11-22T13:00:30Z",
                "message": "les/vflux: run tests in parallel (#28524)"
            },
            {
                "date": "2023-11-22T11:08:39Z",
                "message": "cmd/geth: add support for --dev flag in dumpgenesis (#28463)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            },
            {
                "date": "2023-11-22T11:01:38Z",
                "message": "cmd/utils: validate pre-existing genesis in --dev mode (#28468)\n\ngeth --dev can be used with an existing data directory and genesis block. Since\r\ndev mode only works with PoS, we need to verify that the merge has happened.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-11-22T10:24:54Z",
                "message": "rpc: improve performance of subscription notification encoding (#28328)\n\nIt turns out that encoding json.RawMessage is slow because\r\npackage json basically parses the message again to ensure it is valid.\r\nWe can avoid the slowdown by encoding the entire RPC notification once,\r\nwhich yields a 30% speedup."
            },
            {
                "date": "2023-11-22T10:00:44Z",
                "message": "core/types: make 'v' optional for DynamicFeeTx and BlobTx (#28564)\n\nThis fixes an issue where transactions would not be accepted when they have only\r\n'yParity' and not 'v'."
            }
        ],
        "2023-11-21": [
            {
                "date": "2023-11-21T14:28:44Z",
                "message": "eth/filters: reuse error msg for invalid block range (#28479)"
            },
            {
                "date": "2023-11-21T14:22:22Z",
                "message": "ethdb/pebble: don't double-close iterator inside pebbleIterator (#28566)\n\nAdds 'released' flag to pebbleIterator to avoid double closing cockroachdb/pebble.Iterator as it is an invalid operation.\r\n\r\nFixes #28565"
            },
            {
                "date": "2023-11-21T11:19:28Z",
                "message": "core, trie, rpc: speed up tests (#28461)\n\n* rpc: make subscription test faster\r\n\r\nreduces time for TestClientSubscriptionChannelClose\r\nfrom 25 sec to < 1 sec.\r\n\r\n* trie: cache trie nodes for faster sanity check\r\n\r\nThis reduces the time spent on TestIncompleteSyncHash\r\nfrom ~25s to ~16s.\r\n\r\n* core/forkid: speed up validation test\r\n\r\nThis takes the validation test from > 5s to sub 1 sec\r\n\r\n* core/state: improve snapshot test run\r\nbrings the time for TestSnapshotRandom from 13s down to 6s\r\n\r\n* accounts/keystore: improve keyfile test\r\n\r\nThis removes some unnecessary waits and reduces the\r\nruntime of TestUpdatedKeyfileContents from 5 to 3 seconds\r\n\r\n* trie: remove resolver\r\n* trie: only check ~5% of all trie nodes"
            },
            {
                "date": "2023-11-21T08:16:57Z",
                "message": "accounts/abi: context info on unpack-errors (#28529)\n\nadds contextual information to errors returned by unpack"
            },
            {
                "date": "2023-11-21T07:56:23Z",
                "message": "cmd/evm: capitalize evm commands (#28569)\n\n* standard:fix for a unified standard\r\n\r\n* standard:fix more as a complements\r\n\r\n---------\r\n\r\nCo-authored-by: haotian <haotian@haotiandeMacBook-Air.local>"
            },
            {
                "date": "2023-11-21T02:47:37Z",
                "message": "core/state/snapshot: print correct error from trie iterator (#28560)"
            }
        ],
        "2023-11-20": [
            {
                "date": "2023-11-20T09:52:14Z",
                "message": "cmd: run tests in parallel (#28546)"
            },
            {
                "date": "2023-11-20T08:05:20Z",
                "message": "core/txpool/legacypool: respect nolocals-setting (#28435)\n\nThis change adds a check to ensure that transactions added to the legacy pool are not treated as 'locals' if the global locals-management has been disabled. \r\n\r\nThis change makes the pool enforce the --txpool.pricelimit setting."
            },
            {
                "date": "2023-11-20T07:44:05Z",
                "message": "accounts, cmd: fix typos (#28526)"
            },
            {
                "date": "2023-11-20T07:20:59Z",
                "message": "signer: run tests in parallel (#28536)\n\nmarks tests as parallel-safe in package signer"
            }
        ],
        "2023-11-17": [
            {
                "date": "2023-11-17T14:56:21Z",
                "message": "cmd/evm: validate blockchain tests poststate account storage (#28443)\n\nThis PR verifies the accounts' storage as specified in a blockchain test's postState field\r\n\r\nThe expect-section, it does really only check that the test works. It's meant for the test-author to verify that \"If the test does what it's supposed to, then the nonce of X should be 2, and the slot Y at Z should be 0x123.\r\n\r\n    This expect-section is not exhaustive (not full post-state)\r\n    It is also not auto-generated, but put there manually by the author.\r\n\r\nWe can still check it, as a test-sanity-check, in geth"
            },
            {
                "date": "2023-11-17T14:48:06Z",
                "message": "Dockerfile: update Go to 1.21 (#28538)"
            }
        ],
        "2023-11-15": [
            {
                "date": "2023-11-15T15:20:34Z",
                "message": "ethdb/memorydb, trie: reduced allocations (#28473)\n\n* trie: use pooling of iterator states in iterator\r\n\r\nThe node iterator burns through a lot of memory while iterating a trie, and a lot of\r\nthat can be avoided by using a fairly small pool (max 40 items).\r\n\r\nname        old time/op    new time/op    delta\r\nIterator-8    6.22ms \u00b1 3%    5.40ms \u00b1 6%  -13.18%  (p=0.008 n=5+5)\r\n\r\nname        old alloc/op   new alloc/op   delta\r\nIterator-8    2.36MB \u00b1 0%    1.67MB \u00b1 0%  -29.23%  (p=0.008 n=5+5)\r\n\r\nname        old allocs/op  new allocs/op  delta\r\nIterator-8     37.0k \u00b1 0%     29.8k \u00b1 0%     ~     (p=0.079 n=4+5)\r\n\r\n* ethdb/memorydb: avoid one copying of key\r\n\r\nBy making the transformation from []byte to string at an earlier point,\r\nwe save an allocation which otherwise happens later on.\r\n\r\nname           old time/op    new time/op    delta\r\nBatchAllocs-8     412\u00b5s \u00b1 6%     382\u00b5s \u00b1 2%   -7.18%  (p=0.016 n=5+4)\r\n\r\nname           old alloc/op   new alloc/op   delta\r\nBatchAllocs-8     480kB \u00b1 0%     490kB \u00b1 0%   +1.93%  (p=0.008 n=5+5)\r\n\r\nname           old allocs/op  new allocs/op  delta\r\nBatchAllocs-8     3.03k \u00b1 0%     2.03k \u00b1 0%  -32.98%  (p=0.008 n=5+5)"
            },
            {
                "date": "2023-11-15T13:42:33Z",
                "message": "all: replace some cases of strings.SplitN with strings.Cut (#28446)"
            },
            {
                "date": "2023-11-15T13:30:35Z",
                "message": "accounts/abi: improve readability of method-to-string conversion  (#28530)\n\nrefactor: improve readability of NewMethod print"
            },
            {
                "date": "2023-11-15T12:55:56Z",
                "message": "internal/jsre/deps: fix typo in jsdoc (#28511)\n\nminor typo fix"
            },
            {
                "date": "2023-11-15T12:46:32Z",
                "message": "miner: run tests in parallel (#28506)\n\nChanges many of the tests in the miner package to run in parallel"
            },
            {
                "date": "2023-11-15T12:36:57Z",
                "message": "accounts,cmd,console,les,metrics:  refactor some errors checked by (ST1005) go-staticcheck (#28532)\n\nfix: fix some (ST1005)go-staticcheck"
            },
            {
                "date": "2023-11-15T08:54:35Z",
                "message": "cmd/geth: more special cases logging tests (#28527)\n\nadds logging tests for errors and custom fmt.Stringer-types which output strings that needs to be quoted/escaped."
            }
        ],
        "2023-11-14": [
            {
                "date": "2023-11-14T17:40:16Z",
                "message": "tests: skip tests on windows 32bit CI (#28521)\n\ntests: skip half the blockchain- and state-tests on windows 32bit CI-tests"
            },
            {
                "date": "2023-11-14T13:34:29Z",
                "message": " tests/fuzzers: move fuzzers into native packages (#28467)\n\nThis PR moves our fuzzers from tests/fuzzers into whatever their respective 'native' package is.\r\n\r\nThe historical reason why they were placed in an external location, is that when they were based on go-fuzz, they could not be \"hidden\" via the _test.go prefix. So in order to shove them away from the go-ethereum \"production code\", they were put aside.\r\n\r\nBut now we've rewritten them to be based on golang testing, and thus can be brought back. I've left (in tests/) the ones that are not production (bls128381), require non-standard imports (secp requires btcec, bn256 requires gnark/google/cloudflare deps).\r\n\r\nThis PR also adds a fuzzer for precompiled contracts, because why not.\r\n\r\nThis PR utilizes a newly rewritten replacement for go-118-fuzz-build, namely gofuzz-shim, which utilises the inputs from the fuzzing engine better."
            },
            {
                "date": "2023-11-14T13:27:07Z",
                "message": "trie: spelling - fix comments in hasher (#28507)\n\nCo-authored-by: VM <arimas@foxmail.com>"
            },
            {
                "date": "2023-11-14T12:14:38Z",
                "message": "eth/tracers/js: fix isPush for push0 (#28520)\n\nFixes so that `push0` opcode is correctly reported as `true` by the `IsPush` function\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-11-14T12:09:40Z",
                "message": "cmd, core, trie: verkle-capable `geth init` (#28270)\n\nThis change allows the creation of a genesis block for verkle testnets. This makes for a chunk of code that is easier to review and still touches many discussion points."
            }
        ],
        "2023-11-10": [
            {
                "date": "2023-11-10T12:26:13Z",
                "message": "cmd/geth: remove some whitespace in code and comments (#28148)\n\nThis changes just removes some whitespace"
            },
            {
                "date": "2023-11-10T12:15:06Z",
                "message": "build: upgrade -dlgo version to Go 1.21.4 (#28505)"
            },
            {
                "date": "2023-11-10T11:23:09Z",
                "message": "ethclient: add empty/nonexist account testcase for eth_getProof RPC (#28482)\n\nAdds testcases for eth_getProof endpoint for the following cases: \r\n\r\n- the account/contract does not exist\r\n- the account/contract exists but is empty."
            },
            {
                "date": "2023-11-10T11:21:51Z",
                "message": "cmd/evm: allow state dump regardless if test passes in statetest (#28484)\n\nThis change makes it so that when executing state tess, state is always dumped out if the corresponding flag is set."
            },
            {
                "date": "2023-11-10T10:56:39Z",
                "message": "core/rawdb: fsync the index file after each freezer write (#28483)\n\n* core/rawdb: fsync the index and data file after each freezer write\r\n\r\n* core/rawdb: fsync the data file in freezer after write"
            },
            {
                "date": "2023-11-10T07:10:03Z",
                "message": "eth/filters: exit early if topics-filter has more than 4 topics (#28494)\n\nCurrently, geth's will return `[]` for any `len(topics) > 4` log filter. The EVM only supports up to four logs, via LOG4 opcode, so larger criterias fail. This change makes the filter query exit early in those cases."
            }
        ],
        "2023-11-09": [
            {
                "date": "2023-11-09T14:15:22Z",
                "message": "ethdb/pebble: add `Errorf` function to panicLogger (#28491)\n\ncockroachdb/pebble@422dce9 added Errorf to the Logger interface, this change makes it possible to compile geth with that version of pebble by adding the corresponding method to panicLogger."
            },
            {
                "date": "2023-11-09T09:46:48Z",
                "message": "cmd/geth: more testcases for logging (#28501)\n\n* cmd/geth: more testcases for logging\r\n\r\nThis adds more edgecases around logging, particularly around handling of different types of nil-values\r\nas concrete types and within interfaces.\r\n\r\nAlso adds tests with 'reserved' values which breaks json/logfmt formats. The json output is checked in,\r\nbut not actively used by any testcase at the moment.\r\n\r\n* cmd/geth/testdata: remove timestamps"
            },
            {
                "date": "2023-11-09T08:36:27Z",
                "message": "graphql: type of yParity from Long to BigInt (#28456)\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
            }
        ],
        "2023-11-08": [
            {
                "date": "2023-11-08T09:22:08Z",
                "message": "core/vm: set basefee to 0 internally on eth_call (#28470)\n\n* core/vm: set basefee to 0 internally on eth_call\r\n\r\n* core: nicer 0-basefee, make it work for blob fees too\r\n\r\n* internal/ethapi: make tests a bit more complex\r\n\r\n* core: fix blob fee checker\r\n\r\n* core: make code a bit more readable\r\n\r\n* core: fix some test error strings\r\n\r\n* core/vm: Get rid of weird comment\r\n\r\n* core: dict wrong typo"
            }
        ],
        "2023-11-07": [
            {
                "date": "2023-11-07T13:21:46Z",
                "message": "eth: set networkID to chainID by default (#28250)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-11-07T11:41:19Z",
                "message": "eth/filters: eth_getLogs fast exit for invalid block range (#28386)"
            },
            {
                "date": "2023-11-07T11:00:31Z",
                "message": "travis: use newer builder image (#28475)"
            },
            {
                "date": "2023-11-07T10:35:03Z",
                "message": ".travis: enable cross building to macos arm64 (#28474)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2023-11-03": [
            {
                "date": "2023-11-03T17:40:37Z",
                "message": "ethclient: fix forwarding 1559 gas fields (#28462)"
            },
            {
                "date": "2023-11-03T09:28:27Z",
                "message": "eth/tracers: add position field for callTracer logs (#28389)\n\nCurrently, one can use the \"withLogs\" parameter to include logs in the\r\ncallTracer results, which allows the user to see at which trace level\r\nwas each log emitted.\r\nThis commit adds a position field to the logs which determine\r\nthe exact ordering of a call's logs and its subcalls. This would\r\nbe useful e.g. for explorers wishing to display the flow of execution.\r\n\r\nCo-authored-by: jsvisa <delweng@gmail.com>"
            }
        ],
        "2023-11-02": [
            {
                "date": "2023-11-02T06:54:28Z",
                "message": "core/vm: performance tweak of `OpCode.String()` (#28453)\n\nmake `opCodeToString` a `[256]string` array\r\n\r\nCo-authored-by: lmittmann <lmittmann@users.noreply.github.com>"
            }
        ],
        "2023-10-31": [
            {
                "date": "2023-10-31T16:19:31Z",
                "message": "ethdb/pebble: cap memory table size as maxMemTableSize-1 (#28444)"
            },
            {
                "date": "2023-10-31T14:23:51Z",
                "message": "cmd/evm: add --run option to blocktest command (#28421)\n\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            },
            {
                "date": "2023-10-31T11:39:25Z",
                "message": "core: add basic chain history support in GenerateChain (#28428)\n\nThis change improves GenerateChain to support internal chain history access (ChainReader)\r\nfor the consensus engine and EVM.\r\n\r\nGenerateChain takes a `parent` block and the number of blocks to create. With my changes,\r\nthe consensus engine and EVM can now access blocks from `parent` up to the block currently\r\nbeing generated. This is required to make the BLOCKHASH instruction work, and also needed\r\nto create real clique chains.  Clique uses chain history to figure out if the current signer is in-turn,\r\nfor example.\r\n\r\nI've also added some more accessors to BlockGen. These are helpful when creating transactions:\r\n\r\n- g.Signer returns a signer instance for the current block\r\n- g.Difficulty returns the current block difficulty\r\n- g.Gas returns the remaining gas amount\r\n\r\nAnother fix in this commit concerns the receipts returned by GenerateChain. The receipts now\r\nhave properly derived fields (BlockHash, etc.) and should generally match what would be\r\nreturned by the RPC API."
            },
            {
                "date": "2023-10-31T11:04:45Z",
                "message": "core/rawdb: add logging and fix comments around AncientRange function. (#28379)\n\nThis adds warning logs when the read does not match the expected count.\r\nWe can also remove the size limit since the function documentation explicitly states\r\nthat callers should limit the count."
            },
            {
                "date": "2023-10-31T09:39:55Z",
                "message": "trie/triedb/pathdb: improve dirty node flushing trigger (#28426)\n\n* trie/triedb/pathdb: improve dirty node flushing trigger\r\n\r\n* trie/triedb/pathdb: add tests\r\n\r\n* trie/triedb/pathdb: address comment"
            }
        ],
        "2023-10-27": [
            {
                "date": "2023-10-27T22:14:43Z",
                "message": "all: make vendored copy of reexec (#28382)\n\na little copying is better than a little dependency\r\n\r\n-- go proverb\r\n\r\nWe have this dependency on docker, a.k.a moby: a gigantic library, and we only need ~70 LOC,\r\nso here I tried moving it inline instead.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-10-27T14:50:59Z",
                "message": "graphql: always set content-type to application/json (#28417)\n\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
            },
            {
                "date": "2023-10-27T02:15:14Z",
                "message": "core, cmd/geth: add --override.* flags to geth init (#28407)\n\n* core, cmd/geth: add --override.* flags to geth init\r\n\r\n* also apply overrides before genesis commit with new block\r\n\r\n* review feedback"
            }
        ],
        "2023-10-26": [
            {
                "date": "2023-10-26T11:48:51Z",
                "message": "graphql: fix an issue of nil pointer panic (#28416)\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
            }
        ],
        "2023-10-25": [
            {
                "date": "2023-10-25T15:57:12Z",
                "message": "cmd/geth: test for logging-output (#28373)\n\nThis PR is a bit in preparation for the slog work in #28187 .\r\n\r\nOur current test re logging mostly test the internals, but we have no real end-to-end test of the logging output. This PR introduces a simple reexec-based log tester. This also relies upon a special mode in geth, which can be made to eject a set of predefined log messages (only available if the build-tag `integrationtests` is used\r\n\r\ne.g. go run --tags=integrationtests ./cmd/geth --log.format terminal logtest\r\n\r\nWhile working on this, I also noticed a quirk in the setup: when geth was configured to use a file output, then two separate handlers were used (one handler for the file, one handler for the console). Using two separate handlers means that two formatters are used, thus the formatting of any/all records happened twice. This PR changes the mechanism to use two separate io.Writers instead, which is both more optimal and fixes a bug which occurs due to a global statefulness in the formatter."
            },
            {
                "date": "2023-10-25T13:52:42Z",
                "message": "rpc: use correct stringer-method for serializing BlockNumberOrHash (#28358)\n\nThe String() version of BlockNumberOrHash uses decimal for all block numbers, including negative ones used to indicate labels. Switch to using BlockNumber.String() which encodes it correctly for use in the JSON-RPC API."
            },
            {
                "date": "2023-10-25T13:20:23Z",
                "message": "graphql: logs return error if from block > to (#28412)\n\nAs per discussion in ethereum/execution-apis#475\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
            },
            {
                "date": "2023-10-25T12:53:50Z",
                "message": "trie: use explicit errors in stacktrie (instead of panic) (#28361)\n\nThis PR removes panics from stacktrie (mostly), and makes the Update return errors instead. While adding tests for this, I also found that one case of possible corruption was not caught, which is now fixed."
            },
            {
                "date": "2023-10-25T12:08:52Z",
                "message": "cmd/evm: make t8ntool handle transaction decoding errors better (#28397)\n\nThis change closes https://github.com/ethereum/go-ethereum/issues/27730 . By using an iterator instead of a slice of transactions, we can better handle the case when an individual transaction (within an otherwise well-formed RLP-list) cannot be decoded."
            }
        ],
        "2023-10-23": [
            {
                "date": "2023-10-23T15:36:11Z",
                "message": "txpool/legacypool: remove already known error in legacypool (#28400)"
            },
            {
                "date": "2023-10-23T15:31:56Z",
                "message": "core, eth, trie: filter out boundary nodes and remove dangling nodes in stacktrie (#28327)\n\n* core, eth, trie: filter out boundary nodes in stacktrie\r\n\r\n* eth/protocol/snap: add comments\r\n\r\n* Update trie/stacktrie.go\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\n* eth, trie: remove onBoundary callback\r\n\r\n* eth/protocols/snap: keep complete boundary nodes\r\n\r\n* eth/protocols/snap: skip healing if the storage trie is already complete\r\n\r\n* eth, trie: add more metrics\r\n\r\n* eth, trie: address comment\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-10-23T15:25:26Z",
                "message": "graphql: return error if block from>to (#28393)\n\nAs per discussion in ethereum/execution-apis#475"
            },
            {
                "date": "2023-10-23T13:46:39Z",
                "message": "trie/triedb/pathdb, core/rawdb: enhance error message in freezer (#28198)\n\nThis PR adds more error message for debugging purpose."
            },
            {
                "date": "2023-10-23T13:23:41Z",
                "message": "core/blockchain: fix typos and grammar (#28295)"
            },
            {
                "date": "2023-10-23T13:06:05Z",
                "message": "ethstats: fix bug in block reporting  (#28398)\n\nFixes a bug where the ethstats omits to report full block contents. This bug was a side-effect of https://github.com/ethereum/go-ethereum/pull/26777,  where `CurrentBlock` was changed to return a header instead of a block, leading to a failed type assertion."
            },
            {
                "date": "2023-10-23T05:24:32Z",
                "message": "core/state/pruner: track number of skipped items during state pruning (#28368)"
            }
        ],
        "2023-10-22": [
            {
                "date": "2023-10-22T15:37:56Z",
                "message": "event: fix Resubscribe deadlock when unsubscribing after inner sub ends (#28359)\n\nA goroutine is used to manage the lifetime of subscriptions managed by\r\nresubscriptions. When the subscription ends with no error, the resub\r\ngoroutine ends as well. However, the resub goroutine needs to live\r\nlong enough to read from the unsub channel. Otheriwse, an Unsubscribe\r\ncall deadlocks when writing to the unsub channel.\r\n\r\nThis is fixed by adding a buffer to the unsub channel."
            },
            {
                "date": "2023-10-22T14:05:04Z",
                "message": "crypto/kzg4844: use the new trusted setup file and format (#28383)\n\nChanges the trusted_setup to the one created during the kzg-ceremony. The trusted setup file can be found in the consensus specs: https://github.com/ethereum/consensus-specs/blob/dev/presets/mainnet/trusted_setups/trusted_setup_4096.json\r\n---------\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
            }
        ],
        "2023-10-20": [
            {
                "date": "2023-10-20T11:35:49Z",
                "message": "core/state, tests: fix memory leak via fastcache (#28387)\n\nThis change fixes a memory leak, when running either state-tests or blockchain-tests, we allocate a `1MB` fastcache during snapshot generation. `fastcache` is a bit special, and requires a `Reset()` (it has it's own memory allocator). \r\n\r\nThe `1MB` was hidden [here](https://github.com/ethereum/go-ethereum/blob/master/tests/state_test_util.go#L333) and [here](https://github.com/ethereum/go-ethereum/blob/master/tests/block_test_util.go#L146) respectively."
            }
        ],
        "2023-10-19": [
            {
                "date": "2023-10-19T12:04:26Z",
                "message": "crypto/blake2b: put architecture-dependent features behind build-tag (#28381)\n\nThis change to fixes a compilation-flaw on master, by putting architecture-specific functions behind corresponding build tags."
            },
            {
                "date": "2023-10-19T08:30:55Z",
                "message": "eth/filters: fix flaky test TestPendingTxFilterDeadlock (#28376)"
            },
            {
                "date": "2023-10-19T08:08:36Z",
                "message": "rpc: increase timeout in TestClientWebsocketPing (#28371)"
            }
        ],
        "2023-10-18": [
            {
                "date": "2023-10-18T13:01:16Z",
                "message": "tests/fuzzers: update fuzzers to be based on go-native fuzzing (#28352)\n\nThis change modifies the fuzzers to use the native golang fuzzing framework instead of go-fuzz"
            }
        ],
        "2023-10-17": [
            {
                "date": "2023-10-17T16:52:53Z",
                "message": "eth/fetcher: downgrade stale txs log from warn to debug (#28364)"
            },
            {
                "date": "2023-10-17T13:20:22Z",
                "message": "tests/fuzzers/les: fix crash in fuzzer (#28362)"
            },
            {
                "date": "2023-10-17T12:43:46Z",
                "message": "core/chain_makers: add SetParentBeaconRoot(..) to chain makers (#28252)"
            },
            {
                "date": "2023-10-17T12:34:01Z",
                "message": "api/bind: add CallOpts.BlockHash to allow calling contracts at a specific block hash (#28084)\n\n* api/bind: Add CallOpts.BlockHash to allow calling contracts at a specific block hash.\r\n\r\n* ethclient: Add BalanceAtHash, NonceAtHash and StorageAtHash functions"
            },
            {
                "date": "2023-10-17T12:11:04Z",
                "message": "internal/ethapi, accounts/abi/bind: use `errors.Is` for error comparison (#28348)\n\n\r\nCo-authored-by: lightclient <lightclient@protonmail.com>"
            },
            {
                "date": "2023-10-17T12:09:48Z",
                "message": "ethclient: ensure the close of canceled context (#28349)"
            },
            {
                "date": "2023-10-17T12:09:25Z",
                "message": "core, trie, eth: refactor stacktrie constructor (#28350)\n\nThis change enhances the stacktrie constructor by introducing an option struct. It also simplifies the `Hash` and `Commit` operations, getting rid of the special handling round root node."
            },
            {
                "date": "2023-10-17T11:18:45Z",
                "message": "params: begin v1.13.5 release cycle"
            },
            {
                "date": "2023-10-17T11:17:27Z",
                "message": "params: release Geth v1.13.4"
            },
            {
                "date": "2023-10-17T08:38:00Z",
                "message": "eth/fetcher: fix fetcher timeout (#28220)\n\nThis changes fixes a bug in the fetcher, where the timeout for how long to remember underpriced transaction was erroneously compared, and the timeout never hit.\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-10-17T07:53:10Z",
                "message": "cmd: fix typos (#28323)"
            },
            {
                "date": "2023-10-17T07:25:16Z",
                "message": "internal/ethapi: fix codehash lookup in eth_getProof (#28357)\n\nThis change fixes #28355, where eth_getProof failed to return the correct codehash under certain conditions. This PR changes the logic to unconditionally look up the codehash, and also adds some more tests."
            },
            {
                "date": "2023-10-17T06:32:35Z",
                "message": "fix: broken url link (#28342)"
            }
        ],
        "2023-10-16": [
            {
                "date": "2023-10-16T20:40:25Z",
                "message": "eth/fetcher: only make noise big mismatches (#28356)"
            },
            {
                "date": "2023-10-16T18:10:05Z",
                "message": "tests: update execution-spec-tests to 1.0.5 (#28337)\n\nUpdates execution-spec-tests to 1.0.5: https://github.com/ethereum/execution-spec-tests/releases/tag/v1.0.5, switching to develop which contains Cancun tests (which are also enabled in this change)."
            }
        ],
        "2023-10-13": [
            {
                "date": "2023-10-13T19:50:20Z",
                "message": "cmd, core, ethdb: enable Pebble on 32 bits and OpenBSD too (#28335)\n\n* cmd, core, ethdb: enable Pebble on 32 bits and OpenBSD too\r\n\r\n* ethdb/pebble: use Pebble's internal constant calculation"
            },
            {
                "date": "2023-10-13T14:08:38Z",
                "message": "go.mod: pull in the latest cloudflare API libs (#28336)"
            },
            {
                "date": "2023-10-13T14:05:29Z",
                "message": "trie: make rhs-proof align with last key in range proofs (#28311)\n\nDuring snap-sync, we request ranges of values: either a range of accounts or a range of storage values. For any large trie, e.g. the main account trie or a large storage trie, we cannot fetch everything at once.\r\n\r\nShort version; we split it up and request in multiple stages. To do so, we use an origin field, to say \"Give me all storage key/values where key > 0x20000000000000000\". When the server fulfils this, the server provides the first key after origin, let's say 0x2e030000000000000 -- never providing the exact origin. However, the client-side needs to be able to verify that the 0x2e03.. indeed is the first one after 0x2000.., and therefore the attached proof concerns the origin, not the first key.\r\n\r\nSo, short-short version: the left-hand side of the proof relates to the origin, and is free-standing from the first leaf.\r\n\r\nOn the other hand, (pun intended), the right-hand side, there's no such 'gap' between \"along what path does the proof walk\" and the last provided leaf. The proof must prove the last element (unless there are no elements).\r\n\r\nTherefore, we can simplify the semantics for trie.VerifyRangeProof by removing an argument. This doesn't make much difference in practice, but makes it so that we can remove some tests. The reason I am raising this is that the upcoming stacktrie-based verifier does not support such fancy features as standalone right-hand borders."
            },
            {
                "date": "2023-10-13T12:19:03Z",
                "message": "go.mod: update AWS APIs to latest heads (#28332)"
            },
            {
                "date": "2023-10-13T12:14:48Z",
                "message": "build: move version-info into checksum file (#28324)\n\n* build: upgrade to golang 1.21.2\r\n\r\n* build: verify checksums via tool\r\n\r\n* deps: upgrade go to 1.21.3\r\n\r\n* build: move more build metadata into checksum file\r\n\r\n* build: move gobootsrc to checksums"
            },
            {
                "date": "2023-10-13T12:13:34Z",
                "message": "go.mod: update fastcache to latest (#28334)"
            },
            {
                "date": "2023-10-13T10:49:40Z",
                "message": "go.mod: update gnark lib to fix a malleability issue (#28333)"
            },
            {
                "date": "2023-10-13T09:58:07Z",
                "message": "go.mod, internal/build: update Azure dependencies (#28329)"
            },
            {
                "date": "2023-10-13T07:08:26Z",
                "message": "eth/protocols/snap: fix snap sync failure on empty storage range (#28306)\n\nThis change addresses an issue in snap sync, specifically when the entire sync process can be halted due to an encountered empty storage range.\r\n\r\nCurrently, on the snap sync client side, the response to an empty (partial) storage range is discarded as a non-delivery. However, this response can be a valid response, when the particular range requested does not contain any slots.\r\n\r\nFor instance, consider a large contract where the entire key space is divided into 16 chunks, and there are no available slots in the last chunk [0xf] -> [end]. When the node receives a request for this particular range, the response includes:\r\n\r\n    The proof with origin [0xf]\r\n    A nil storage slot set\r\n\r\nIf we simply discard this response, the finalization of the last range will be skipped, halting the entire sync process indefinitely. The test case TestSyncWithUnevenStorage can reproduce the scenario described above.\r\n\r\nIn addition, this change also defines the common variables MaxAddress and MaxHash."
            }
        ],
        "2023-10-12": [
            {
                "date": "2023-10-12T11:39:10Z",
                "message": "params: begin v1.13.4 release cycle"
            },
            {
                "date": "2023-10-12T11:36:49Z",
                "message": "params: release Geth v.1.13.3"
            },
            {
                "date": "2023-10-12T07:54:00Z",
                "message": "cmd/geth: fix failing test (#28322)"
            }
        ],
        "2023-10-11": [
            {
                "date": "2023-10-11T08:29:10Z",
                "message": "accounts, cmd: fix typos (#28300)"
            },
            {
                "date": "2023-10-11T08:27:44Z",
                "message": "cmd, core: resolve scheme from a read-write database (#28313)\n\n* cmd, core: resolve scheme from a read-write database\r\n\r\n* cmd, core, eth: move the scheme check in the ethereum constructor\r\n\r\n* cmd/geth: dump should in ro mode\r\n\r\n* cmd: reverts"
            },
            {
                "date": "2023-10-11T08:23:57Z",
                "message": "eth/fetcher: fix typo"
            },
            {
                "date": "2023-10-11T07:50:09Z",
                "message": "eth/fetcher: throttle tx fetches to 128KB responses (#28304)\n\n* eth/fetcher: throttle tx fetches to 128KB responses\r\n\r\n* eth/fetcher: unindent a clause per review request"
            },
            {
                "date": "2023-10-11T07:18:18Z",
                "message": "ethdb/pebble: add level file metrics (#28271)"
            },
            {
                "date": "2023-10-11T04:12:45Z",
                "message": "trie: remove owner and binary marshaling from stacktrie (#28291)\n\nThis change\r\n  - Removes the owner-notion from a stacktrie; the owner is only ever needed for comitting to the database, but the commit-function, the `writeFn` is provided by the caller, so the caller can just set the owner into the `writeFn` instead of having it passed through the stacktrie.\r\n  - Removes the `encoding.BinaryMarshaler`/`encoding.BinaryUnmarshaler` interface from stacktrie. We're not using it, and it is doubtful whether anyone downstream is either."
            }
        ],
        "2023-10-10": [
            {
                "date": "2023-10-10T12:53:01Z",
                "message": "accounts/abi/bind/backend: use requested header for gas prices and gas limits (#28280)"
            },
            {
                "date": "2023-10-10T08:56:50Z",
                "message": "git: ignore tests/spec-tests folder (#28254)"
            },
            {
                "date": "2023-10-10T08:35:51Z",
                "message": "eth: enforce announcement metadatas and drop peers violating the protocol (#28261)\n\n* eth: enforce announcement metadatas and drop peers violating the protocol\r\n\r\n* eth/fetcher: relax eth/68 validation a bit for flakey clients\r\n\r\n* tests/fuzzers/txfetcher: pull in suggestion from Marius\r\n\r\n* eth/fetcher: add tests for peer dropping\r\n\r\n* eth/fetcher: linter linter linter linter linter"
            },
            {
                "date": "2023-10-10T08:32:14Z",
                "message": "trie: fix a typo, use correct docstrings (#28302)\n\n* fix a typo\r\n\r\n* trie: additional fixes to docstrings\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-10-10T08:30:47Z",
                "message": "all: move light.NodeSet to trienode.ProofSet (#28287)\n\nThis is a minor refactor in preparation of changes to range verifier. This PR contains no intentional functional changes but moves (and renames) the light.NodeSet"
            },
            {
                "date": "2023-10-10T08:22:45Z",
                "message": "eth, params: fix typos (#28286)\n\n* eth/ethconfig: fix typo on comment\r\n\r\n* params/config: fix typo on comment\r\n\r\n* eth/ethconfig: fix typo on comment"
            },
            {
                "date": "2023-10-10T08:22:03Z",
                "message": "core: fix typos (#28255)\n\nfixes various typos in core"
            },
            {
                "date": "2023-10-10T06:28:56Z",
                "message": "trie: refactor stacktrie (#28233)\n\nThis change refactors stacktrie to separate the stacktrie itself from the\r\ninternal representation of nodes: a stacktrie is not a recursive structure\r\nof stacktries, rather, a framework for representing and operating upon a set of nodes.\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2023-10-07": [
            {
                "date": "2023-10-07T02:57:12Z",
                "message": "core/txpool/legacypool: fix typo (#28258)"
            }
        ],
        "2023-10-04": [
            {
                "date": "2023-10-04T09:38:25Z",
                "message": "cmd/evm/internal/t8ntoo: tiny bugfix for difficulty field (#28245)"
            },
            {
                "date": "2023-10-04T09:37:04Z",
                "message": "eth: when snap is complaining for missing eth, be verbose about the details (#28249)\n\n* eth: when snap is complaining for missing eth, be verbost about the details\r\n\r\n* eth: lower snapshot registration error verbosity"
            },
            {
                "date": "2023-10-04T09:36:36Z",
                "message": "core, eth, miner: start propagating and consuming blob txs (#28243)\n\n* core, eth, miner: start propagating and consuming blob txs\r\n\r\n* eth/protocols/eth: disable eth/67 if Cancun is enabled\r\n\r\n* core/txpool, eth, miner: pass gas limit infos in lazy tx for mienr filtering\r\n\r\n* core/txpool, miner: add lazy resolver for pending txs too\r\n\r\n* core, eth: fix review noticed bugs\r\n\r\n* eth, miner: minor polishes in the mining and announcing logs\r\n\r\n* core/expool: unsubscribe the event scope"
            }
        ],
        "2023-10-03": [
            {
                "date": "2023-10-03T12:03:19Z",
                "message": "cmd/devp2p, eth: drop eth/66 (#28239)\n\n* cmd/devp2p, eth: drop eth/66\r\n\r\n* eth/protocols/eth: yes sir, linter"
            },
            {
                "date": "2023-10-03T11:48:36Z",
                "message": "rpc: fix erroneous error-message in test (#28227)"
            },
            {
                "date": "2023-10-03T11:46:22Z",
                "message": "trie: fix benchmark by ensuring key immutability (#28221)\n\nThis change fixes the bug in a benchmark, where the input to the trie is reused in a way which is not correct. \r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-10-03T11:44:01Z",
                "message": "core: fix typos (#28238)"
            },
            {
                "date": "2023-10-03T07:26:33Z",
                "message": "cmd/evm: cancun-updates for b11r and t8n -tools (#28195)\n\nThis change updates `evm b11r` (blockbuilder) and `evm t8n` (transition) tools to contain cancun updates (e.g. new header fields)\r\n---------\r\n\r\nCo-authored-by: Mario Vega <marioevz@gmail.com>"
            },
            {
                "date": "2023-10-03T07:23:19Z",
                "message": "eth, rpc: add configurable option for wsMessageSizeLimit (#27801)\n\nThis change adds a configurable limit to websocket message. \r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2023-10-02": [
            {
                "date": "2023-10-02T09:49:29Z",
                "message": "core: implement BLOBBASEFEE opcode (0x4a) (#28098)\n\nImplements \"EIP-7516: BLOBBASEFEE opcode\" for cancun, as per spec: https://eips.ethereum.org/EIPS/eip-7516"
            }
        ],
        "2023-09-29": [
            {
                "date": "2023-09-29T19:11:15Z",
                "message": "cmd, eth: switch the dev synctarget to hash from block (#28209)\n\n* cmd, eth: switch the dev synctarget to hash from block\r\n\r\n* cmd/utils, eth/catalyst: terminate node wyen synctarget reached"
            },
            {
                "date": "2023-09-29T18:27:30Z",
                "message": "eth/catalyst: add validation error in new paylaod hash mismatch (#28226)\n\n* eth/catalyst: add validation error in new paylaod hash mismatch\r\n\r\n* eth/catalyst/api: refactor api.invalid(..) to return nil latest valid hash if none provided"
            },
            {
                "date": "2023-09-29T17:52:55Z",
                "message": "ethdb/pebble: luv you linter"
            },
            {
                "date": "2023-09-29T17:45:38Z",
                "message": "ethdb/pebble: upgrade pebble to master (aa077af62593) (#28070)\n\n* ethdb/pebble: upgrade pebble\r\n\r\n* ethdb/pebble, go.mod: update pebble to master (aa077af62593)\r\n\r\n---------\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2023-09-29T15:14:26Z",
                "message": "common: remove address.Hash footgun (#28228)"
            },
            {
                "date": "2023-09-29T14:46:23Z",
                "message": "core/state: small trie prefetcher nits (#28183)\n\nSmall trie prefetcher nits"
            },
            {
                "date": "2023-09-29T08:44:28Z",
                "message": "core: infer blobGasUsed in chain maker (#28212)\n\nSame way that the gasUsed in header is updated when a tx \r\nis added we should update blob gas used instead of requiring caller\r\nto set it manually."
            },
            {
                "date": "2023-09-29T07:52:22Z",
                "message": "core: fix typos (#28218)\n\n* fix(core/txpool): fix typos\r\n\r\n* core/asm: fix typos\r\n\r\n* core/bloombits: fix typos\r\n\r\n* core/rawdb: fix typos"
            }
        ],
        "2023-09-28": [
            {
                "date": "2023-09-28T19:27:21Z",
                "message": "ethdb, internal/ethapi: support exposing Pebble stats too, beside LevelDB (#28224)\n\nethdb, internal/ethapi: support exposing Pebble stats too, besinde LevelDB"
            },
            {
                "date": "2023-09-28T10:15:50Z",
                "message": "core, eth: typos and some code formatting (#28201)\n\n* fix: typo\r\n\r\n* feat: revert symbol name"
            },
            {
                "date": "2023-09-28T09:04:45Z",
                "message": "internal/ethapi: compact db missing key starts with 0xff (#28207)\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
            },
            {
                "date": "2023-09-28T07:52:27Z",
                "message": "params: update 4788 beacon roots contract addr (#28205)\n\nThis change contains the final (?) address for 4788 beacon root contract. The update to the EIP is being tracked here: https://github.com/ethereum/EIPs/pull/7672\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-09-28T07:23:25Z",
                "message": "params: begin v1.13.3 release cycle"
            },
            {
                "date": "2023-09-28T07:22:09Z",
                "message": "params: release Geth v1.13.2"
            },
            {
                "date": "2023-09-28T07:00:53Z",
                "message": "core, accounts, eth, trie: handle genesis state missing (#28171)\n\n* core, accounts, eth, trie: handle genesis state missing\r\n\r\n* core, eth, trie: polish\r\n\r\n* core: manage txpool subscription in mainpool\r\n\r\n* eth/backend: fix test\r\n\r\n* cmd, eth: fix test\r\n\r\n* core/rawdb, trie/triedb/pathdb: address comments\r\n\r\n* eth, trie: address comments\r\n\r\n* eth: inline the function\r\n\r\n* eth: use synced flag\r\n\r\n* core/txpool: revert changes in txpool\r\n\r\n* core, eth, trie: rename functions"
            },
            {
                "date": "2023-09-28T01:48:14Z",
                "message": "core/txpool: fix typos (#28213)\n\nfix(core/txpool): fix typos"
            }
        ],
        "2023-09-27": [
            {
                "date": "2023-09-27T03:08:53Z",
                "message": "core/txpool: fix typos (#28208)\n\ncore/txpool:fix typos"
            }
        ],
        "2023-09-26": [
            {
                "date": "2023-09-26T13:29:13Z",
                "message": "eth/downloader: remove header rollback mechanism (#28147)\n\n* eth/downloader: remove rollback mechanism in downloader\r\n\r\n* eth/downloader: remove the tests"
            },
            {
                "date": "2023-09-26T12:22:11Z",
                "message": "internal/ethapi: eth_call block parameter is optional (#28165)\n\nSo apparently in the spec the base block parameter of eth_call is optional.\r\nI agree that \"latest\" is a sane default for this that most people would use."
            },
            {
                "date": "2023-09-26T11:12:44Z",
                "message": "eth/fetcher: allow underpriced transactions in after timeout (#28097)\n\nThis PR will allow a previously underpriced transaction back in after a timeout\r\nof 5 minutes. This will block most transaction spam but allow for transactions to\r\nbe re-broadcasted on networks with less transaction flow.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-09-26T08:59:41Z",
                "message": "eth/downloader: typo in comment (#28196)"
            },
            {
                "date": "2023-09-26T08:58:01Z",
                "message": "core/vm: minor code formatting (#28199)\n\nAdding a space beween function opOrigin() and opcCaller() in instruciton.go.\r\nAdding a space beween function opkeccak256()  and opAddress() in instruciton.go."
            }
        ],
        "2023-09-25": [
            {
                "date": "2023-09-25T21:24:20Z",
                "message": "ethclient: fix BlockReceipts parameter encoding (#28087)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-09-25T17:17:39Z",
                "message": "cmd/utils: fix bootnodes config priority (#28095)\n\nThis fixes an issue where the --bootnodes flag was overridden by the config file.\r\n\r\n---------\r\n\r\nCo-authored-by: NathanBSC <Nathan.l@nodereal.io>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-09-25T16:28:20Z",
                "message": "cmd/geth: ensure db is closed before exit (#28150)"
            },
            {
                "date": "2023-09-25T14:02:44Z",
                "message": "internal/debug: add --log.rotate to the logging category (#28190)"
            },
            {
                "date": "2023-09-25T14:02:19Z",
                "message": "core/forkid: add forkid test for holesky (#28193)"
            },
            {
                "date": "2023-09-25T13:35:24Z",
                "message": "core/bloombits: fix deadlock when matcher session hits an error (#28184)\n\nWhen MatcherSession encounters an error, it attempts to close the session.\r\nClosing waits for all goroutines to finish, including the 'distributor'. However, the\r\ndistributor will not exit until all requests have returned.\r\n\r\nThis patch fixes the issue by delivering the (empty) result to the distributor\r\nbefore calling Close()."
            },
            {
                "date": "2023-09-25T13:13:56Z",
                "message": "params: update hash for Holesky relaunch (#28192)"
            },
            {
                "date": "2023-09-25T13:10:23Z",
                "message": "core, params: update Holesky testnet to relaunched spec (#28191)"
            }
        ],
        "2023-09-22": [
            {
                "date": "2023-09-22T11:56:48Z",
                "message": "cmd: add state.scheme to the database flag group for local flag handling (#28107)"
            },
            {
                "date": "2023-09-22T10:10:50Z",
                "message": "core/rawdb: use readonly file lock in readonly mode (#28180)\n\nThis allows using the freezer from multiple processes at once\r\nin read-only mode.\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-09-22T08:07:20Z",
                "message": "cmd/geth: print progress logs when iterating large contracts too (#28179)"
            },
            {
                "date": "2023-09-22T07:27:58Z",
                "message": "core/state/snapshot: be very noisy if the generator hits a trie error (#28178)"
            },
            {
                "date": "2023-09-22T06:33:17Z",
                "message": "trie/triedb/pathdb: improve error log (#28177)"
            },
            {
                "date": "2023-09-22T06:31:10Z",
                "message": "trie: remove internal nodes between shortNode and child in path mode (#28163)\n\n* trie: remove internal nodes between shortNode and child in path mode\r\n\r\n* trie: address comments\r\n\r\n* core/rawdb, trie: address comments\r\n\r\n* core/rawdb: delete unused func\r\n\r\n* trie: change comments\r\n\r\n* trie: add missing tests\r\n\r\n* trie: fix lint"
            }
        ],
        "2023-09-21": [
            {
                "date": "2023-09-21T08:05:55Z",
                "message": "core/rawdb: no need to run truncateFile for readonly mode (#28145)\n\nAvoid truncating files, if ancients are opened in readonly mode. With this change, we return error instead of trying (and failing)  to repair"
            }
        ],
        "2023-09-20": [
            {
                "date": "2023-09-20T10:39:46Z",
                "message": "cmd/clef: suppress fsnotify error if keydir not exists (#28160)\n\nAs the keydir will be automatically created after an account is created, no error message if the watcher is failed."
            }
        ],
        "2023-09-19": [
            {
                "date": "2023-09-19T19:20:18Z",
                "message": "cmd/utils: fix typo in comment (#28159)"
            },
            {
                "date": "2023-09-19T12:47:24Z",
                "message": "trie: add getter for preimage store in trie.Database (#28155)"
            },
            {
                "date": "2023-09-19T12:20:06Z",
                "message": "go.mod: use existing version of karalabe/usb (#28127)\n\nThere is no 0.0.3 release of karalabe/usb."
            },
            {
                "date": "2023-09-19T12:18:29Z",
                "message": "cmd/devp2p: use bootnodes as crawl input (#28139)\n\nThis PR makes the tool use the --bootnodes list as the input to devp2p crawl.\r\nThe flag will take effect if the input/output.json file is missing or empty."
            },
            {
                "date": "2023-09-19T12:14:36Z",
                "message": "eth: fix typo in comment (#28146)"
            },
            {
                "date": "2023-09-19T11:43:37Z",
                "message": "core/rawdb: fix typo in comment (#28140)"
            },
            {
                "date": "2023-09-19T11:41:16Z",
                "message": "cmd/evm: fix some issues with the evm run command (#28109)\n\n* cmd/evm: improve flags handling\r\n\r\nThis fixes some issues with flags in cmd/evm. The supported flags did not\r\nactually show up in help output because they weren't categorized. I'm also\r\nadding the VM-related flags to the run command here so they can be given\r\nafter the subcommand name. So it can be run like this now:\r\n\r\n   ./evm run --code 6001 --debug\r\n\r\n* cmd/evm: enable all forks by default in run command\r\n\r\nThe default genesis was just empty with no forks at all, which is annoying because\r\ncontracts will be relying on opcodes introduced in a fork. So this changes the default to\r\nhave all forks enabled.\r\n\r\n* core/asm: fix some issues in the assembler\r\n\r\nThis fixes minor bugs in the old assembler:\r\n\r\n- It is now possible to have comments on the same line as an instruction.\r\n- Errors for invalid numbers in the jump instruction are reported better\r\n- Line numbers in errors were off by one"
            }
        ],
        "2023-09-17": [
            {
                "date": "2023-09-17T14:55:46Z",
                "message": "params: begin Geth v1.13.2 release cycle"
            },
            {
                "date": "2023-09-17T14:54:33Z",
                "message": "params: release Geth v1.13.1"
            },
            {
                "date": "2023-09-17T14:35:09Z",
                "message": "core, eth/downloader: fix genesis state missing due to state sync (#28124)\n\n* core: fix chain repair corner case in path-based scheme\r\n\r\n* eth/downloader: disable trie database whenever state sync is launched"
            },
            {
                "date": "2023-09-17T14:02:48Z",
                "message": "params: fix typo in comment (#28129)\n\nfix: typo"
            },
            {
                "date": "2023-09-17T14:02:11Z",
                "message": "internal/flags: fix typo (#28133)\n\nfix(flag): one typo"
            },
            {
                "date": "2023-09-17T14:00:04Z",
                "message": "internal/ethapi: correctly calculate effective gas price (#28130)\n\ncorrectly calculate effective gas price"
            },
            {
                "date": "2023-09-17T13:50:18Z",
                "message": "eth/catalyst: fix engine API (#28135)"
            }
        ],
        "2023-09-15": [
            {
                "date": "2023-09-15T12:52:53Z",
                "message": "cmd/geth, internal/flags: print envvar config source and bad names (#28119)"
            },
            {
                "date": "2023-09-15T12:06:25Z",
                "message": "eth/downloader: prevent pivot moves after state commit (#28126)"
            },
            {
                "date": "2023-09-15T06:09:07Z",
                "message": "core/state: check err for iter.Error in fastDeleteStorage (#28122)\n\ncore/state: check err for iter.Error"
            }
        ],
        "2023-09-14": [
            {
                "date": "2023-09-14T10:56:06Z",
                "message": "metrics: add support for enabling metrics from env vars (#28118)"
            },
            {
                "date": "2023-09-14T10:28:40Z",
                "message": "rlp/rlpgen: remove build tag (#28106)\n\n* rlp/rlpgen: remove build tag\r\n\r\nThis tag was supposed to prevent unstable output when types reference each other. Imagine\r\nthere are two struct types A and B, where a reference to type B is in A. If I run rlpgen\r\non type B first, and then on type A, the generator will see the B.EncodeRLP method and\r\ncall it. However, if I run rlpgen on type A first, it will inline the encoding of B.\r\n\r\nThe solution I chose for the initial release of rlpgen was to just ignore methods\r\ngenerated by rlpgen using a build tag. But there is a problem with this: if any code in\r\nthe package calls EncodeRLP explicitly, the package can't be loaded without errors anymore\r\nin rlpgen, because the loader ignores it. Would be nice if there was a way to just make it\r\nignore invalid functions during type checking (they're not necessary for rlpgen), but\r\ngolang.org/x/tools/go/packages does not provide a way of ignoring them.\r\n\r\nLuckily, the types we use rlpgen with do not reference each other right now, so we can\r\njust remove the build tags for now."
            },
            {
                "date": "2023-09-14T09:43:58Z",
                "message": "internal/flags: fix loading env vars for custom flags (#28117)"
            },
            {
                "date": "2023-09-14T08:23:16Z",
                "message": "graphql: add 4844 blob fields (#27963)\n\nThis adds block and receipt fields for EIP-4844.\r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            },
            {
                "date": "2023-09-14T07:58:13Z",
                "message": "internal/flags: fix linter"
            },
            {
                "date": "2023-09-14T07:34:52Z",
                "message": "build: upgrade -dlgo version to Go 1.21.1 (#28113)"
            },
            {
                "date": "2023-09-14T07:33:59Z",
                "message": "cmd/geth, internal/flags, go.mod: colorize cli help, support env vars (#28103)\n\n* cmd/geth, internal/flags, go.mod: colorize cli help, support env vars\r\n\r\n* internal/flags: use stdout, not stderr for terminal detection"
            },
            {
                "date": "2023-09-14T07:10:37Z",
                "message": "eth: abort on api operations not available in pbss-mode (#28104)\n\neth: abort on api calls not supporting pbss"
            }
        ],
        "2023-09-13": [
            {
                "date": "2023-09-13T17:17:55Z",
                "message": "cmd/geth: rename the protocols field in the metrics gague (#28102)"
            },
            {
                "date": "2023-09-13T17:13:47Z",
                "message": "metrics: refactor metrics (#28035)\n\nThis change includes a lot of things, listed below. \r\n\r\n### Split up interfaces, write vs read\r\n\r\nThe interfaces have been split up into one write-interface and one read-interface, with `Snapshot` being the gateway from write to read. This simplifies the semantics _a lot_. \r\n\r\nExample of splitting up an interface into one readonly 'snapshot' part, and one updatable writeonly part: \r\n\r\n```golang\r\ntype MeterSnapshot interface {\r\n\tCount() int64\r\n\tRate1() float64\r\n\tRate5() float64\r\n\tRate15() float64\r\n\tRateMean() float64\r\n}\r\n\r\n// Meters count events to produce exponentially-weighted moving average rates\r\n// at one-, five-, and fifteen-minutes and a mean rate.\r\ntype Meter interface {\r\n\tMark(int64)\r\n\tSnapshot() MeterSnapshot\r\n\tStop()\r\n}\r\n```\r\n\r\n### A note about concurrency\r\n\r\nThis PR makes the concurrency model clearer. We have actual meters and snapshot of meters. The `meter` is the thing which can be accessed from the registry, and updates can be made to it. \r\n\r\n- For all `meters`, (`Gauge`, `Timer` etc), it is assumed that they are accessed by different threads, making updates. Therefore, all `meters` update-methods (`Inc`, `Add`, `Update`, `Clear` etc) need to be concurrency-safe. \r\n- All `meters` have a `Snapshot()` method. This method is _usually_ called from one thread, a backend-exporter. But it's fully possible to have several exporters simultaneously: therefore this method should also be concurrency-safe. \r\n\r\nTLDR: `meter`s are accessible via registry, all their methods must be concurrency-safe. \r\n\r\nFor all `Snapshot`s, it is assumed that an individual exporter-thread has obtained a `meter` from the registry, and called the `Snapshot` method to obtain a readonly snapshot. This snapshot is _not_ guaranteed to be concurrency-safe. There's no need for a snapshot to be concurrency-safe, since exporters should not share snapshots. \r\n\r\nNote, though: that by happenstance a lot of the snapshots _are_ concurrency-safe, being unmutable minimal representations of a value. Only the more complex ones are _not_ threadsafe, those that lazily calculate things like `Variance()`, `Mean()`.\r\n\r\nExample of how a background exporter typically works, obtaining the snapshot and sequentially accessing the non-threadsafe methods in it: \r\n```golang\r\n\t\tms := metric.Snapshot()\r\n                ...\r\n\t\tfields := map[string]interface{}{\r\n\t\t\t\"count\":    ms.Count(),\r\n\t\t\t\"max\":      ms.Max(),\r\n\t\t\t\"mean\":     ms.Mean(),\r\n\t\t\t\"min\":      ms.Min(),\r\n\t\t\t\"stddev\":   ms.StdDev(),\r\n\t\t\t\"variance\": ms.Variance(),\r\n```\r\n\r\nTLDR: `snapshots` are not guaranteed to be concurrency-safe (but often are).\r\n\r\n### Sample changes\r\n\r\nI also changed the `Sample` type: previously, it iterated the samples fully every time `Mean()`,`Sum()`, `Min()` or `Max()` was invoked. Since we now have readonly base data, we can just iterate it once, in the constructor, and set all four values at once. \r\n\r\nThe same thing has been done for runtimehistogram. \r\n\r\n### ResettingTimer API\r\n\r\nBack when ResettingTImer was implemented, as part of https://github.com/ethereum/go-ethereum/pull/15910, Anton implemented a `Percentiles` on the new type. However, the method did not conform to the other existing types which also had a `Percentiles`. \r\n\r\n1. The existing ones, on input, took `0.5` to mean `50%`. Anton used `50` to mean `50%`. \r\n2. The existing ones returned `float64` outputs, thus interpolating between values. A value-set of `0, 10`, at `50%` would return `5`, whereas Anton's would return either `0` or `10`. \r\n\r\nThis PR removes the 'new' version, and uses only the 'legacy' percentiles, also for the ResettingTimer type. \r\n\r\nThe resetting timer snapshot was also defined so that it would expose the internal values. This has been removed, and getters for `Max, Min, Mean` have been added instead. \r\n\r\n### Unexport types\r\n\r\nA lot of types were exported, but do not need to be. This PR unexports quite a lot of them."
            },
            {
                "date": "2023-09-13T12:13:10Z",
                "message": "core/rawdb: skip pathdb state inspection in hashdb mode (#28108)"
            },
            {
                "date": "2023-09-13T05:42:32Z",
                "message": "internal, log: remove code for old unsupported go-versions (#28090)"
            }
        ],
        "2023-09-12": [
            {
                "date": "2023-09-12T11:03:50Z",
                "message": "params: begin v1.13.1 release cycle"
            },
            {
                "date": "2023-09-12T10:57:10Z",
                "message": "params: release Geth v1.13.0"
            }
        ],
        "2023-09-11": [
            {
                "date": "2023-09-11T08:57:22Z",
                "message": "consensus/misc: fix min gas limit error message (#28085)"
            },
            {
                "date": "2023-09-11T06:14:20Z",
                "message": "core: fix calculation of blob gasprice in tx receipt (#28082)\n\nThis fixes the derived value BlobGasPrice on the receipt of EIP-4844 transactions, which was previously erroneously set to the price cap."
            }
        ],
        "2023-09-08": [
            {
                "date": "2023-09-08T16:33:36Z",
                "message": "ethclient: use 'input', not 'data' as field for transaction input (#28078)"
            },
            {
                "date": "2023-09-08T14:23:57Z",
                "message": "go.mod: pull in a fix from pebble crl-release-23.1 (#28081)"
            }
        ],
        "2023-09-07": [
            {
                "date": "2023-09-07T13:17:14Z",
                "message": "core, trie: cleanup trie database (#28062)"
            },
            {
                "date": "2023-09-07T12:48:49Z",
                "message": "log: avoid stack lookups when not needed/used (#28069)\n\n Avoids the somewhat expensive stack.Caller invocation by checking if it is needed"
            },
            {
                "date": "2023-09-07T08:18:46Z",
                "message": "deps: update minisign (#28066)\n\nThis updates minisign to the latest version. One new thing is that minisign (not go-minisign) has started to prehash the file, and in order to make geth pass the version-check, we need to sign the file in legacy-mode."
            }
        ],
        "2023-09-06": [
            {
                "date": "2023-09-06T10:29:51Z",
                "message": "core/rawdb: don't warn for missing \"unclean shutdown markers\" (#28014)\n\nThis changes removes the warn-printout about not finding unclean shutdown markers, which always happens on fresh installs / wiped databases."
            },
            {
                "date": "2023-09-06T08:17:36Z",
                "message": "go.mod: goupnp 1.3.0 (#28053)"
            }
        ],
        "2023-09-05": [
            {
                "date": "2023-09-05T08:49:51Z",
                "message": "params: update 4844 parameters (#28026)\n\nOn ACD 163, it was agreed to bump the target and max blob values from `2/4` to `3/6` for future devnets until we could decide on final mainnet number. This change contains said update, making master pass all the hive tests. The final decision for mainnet cancun is still to be made.\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2023-09-04": [
            {
                "date": "2023-09-04T13:32:14Z",
                "message": "core/forkid: skip genesis forks by time (#28034)\n\n* core/forkid: skip genesis forks by time\r\n\r\n* core/forkid: add comment about skipping non-zero fork times\r\n\r\n* core/forkid: skip all time based forks in genesis using loop\r\n\r\n* core/forkid: simplify logic for dropping time-based forks"
            },
            {
                "date": "2023-09-04T13:26:13Z",
                "message": "beacon/engine: add `shouldOverrideBuilder` to payload envelope (#28029)\n\nbeacon/engine: add shouldOverrideBuilder to payload envelope"
            }
        ],
        "2023-08-31": [
            {
                "date": "2023-08-31T18:37:16Z",
                "message": "eth/catalyst: set random value in dev mode (#27940)\n\n* eth/catalyst: set random\r\n\r\n* Apply suggestions from code review\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-08-31T18:33:18Z",
                "message": "core/state: simplify storage trie update and commit (#28030)\n\nThis change improves function description and simplifies logic in statedb update and commit operations."
            },
            {
                "date": "2023-08-31T17:37:17Z",
                "message": "metrics, cmd/geth: informational metrics (prometheus, influxdb, opentsb) (#24877)\n\nThis chang creates a GaugeInfo metrics type for registering informational (textual) metrics, e.g. geth version number. It also improves the testing for backend-exporters, and uses a shared subpackage in 'internal' to provide sample datasets and ordered registry. \r\n\r\nImplements #21783\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-08-31T13:00:31Z",
                "message": "go.mod: regenerate all indirect dependencies to clean up the junk (#28037)"
            }
        ],
        "2023-08-30": [
            {
                "date": "2023-08-30T07:28:03Z",
                "message": "core/txpool/blobpool: fix rlp decoding flaw during offload (#28027)"
            }
        ],
        "2023-08-29": [
            {
                "date": "2023-08-29T02:36:10Z",
                "message": "tests: use 'sender' in state tests if present (#28023)\n\nA while back, statetests started coming with sender baked in, which at least \r\nevmone makes use of. Let's make use of that too, and save some cycles."
            }
        ],
        "2023-08-28": [
            {
                "date": "2023-08-28T06:36:11Z",
                "message": "miner/stress/clique: fix typo (#28016)\n\nfix typo"
            }
        ],
        "2023-08-26": [
            {
                "date": "2023-08-26T13:42:27Z",
                "message": "build, tests: add execution-spec-tests (#26985)\n\nThis makes it possible to run the execution-spec-tests (a.k.a. pyspec) in CI.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-08-26T08:43:36Z",
                "message": "core/state: fix missing import (#28010)"
            },
            {
                "date": "2023-08-26T08:19:01Z",
                "message": "eth: remove check for tdd reached on pos api block tags (#27799)\n\nThis change defers to the blockchain for in what circumstances to return error, instead of handling many error-cases in the api backend."
            },
            {
                "date": "2023-08-26T08:13:22Z",
                "message": "core/state: implement fast storage deletion (#27955)\n\nThis changes implements faster post-selfdestruct iteration of storage slots for deletion, by using snapshot-storage+stacktrie to recover the trienodes to be deleted. This mechanism is only implemented for path-based schema. \r\n\r\nFor hash-based schema, the entire post-selfdestruct storage iteration is skipped, with this change, since hash-based does not actually perform deletion anyway. \r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-08-26T08:10:48Z",
                "message": "account/abi: handle solidity panic revert (#27868)\n\nSee  https://docs.soliditylang.org/en/v0.8.21/control-structures.html#panic-via-assert-and-error-via-require"
            },
            {
                "date": "2023-08-26T02:52:12Z",
                "message": "beacon/engine, eth/catalyst, miner: EIP-4788 CL/EL protocol updates (#27872)\n\nThis PR makes EIP-4788 work in the engine API and miner. It also fixes some bugs related to \r\nEIP-4844 block processing and mining. Changes in detail:\r\n\r\n- Header.BeaconRoot has been renamed to ParentBeaconRoot.\r\n- The engine API now implements forkchoiceUpdatedV3\r\n- newPayloadV3 method has been updated with the parentBeaconBlockRoot parameter\r\n- beacon root is now applied to new blocks in miner\r\n- For EIP-4844, block creation now updates the blobGasUsed field of the header"
            }
        ],
        "2023-08-25": [
            {
                "date": "2023-08-25T19:38:27Z",
                "message": "eth/catalyst: reset to current header if chain is rewound (in dev mode) (#27992)\n\n\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\nCo-authored-by: Jared Wasinger <j-wasinger@hotmail.com>"
            },
            {
                "date": "2023-08-25T18:03:41Z",
                "message": "core/types: transaction and receipt encoding/decoding optimizations (#27976)\n\nJust some minor optimizations I figured out a while ago. By using ReadBytes instead of\r\nBytes on the rlp stream, we can save the allocation of a temporary buffer for the typed tx\r\npayload.\r\n\r\nIf kind == rlp.Byte, the size reported by Stream.Kind will be zero, but we need a buffer\r\nof size 1 for ReadBytes. Since typed txs always have to be longer than 1 byte, we can just\r\nreturn an error for kind == rlp.Byte.\r\n\r\nThere is a also a small change for Log: since the first three fields of Log are the ones that \r\nshould appear in the canon encoding, we can simply ignore the remaining fields via \r\nstruct tag. Doing this removes an indirection through the rlpLog type.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-08-25T15:11:40Z",
                "message": "cmd, core, params: add support for the Holesky testnet (#28007)\n\n* cmd, core, params: add support for the Holesky testnet\r\n\r\n* cmd/devp2p: add support for holesky for the dns crawler"
            },
            {
                "date": "2023-08-25T15:10:30Z",
                "message": "eth/protocols/eth: stop advertising eth/66 for pathdb nodes (#28006)"
            },
            {
                "date": "2023-08-25T13:59:40Z",
                "message": "core: support null balance in genesis (#28005)"
            },
            {
                "date": "2023-08-25T12:48:10Z",
                "message": "core/state/snapshot: replace diffToDisk ideal batch size with 64MB (#27977)"
            },
            {
                "date": "2023-08-25T08:05:33Z",
                "message": "core/vm/runtime: Add Random field to config (#28001)"
            }
        ],
        "2023-08-24": [
            {
                "date": "2023-08-24T08:49:13Z",
                "message": "eth/catalyst: use block as finalization (#28000)"
            },
            {
                "date": "2023-08-24T08:48:09Z",
                "message": "eth/catalyst: disable heartbeat for simulated beacon node (#27979)\n\n* eth/catalyst: disable heartbeat for simulated beacon node\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* eth/catalyst: update\r\n\r\n* eth/catalyst: disable heartbeat for tester\r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2023-08-24T08:47:42Z",
                "message": "all: use rlp.DecodeBytes instead of rlp.Decode where possible (#27994)"
            }
        ],
        "2023-08-23": [
            {
                "date": "2023-08-23T22:28:38Z",
                "message": "miner: refactor getSealingBlock method (#27993)"
            },
            {
                "date": "2023-08-23T21:16:14Z",
                "message": "miner: add to build block with EIP-4844 blobs (#27875)\n\n\r\n\r\n---------\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-08-23T21:14:36Z",
                "message": "core/rawdb: fix 32bit build (#27995)"
            },
            {
                "date": "2023-08-23T19:53:31Z",
                "message": "core/state: remove public method ForEachStorage (#27986)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-08-23T19:41:56Z",
                "message": "core/rawdb: allocate database keys with explicit size to avoid slice growth (#27772)"
            },
            {
                "date": "2023-08-23T19:26:30Z",
                "message": "crypto/bn256: eliminate dead store (#27944)"
            },
            {
                "date": "2023-08-23T19:19:04Z",
                "message": "les: use new atomic types (#27856)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-08-23T18:43:55Z",
                "message": "core/rawdb, ethdb/pebble: avoid fsync db in tests (#27836)\n\nAdds an option to disable fsync for database operations.\r\nThis is to make tests faster."
            },
            {
                "date": "2023-08-23T18:31:05Z",
                "message": "rlp: remove allocation of bytes.Reader in DecodeBytes (#27987)"
            },
            {
                "date": "2023-08-23T15:54:30Z",
                "message": "travis: get rid of old useless GO111MODULE directives (#27991)"
            },
            {
                "date": "2023-08-23T13:53:38Z",
                "message": "account/abi: convert if-else-if chain to tagged switch (#27869)\n\naccount/abi: conver if-else-if chain to tagged switch"
            },
            {
                "date": "2023-08-23T13:49:36Z",
                "message": "travis: increase travis wait time (#27975)"
            },
            {
                "date": "2023-08-23T13:42:37Z",
                "message": "cmd/utils: fix a startup issue on deleted chaindata but dangling ancients (#27989)"
            },
            {
                "date": "2023-08-23T12:14:04Z",
                "message": "eth/catalyst: disable full payload when not in dev mode (#27921)\n\neth/catalyst: only enable full payload in dev mode"
            },
            {
                "date": "2023-08-23T11:08:39Z",
                "message": "core, eth, trie: expose more detailed dirty ram tracking for diff layers (#27971)"
            },
            {
                "date": "2023-08-23T07:50:28Z",
                "message": "go.mod: update pebble to crl-release-23.1 (#27967)"
            },
            {
                "date": "2023-08-23T07:47:42Z",
                "message": "graphql: fix nil deref on a timer (#27978)\n\ngraphql: fix the panic of nil timer.Stop\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
            },
            {
                "date": "2023-08-23T02:39:01Z",
                "message": "rpc: use go-winio for named pipes (#27972)\n\nWe're trying a new named pipe library, which should hopefully fix some occasional failures in CI.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2023-08-22": [
            {
                "date": "2023-08-22T16:29:17Z",
                "message": "core: add BeaconRoot to header in GenerateChain (#27974)\n\nFixes an error in tests of internal/ethapi."
            },
            {
                "date": "2023-08-22T13:37:04Z",
                "message": "cmd/evm: add back stateroot to jsonl-output (#27968)\n\nThe PR #26274 broke the evm statetest command a bit, in that it stopped spitting out the stateroot following a non-successful statetest-execution. \r\n\r\nThis PR changes it back, so the stateroot is unconditionally output on stderr, and makes it so fuzzing works again."
            },
            {
                "date": "2023-08-22T12:33:39Z",
                "message": "core, params, beacon/engine: implement EIP 4788 BeaconRoot  (#27849)\n\nThis change implements \"EIP 4788 : Beacon block root in the EVM\". It implements version-2 of EPI-4788, main difference being that the contract is an actual contract rather than a precompile, as in #27289."
            },
            {
                "date": "2023-08-22T11:11:25Z",
                "message": "go.mod: update docker (#27970)"
            },
            {
                "date": "2023-08-22T08:00:01Z",
                "message": "travis, build: update Go to 1.21.0 (#27958)\n\nbuild: update to go 1.21"
            },
            {
                "date": "2023-08-22T07:59:38Z",
                "message": "miner: fix reply -> replay typo (#27961)\n\n* typo: reply -> replay\r\n\r\n* rebuild"
            },
            {
                "date": "2023-08-22T00:58:20Z",
                "message": "core: ensure txindex will be triggered at least once (#27847)\n\nCurrently, we trigger the logic to (un)index transactions when the node receives a new\r\nblock. However, in some cases the node may not receive new blocks (eg, when the Geth node\r\nis configured without peer discovery, or when it acts as an RPC node for historical-only\r\ndata).\r\n\r\nIn these situations, the Geth node user may not have previously configured txlookuplimit\r\n(i.e. the default of around one year), but later realizes they need to index all\r\nhistorical blocks. However, adding txlookuplimit=0 and restarting geth has no effect. This\r\nchange makes it check for required indexing work once, on startup, to fix the issue.\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-08-22T00:53:29Z",
                "message": "internal/ethapi: add testcases for blobTx (#27818)\n\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2023-08-21": [
            {
                "date": "2023-08-21T17:33:37Z",
                "message": "eth/catalyst: set finalized block hash properly in dev mode (#27886)\n\n\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-08-21T17:32:34Z",
                "message": "eth: ignore genesis block on importChain (#27956)"
            }
        ],
        "2023-08-18": [
            {
                "date": "2023-08-18T20:41:19Z",
                "message": "trie: reduce allocs in recHash (#27770)"
            },
            {
                "date": "2023-08-18T12:22:35Z",
                "message": "internal/ethapi: eth API changes needed for 4844 (#27928)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-08-18T07:03:14Z",
                "message": "internal/ethapi: optimize & clean up EstimateGas (#27710)\n\nOptimizations:\r\n\r\n- Previously, if a transaction was reverting, EstimateGas would exhibit worst-case behavior and binary search up to the max gas limit (~40 state-clone + tx executions). This change allows EstimateGas to return after only a single unconstrained execution in this scenario.\r\n- Uses the gas used from the unconstrained execution to bias the remaining binary search towards the likely solution in a simple way that doesn't impact the worst case. For a typical contract-invoking transaction, this reduces the median number of state-clone+executions from 25 to 18 (28% reduction).\r\n\r\nCleanup:\r\n\r\n- added & improved function + code comments\r\n- correct the EstimateGas documentation to clarify the gas limit determination is at latest block, not pending, if the blockNr is unspecified."
            }
        ],
        "2023-08-17": [
            {
                "date": "2023-08-17T21:15:29Z",
                "message": "eth/downloader: fix rare crash when parent header missing in db (#27945)\n\nReadSkeletonHeader can return nil if the header is missing, so we should\r\nnot access fields on it. Note that calling .Hash() on a nil header is fine, so there \r\nis no need to actually check for nil.\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-08-17T09:22:18Z",
                "message": "core/txpool/legacypool: protect cache with mutex (#27898)\n\nThis change fixes the a potential race by using mutexes when the m.cache is read or modified."
            }
        ],
        "2023-08-16": [
            {
                "date": "2023-08-16T21:31:02Z",
                "message": "core/forkid: correctly compute forkid when timestamp fork is activated in genesis (#27895)\n\nThis changes the forkID calculation to ignore time-based forks that occurred before the\r\ngenesis block. It's supposed to be done this way because the spec says:\r\n\r\n> If a chain is configured to start with a non-Frontier ruleset already in its genesis, that is NOT considered a fork."
            },
            {
                "date": "2023-08-16T21:22:15Z",
                "message": "core/types: fix unmarshalling of BlobTx values (#27939)\n\nFromBig returns true *when overflow occurs*"
            },
            {
                "date": "2023-08-16T13:26:49Z",
                "message": "node: increase batch limits for auth rpc API (#27924)\n\nThis raises the JSON-RPC batch request limits significantly for the engine API endpoint.\r\nThe limits are now also hard-coded, so users won't get them wrong. I have chosen these limits:\r\n\r\n    maximum batch items: 2000\r\n    maximum batch response size: 250MB\r\n\r\nWhile it would also be possible to disable batch limits completely for the engine API, \r\nI think having some limits is a good safety net against misbehaving CLs. Since this\r\n isn't configurable, we really want to ensure this limit will never become an issue in the\r\n CL/EL communication, so I set them quite high.\r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-08-16T10:11:22Z",
                "message": "build: remove ubuntu kinetic (deprecated) (#27933)"
            }
        ],
        "2023-08-15": [
            {
                "date": "2023-08-15T18:19:37Z",
                "message": "eth/tracers/js: use t.toBig on ctx.GasPrice for js tracing (#27903)\n\nThis change fixes a bug in js tracer, where `ctx.GasPrice.toString(16)` returns a number string in base `10`."
            },
            {
                "date": "2023-08-15T18:16:00Z",
                "message": "trie: add tests for \"short\" nodes in StackTrie (#27932)"
            },
            {
                "date": "2023-08-15T12:37:34Z",
                "message": "crypto/bls12381: fix typo in comment (#27930)"
            },
            {
                "date": "2023-08-15T12:35:48Z",
                "message": "internal/ethapi: implement eth_getBlockReceipts (#27702)"
            }
        ],
        "2023-08-14": [
            {
                "date": "2023-08-14T12:59:05Z",
                "message": "go.mod: upgrade goja (#27899)"
            },
            {
                "date": "2023-08-14T12:58:01Z",
                "message": "cmd/utils: restore support for txlookuplimit flag (#27917)\n\nThis fixes a regression where -txlookuplimit was not applied anymore."
            },
            {
                "date": "2023-08-14T08:13:34Z",
                "message": "core/types: support for optional blob sidecar in BlobTx (#27841)\n\nThis PR removes the newly added txpool.Transaction wrapper type, and instead adds a way\r\nof keeping the blob sidecar within types.Transaction. It's better this way because most\r\ncode in go-ethereum does not care about blob transactions, and probably never will. This\r\nwill start mattering especially on the client side of RPC, where all APIs are based on\r\ntypes.Transaction. Users need to be able to use the same signing flows they already\r\nhave.\r\n\r\nHowever, since blobs are only allowed in some places but not others, we will now need to\r\nadd checks to avoid creating invalid blocks. I'm still trying to figure out the best place\r\nto do some of these. The way I have it currently is as follows:\r\n\r\n- In block validation (import), txs are verified not to have a blob sidecar.\r\n- In miner, we strip off the sidecar when committing the transaction into the block.\r\n- In TxPool validation, txs must have a sidecar to be added into the blobpool.\r\n  - Note there is a special case here: when transactions are re-added because of a chain\r\n    reorg, we cannot use the transactions gathered from the old chain blocks as-is,\r\n    because they will be missing their blobs. This was previously handled by storing the\r\n    blobs into the 'blobpool limbo'. The code has now changed to store the full\r\n    transaction in the limbo instead, but it might be confusing for code readers why we're\r\n    not simply adding the types.Transaction we already have.\r\n\r\nCode changes summary:\r\n\r\n- txpool.Transaction removed and all uses replaced by types.Transaction again\r\n- blobpool now stores types.Transaction instead of defining its own blobTx format for storage\r\n- the blobpool limbo now stores types.Transaction instead of storing only the blobs\r\n- checks to validate the presence/absence of the blob sidecar added in certain critical places"
            }
        ],
        "2023-08-12": [
            {
                "date": "2023-08-12T08:32:50Z",
                "message": "internal/build: apply -ubuntu to env (#27910)"
            }
        ],
        "2023-08-11": [
            {
                "date": "2023-08-11T22:21:46Z",
                "message": "go.mod, build: upgrade c-kzg-4844 (#27907)\n\nThis upgrades to the latest release of ckzg, and also attempts to fix some blst-related\r\nbuild errors that occur on launchpad.net."
            },
            {
                "date": "2023-08-11T22:04:12Z",
                "message": "all: update golang/x/ext and fix slice sorting fallout (#27909)\n\nThe Go authors updated golang/x/ext to change the function signature of the slices sort method. \r\nIt's an entire shitshow now because x/ext is not tagged, so everyone's codebase just \r\npicked a new version that some other dep depends on, causing our code to fail building.\r\n\r\nThis PR updates the dep on our code too and does all the refactorings to follow upstream..."
            },
            {
                "date": "2023-08-11T14:05:35Z",
                "message": "trie/triedb/pathdb: make shutdown journal log friendlier (#27905)"
            },
            {
                "date": "2023-08-11T13:50:57Z",
                "message": "core/types: remove duplication in eip2930 signer (#27860)\n\nRemove duplication in signer\r\n---------\r\n\r\nCo-authored-by: GDdark <huangdongxi@minijoy.work>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-08-11T13:16:45Z",
                "message": "rpc: attempt to fix ping/pong logic race (#27733)\n\nThis should fix #27726. With enough load, it might happen that the SetPongHandler \r\ncallback gets invoked before the call to SetReadDeadline is made in pingLoop. When \r\nthis occurs, the socket will end up with a 30s read deadline even though it got the pong,\r\nwhich will lead to a timeout.\r\n\r\nThe fix here is processing the pong on pingLoop, synchronizing with the code that \r\nsends the ping."
            },
            {
                "date": "2023-08-11T13:15:49Z",
                "message": "ethdb/leveldb: support more than 7 levels in metrics (#27904)"
            },
            {
                "date": "2023-08-11T07:12:26Z",
                "message": "core/txpool/blobpool: fix metrics name for prometheus export (#27901)"
            }
        ],
        "2023-08-10": [
            {
                "date": "2023-08-10T19:22:17Z",
                "message": "params: switch release family to 1.13 to prep for PBSS"
            },
            {
                "date": "2023-08-10T19:21:36Z",
                "message": "all: activate pbss as experimental feature (#26274)\n\n* all: activate pbss\r\n\r\n* core/rawdb: fix compilation error\r\n\r\n* cma, core, eth, les, trie: address comments\r\n\r\n* cmd, core, eth, trie: polish code\r\n\r\n* core, cmd, eth: address comments\r\n\r\n* cmd, core, eth, les, light, tests: address comment\r\n\r\n* cmd/utils: shorten log message\r\n\r\n* trie/triedb/pathdb: limit node buffer size to 1gb\r\n\r\n* cmd/utils: fix opening non-existing db\r\n\r\n* cmd/utils: rename flag name\r\n\r\n* cmd, core: group chain history flags and fix tests\r\n\r\n* core, eth, trie: fix memory leak in snapshot generation\r\n\r\n* cmd, eth, internal: deprecate flags\r\n\r\n* all: enable state tests for pathdb, fixes\r\n\r\n* cmd, core: polish code\r\n\r\n* trie/triedb/pathdb: limit the node buffer size to 256mb\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2023-08-10T11:00:52Z",
                "message": "graphql: validate block params (#27876)\n\nBlock takes a number and a hash. The spec is unclear on what should happen in this case, leaving it an implemenation detail. With this change, we return an error in case both number and hash are passed in."
            },
            {
                "date": "2023-08-10T10:50:09Z",
                "message": "deps: update supranational/blst to 0.3.11 (#27890)\n\nbuild(deps): bump github.com/supranational/blst\r\n\r\nBumps [github.com/supranational/blst](https://github.com/supranational/blst) from 0.3.11-0.20230406105308-e9dfc5ee724b to 0.3.11.\r\n- [Release notes](https://github.com/supranational/blst/releases)\r\n- [Commits](https://github.com/supranational/blst/commits/v0.3.11)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: github.com/supranational/blst\r\n  dependency-type: direct:production\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
            },
            {
                "date": "2023-08-10T10:49:05Z",
                "message": "eth/filters, core/rawdb: remove unused param, refactor filtering-loop (#27891)\n\nThis change removes a chainconfig parameter passed into rawdb.ReadLogs, which is not used nor needed.\r\nIt also modifies the filter loop slightly, avoiding a labeled break and instead using a method.\r\n\r\nThis change does not modify any behaviour."
            },
            {
                "date": "2023-08-10T10:13:15Z",
                "message": "params: begin v1.12.2 release cycle"
            },
            {
                "date": "2023-08-10T10:10:17Z",
                "message": "params: release go-ethereum v1.12.1"
            }
        ],
        "2023-08-09": [
            {
                "date": "2023-08-09T16:02:45Z",
                "message": "core/state: move UpdateContractCode before the trie hash is computed (#27853)\n\nContext: The UpdateContractCode method was introduced for the state storage commitment\r\nschemes that include the whole code for their commitment computation. It must therefore be called\r\nbefore the root hash is computed at the end of IntermediateRoot.\r\n\r\nThis should have no impact on the MPT since, in this context, the method is a no-op."
            },
            {
                "date": "2023-08-09T15:57:57Z",
                "message": "graphql: add yParity field for transactions (#27882)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-08-09T14:00:31Z",
                "message": "p2p: move ping handling into pingLoop goroutine (#27887)\n\nMoving the response sending there allows tracking all peer goroutines\nin the peer WaitGroup."
            }
        ],
        "2023-08-08": [
            {
                "date": "2023-08-08T12:54:19Z",
                "message": "core/vm: update 4844 - point evaluation precompile address (#27874)"
            },
            {
                "date": "2023-08-08T11:35:58Z",
                "message": "graphql: avoid greedy allocation (#27873)\n\nFixes a graphql-dos\r\n\r\n---------\r\n\r\nCo-authored-by: Sina Mahmoodi <1591639+s1na@users.noreply.github.com>\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            }
        ],
        "2023-08-07": [
            {
                "date": "2023-08-07T16:30:05Z",
                "message": "p2p/simulations/examples: use atomic.Int64 (#27861)"
            },
            {
                "date": "2023-08-07T14:03:57Z",
                "message": "internal/ethapi: add state override to estimateGas (#27845)"
            },
            {
                "date": "2023-08-07T07:11:50Z",
                "message": "accounts: use atomic type (#27857)"
            },
            {
                "date": "2023-08-07T07:11:06Z",
                "message": "internal: use atomic type (#27858)"
            }
        ],
        "2023-08-04": [
            {
                "date": "2023-08-04T23:08:53Z",
                "message": "internal/ethapi, graphql: correct comments about gas price logic (#27752)"
            },
            {
                "date": "2023-08-04T22:58:53Z",
                "message": "log: use atomic types (#27763)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-08-04T22:54:55Z",
                "message": "core/types: support yParity field in JSON transactions (#27744)\n\nThis adds support for the \"yParity\" field in transaction objects returned by RPC\r\nAPIs. We somehow forgot to add this field even though it has been in the spec for\r\na long time."
            },
            {
                "date": "2023-08-04T22:24:32Z",
                "message": "all: remove trailing whitespace (#27741)"
            },
            {
                "date": "2023-08-04T12:16:23Z",
                "message": "core/types: fix immutability guarantees in Block (#27844)\n\nThis change rearranges the accessor methods in block.go and fixes some minor issues with\r\nthe copy-on-write logic of block data. Fixed issues:\r\n\r\n- Block.WithWithdrawals did not create a shallow copy of the block.\r\n\r\n- Block.WithBody copied the header unnecessarily, and did not preserve withdrawals.\r\n\r\nHowever, the bugs did not affect any code in go-ethereum because blocks are *always*\r\ncreated using NewBlockWithHeader().WithBody().WithWithdrawals()"
            }
        ],
        "2023-08-03": [
            {
                "date": "2023-08-03T11:51:02Z",
                "message": "eth/protocols/snap: fix batch writer when resuming an aborted sync (#27842)"
            }
        ],
        "2023-08-02": [
            {
                "date": "2023-08-02T09:53:05Z",
                "message": "build: upgrade -dlgo version to Go 1.20.7 (#27835)"
            }
        ],
        "2023-08-01": [
            {
                "date": "2023-08-01T21:20:52Z",
                "message": "p2p: use atomic types (#27764)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-08-01T16:02:36Z",
                "message": "cmd/geth: disable automaxprocs log (#27814)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-08-01T12:17:32Z",
                "message": "all: implement path-based state scheme (#25963)\n\n* all: implement path-based state scheme\r\n\r\n* all: edits from review\r\n\r\n* core/rawdb, trie/triedb/pathdb: review changes\r\n\r\n* core, light, trie, eth, tests: reimplement pbss history\r\n\r\n* core, trie/triedb/pathdb: track block number in state history\r\n\r\n* trie/triedb/pathdb: add history documentation\r\n\r\n* core, trie/triedb/pathdb: address comments from Peter's review\r\n\r\nImportant changes to list:\r\n\r\n- Cache trie nodes by path in clean cache\r\n- Remove root->id mappings when history is truncated\r\n\r\n* trie/triedb/pathdb: fallback to disk if unexpect node in clean cache\r\n\r\n* core/rawdb: fix tests\r\n\r\n* trie/triedb/pathdb: rename metrics, change clean cache key\r\n\r\n* trie/triedb: manage the clean cache inside of disk layer\r\n\r\n* trie/triedb/pathdb: move journal function\r\n\r\n* trie/triedb/path: fix tests\r\n\r\n* trie/triedb/pathdb: fix journal\r\n\r\n* trie/triedb/pathdb: fix history\r\n\r\n* trie/triedb/pathdb: try to fix tests on windows\r\n\r\n* core, trie: address comments\r\n\r\n* trie/triedb/pathdb: fix test issues\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-08-01T12:12:11Z",
                "message": "cmd/bootnode: fix timer leak (#27754)"
            },
            {
                "date": "2023-08-01T11:58:26Z",
                "message": "cmd/evm: set ExcessBlobGas from env (#27796)\n\nSets the `currentExcessBlobGas` from env, alternatively calculates it based on `parentExcessBlobGas` and `parentBlobGasUsed`. It then emits the `currentExcessBlobGas` and `currentBlobGasUsed` into the output, to be used as parent-values for a future iteration. \r\n\r\nCloses #27785\r\nCloses #27783\r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-08-01T09:58:45Z",
                "message": "consensus/misc: move eip1559 into a package (#27828)\n\n* consensus/misc: move eip1559 as a sub directory\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* consensus/misc: package name\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* all: eip1559\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
            },
            {
                "date": "2023-08-01T07:09:20Z",
                "message": "core/txpool/blobpool: remove error log when finalized block is nil (#27822)\n\n* core/txpool/blobpool: remove error log when finalized block is nil\r\n\r\n* core/txpool/blobpool: take peter's suggestion"
            },
            {
                "date": "2023-08-01T07:08:19Z",
                "message": "tests: make tests pass on windows/386 (#27821)\n\n* tests: split up state test execution\r\n\r\n* Revert \"tests: split up state test execution\"\r\n\r\nThis reverts commit 96017c248c85d24e93ad013a2bbe8b38c99327c0.\r\n\r\n* build: bump test timeout to 20 minutes"
            },
            {
                "date": "2023-08-01T07:07:25Z",
                "message": "all: replace data gas to blob gas in comments (#27825)\n\n* eth: excessDataGas -> excessBlobGas\r\n\r\n* consensus: data gas -> blob gas\r\n\r\n* core: data gas -> blob gas\r\n\r\n* params: data gas -> blob gas"
            }
        ],
        "2023-07-31": [
            {
                "date": "2023-07-31T17:15:13Z",
                "message": "cmd/bootnode: defer udp connection close (#27787)"
            },
            {
                "date": "2023-07-31T12:07:51Z",
                "message": "core, trie: track state change set with account address (#27815)"
            },
            {
                "date": "2023-07-31T07:54:26Z",
                "message": "core: remove pointless check for excessBlobGas nilness (#27797)\n\n* core: check excessBlobGas in front\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* core: no need to manual panic\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* core: no comment\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
            },
            {
                "date": "2023-07-31T07:22:36Z",
                "message": "eth: conver if-else-if chain to tagged switch (#27816)"
            },
            {
                "date": "2023-07-31T05:18:13Z",
                "message": "cmd/geth: import package catalyst once (#27803)"
            }
        ],
        "2023-07-28": [
            {
                "date": "2023-07-28T07:08:38Z",
                "message": "core/types: fix receipt blob fields marshaling (#27793)"
            }
        ],
        "2023-07-27": [
            {
                "date": "2023-07-27T14:15:08Z",
                "message": "core/types: put header fields in correct order (#27791)"
            },
            {
                "date": "2023-07-27T13:53:28Z",
                "message": "all: rename dataGas to blobGas (#27789)"
            },
            {
                "date": "2023-07-27T11:53:05Z",
                "message": "core/txpool/blobpool: fix a merge conflict from a package rename (#27790)"
            },
            {
                "date": "2023-07-27T11:11:09Z",
                "message": "core/types: add 4844 data gas fields in Receipt (#27743)\n\n* core/types: add data gas fields in Receipt\r\n\r\n* core/types: use BlobGas method of tx\r\n\r\n* core: fix test\r\n\r\n* core/types: fix receipt tests, add data gas used field test\r\n\r\n---------\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2023-07-27T10:45:35Z",
                "message": "core/txpool/blobpool: 4844 blob transaction pool (#26940)\n\n* core/blobpool: implement txpool for blob txs\r\n\r\n* core/txpool: track address reservations to notice any weird bugs\r\n\r\n* core/txpool/blobpool: add support for in-memory operation for tests\r\n\r\n* core/txpool/blobpool: fix heap updating after SetGasTip if account is evicted\r\n\r\n* core/txpool/blobpool: fix eviction order if cheap leading txs are included\r\n\r\n* core/txpool/blobpool: add note as to why the eviction fields are not inited in reinject\r\n\r\n* go.mod: pull in inmem billy form upstream\r\n\r\n* core/txpool/blobpool: fix review commens\r\n\r\n* core/txpool/blobpool: make heap and heap test deterministic\r\n\r\n* core/txpool/blobpool: luv u linter\r\n\r\n* core/txpool: limit blob transactions to 16 per account\r\n\r\n* core/txpool/blobpool: fix rebase errors\r\n\r\n* core/txpool/blobpool: luv you linter\r\n\r\n* go.mod: revert some strange crypto package dep updates"
            },
            {
                "date": "2023-07-27T08:32:15Z",
                "message": "core/types: deepcopy ExcessDataGas, DataGasUsed (#27767)"
            }
        ],
        "2023-07-24": [
            {
                "date": "2023-07-24T16:13:34Z",
                "message": "crypto/kzg4844: do lazy init in all ckzg funcs (#27679)\n\n* crypto/kzg4844: remove unnecessary init call & fix typo\r\n\r\n* Fix kzg4844 tests/benchmarks\r\n\r\n* Make init lazy & revert changes to tests"
            },
            {
                "date": "2023-07-24T10:23:38Z",
                "message": "cmd/devp2p: atomic types used (#27755)"
            },
            {
                "date": "2023-07-24T10:22:54Z",
                "message": "cmd/geth: atomic types used (#27756)"
            },
            {
                "date": "2023-07-24T10:22:09Z",
                "message": "all: expose block number information to statedb (#27753)\n\n* core/state: clean up\r\n\r\n* all: add block number infomration to statedb\r\n\r\n* core, trie: rename blockNumber to block"
            },
            {
                "date": "2023-07-24T10:21:26Z",
                "message": "ethclient/gethclient: gofmt -s (#27762)"
            }
        ],
        "2023-07-18": [
            {
                "date": "2023-07-18T12:07:25Z",
                "message": "cmd/evm/testdata: fix typos in docs (#27742)"
            },
            {
                "date": "2023-07-18T07:44:16Z",
                "message": "beacon/engine, eth/catalyst: EIP-4844 updates for the engine API (#27736)\n\nThis is a spin-out from the EIP-4844 devnet branch, containing just the Engine API modifications\r\nand nothing else. The newPayloadV3 endpoint won't really work in this version, but we need the\r\ndata structures for testing so I'd like to get this in early.\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
            }
        ],
        "2023-07-17": [
            {
                "date": "2023-07-17T18:48:11Z",
                "message": "les: remove obsolete code related to PoW header syncing (#27737)\n\nThis change removes PoW header syncing related code from LES and also deletes \r\nduplicated packages les/catalyst, les/downloader and les/fetcher. These package copies\r\nwere created because people wanted to make changes in their eth/ counterparts, but weren't\r\nable to adapt LES code to the API changes."
            },
            {
                "date": "2023-07-17T17:02:18Z",
                "message": "core/state, core/vm: implement EIP 6780 (#27189)\n\nEIP-6780: SELFDESTRUCT only in same transaction\r\n\r\n>     SELFDESTRUCT will recover all funds to the caller but not delete the account, except when called in the same transaction as creation\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2023-07-15": [
            {
                "date": "2023-07-15T21:27:36Z",
                "message": "core, tests: EIP-4844 transaction processing logic (#27721)\n\nThis updates the reference tests to the latest version and also adds logic\r\nto process EIP-4844 blob transactions into the state transition. We are now\r\npassing most Cancun fork tests.\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-07-15T15:45:57Z",
                "message": "core/vm: use types.EmptyCodeHash (#27729)"
            },
            {
                "date": "2023-07-15T14:35:30Z",
                "message": "core:  replace instances of 'suicide' with 'selfdestruct' to improve code consistency. (#27716)\n\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>"
            },
            {
                "date": "2023-07-15T14:33:46Z",
                "message": "accounts/abi/bind/backends: fix goroutine leak in unit test (#27705)"
            }
        ],
        "2023-07-14": [
            {
                "date": "2023-07-14T17:19:03Z",
                "message": "metrics: NilResettingTimer.Time should execute the timed function (#27724)"
            },
            {
                "date": "2023-07-14T17:14:47Z",
                "message": "cmd/geth: use automaxprocs to apply cpu quota correctly (#27506)\n\nIt is usually best to set GOMAXPROCS to the number of available CPU cores. However, setting\r\nit like that does not work well when the process is quota-limited to a certain number of CPUs.\r\nThe automaxprocs library configures GOMAXPROCS, taking such limits into account."
            },
            {
                "date": "2023-07-14T16:10:16Z",
                "message": "metrics: NilTimer should still run the function to be timed (#27723)"
            },
            {
                "date": "2023-07-14T12:58:27Z",
                "message": "cmd/bootnode, p2p: support for alternate mapped ports (#26359)\n\nThis changes the port mapping procedure such that, when the requested port is unavailable\r\nan alternative port suggested by the router is used instead.\r\n\r\nWe now also repeatedly request the external IP from the router in order to catch any IP changes.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-07-14T12:06:51Z",
                "message": "core/blockchain: fast to snap in comments (#27722)"
            }
        ],
        "2023-07-13": [
            {
                "date": "2023-07-13T14:34:29Z",
                "message": "go.sum: go mod tidy (#27717)"
            },
            {
                "date": "2023-07-13T12:44:42Z",
                "message": "eth/tracers/native: panic on memory read in prestateTracer (#27691)\n\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            },
            {
                "date": "2023-07-13T12:43:25Z",
                "message": "eth/tracers: add ReturnData in the tracer's response (#27704)\n\nThe struct logger (or opcode tracer) was missing the return data field even\r\nif this was explicitly enabled by user via `\"enableReturnData\": true` in the config.\r\nThis PR fixes this issue.\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            },
            {
                "date": "2023-07-13T10:47:32Z",
                "message": "internal/ethapi: add more testcase for GetTransactionReceipt (#27527)\n\n* internal/ethapi: testBackend reuse the same db\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* internal/ethapi: implment GetTransaction\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* internal/ethapi: implement GetReceipts\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* internal/ethapi: insert receipts and setup txlookup\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* internal/ethapi: add simple success tx receipt test\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* internal/ethapi: add case create contract\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* internal/ethapi: add contract call receipt\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* internal/ethapi: add tx notfound\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* internal/ethapi: add dynamic fee testcase\r\n\r\n* internal/ethapi: add accessList receipt\r\n\r\n* internal/ethapi: no need to insert receipt chain, no error\r\n\r\n* internal/ethapi: use HeaderByHash instead\r\n\r\n* internal/ethapi: add one more case\r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
            },
            {
                "date": "2023-07-13T10:42:48Z",
                "message": "internal: early exit if tx for getTxReceipt not found (#27712)\n\ninternal/ethapi: fast exit if tx notfound"
            },
            {
                "date": "2023-07-13T10:41:58Z",
                "message": "graphql: fix race in withdrawals test (#27706)\n\ngraphql: fix race in test"
            },
            {
                "date": "2023-07-13T06:55:31Z",
                "message": "eth, miner: rm redundant type declare (#27713)\n\n* eth: rm redundant type from array, slice, or map\r\n\r\n* miner: rm redundant type from array, slice, or map"
            }
        ],
        "2023-07-12": [
            {
                "date": "2023-07-12T17:38:12Z",
                "message": "build: upgrade -dlgo version to Go 1.20.6 (#27708)"
            },
            {
                "date": "2023-07-12T10:01:55Z",
                "message": "accounts, cmd/evm: fix docstrings (#27703)\n\nfix function name in comment\r\n\r\nSigned-off-by: cui fliter <imcusg@gmail.com>"
            },
            {
                "date": "2023-07-12T10:01:38Z",
                "message": "p2p/discover: filter bootnodes by netrestrict (#27701)\n\nThis prevents an issue where the node would attempt to contact the bootstrap\r\nnodes even if they weren't contained in the netrestrict list."
            },
            {
                "date": "2023-07-12T07:19:01Z",
                "message": "core/rawdb: support freezer batch read with no size limit (#27687)\n\nThis change adds the ability to perform reads from freezer without size limitation. This can be useful in cases where callers are certain that out-of-memory will not happen (e.g. reading only a few elements). \r\n\r\nThe previous API was designed to behave both optimally and secure while servicing a request from a peer, whereas this change should _not_ be used when an untrusted peer can influence the query size."
            }
        ],
        "2023-07-11": [
            {
                "date": "2023-07-11T20:34:22Z",
                "message": "go.mod: upgrade github.com/karalabe/usb to fix build warning (#27698)"
            },
            {
                "date": "2023-07-11T19:27:48Z",
                "message": "console: add cleanup to avoid leaks in newTester (#27695)"
            },
            {
                "date": "2023-07-11T19:21:32Z",
                "message": "cmd/utils, p2p: clean up discovery setup (#27518)\n\nThis simplifies the code that initializes the discovery a bit, and\r\nadds new flags for enabling/disabling discv4 and discv5 separately.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-07-11T13:43:23Z",
                "message": "core/state: value diff tracking in StateDB (#27349)\n\nThis change makes the StateDB track the state key value diff of a block transition.\r\nWe already tracked current account and storage values for the purpose of updating\r\nthe state snapshot. With this PR, we now also track the original (pre-transition) values\r\nof accounts and storage slots."
            },
            {
                "date": "2023-07-11T12:57:02Z",
                "message": "internal/blocktest: add package for shared test code (#27270)"
            },
            {
                "date": "2023-07-11T07:57:42Z",
                "message": "eth: better active protocol handler tracking (#27665)\n\nFixes an issue where waitgroups were used erroneously, which could lead to waitgroup being added to while wait was already invoked."
            },
            {
                "date": "2023-07-11T07:55:34Z",
                "message": "core/vm: implement EIP-5656, mcopy instruction (#26181)\n\nImplements [EIP 5656](https://eips.ethereum.org/EIPS/eip-5656), MCOPY instruction, and enables it for Cancun. \r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2023-07-10": [
            {
                "date": "2023-07-10T18:40:31Z",
                "message": "core/vm: define cancun + enable 1153 (tstore/tload) in cancun (#27663)"
            }
        ],
        "2023-07-07": [
            {
                "date": "2023-07-07T08:14:24Z",
                "message": "miner: remove unused commented code (#27664)"
            }
        ],
        "2023-07-06": [
            {
                "date": "2023-07-06T16:05:34Z",
                "message": "core: remove outdated tests (#27662)\n\nBack before #27178 , we spun up a number of ethash verifiers to verify headers. So we also had tests to ensure that we were indeed able to abort verification even if we had multiple workers running.\r\n\r\nWith PR #27178, we removed the parallelism in verification, and these tests are now failing, since we now just sequentially fire away the results as fast as possible on one routine.\r\n\r\nThis change removes the (sometimes failing) tests"
            },
            {
                "date": "2023-07-06T14:20:31Z",
                "message": "p2p, p2p/discover: add dial metrics (#27621)\n\nThis PR adds metrics for p2p dialing, which gives us visibility into the quality of the dial \r\ncandidates  returned by our discovery methods."
            },
            {
                "date": "2023-07-06T08:42:34Z",
                "message": "cmd/geth: implement dev mode for post-merge (#27327)\n\nThis change adds back the 'geth --dev' mode of operation, using a cl-mocker. \r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>\r\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>"
            },
            {
                "date": "2023-07-06T07:50:44Z",
                "message": "signer/core: show helptext when clef rejects signing (#27538)\n\n\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-07-06T06:56:42Z",
                "message": "core: stop chain when tests are finished (#27660)\n\ncore (blockchain_test): add chain.Stop() to tests"
            }
        ],
        "2023-07-05": [
            {
                "date": "2023-07-05T22:04:07Z",
                "message": "ethdb/leveldb: update leveldb metrics collection (#27643)\n\nThis removes text parsing in leveldb metrics collection code. All metrics\r\ncan now be accessed through the stats API provided by leveldb.\r\n\r\nWe also add new gauge-typed metrics that count the number of tables at each level.\r\n\r\n---------\r\n\r\nCo-authored-by: Exca-DK <Exca-DK@users.noreply.github.com>\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2023-07-04": [
            {
                "date": "2023-07-04T07:21:06Z",
                "message": "cmd, core, eth, graphql, trie: no persisted clean trie cache file (#27525)\n\nThe clean trie cache is persisted periodically, therefore Geth can\r\nquickly warmup the cache in next restart.\r\n\r\nHowever it will reduce the robustness of system. The assumption is\r\nheld in Geth that if the parent trie node is present, then the entire\r\nsub-trie associated with the parent are all prensent.\r\n\r\nImagine the scenario that Geth rewinds itself to a past block and\r\nrestart, but Geth finds the root node of \"future state\" in clean\r\ncache then regard this state is present in disk, while is not in fact.\r\n\r\nAnother example is offline pruning tool. Whenever an offline pruning\r\nis performed, the clean cache file has to be removed to aviod hitting\r\nthe root node of \"deleted states\" in clean cache.\r\n\r\nAll in all, compare with the minor performance gain, system robustness\r\nis something we care more."
            }
        ],
        "2023-07-02": [
            {
                "date": "2023-07-02T11:21:16Z",
                "message": "node: fix listening on IPv6 address (#27628) (#27635)"
            }
        ],
        "2023-06-28": [
            {
                "date": "2023-06-28T09:11:02Z",
                "message": "core/state, light, les: make signature of ContractCode hash-independent (#27209)\n\n* core/state, light, les: make signature of ContractCode hash-independent\r\n\r\n* push current state for feedback\r\n\r\n* les: fix unit test\r\n\r\n* core, les, light: fix les unittests\r\n\r\n* core/state, trie, les, light: fix state iterator\r\n\r\n* core, les: address comments\r\n\r\n* les: fix lint\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2023-06-28T09:08:48Z",
                "message": "params, trie: add verkle fork management + upgrade go-verkle (#27464)\n\n* params, trie: add verkle fork management + upgrade go-verkle\r\n\r\n* remove the two verkle files\r\n\r\n* core, eth, params: add missing function\r\n\r\n* Gary's feedback\r\n\r\n* remove trie/utils/verkle.go\r\n\r\n* add verkle block override\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2023-06-28T09:06:20Z",
                "message": "eth: send big transactions by announce/retrieve only (#27618)\n\n* eth: send big transactions by announce/retrieve only\r\n\r\n* Update eth/handler.go\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\n* eth: remove superfluous bracket\r\n\r\n* eth: add whitespace\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2023-06-27": [
            {
                "date": "2023-06-27T17:28:18Z",
                "message": "core/txpool/legacypool: fix typo (#27620)"
            },
            {
                "date": "2023-06-27T12:36:38Z",
                "message": "trie, core/state: revert error removal in (*state.Trie).Commit (#27544)\n\n* trie, core/state: revert error removal in (*state.Trie).Commit\r\n\r\n* Gary's nitpick :)\r\n\r\nCo-Authored-By:  rjl493456442 <garyrong0905@gmail.com>\r\n\r\n---------\r\n\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
            },
            {
                "date": "2023-06-27T08:29:19Z",
                "message": "core: log message if DeriveFields returns error (#27530)\n\nThis error will never happen, but if it ever does happen, we will at least see it."
            },
            {
                "date": "2023-06-27T08:27:40Z",
                "message": "common/lru: add test case for BasicLRU.Peek (#27559)"
            },
            {
                "date": "2023-06-27T07:25:08Z",
                "message": "core/vm: move TSTORE,TLOAD to correct opcode nums (#27613)\n\n* core/vm: move TSTORE,TLOAD to correct opcode nums\r\n\r\n* core/vm: cleanup"
            },
            {
                "date": "2023-06-27T07:19:02Z",
                "message": "ethdb/pebble: use sync mode for pebble writes (#27615)"
            },
            {
                "date": "2023-06-27T06:12:03Z",
                "message": "cmd/geth: error message should not be capitalised (#27549)\n\nerror message should not be capitalized / consistency"
            },
            {
                "date": "2023-06-27T06:11:06Z",
                "message": "eth/protocols: put protocols in order (#27543)\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
            }
        ],
        "2023-06-25": [
            {
                "date": "2023-06-25T15:33:50Z",
                "message": "common/math: fix typo in comment (#27561)"
            }
        ],
        "2023-06-23": [
            {
                "date": "2023-06-23T17:02:05Z",
                "message": "crypto/secp256k1: define NDEBUG only if not defined (#27550)"
            }
        ],
        "2023-06-22": [
            {
                "date": "2023-06-22T12:52:52Z",
                "message": "core/state, light, trie: add UpdateContractCode to the Trie interface (#27476)\n\nVerkle trees store the code inside the trie. This PR changes the interface to pass the code, as well as the dirty flag to tell the trie package if the code is dirty and needs to be updated. This is a no-op for the MPT and the odr trie."
            },
            {
                "date": "2023-06-22T08:06:14Z",
                "message": "p2p/discover: swap verification order in discv4 ping handler (#27532)\n\nIn all other UDPv4 methods, the deadline is checked first. It seems weird to me that ping is an exception. Deadline comparison is also less resource intensive.\r\n\r\nCo-authored-by: Exca-DK <Exca-DK@users.noreply.github.com>"
            }
        ],
        "2023-06-21": [
            {
                "date": "2023-06-21T16:11:11Z",
                "message": "internal/ethapi: quantity-encode storage keys in eth_getProof response (#27309)\n\nThis changes the eth_getProof method implementation to re-encode the requested\r\nstorage keys, canonicalizing them in the response. For backwards-compatibility reasons,\r\ngo-ethereum accepts non-canonical hex keys. Accepting them is fine, but we should\r\nnot mirror invalid inputs into the output.\r\n\r\nCloses #27306\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-06-21T16:08:12Z",
                "message": "ethdb/pebble: fsync for batch writes (#27522)\n\nThis is likely the culprit behind several data corruption issues, e.g. where data has been\r\nwritten to the freezer, but the deletion from pebble does not go through due to process\r\ncrash."
            }
        ],
        "2023-06-20": [
            {
                "date": "2023-06-20T19:31:45Z",
                "message": "cmd, core/state, eth, tests, trie: improve state reader (#27428)\n\nThe state availability is checked during the creation of a state reader.\r\n\r\n-    In hash-based database, if the specified root node does not exist on disk disk, then\r\n    the state reader won't be created and an error will be returned.\r\n\r\n-    In path-based database, if the specified state layer is not available, then the\r\n    state reader won't be created and an error will be returned.\r\n\r\nThis change also contains a stricter semantics regarding the `Commit` operation: once it has been performed, the trie is no longer usable, and certain operations will return an error."
            },
            {
                "date": "2023-06-20T12:40:18Z",
                "message": "internal/ethapi: use same state for each invocation within EstimateGas (#27505)\n\nEstimateGas repeatedly executes a transaction, performing a binary search with multiple gas prices to determine proper pricing. Each call retrieves a new copy of the state (https://github.com/ethereum/go-ethereum/blob/master/internal/ethapi/api.go#L1017) . Because the pending/latest state can change during the execution of EstimateGas, this can potentially cause strange behavior (as noted here: https://github.com/ethereum/go-ethereum/pull/27502#issue-1761957009).\r\n\r\nThis PR modifies EstimateGas to retrieve the state once and use a copy of it for every call invocation it does."
            },
            {
                "date": "2023-06-20T11:51:59Z",
                "message": "core/txpool: remove use of errors.Join function (#27523)\n\nhis function was added in Go 1.20, but our compatibility target\r\nis Go 1.19."
            },
            {
                "date": "2023-06-20T09:58:47Z",
                "message": "core: use slices package for sorting (#27489)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-06-20T08:42:13Z",
                "message": "internal/build: ignore some files in FindMainPackages (#27521)"
            }
        ],
        "2023-06-19": [
            {
                "date": "2023-06-19T21:38:57Z",
                "message": "eth: use slices package for sorting (#27490)\n\nAlso adds Hash.Less method for sorting purposes.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-06-19T21:30:39Z",
                "message": "core/txpool/legacypool: narrow down the scope of the variable (#27471)\n\nVariables discarded, included can be defined closer to their usage.\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-06-19T14:28:40Z",
                "message": "trie: remove parameter 'fromLevel' in Prove (#27512)\n\nThis removes the feature where top nodes of the proof can be elided.\r\nIt was intended to be used by the LES server, to save bandwidth \r\nwhen the client had already fetched parts of the state and only needed\r\nsome extra nodes to complete the proof. Alas, it never got implemented\r\nin the client."
            },
            {
                "date": "2023-06-19T12:08:13Z",
                "message": "go.mod: update kzg libraries to use big-endian (#27510)\n\n* go.mod: update kzg libraries to use big-endian\r\n\r\n* go.sum: ran go mod tidy\r\n\r\n* core/testdata/precompiles: fix blob verification test\r\n\r\n* core/testdata/precompiles: fix blob verification test"
            },
            {
                "date": "2023-06-19T09:41:31Z",
                "message": "tests, trie: use slices package for sorting (#27496)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-06-19T09:33:48Z",
                "message": "internal/ethapi, les: use slices package for sorting (#27492)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-06-19T07:04:16Z",
                "message": "consensus/clique: use slices package for sorting (#27488)\n\nAlso adds Address.Less for sorting use in other packages.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-06-19T06:53:15Z",
                "message": "metrics: use slices package for sorting (#27493)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-06-19T06:47:00Z",
                "message": "consensus/clique: fix typo in comment (#27503)"
            },
            {
                "date": "2023-06-19T06:44:54Z",
                "message": "cmd/evm: fix typos in documentation (#27501)"
            },
            {
                "date": "2023-06-19T06:42:49Z",
                "message": "cmd/devp2p: use slices package for sorting (#27487)"
            },
            {
                "date": "2023-06-19T06:34:47Z",
                "message": "accounts/keystore: use slices package for sorting (#27485)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-06-19T06:06:58Z",
                "message": "rpc: avoid use of cgo by hard-coding maxPathSize (#27447)\n\nPackage rpc uses cgo to find the maximum UNIX domain socket path \r\nlength. If exceeded, a warning is printed. This is the only use of cgo in this\r\npackage. It seems excessive to depend on cgo just for this warning, so\r\nwe now hard-code the usual limit for Linux instead.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-06-19T05:58:04Z",
                "message": "core/txpool/legacypool: handle missing head in reset (#27479)\n\nFixes #27301, a crash that could occur during txpool reorg handling."
            },
            {
                "date": "2023-06-19T05:52:40Z",
                "message": "core/txpool/legacypool: remove redundant check for floatingRatio == 0 (#27477)\n\nfloatingRatio is a constant and always non-zero. So there is no need to\r\ncheck for == 0."
            },
            {
                "date": "2023-06-19T05:50:56Z",
                "message": "internal/jsre/deps: fix typos in web3.js (#27500)"
            },
            {
                "date": "2023-06-19T05:48:47Z",
                "message": "ethdb/dbtest: use slices package for sorting (#27491)"
            },
            {
                "date": "2023-06-19T05:48:12Z",
                "message": "p2p: use slices package for sorting (#27494)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2023-06-18": [
            {
                "date": "2023-06-18T20:43:53Z",
                "message": "core/txpool/legacypool: reheap the tx list if london fork not enabled (#27481)\n\nThis change ensures Reheap will be called even before the London fork activates.\r\nSince Reheap would otherwise only be called through `SetBaseFee` after London,\r\nthe list would just keep growing if the fork was not enabled or not reached yet."
            },
            {
                "date": "2023-06-18T13:09:00Z",
                "message": "build: use slices package for sorting (#27486)"
            }
        ],
        "2023-06-16": [
            {
                "date": "2023-06-16T12:29:40Z",
                "message": "all: move main transaction pool into a subpool (#27463)\n\n* all: move main transaction pool into a subpool\r\n\r\n* go.mod: remove superfluous updates\r\n\r\n* core/txpool: review fixes, handle txs rejected by all subpools\r\n\r\n* core/txpool: typos"
            },
            {
                "date": "2023-06-16T12:21:43Z",
                "message": "rlp: fix typos (#27484)\n\nfix typos\r\n\r\nCo-authored-by: john <yejiarui@123.com>"
            }
        ],
        "2023-06-15": [
            {
                "date": "2023-06-15T12:55:00Z",
                "message": "cmd/evm: fix typos in docs (#27478)\n\nfix some typos\r\n\r\nSigned-off-by: cui fliter <imcusg@gmail.com>"
            },
            {
                "date": "2023-06-15T12:18:54Z",
                "message": "core/types: add support for BlobTxType receipts (#27470)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-06-15T11:52:06Z",
                "message": "core: remove unnecessary log copy (#27475)\n\nThe logs in this function are pulled straight from disk in rawdb.ReadRawReceipts and \r\nalso modified in receipts.DeriveFields, so removing the copy should be fine."
            }
        ],
        "2023-06-14": [
            {
                "date": "2023-06-14T17:07:24Z",
                "message": "eth/tracers: refactor exporting js buffer (#27472)\n\nWe had to do this workaround because it wasn't possible to export typed arrays from\r\nJS to []byte. This was added in dop251/goja@2352993, so we can use the better way now."
            },
            {
                "date": "2023-06-14T12:24:47Z",
                "message": "node: remove unused error return from Attach (#27450)\n\nnode: Delete the unused error from return parameters of Node.Attach() func"
            },
            {
                "date": "2023-06-14T12:04:41Z",
                "message": "rpc: add method to test for subscription support (#25942)\n\nThis adds two ways to check for subscription support. First, one can now check\r\nwhether the transport method (HTTP/WS/etc.) is capable of subscriptions using\r\nthe new Client.SupportsSubscriptions method.\r\n\r\nSecond, the error returned by Subscribe can now reliably be tested using this\r\npattern:\r\n    \r\n    sub, err := client.Subscribe(...)\r\n    if errors.Is(err, rpc.ErrNotificationsUnsupported) {\r\n        // no subscription support\r\n    }\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2023-06-13": [
            {
                "date": "2023-06-13T12:46:45Z",
                "message": "core/types: add \"chainID\" field to legacy tx JSON encoding (#27452)\n\n\r\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>"
            },
            {
                "date": "2023-06-13T11:38:58Z",
                "message": "rpc: add limit for batch request items and response size (#26681)\n\nThis PR adds server-side limits for JSON-RPC batch requests. Before this change, batches\r\nwere limited only by processing time. The server would pick calls from the batch and\r\nanswer them until the response timeout occurred, then stop processing the remaining batch\r\nitems.\r\n\r\nHere, we are adding two additional limits which can be configured:\r\n\r\n- the 'item limit': batches can have at most N items\r\n- the 'response size limit': batches can contain at most X response bytes\r\n\r\nThese limits are optional in package rpc. In Geth, we set a default limit of 1000 items\r\nand 25MB response size.\r\n\r\nWhen a batch goes over the limit, an error response is returned to the client. However,\r\ndoing this correctly isn't always possible. In JSON-RPC, only method calls with a valid\r\n`id` can be responded to. Since batches may also contain non-call messages or\r\nnotifications, the best effort thing we can do to report an error with the batch itself is\r\nreporting the limit violation as an error for the first method call in the batch. If a batch is\r\ntoo large, but contains only notifications and responses, the error will be reported with\r\na null `id`.\r\n\r\nThe RPC client was also changed so it can deal with errors resulting from too large\r\nbatches. An older client connected to the server code in this PR could get stuck\r\nuntil the request timeout occurred when the batch is too large. **Upgrading to a version\r\nof the RPC client containing this change is strongly recommended to avoid timeout issues.**\r\n\r\nFor some weird reason, when writing the original client implementation, @fjl worked off of\r\nthe assumption that responses could be distributed across batches arbitrarily. So for a\r\nbatch request containing requests `[A B C]`, the server could respond with `[A B C]` but\r\nalso with `[A B] [C]` or even `[A] [B] [C]` and it wouldn't make a difference to the\r\nclient.\r\n\r\nSo in the implementation of BatchCallContext, the client waited for all requests in the\r\nbatch individually. If the server didn't respond to some of the requests in the batch, the\r\nclient would eventually just time out (if a context was used).\r\n\r\nWith the addition of batch limits into the server, we anticipate that people will hit this\r\nkind of error way more often. To handle this properly, the client now waits for a single\r\nresponse batch and expects it to contain all responses to the requests.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-06-13T07:02:11Z",
                "message": "internal/ethapi: remove error return on RPCMarshalBlock (#27449)\n\nrm error when marshal block to rpc type allen"
            },
            {
                "date": "2023-06-13T06:55:05Z",
                "message": "miner: log number of withdrawals in block upon payload update (#27457)"
            }
        ],
        "2023-06-08": [
            {
                "date": "2023-06-08T09:40:22Z",
                "message": "eth/filters: reuse handleLogs method for removed logs (#27438)"
            }
        ],
        "2023-06-07": [
            {
                "date": "2023-06-07T13:10:42Z",
                "message": "accounts/keystore: handle error for invalid key in DecryptKey (#27432)\n\n\r\nCo-authored-by: KAI <kaili@coinsummer.io>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-06-07T10:40:06Z",
                "message": "rlp: use identical receiver names for encBuffer methods (#27430)"
            }
        ],
        "2023-06-06": [
            {
                "date": "2023-06-06T16:33:25Z",
                "message": "graphql: implement withdrawals (EIP-4895) (#27072)\n\nimplements withdrawals in graphql as per https://github.com/ethereum/execution-apis/pull/400"
            },
            {
                "date": "2023-06-06T12:41:44Z",
                "message": "eth,core: add api debug_getTrieFlushInterval (#27303)\n\n* core,eth: add api debug_getTrieFlushInterval\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* eth/api_debug: comment of SetTrieFlushInterval\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* Apply suggestions from code review\r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-06-06T09:53:29Z",
                "message": "core/txpool: make transaction validation reusable across packages (pools) (#27429)\n\n* core/txpool: abstraction prep work for secondary pools (blob pool)\r\n\r\n* core/txpool: leave subpool concepts to a followup pr\r\n\r\n* les: fix tests using hard coded errors\r\n\r\n* core/txpool: use bitmaps instead of maps for tx type filtering"
            },
            {
                "date": "2023-06-06T08:34:22Z",
                "message": "les: remove unused var `AdvertiseProtocolVersions` (#27405)"
            },
            {
                "date": "2023-06-06T08:29:41Z",
                "message": "core/txpool: fix minor flaw in isGapped check (#27404)\n\nThis fix a minor implementation issue with the newly introduced isGapped function and it is described in ticket: https://github.com/ethereum/go-ethereum/issues/27401"
            },
            {
                "date": "2023-06-06T08:27:40Z",
                "message": "cmd/evm: make evm blocktest output logs if so instructed (#27396)\n\n* cmd/evm: make evm blocktest output logs if so instructed\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\n\r\n---------\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
            },
            {
                "date": "2023-06-06T08:17:39Z",
                "message": "core/state/snapshot, core/types, eth: move account definition to type (#27323)\n\n* core/state/snapshot, core/types, eth: move account definition to type\r\n\r\n* core, eth: revert snapshot Account API change"
            }
        ],
        "2023-06-05": [
            {
                "date": "2023-06-05T13:43:25Z",
                "message": "core: 4844 opcode and precompile (#27356)\n\n* core: crypto: implement BLOBHASH and pointEval precompile\r\n\r\n* core: crypto: fixed nitpicks, moved precompile return value\r\n\r\n* core/vm: fix review comments"
            },
            {
                "date": "2023-06-05T13:25:57Z",
                "message": "core/state: clear out cached state data when reset occurs (#27376)\n\n* core/state: remove cached snap data if reset occurs\r\n\r\n* core/state: address comment from peter\r\n\r\n* core/state: skip revert in case data is nil"
            },
            {
                "date": "2023-06-05T09:07:01Z",
                "message": "graphql: simplify tx resolve (#27285)"
            },
            {
                "date": "2023-06-05T06:59:38Z",
                "message": "eth/downloader: drop beacon head updates if the syncer is restarting (#27397)\n\n* eth/downloader: drop beacon head updates if the syncer is restarting\r\n\r\n* eth/donwloader: v2 of the goroutine spike preventer"
            }
        ],
        "2023-06-02": [
            {
                "date": "2023-06-02T11:03:21Z",
                "message": "all: remove the Rinkeby testnet (#27406)"
            }
        ],
        "2023-06-01": [
            {
                "date": "2023-06-01T09:09:32Z",
                "message": "core/state: mark account as dirty when resetObject occurs (#27339)\n\nThis changes the journal logic to mark the state object dirty immediately when it\r\nis reset. \r\n\r\nWe're\u00a0mostly adding this change to appease the fuzzer. Marking it dirty immediately\r\nmakes no difference in practice because accounts will always be modified by EVM\r\nright after creation."
            },
            {
                "date": "2023-06-01T08:33:10Z",
                "message": "internal/web3ext: fix parameter count of miner_start (#27400)"
            },
            {
                "date": "2023-06-01T08:29:41Z",
                "message": "core/state: move slot RLP encoding into the MPT implementation (#27000)\n\nContinuing with a series of PRs to make the Trie interface more generic, this PR moves\r\nthe RLP encoding of storage slots inside the StateTrie and light.Trie implementations,\r\nas other types of tries don't use RLP."
            }
        ],
        "2023-05-31": [
            {
                "date": "2023-05-31T11:37:10Z",
                "message": "p2p/discover: add Table configuration and Nodes method (#27387)\n\n* p2p/discover: remove ReadRandomNodes\r\n\r\nEven though it's public, this method is not callable by code outside of\r\npackage p2p/discover because one can't get a valid instance of Table.\r\n\r\n* p2p/discover: add Table.Nodes\r\n\r\n* p2p/discover: make Table settings configurable\r\n\r\nIn unit tests and externally developed cmd/devp2p test runs, it can be\r\nuseful to tune the timer intervals used by Table."
            },
            {
                "date": "2023-05-31T10:08:15Z",
                "message": "core, eth/downloader: validate blobtx.To at serialization time (#27393)"
            },
            {
                "date": "2023-05-31T08:12:26Z",
                "message": "core, eth/downloader, params: validate blob tx bodies (#27392)"
            },
            {
                "date": "2023-05-31T07:21:13Z",
                "message": "consensus, core, eth/downloader, params: 4844 chain validation (#27382)"
            },
            {
                "date": "2023-05-31T07:10:16Z",
                "message": "go.mod: golang.org/x upgrade (#27299)\n\ngo.mod:golang upgrade"
            },
            {
                "date": "2023-05-31T07:09:49Z",
                "message": "miner: suspend miner if node is syncing (#27218)\n\nDrop the notions of uncles, and disables activities while syncing\r\n\r\n-  Disable activities (e.g. generate pending state) while node is syncing,\r\n-  Disable empty block submission (but empty block is still kept for payload building),\r\n-  Drop uncle notion since (ethash is already deprecated)"
            },
            {
                "date": "2023-05-31T06:52:27Z",
                "message": "internal/ethapi: prevent unnecessary resource usage in eth_getProof implementation (#27310)\n\nDeserialize hex keys early to shortcut on invalid input, and re-use the account storageTrie for each proof for each proof in the account, preventing repeated deep-copying of the trie.\r\n\r\nCloses #27308\r\n\r\n --------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
            }
        ],
        "2023-05-30": [
            {
                "date": "2023-05-30T14:34:32Z",
                "message": "event: move type fixation logic into Feed.init (#27249)\n\nThis is a minor optimization/refactoring of Feed.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-05-30T12:55:03Z",
                "message": "les, eth: fix typo in comment (#27369)"
            },
            {
                "date": "2023-05-30T12:16:28Z",
                "message": "eth: make debug_StorageRangeAt take a block hash or number (#27328)\n\neth: make StorageRangeAt take a block hash or number\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            },
            {
                "date": "2023-05-30T08:49:09Z",
                "message": "core/types: remove superfluous todo-comment (#27383)"
            }
        ],
        "2023-05-29": [
            {
                "date": "2023-05-29T12:52:08Z",
                "message": "internal/ethapi: add more testcases for block/header rpc (#27325)\n\nSigned-off-by: jsvisa <delweng@gmail.com>\r\nCo-authored-by: Sina Mahmoodi <1591639+s1na@users.noreply.github.com>"
            },
            {
                "date": "2023-05-29T09:09:34Z",
                "message": "eth: split api.go into namespace based files (#27263)\n\nThis change splits up the multiple API functions / namespaces currently defined in the eth package into different per-namespace files."
            }
        ],
        "2023-05-25": [
            {
                "date": "2023-05-25T13:19:58Z",
                "message": "internal/ethapi: don't return header size from rpc (#27347)\n\nRPC methods `eth_getHeaderBy*` returned a size value which was meant for internal\r\nprocesses. Please instead use `size` field returned by `eth_getBlockBy*` if you're interested\r\nin the RLP encoded storage size of the block.\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
            },
            {
                "date": "2023-05-25T12:40:28Z",
                "message": "eth/filters: retrieve logs in async (#27135)\n\nThis change implements async log retrievals via feeding logs in channels, instead of returning slices. This is a first step to implement #15063.  \r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: Sina Mahmoodi <1591639+s1na@users.noreply.github.com>"
            },
            {
                "date": "2023-05-25T12:25:58Z",
                "message": "accounts: replace noarg fmt.Errorf with errors.New (#27331)\n\n* accounts: replace noarg fmt.Errorf with errors.New\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* accounts: go autoimport\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
            },
            {
                "date": "2023-05-25T12:24:09Z",
                "message": "core,console: replace noarg fmt.Errorf with errors.New (#27332)\n\n* core: replace noarg fmt.Errorf with errors.New\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* console: replace noarg fmt.Errorf with errors.New\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* core: go autoimport\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* core: dry\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
            },
            {
                "date": "2023-05-25T10:02:11Z",
                "message": "params: begin v1.12.1 release cycle"
            },
            {
                "date": "2023-05-25T10:01:00Z",
                "message": "params: go-ethereum v1.12.0 stable"
            },
            {
                "date": "2023-05-25T07:31:05Z",
                "message": "ethdb/pebble: fix NewBatchWithSize to set db (#27350)"
            },
            {
                "date": "2023-05-25T06:57:34Z",
                "message": "eth,consensus: replace noarg fmt.Errorf with errors.New (#27330)\n\n* eth: replace noarg fmt.Errorf with errors.New\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* consensus: replace noarg fmt.Errorf with errors.New\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
            },
            {
                "date": "2023-05-25T06:54:28Z",
                "message": "internal,tests: replace noarg fmt.Errorf with errors.New (#27335)\n\n* internal: replace noarg fmt.Errorf with errors.New\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* tests: replace noarg fmt.Errorf with errors.New\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* tests: go autoimport\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n* tests: go autoimport\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
            },
            {
                "date": "2023-05-25T06:51:13Z",
                "message": "les, signer, light: replace noarg fmt.Errorf with errors.New (#27336)\n\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
            }
        ],
        "2023-05-24": [
            {
                "date": "2023-05-24T12:45:51Z",
                "message": "crypto: replace noarg fmt.Errorf with errors.New (#27333)\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
            },
            {
                "date": "2023-05-24T10:39:49Z",
                "message": "ethclient,event: replace noarg fmt.Errorf with errors.New (#27334)\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
            },
            {
                "date": "2023-05-24T10:21:29Z",
                "message": "cmd: use errrors.New instead of empty fmt.Errorf (#27329)\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
            }
        ],
        "2023-05-23": [
            {
                "date": "2023-05-23T11:18:38Z",
                "message": "rpc: change BlockNumber constant values to match ethclient (#27219)\n\nethclient accepts certain negative block number values as specifiers for the \"pending\",\r\n\"safe\" and \"finalized\" block. In case of \"pending\", the value accepted by ethclient (-1)\r\ndid not match rpc.PendingBlockNumber (-2).\r\n\r\nThis wasn't really a problem, but other values accepted by ethclient did match the\r\ndefinitions in package rpc, and it's weird to have this one special case where they don't.\r\n\r\nTo fix it, we decided to change the values of the constants rather than changing ethclient.\r\nThe constant values are not otherwise significant. This is a breaking API change, but we\r\nbelieve not a dangerous one.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-05-23T10:23:17Z",
                "message": "cmd/evm: make batched state-test execution possible (#27318)\n\nimplements the ability to run several state-tests in one instance. By not providing a statetest path to the `evm statetest` command, the path(s) will instead be read from `stdin`."
            },
            {
                "date": "2023-05-23T10:10:26Z",
                "message": "core/state: do not ignore null addr while iterative dump (#27320)\n\nfixes bug which caused the zero-address to be ignored during an iterative state-dump.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-05-23T09:02:50Z",
                "message": "eth/tracers: fix flatCallTracer crasher (#27304)\n\nFlatCallTracer had a crasher when it was passed `onlyTopCall: true` as config.\r\nThis PR ignores config fields inherited from the normal call tracer."
            }
        ],
        "2023-05-22": [
            {
                "date": "2023-05-22T16:45:55Z",
                "message": "accounts/abi: add ErrorById (#27277)\n\nAdds `ErrorById` lookup"
            },
            {
                "date": "2023-05-22T12:15:05Z",
                "message": "graphql: upgrade UI to v2 (#27294)\n\nUpgrades  graphiql to v2.4.4. The interface has become much nicer, and there are extra features like tabs, history, dark mode etc.\r\n\r\nThis change also now uses golang embed to bundle the resources.\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-05-22T12:13:03Z",
                "message": "rpc, internal/cmdtest: increase timeout in tests (#27083)\n\nThis change gives the cmd-tests have a bit more time to finish before getting forcibly torn down."
            }
        ],
        "2023-05-19": [
            {
                "date": "2023-05-19T14:05:50Z",
                "message": "beacon/types: auto-generate SyncCommittee marshaling methods (#27296)"
            },
            {
                "date": "2023-05-19T12:38:21Z",
                "message": "cmd/utils: do not check free disk space in dev mode (#27281)"
            },
            {
                "date": "2023-05-19T12:36:21Z",
                "message": "ethdb/pebble: prevent shutdown-panic (#27238)\n\nOne difference between pebble and leveldb is that the latter returns error when performing Get on a closed database, the former does a panic. This may be triggered during shutdown (see #27237)\r\n\r\nThis PR changes the pebble driver so we check that the db is not closed already, for several operations. It also adds tests to the db test-suite, so the previously implicit assumption of \"not panic:ing at ops on closed database\" is covered by tests."
            },
            {
                "date": "2023-05-19T08:27:19Z",
                "message": "all: tie timestamp based forks to the passage of London (#27279)"
            }
        ],
        "2023-05-17": [
            {
                "date": "2023-05-17T21:35:30Z",
                "message": "go.mod: use`gopkg.in/yaml.v3` instead of `github.com/go-yaml/yaml` (#27295)"
            },
            {
                "date": "2023-05-17T14:39:33Z",
                "message": "beacon/types: add beacon chain data types (#27292)\n\n* beacon/types: add beacon chain data types\r\n\r\n* beacon/merkle: added comments\r\n\r\n* go.mod: cleanups\r\n\r\n---------\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2023-05-17T12:03:38Z",
                "message": "go.mod: upgrade gencodec (#27288)"
            },
            {
                "date": "2023-05-17T10:27:51Z",
                "message": "rpc: more accurate checking of handler method signatures (#27287)\n\nThis changes the RPC server to ignore methods using *context.Context as parameter\r\nand *error as return value type. Methods with such types would crash the server when\r\ncalled."
            },
            {
                "date": "2023-05-17T08:29:56Z",
                "message": "internal/ethapi: make NewAccount return EIP-55 format (#26973)\n\nThis change implements returning the address as EIP-55 encoded when creating a new account."
            },
            {
                "date": "2023-05-17T08:23:06Z",
                "message": "core/state/pruner: remove unused error-return (#27273)"
            }
        ],
        "2023-05-16": [
            {
                "date": "2023-05-16T13:18:39Z",
                "message": "core/state/snapshot: check difflayer staleness early (#27255)\n\nThis PR adds a staleness-check to AccountRLP, before checking the bloom-filter and potentially going directly into the disklayer.\r\n\r\n---------\r\n\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
            },
            {
                "date": "2023-05-16T11:27:54Z",
                "message": "tests/fuzzers/bn256: add PairingCheck fuzzer (#27252)\n\n* tests/fuzzers/bn256: scale gnark result by constant\r\n\r\n* tests/fuzzers/bn256: scale gnark result by constant"
            },
            {
                "date": "2023-05-16T08:40:47Z",
                "message": "internal/ethapi: minor refactor in block serialization (#27268)"
            },
            {
                "date": "2023-05-16T08:14:04Z",
                "message": "core/asm: remove unused return value (#27272)"
            }
        ],
        "2023-05-15": [
            {
                "date": "2023-05-15T05:48:06Z",
                "message": "rpc: websocket should respect the \"HTTP_PROXY\" by default (#27264)\n\nrpc: the default dialer for websocket should respect the proxy environment variables like \"HTTP_PROXY\""
            }
        ],
        "2023-05-12": [
            {
                "date": "2023-05-12T17:16:14Z",
                "message": "crypto/kzg4844: upgrade c-kzg-4844 to v0.2.0 (#27257)\n\nUpgrade c-kzg-4844 to v0.2.0"
            },
            {
                "date": "2023-05-12T17:14:29Z",
                "message": "core/types: un-ssz blob txs, add json marshalling and tweaks (#27256)"
            }
        ],
        "2023-05-11": [
            {
                "date": "2023-05-11T12:23:47Z",
                "message": "internal/ethapi: remove unused err-return (#27240)"
            },
            {
                "date": "2023-05-11T12:23:05Z",
                "message": "internal/ethapi: make EstimateGas use `latest` block by default (#24363)\n\n* EstimateGas should use LatestBlockNumber by default\r\n\r\n* graphql: default to use latest for gas estimation\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-05-11T09:39:13Z",
                "message": "metrics: use sync.map in registry (#27159)"
            },
            {
                "date": "2023-05-11T07:19:42Z",
                "message": "all: new empty trie with types.EmptyRootHash instead of null (#27230)"
            },
            {
                "date": "2023-05-11T07:15:44Z",
                "message": "core/state: unexport NodeIterator (#27239)"
            },
            {
                "date": "2023-05-11T07:13:25Z",
                "message": "ethdb/memorydb: init map with known size (#27241)\n\nethdb:init map with known size"
            },
            {
                "date": "2023-05-11T07:09:16Z",
                "message": "ethclient: acquire the rpc.Client (#27246)\n\nSigned-off-by: jsvisa <delweng@gmail.com>"
            }
        ],
        "2023-05-10": [
            {
                "date": "2023-05-10T11:54:14Z",
                "message": "crypto/kzg4844: pull in the C and Go libs for KZG cryptography (#27155)\n\n* cryto/kzg4844: pull in the C and Go libs for KZG cryptography\r\n\r\n* go.mod: pull in the KZG libraries\r\n\r\n* crypto/kzg4844: add basic becnhmarks for ballpark numbers\r\n\r\n* cmd, crypto: integrate both CKZG and GoKZG all the time, add flag\r\n\r\n* cmd/utils, crypto/kzg4844: run library init on startup\r\n\r\n* crypto/kzg4844: make linter happy\r\n\r\n* crypto/kzg4844: push missing file\r\n\r\n* crypto/kzg4844: fully disable CKZG but leave in the sources\r\n\r\n* build, crypto/kzg4844, internal: link CKZG by default and with portable mode\r\n\r\n* crypto/kzg4844: drop verifying the trusted setup in gokzg\r\n\r\n* internal/build: yolo until it works?\r\n\r\n* cmd/utils: make flag description friendlier\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\n* crypto/ckzg: no need for double availability check\r\n\r\n* build: tiny flag cleanup nitpick\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-05-10T08:52:26Z",
                "message": "p2p: initialize maps with known size (#27229)"
            },
            {
                "date": "2023-05-10T08:42:55Z",
                "message": "node: fix typos in comments (#27236)"
            }
        ],
        "2023-05-09": [
            {
                "date": "2023-05-09T19:29:32Z",
                "message": "event: initialize maps with known size (#27233)\n\nevent: initialize maps with known size"
            },
            {
                "date": "2023-05-09T07:57:42Z",
                "message": "cmd/utils: report the blocknumber when block import fails (#27213)\n\nWhen block import fails, the error displays the number of the first block past the import batch, not the number of the failing block. This change fixes this problem by identifying which blocks fails and reporting its number."
            },
            {
                "date": "2023-05-09T07:24:43Z",
                "message": "miner: initialize maps with capacity (#27228)\n\n* miner : initialize maps with known size\r\n\r\n* miner:some reverts"
            },
            {
                "date": "2023-05-09T07:11:04Z",
                "message": "all: port boring changes from pbss (#27176)\n\n* all: port boring changes from pbss\r\n\r\n* core, trie: address comments from martin\r\n\r\n* trie: minor fixes\r\n\r\n* core/rawdb: update comment\r\n\r\n* core, eth, tests, trie: address comments\r\n\r\n* tests, trie: add extra check when update trie database\r\n\r\n* trie/triedb/hashdb: degrade the error to warning"
            }
        ],
        "2023-05-08": [
            {
                "date": "2023-05-08T09:38:50Z",
                "message": "log: report error when ctx key is non-string (#27226)\n\n* log/format.go : invalid string cast fix\r\n\r\n* log: some polish\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-05-08T07:01:14Z",
                "message": "cmd/geth: rename variable 'extapi' (#27223)\n\nrename parameter\r\n\r\nIn this case, the naming of \"extapi\" might create some confusion. Although it represents an External Signer Backend, its name could be mistaken for an API. In reality, it is a backend instance used for communicating with external signers. A better naming choice could be \"extBackend\" or \"externalBackend\" to more accurately describe that it is a backend instance rather than an API."
            },
            {
                "date": "2023-05-08T06:59:14Z",
                "message": "core/state: initialize maps with known size (#27222)\n\n* core/state : fix map size avoid resizing\r\n\r\n* core/state : fixed size"
            }
        ],
        "2023-05-05": [
            {
                "date": "2023-05-05T12:59:13Z",
                "message": "eth/tracers: add `txHash` field on txTraceResult (#27183)\n\nThis PR modifies the interface for the results of `debug_traceBlock` and `debug_traceCall` by adding the `txHash`, allowing users to identify which transaction's trace result corresponds to. \r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-05-05T09:33:01Z",
                "message": "core/txpool : fix map size avoid resizing (#27221)"
            },
            {
                "date": "2023-05-05T05:55:32Z",
                "message": "eth/downloader: fix error aggregator (#27217)"
            }
        ],
        "2023-05-04": [
            {
                "date": "2023-05-04T08:54:45Z",
                "message": "rpc: use atomic types (#27214)\n\nrpc: use atomic type"
            }
        ],
        "2023-05-03": [
            {
                "date": "2023-05-03T09:58:39Z",
                "message": "all: remove ethash pow, only retain shims needed for consensus and tests (#27178)\n\n* all: remove ethash pow, only retain shims needed for consensus and tests\r\n\r\n* all: thank you linter\r\n\r\n* all: disallow launching Geth in legacy PoW mode\r\n\r\n* cmd/env/internal/t8ntool: remove dangling ethash flag"
            }
        ],
        "2023-05-02": [
            {
                "date": "2023-05-02T12:27:37Z",
                "message": "accounts/abi: resolve name conflict for methods starting with a number (#26999)\n\nThis adds logic to prepend 'M' or 'E' to Solidity identifiers when they would\r\notherwise violate Go identifier naming rules.\r\n\r\nCloses #26972\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            },
            {
                "date": "2023-05-02T08:57:07Z",
                "message": "graphql, internal: fix typos in comments (#27184)\n\n* \u270f\ufe0f Fix typos\r\n\r\n* \u23ea\ufe0f Revert changes\r\n\r\n* Update internal/web3ext/web3ext.go\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-05-02T08:56:08Z",
                "message": "core: remove unused ContractCode method from BlockChain (#27186)"
            },
            {
                "date": "2023-05-02T08:36:11Z",
                "message": "p2p/discover: fix lint nit (#27206)"
            },
            {
                "date": "2023-05-02T08:32:27Z",
                "message": "core/types:  go generate (#27196)\n\nFixes a discrepancy between source and generated files, which was introduced when ExcessDataGas was added in https://github.com/ethereum/go-ethereum/pull/27046."
            },
            {
                "date": "2023-05-02T08:28:43Z",
                "message": "internal/ethapi: add block overrides to eth_call (#26414)\n\nAdds an optional config parameter to eth_call which allows users to override block context fields (same functionality that was added to traceCall in #24871)\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-05-02T08:24:35Z",
                "message": "eth/gasprice: fix typo (#27202)"
            }
        ],
        "2023-04-28": [
            {
                "date": "2023-04-28T18:34:08Z",
                "message": "p2p/discover : typo (#27193)"
            },
            {
                "date": "2023-04-28T18:33:14Z",
                "message": "eth/ethconfig: go fmt (#27194)"
            },
            {
                "date": "2023-04-28T09:03:43Z",
                "message": "p2p/discover: concurrent TALKREQ handling (#27112)\n\nThis changes TALKREQ message processing to run the handler on separate goroutine,\r\ninstead of running on the main discv5 dispatcher goroutine. It's better this way because\r\nit allows the handler to perform blocking actions.\r\n\r\nI'm also adding a new method TalkRequestToID here. The method allows implementing\r\na request flow where one node A sends TALKREQ to another node B, and node B later\r\nsends a TALKREQ back. With TalkRequestToID, node B does not need the ENR of A to\r\nsend its request."
            }
        ],
        "2023-04-27": [
            {
                "date": "2023-04-27T10:57:29Z",
                "message": "cmd/geth: make account commands not require datadir lock (#27084)\n\nMakes the `geth account ... ` commands usable even if a geth-process is already executing, since the account commands do not read the chaindata, it was not required for those to use the same locking mechanism. \r\n\r\n---\r\nSigned-off-by: jsvisa <delweng@gmail.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            }
        ],
        "2023-04-26": [
            {
                "date": "2023-04-26T15:17:37Z",
                "message": "cmd, eth, les: replace Shanghai override flag with Cancun (#27171)"
            },
            {
                "date": "2023-04-26T08:21:47Z",
                "message": "light: use atomic type (#27169)\n\n* light: use atomic type\r\n\r\n* light: use a suitable name for the stopped switch in LightChain"
            },
            {
                "date": "2023-04-26T08:19:56Z",
                "message": "les: use atomic type (#27168)"
            },
            {
                "date": "2023-04-26T06:37:11Z",
                "message": "core/types: fix discrepancy in receipt.EffectiveGasPrice json encoding tags (#27114)\n\nRegenerate receipt json code to remove omit empty. Previously, there was a discrepancy between the generated code and the source. \r\n\r\n---------\r\n\r\nCo-authored-by: lightclient@protonmail.com <lightclient@protonmail.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-04-26T06:01:54Z",
                "message": "trie: add node type common package (#27160)\n\n* trie: add node type common package\r\n\r\nIn trie/types package, a few node wrappers are defined, which will be used\r\nin both trie package, trie/snap package, etc. Therefore, a standalone common\r\npackage is created to put these stuffs.\r\n\r\n* trie: rename trie/types to trie/trienode"
            }
        ],
        "2023-04-25": [
            {
                "date": "2023-04-25T13:15:43Z",
                "message": "eth: fix crash on querying finalized block (#27162)\n\neth: fix crash on querying nil finalized block"
            },
            {
                "date": "2023-04-25T12:02:54Z",
                "message": "graphql: encode Long values as hex (#26894)\n\nThis is a breaking GraphQL API change. All numeric values are now encoded as\r\nhex strings. The motivation for this change is matching JSON-RPC outputs more\r\nclosely.\r\n\r\nNumbers in query parameters are accepted as both decimal integers and hex strings."
            },
            {
                "date": "2023-04-25T11:27:28Z",
                "message": "cmd/geth: remove DAO fork test (#27161)\n\n* cmd/geth: fix test to not use explicit db\r\n\r\n* cmd/geth: remove dao-test"
            },
            {
                "date": "2023-04-25T10:12:34Z",
                "message": "p2p/discover: add traffic metrics (#27008)\n\n\r\nCo-authored-by: Exca-DK <dev@DESKTOP-RI45P4J.localdomain>\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
            },
            {
                "date": "2023-04-25T10:06:50Z",
                "message": "eth: use new atomic types (#27137)"
            }
        ],
        "2023-04-24": [
            {
                "date": "2023-04-24T07:38:52Z",
                "message": "core, trie: rework trie database (#26813)\n\n* core, trie: rework trie database\r\n\r\n* trie: fix comment"
            },
            {
                "date": "2023-04-24T06:37:10Z",
                "message": "all: remove notion of trusted checkpoints in the post-merge world (#27147)\n\n* all: remove notion of trusted checkpoints in the post-merge world\r\n\r\n* light: remove unused function\r\n\r\n* eth/ethconfig, les: remove unused config option\r\n\r\n* les: make linter happy\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2023-04-21": [
            {
                "date": "2023-04-21T16:24:18Z",
                "message": "cmd/utils, node: switch to Pebble as the default db if none exists (#27136)\n\n* cmd/utils, node: switch to Pebble as the default db if none exists\r\n\r\n* node: fall back to LevelDB on platforms not supporting Pebble\r\n\r\n* core/rawdb, node: default to Pebble at the node level\r\n\r\n* cmd/geth: fix some tests explicitly using leveldb\r\n\r\n* ethdb/pebble: allow double closes, makes tests simpler"
            },
            {
                "date": "2023-04-21T09:52:02Z",
                "message": "core/types, params: add blob transaction type, RLP encoded for now (#27049)\n\n* core/types, params: add blob transaction type, RLP encoded for now\r\n\r\n* all: integrate Cancun (and timestamp based forks) into MakeSigner\r\n\r\n* core/types: fix 2 back-and-forth type refactors\r\n\r\n* core: fix review comment\r\n\r\n* core/types: swap blob tx type id to 0x03"
            }
        ],
        "2023-04-20": [
            {
                "date": "2023-04-20T18:16:04Z",
                "message": "params: begin v1.11.7 release cycle"
            },
            {
                "date": "2023-04-20T18:14:51Z",
                "message": "params: go-ethereum v1.11.6 stable"
            },
            {
                "date": "2023-04-20T10:57:24Z",
                "message": "all: refactor trie API (#26995)\n\nIn this PR, all TryXXX(e.g. TryGet) APIs of trie are renamed to XXX(e.g. Get) with an error returned.\r\n\r\nThe original XXX(e.g. Get) APIs are renamed to MustXXX(e.g. MustGet) and does not return any error -- they print a log output. A future PR will change the behaviour to panic on errorrs."
            },
            {
                "date": "2023-04-20T07:36:54Z",
                "message": "metrics: use atomic type (#27121)"
            },
            {
                "date": "2023-04-20T06:52:00Z",
                "message": "core/vm: order opcodes properly (#27113)"
            }
        ],
        "2023-04-19": [
            {
                "date": "2023-04-19T11:18:02Z",
                "message": "cmd/geth: rename --vmodule to --log.vmodule (#27071)\n\nrenames `--vmodule` to `--log.vmodule`, and prints a warning if the old form is used."
            },
            {
                "date": "2023-04-19T10:46:56Z",
                "message": "cmd/devp2p: make crawler-route53-updater less verbose (#27116)\n\nFollow-up to #26697, makes the crawler less verbose on route53-based scenarios.\r\n\r\nIt also changes the loglevel from debug to info on Updates, which are typically the root, and can be interesting to see."
            }
        ],
        "2023-04-18": [
            {
                "date": "2023-04-18T12:54:06Z",
                "message": "consensus/ethash: use atomic type (#27068)"
            },
            {
                "date": "2023-04-18T09:57:08Z",
                "message": "p2p: access embedded fields of Server directly (#27078)"
            },
            {
                "date": "2023-04-18T07:49:09Z",
                "message": "params: remove `EIP150Hash` from chainconfig (#27087)\n\nThe EIP150Hash was an idea where, after the fork, we hardcoded the forked hash as an extra defensive mechanism. It wasn't really used, since forks weren't contentious and for all the various testnets and private networks it's been a hassle to have around. \r\n\r\nThis change removes that config field. \r\n\r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
            }
        ],
        "2023-04-17": [
            {
                "date": "2023-04-17T15:02:31Z",
                "message": "core: fix comment to reflect function name (#27070)"
            },
            {
                "date": "2023-04-17T14:36:47Z",
                "message": "signer/core: rename testdata files (#27063)\n\nSets a meaningful name on test-files"
            },
            {
                "date": "2023-04-17T14:29:27Z",
                "message": "cmd/devp2p: fix erroneous log output in crawler (#27089)\n\ncmd/devp2p: fix log of ignored recent nodes counter"
            },
            {
                "date": "2023-04-17T08:15:25Z",
                "message": "params: new sepolia bootnodes (#27099)\n\nNew sepolia bootnodes managed by EF devops"
            }
        ],
        "2023-04-08": [
            {
                "date": "2023-04-08T14:13:55Z",
                "message": "Merge pull request #27051 from sandakersmann/master\n\nbuild: upgrade -dlgo version to Go 1.20.3"
            }
        ],
        "2023-04-05": [
            {
                "date": "2023-04-05T11:09:25Z",
                "message": "core, miner: drop transactions from the same sender when error occurs (#27038)\n\nThis PR unifies the error handling in miner. \r\n\r\nWhenever an error occur while applying a transaction, the transaction should be regarded as invalid and all following transactions from the same sender not executable because of the nonce restriction. The only exception is the `nonceTooLow` error which is handled separately."
            },
            {
                "date": "2023-04-05T08:59:32Z",
                "message": "core/txpool: disallow future churn by remote txs (#26907)\n\nPrior to this change, it was possible that transactions are erroneously deemed as 'future' although they are in fact 'pending', causing them to be dropped due to 'future' not being allowed to replace 'pending'. \r\n\r\nThis change fixes that, by doing a more in-depth inspection of the queue."
            }
        ],
        "2023-04-04": [
            {
                "date": "2023-04-04T20:24:30Z",
                "message": "build: upgrade -dlgo version to Go 1.20.3"
            },
            {
                "date": "2023-04-04T16:34:52Z",
                "message": "eth/tracers: use atomic type (#27031)\n\nUse the new atomic types in package eth/tracers\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            },
            {
                "date": "2023-04-04T13:53:44Z",
                "message": "metrics: make gauge_float64 and counter_float64 lock free (#27025)\n\nMakes the float-gauges lock-free\r\n\r\nname                      old time/op  new time/op  delta\r\nCounterFloat64Parallel-8  1.45\u00b5s \u00b110%  0.85\u00b5s \u00b1 6%  -41.65%  (p=0.008 n=5+5)\r\n\r\n---------\r\n\r\nCo-authored-by: Exca-DK <dev@DESKTOP-RI45P4J.localdomain>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-04-04T13:50:13Z",
                "message": "all: remove debug-field from vm config (#27048)\n\nThis PR removes the Debug field from vmconfig, making it so that if a tracer is set, debug=true is implied.\r\n\r\n---------\r\n\r\nCo-authored-by: 0xTylerHolmes <tyler@ethereum.org>\r\nCo-authored-by: Sina Mahmoodi <1591639+s1na@users.noreply.github.com>"
            },
            {
                "date": "2023-04-04T10:34:23Z",
                "message": "eth/tracers: report correct gasLimit in call tracers (#27029)\n\nThis includes a semantic change to the `callTracer` as well as `flatCallTracer`.\r\nThe value of field `gas` in the **first** call frame will change as follows:\r\n\r\n- It previously contained gas available after initial deductions (i.e. tx costs)\r\n- It will now contain the full tx gasLimit value\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
            },
            {
                "date": "2023-04-04T08:25:28Z",
                "message": "consensus/misc, params: add EIP-4844 blobfee conversions (#27041)\n\n* consensus/misc, params: add EIP-4844 blobfee conversions\r\n\r\n* consensus/misc: pull in fakeExponential test cases\r\n\r\n* consensus/misc: reuse bigints\r\n\r\n* consensus/misc: nit renames, additional larger testcase\r\n\r\n---------\r\n\r\nCo-authored-by: Roberto Bayardo <bayardo@alum.mit.edu>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-04-04T07:02:50Z",
                "message": "consensus, core/typer: add 4844 excessDataGas to header, tie it to Cancun (#27046)"
            },
            {
                "date": "2023-04-04T06:59:40Z",
                "message": "core/vm: clarify comment (#27045)"
            }
        ],
        "2023-04-03": [
            {
                "date": "2023-04-03T19:48:10Z",
                "message": "eth/downloader: use atomic types (#27030)\n\n* eth/downloader: use atomic type\r\n\r\n* Update eth/downloader/downloader_test.go\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\n* Update eth/downloader/downloader_test.go\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-04-03T11:16:57Z",
                "message": "core/txpool: move some validation to outside of mutex (#27006)\n\nCurrently, most of transaction validation while holding the txpool mutex: one exception being an early-on signature check. \r\n\r\nThis PR changes that, so that we do all non-stateful checks before we entering the mutex area. This means they can be performed in parallel, and to enable that, certain fields have been made atomic bools and uint64."
            },
            {
                "date": "2023-04-03T09:42:34Z",
                "message": "test/fuzzers: fuzz rlp handling of big.Int and uint256.Int (#26917)\n\ntest/fuzzers: fuzz rlp handling of big.Lnt and uint256.Int"
            },
            {
                "date": "2023-04-03T09:08:06Z",
                "message": "cmd, miner, signer: avoid panic if keystore is not available (#27039)\n\n* cmd, miner, singer: avoid panic if keystore is not available\r\n\r\n* cmd/geth: print warning instead of panic"
            },
            {
                "date": "2023-04-03T09:05:36Z",
                "message": "cmd/geth: enable log rotation (#26843)\n\nThis change enables log rotation, which can be activated using the flag --log.rotate. Additional parameters that can be given are: \r\n\r\n  - log.maxsize to set maximum size before files are rotated,\r\n  - log.maxbackups to set how many files are retailed, \r\n  - log.maxage to configure max age of rotated files, \r\n  - log.compress whether to compress rotated files\r\n\r\nThe way to configure location of the logfile(s) is left unchanged, via the `log.logfile` parameter.  \r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-04-03T07:51:31Z",
                "message": "common: delete MakeName (#27023)\n\ncommon,p2p: remove unused function MakeName"
            },
            {
                "date": "2023-04-03T07:35:13Z",
                "message": "go.mod : update snappy (#27027)"
            },
            {
                "date": "2023-04-03T07:33:17Z",
                "message": "cmd/evm: use correct parent number for t8n base fee calculation (#27032)\n\nCurrently the t8n tool uses the same block number for the current block and its parent while calculating the base fee. This causes incorrect base fee calculation for the london fork block. This commit sets the parent block number to be one less than the current block number"
            }
        ],
        "2023-03-31": [
            {
                "date": "2023-03-31T06:35:29Z",
                "message": "accounts/abi/bind: handle UnpackLog with zero topics (#26920)\n\nAdds error handling for the case that UnpackLog or UnpackLogIntoMap is called with a log that has zero topics.\r\n\r\n---------\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            },
            {
                "date": "2023-03-31T06:32:47Z",
                "message": "miner: use atomic type (#27013)\n\nUse the new typed atomics in the miner package"
            }
        ],
        "2023-03-30": [
            {
                "date": "2023-03-30T19:09:35Z",
                "message": "eth/catalyst: improve consensus heartbeat (#26896)\n\nimprove the heartbeat function that is no longer suitable in the current situation\r\n\r\nCo-authored-by: \u201copenex27\u201d <\u201copenexkevin@gmail.com\u201d>"
            },
            {
                "date": "2023-03-30T19:04:28Z",
                "message": "common: fix json marshaller MixedcaseAddress (#26998)\n\nFix the json marshaller of MixedcaseAddress"
            },
            {
                "date": "2023-03-30T19:02:14Z",
                "message": "ethdb/pebble: use atomic type (#27014)"
            },
            {
                "date": "2023-03-30T13:24:48Z",
                "message": "cmd/geth: Add `--log.format` cli param (#27001)\n\nRemoves the new --log.logfmt directive and hides --log.json, replacing both with log.format=(json|logfmt|terminal). The hidden log.json option is still respected if log.format is not specified for backwards compatibility.\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-03-30T10:57:49Z",
                "message": "graphql: revert storage access regression (#27007)"
            },
            {
                "date": "2023-03-30T10:53:32Z",
                "message": "core: use atomic type (#27011)"
            },
            {
                "date": "2023-03-30T08:58:23Z",
                "message": "remove @gballet as a GraphQL codeowner (#27012)"
            }
        ],
        "2023-03-28": [
            {
                "date": "2023-03-28T12:59:37Z",
                "message": "docs: update outdated DeriveSha docs comment (#26968)"
            },
            {
                "date": "2023-03-28T12:37:40Z",
                "message": "internal/debug: add log.logfmt flag to set logging to use logfmt (#26970)"
            },
            {
                "date": "2023-03-28T09:46:53Z",
                "message": "eth/tracers/native: prevent panic for LOG edge-cases (#26848)\n\nThis PR fixes OOM panic in the callTracer as well as panicing on\r\nopcode validation errors (e.g. stack underflow) in callTracer and\r\nprestateTracer.\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-03-28T07:08:10Z",
                "message": "graphql: fix data races (#26965)\n\nFixes multiple data races caused by the fact that resolving fields are done concurrently by the graphql library. It also enforces caching at the stateobject level for account fields."
            },
            {
                "date": "2023-03-28T07:06:50Z",
                "message": "core/state: use atomic.Bool (#26992)"
            },
            {
                "date": "2023-03-28T07:05:29Z",
                "message": "core/bloombits: use atomic type (#26993)"
            }
        ],
        "2023-03-27": [
            {
                "date": "2023-03-27T13:40:20Z",
                "message": "core/vm: use atomic.Bool (#26951)\n\nMake use of new atomic types\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-03-27T11:44:41Z",
                "message": "metrics/librato: ensure resp.body closed (#26969)\n\nThis change ensures that we call Close on a http response body, in various places in the source code (mostly tests)"
            },
            {
                "date": "2023-03-27T08:48:46Z",
                "message": "core/state, trie: remove Try prefix in Trie accessors (#26975)\n\nThis change renames StateTrie methods to remove the Try* prefix. \r\n\r\nWe added the Trie methods with prefix 'Try' a long time ago, working\r\naround the problem that most existing methods of Trie did not return the\r\ndatabase error. This weird naming convention has persisted until now.\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2023-03-25": [
            {
                "date": "2023-03-25T21:38:43Z",
                "message": "ethclient: ensure returned subscription is nil on error (#26976)"
            }
        ],
        "2023-03-24": [
            {
                "date": "2023-03-24T13:17:39Z",
                "message": "rlp/rlpgen: print want/expect output string if mismatch (#26932)\n\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
            },
            {
                "date": "2023-03-24T11:39:20Z",
                "message": "go.mod: update golang.org/x/tools (#26960)"
            }
        ],
        "2023-03-23": [
            {
                "date": "2023-03-23T20:12:37Z",
                "message": "eth/gasprice: change feehistory input type from int to uint64 (#26922)\n\nChange input param type from int to uint64"
            },
            {
                "date": "2023-03-23T19:12:32Z",
                "message": "metrics/influxdb: use smaller dependency and reuse code between v1 and v2 reporters  (#26963)\n\nThis change switches to use the smaller influxdata/influxdb1-client package instead of depending on the whole infuxdb package. The new smaller client is very similar to the influxdb-v2 client, which made it possible to refactor the two reporters to reuse code a lot more."
            },
            {
                "date": "2023-03-23T13:13:50Z",
                "message": "metrics: add cpu counters (#26796)\n\nThis PR adds counter metrics for the CPU system and the Geth process.\r\nCurrently the only metrics available for these items are gauges. Gauges are\r\nfine when the consumer scrapes metrics data at the same interval as Geth\r\nproduces new values (every 3 seconds), but it is likely that most consumers\r\nwill not scrape that often. Intervals of 10, 15, or maybe even 30 seconds\r\nare probably more common.\r\n\r\nSo the problem is, how does the consumer estimate what the CPU was doing in\r\nbetween scrapes. With a counter, it's easy ... you just subtract two\r\nsuccessive values and divide by the time to get a nice, accurate average.\r\nBut with a gauge, you can't do that. A gauge reading is an instantaneous\r\npicture of what was happening at that moment, but it gives you no idea\r\nabout what was going on between scrapes. Taking an average of values is\r\nmeaningless."
            },
            {
                "date": "2023-03-23T10:52:22Z",
                "message": "core/state: add account address to Trie slot accessors (#26934)\n\nThis changes the Trie interface to add the plain account address as a\r\nparameter to all storage-related methods.\r\n\r\nAfter the introduction of the TryAccount* functions, TryGet, TryUpdate and\r\nTryDelete are now only meant to read an account's storage. In their current\r\nform, they assume that an account storage is stored in a separate trie, and\r\nthat the hashing of the slot is independent of its account's address.\r\n\r\nThe proposed structure for a stateless storage breaks these two\r\nassumptions: the hashing of a slot key requires the address and all slots\r\nand accounts are stored in a single trie.\r\n\r\nThis PR therefore adds an address parameter to the interface. It is ignored\r\nin the MPT version, so this change has no functional impact, however it\r\nwill reduce the diff size when merging verkle trees."
            },
            {
                "date": "2023-03-23T09:15:40Z",
                "message": "cmd/evm, tests: record preimages if dump is expected (#26955)\n\nWith #25287 we made it so that preimages were not recorded by default. This had the side effect that the evm command is no longer able to dump state since it does a preimage lookup to determine the address represented by a key.\r\n\r\nThis change enables the recording of preimages when the dump command is given."
            },
            {
                "date": "2023-03-23T07:34:40Z",
                "message": "core/rawdb: update freezertable read meter (#26946)\n\nThe meter for \"for measuring the effective amount of data read\" within the freezertable was never updated. This change remedies that. \r\n---------\r\n\r\nSigned-off-by: jsvisa <delweng@gmail.com>"
            }
        ],
        "2023-03-22": [
            {
                "date": "2023-03-22T17:36:26Z",
                "message": "eth/catalyst: fix races (#26950)"
            }
        ],
        "2023-03-21": [
            {
                "date": "2023-03-21T11:14:47Z",
                "message": "core/vm: expose jumptable constructors (#26880)\n\nWhen interacting with geth as a library to e.g. produce state tests, it is desirable to obtain the consensus-correct jumptable definition for a given fork. This changes adds accessors so the instructionset can be obtained and characteristics about opcodes can be inspected."
            },
            {
                "date": "2023-03-21T11:10:23Z",
                "message": "core/rawdb: use atomic int added in go1.19 (#26935)"
            },
            {
                "date": "2023-03-21T10:01:43Z",
                "message": "log: add special casing of uint256 into the logger (#26936)"
            },
            {
                "date": "2023-03-21T09:52:29Z",
                "message": "build: allow building nightly archives via cron jobs (#26938)"
            },
            {
                "date": "2023-03-21T08:04:26Z",
                "message": "params: begin v1.11.6 release cycle"
            },
            {
                "date": "2023-03-21T08:03:04Z",
                "message": "params: go-ethereum v1.11.5 stable"
            }
        ],
        "2023-03-20": [
            {
                "date": "2023-03-20T13:15:18Z",
                "message": "core/txpool: allow future local transactions  (#26930)\n\nLocal transactions should not be subject to the \"future shouldn't churn pending txs\" rule"
            },
            {
                "date": "2023-03-20T11:38:34Z",
                "message": "params: schedule shanghai fork on mainnet (#26908)\n\nSchedules the shanghai hardfork on timestamp 1681338455 as discussed on ACDE 157: https://github.com/ethereum/execution-specs/pull/727"
            },
            {
                "date": "2023-03-20T08:12:24Z",
                "message": "core/txpool: use atomic int added in go1.19 (#26913)\n\nMakes use of atomic.Uint64 instead of atomic by pointer"
            },
            {
                "date": "2023-03-20T08:09:35Z",
                "message": "trie: reduce unit test time (#26918)"
            }
        ],
        "2023-03-17": [
            {
                "date": "2023-03-17T18:06:06Z",
                "message": "eth: fix output file permissions in admin_exportChain (#26912)\n\n* api: Use 0700 file permissions for ExportChain\r\n\r\n* change perm to 0644\r\n\r\n* Update api.go\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-03-17T10:51:55Z",
                "message": "rlp: support for uint256 (#26898)\n\nThis adds built-in support in package rlp for encoding, decoding and generating code dealing with uint256.Int.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-03-17T10:19:51Z",
                "message": "trie, accounts/abi: add error-checks (#26914)"
            }
        ],
        "2023-03-16": [
            {
                "date": "2023-03-16T22:53:39Z",
                "message": "internal/ethapi: avoid int overflow in GetTransactionReceipt (#26911)"
            },
            {
                "date": "2023-03-16T19:35:36Z",
                "message": "eth/catalyst: increase update consensus timeout (#26840)\n\n Increases the time between consensus updates that we give the CL before we start warning the user."
            },
            {
                "date": "2023-03-16T19:34:25Z",
                "message": "consensus: improve consensus engine definition (#26871)\n\nMakes clear the distinction between Finalize and FinalizedAndAssemble:\r\n\r\n- In Finalize function, a series of state operations are applied according to consensus rules. The statedb is mutated and the root hash can be checked and compared afterwards.\r\n\r\nThis function should be used in block processing(receive afrom network and apply it locally) but not block generation.\r\n\r\n- In FinalizeAndAssemble function, after applying state mutations, the block is also to be assembled with the latest\r\n  state root computed, updating the header. \r\n\r\n This function should be used in block generation only."
            },
            {
                "date": "2023-03-16T07:12:34Z",
                "message": "core: show db error-info in case of mismatched hash root (#26870)\n\nWhen a database failure occurs, bubble it up a into statedb, and report it in suitable places, such as during a 'bad block' report."
            }
        ],
        "2023-03-15": [
            {
                "date": "2023-03-15T13:34:36Z",
                "message": "cmd/devp2p, cmd/geth: add version in --help output (#26895)\n\nNot sure why this was removed, it's pretty useful to see the version\r\nalso in --help."
            }
        ],
        "2023-03-14": [
            {
                "date": "2023-03-14T17:41:28Z",
                "message": "Increase websocket frame size (from erigon rpc client) (#26883)\n\nThis increases the maximum allowed message size to 32MB.\r\n\r\nOriginally submitted at https://github.com/ledgerwatch/erigon/pull/2739\r\n\r\nexample block failure: https://etherscan.io/tx/0x1317d973a55cedf9b0f2df6ea48e8077dd176f5444a3423368a46d6e4db89982#internal"
            },
            {
                "date": "2023-03-14T14:23:49Z",
                "message": "all: update links in documentation (#26882)\n\n\r\nCo-authored-by: Stephen Flynn <stephen.flynn@gapac.com>"
            },
            {
                "date": "2023-03-14T11:40:40Z",
                "message": "p2p/discover: pass invalid discv5 packets to Unhandled channel (#26699)\n\nThis makes it possible to run another protocol alongside discv5, by reading \r\nunhandled packets from the channel."
            },
            {
                "date": "2023-03-14T08:50:53Z",
                "message": "core/state, trie: port changes from PBSS (#26763)"
            }
        ],
        "2023-03-13": [
            {
                "date": "2023-03-13T13:10:19Z",
                "message": ".travis.yml: reenable PPA build on tag push (#26873)"
            },
            {
                "date": "2023-03-13T10:51:23Z",
                "message": "eth: return error if 'safe' or 'finalized' tag used pre-merge (#26862)\n\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-03-13T08:45:25Z",
                "message": "core/txpool: use priceList.Put instead of heap.Push (#26863)\n\nMinor refactor to use the 'intended' accessor"
            },
            {
                "date": "2023-03-13T08:02:50Z",
                "message": "core: minor code refactor (#26852)\n\n* core: refactor code\r\n\r\n* core: drop it from this anonymous goroutine func"
            },
            {
                "date": "2023-03-13T07:30:32Z",
                "message": "code/vm: fix comment typo (#26865)\n\nit should be constantinople rather than contantinople"
            }
        ],
        "2023-03-10": [
            {
                "date": "2023-03-10T20:47:05Z",
                "message": "tests: define `MuirGlacier` fork (#26856)\n\nadd muir glacier to t8n"
            },
            {
                "date": "2023-03-10T19:00:23Z",
                "message": "params: begin v1.11.5 release cycle"
            },
            {
                "date": "2023-03-10T18:53:52Z",
                "message": "params: go-ethereum v1.11.4 stable"
            },
            {
                "date": "2023-03-10T17:30:26Z",
                "message": "core/txpool: implement additional DoS defenses (#26648)\n\nThis adds two new rules to the transaction pool:\r\n\r\n- A future transaction can not evict a pending transaction.\r\n- A transaction can not overspend available funds of a sender.\r\n\r\n---\r\n\r\nCo-authored-by: dwn1998 <42262393+dwn1998@users.noreply.github.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-03-10T13:03:27Z",
                "message": "core: add Timestamp method in BlockGen (#26844)\n\nSince forks are now scheduled by block time, it can be necessary\r\nto check the timestamp of a block while generating transactions."
            },
            {
                "date": "2023-03-10T09:45:49Z",
                "message": "p2p: small comment typo (#26850)\n\nUpdate server.go"
            }
        ],
        "2023-03-09": [
            {
                "date": "2023-03-09T14:44:54Z",
                "message": "travis: only build PPAs nightly, not on every push, too heavy (#26846)"
            },
            {
                "date": "2023-03-09T13:19:12Z",
                "message": "core, core/types: plain Message struct (#25977)\n\nHere, the core.Message interface turns into a plain struct and\r\ntypes.Message gets removed.\r\n\r\nThis is a breaking change to packages core and core/types. While we do\r\nnot promise API stability for package core, we do for core/types. An\r\nexception can be made for types.Message, since it doesn't have any\r\npurpose apart from invoking the state transition in package core.\r\ntypes.Message was also marked deprecated by the same commit it\r\ngot added in, 4dca5d4db7 (November 2016).\r\n\r\nThe core.Message interface was added in December 2014, in commit\r\ndb494170dc, for the purpose of 'testing' state transitions. It's the\r\nsame change that made transaction struct fields private. Before that,\r\nthe state transition used *types.Transaction directly.\r\n\r\nOver time, multiple implementations of the interface accrued across\r\ndifferent packages, since constructing a Message is required whenever\r\none wants to invoke the state transition. These implementations all\r\nlooked very similar, a struct with private fields exposing the fields\r\nas accessor methods.\r\n\r\nBy changing Message into a struct with public fields we can remove all\r\nthese useless interface implementations. It will also hopefully\r\nsimplify future changes to the type with less updates to apply across\r\nall of go-ethereum when a field is added to Message.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-03-09T12:06:47Z",
                "message": "cmd/evm: update readmes for the tests (#26841)"
            },
            {
                "date": "2023-03-09T11:37:44Z",
                "message": "core/forkid: fix issue in validation test (#26544)\n\nThis changes the test to match the comment description. Using timestampedConfig in this test case is incorrect, the comment says 'local is at Gray Glacier' and isn't aware of more forks."
            },
            {
                "date": "2023-03-09T09:39:17Z",
                "message": "core/vm: fix typo in comment (#26838)\n\nfixes eip 220 ->  2200"
            }
        ],
        "2023-03-08": [
            {
                "date": "2023-03-08T18:12:53Z",
                "message": "core/vm: use golang native big.Int (#26834)\n\nreverts #26021, to use the upstream bigint instead."
            },
            {
                "date": "2023-03-08T10:13:56Z",
                "message": "params: remove EF azure bootnodes (#26828)"
            },
            {
                "date": "2023-03-08T07:48:53Z",
                "message": "signer/core: accept all solidity primitive types for EIP-712 signing  (#26770)\n\nAccept all primitive types in Solidity for EIP-712 from intN, uintN, intN[], uintN[] for N as 0 to 256 in multiples of 8\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-03-08T07:39:13Z",
                "message": "core/rawdb: find smallest block stored in key-value store when chain gapped (#26719)\n\nThis change prints out more information about the problem, in the case where geth detects a gap between leveldb and ancients, so we can determine more exactly where the gap is (what the first missing is). Also prints out more metadata. \r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2023-03-07": [
            {
                "date": "2023-03-07T17:18:59Z",
                "message": "params: begin v1.11.4 release cycle"
            },
            {
                "date": "2023-03-07T17:17:32Z",
                "message": "params: go-ethereum v1.11.3 stable"
            },
            {
                "date": "2023-03-07T17:16:21Z",
                "message": "build: update to go 1.20.2 (#26824)"
            },
            {
                "date": "2023-03-07T15:30:04Z",
                "message": "beacon/engine: don't omit empty withdrawals in ExecutionPayloadBodies (#26698)\n\nThis ensures the \"withdrawals\" field will always be present in responses\r\nto getPayloadBodiesByRangeV1 and getPayloadBodiesByHashV1.\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-03-07T14:20:04Z",
                "message": "accounts/usbwallet: mitigate ledger app chunking issue (#26773)\n\nThis PR mitigates an issue with Ledger's on-device RLP deserialization, see\r\nhttps://github.com/LedgerHQ/app-ethereum/issues/409\r\n\r\nLedger's RLP deserialization code does not validate the length of the RLP list received,\r\nand it may prematurely enter the signing flow when a APDU chunk boundary falls immediately\r\nbefore the EIP-155 chain_id when deserializing a transaction. Since the chain_id is\r\nuninitialized, it is 0 during this signing flow. This may cause the user to accidentally\r\nsign the transaction with chain_id = 0. That signature would be returned from the device 1\r\npacket earlier than expected by the communication loop. The device blocks the\r\nsecond-to-last packet waiting for the signer flow, and then errors on the successive\r\npacket (which contains the chain_id, zeroed r, and zeroed s)\r\n\r\nSince the signature's early arrival causes successive errors during the communication\r\nprocess, geth does not parse the improper signature produced by the device, and therefore\r\nno improperly-signed transaction can be created. User funds are not at risk.\r\n\r\nWe mitigate by selecting the highest chunk size that leaves at least 4 bytes in the\r\nfinal chunk."
            },
            {
                "date": "2023-03-07T13:39:11Z",
                "message": "eth/tracers/native: set created address to nil in case of failure (#26779)\n\nFixes #26073"
            },
            {
                "date": "2023-03-07T10:32:52Z",
                "message": "cmd/evm: correct `alloc` for `t8n` testdata (#26822)\n\nFixes a minor error in the testdata"
            },
            {
                "date": "2023-03-07T10:26:19Z",
                "message": "internal/ethapi: add tests for transaction types JSON marshal/unmarshal (#26667)\n\nChecks that Transaction.MarshalJSON and newRPCTransaction JSON output can be parsed by Transaction.UnmarshalJSON\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-03-07T10:23:52Z",
                "message": "core, miner: revert block gas counter in case of invalid transaction (#26799)\n\nThis change fixes a flaw where, in certain scenarios, the block sealer did not accurately reset the remaining gas after failing to include an invalid transaction. Fixes #26791"
            },
            {
                "date": "2023-03-07T10:21:23Z",
                "message": "ethclient: fix panic when requesting missing blocks (#26817)\n\nThis fixes a regression introduced by #26723.\r\nFixes #26816."
            }
        ],
        "2023-03-06": [
            {
                "date": "2023-03-06T23:29:48Z",
                "message": "metrics: improve accuracy of CPU gauges (#26793)\n\nThis PR changes metrics collection to actually measure the time interval between collections, rather\r\nthan assume 3 seconds. I did some ad hoc profiling, and on slower hardware (eg, my Raspberry Pi 4)\r\nI routinely saw intervals between 3.3 - 3.5 seconds, with some being as high as 4.5 seconds. This\r\nwill generally cause the CPU gauge readings to be too high, and in some cases can cause impossibly\r\nlarge values for the CPU load metrics (eg. greater than 400 for a 4 core CPU).\r\n\r\n---------\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-03-06T22:32:27Z",
                "message": "core, eth/catalyst: fix race conditions in tests (#26790)\n\nFixes a race in TestNewPayloadOnInvalidTerminalBlock where setting the TTD raced with\r\nthe miner. Solution: set the TTD on the blockchain config not the genesis config.\r\n\r\nAlso fixes a race in CopyHeader which resulted in race reports all over the place."
            },
            {
                "date": "2023-03-06T16:19:41Z",
                "message": "core/types: add EffectiveGasPrice in Receipt (#26713)\n\nThis change adds a struct field EffectiveGasPrice in types.Receipt. The field is present\r\nin RPC responses, but not in the Go struct, and thus can't easily be accessed via ethclient.\r\n\r\nCo-authored-by: PulsarAI <dev@pulsar-systems.fi>"
            },
            {
                "date": "2023-03-06T07:27:46Z",
                "message": "eth: remove admin.peers[i].eth.head and difficulty (#26804)"
            },
            {
                "date": "2023-03-06T07:26:43Z",
                "message": "core, params: schedule Shanghai on goerli (#26795)\n\n* core: params: schedule Shanghai on goerli\r\n\r\n* core/forkid: fix comment"
            }
        ],
        "2023-03-03": [
            {
                "date": "2023-03-03T10:26:04Z",
                "message": "travi: remove strange leftover Go version"
            },
            {
                "date": "2023-03-03T10:24:09Z",
                "message": "README, go.mod, event, internal/version: bump min Go to 1.19 (#26803)"
            },
            {
                "date": "2023-03-03T10:11:39Z",
                "message": "core: fix a merge fault (#26802)"
            },
            {
                "date": "2023-03-03T10:05:00Z",
                "message": "core/rawdb, ethdb/pebble: disable pebble on openbsd (#26801)"
            }
        ],
        "2023-03-02": [
            {
                "date": "2023-03-02T06:29:15Z",
                "message": "all: change chain head markers from block to header (#26777)"
            }
        ],
        "2023-02-28": [
            {
                "date": "2023-02-28T13:40:24Z",
                "message": "ethclient: include withdrawals in ethclient block responses (#26778)\n\n* include withdrawals in ethclient responses\r\n\r\n* omit empty withdrawals array in json serialization"
            },
            {
                "date": "2023-02-28T13:34:12Z",
                "message": "ethdb/pebble: fix max memorytable size (#26776)"
            },
            {
                "date": "2023-02-28T13:32:51Z",
                "message": "ethdb/pebble: fix range compaction (#26771)\n\n* ethdb/pebble: fix range compaction\r\n\r\n* ethdb/pebble: add comment"
            },
            {
                "date": "2023-02-28T10:46:32Z",
                "message": "core: improve withdrawal index assignment in GenerateChain (#26756)\n\nThis fixes an issue where the withdrawal index was not calculated correctly\r\nfor multiple withdrawals in a single block.\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-02-28T10:24:37Z",
                "message": "eth/tracers: add native flatCallTracer (aka parity style tracer) (#26377)\n\nAdds support for a native call tracer with the Parity format, which outputs call frames\r\nin a flat array. This tracer accepts the following options:\r\n\r\n- `convertParityErrors: true` will convert error messages to match those of Parity\r\n- `includePrecompiles: true` will report all calls to precompiles. The default\r\n  matches Parity's behavior where CALL and STATICCALLs to precompiles are excluded\r\n\r\nIncompatibilities with Parity include:\r\n\r\n- Parity removes the result object in case of failure. This behavior is maintained\r\n  with the exception of reverts. Revert output usually contains useful information,\r\n  i.e. Solidity revert reason.\r\n- The `gasUsed` field accounts for intrinsic gas (e.g. 21000 for simple transfers)\r\n  and refunds unlike Parity\r\n- Block rewards are not reported\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            }
        ],
        "2023-02-27": [
            {
                "date": "2023-02-27T10:36:26Z",
                "message": "cmd/devp2p: faster crawling + less verbose dns updates (#26697)\n\nThis improves the speed of DHT crawling by using concurrent requests.\r\nIt also removes logging of individual DNS updates."
            }
        ],
        "2023-02-23": [
            {
                "date": "2023-02-23T11:24:31Z",
                "message": "Merge pull request #26721 from holiman/nocover\n\nci: disable coverage reporting in appveyor and travis"
            },
            {
                "date": "2023-02-23T11:22:41Z",
                "message": "eth: use the last announced finalized block as the sync ancient limit (#26685)"
            },
            {
                "date": "2023-02-23T07:11:50Z",
                "message": "core/rawdb, node: use standalone flock dependency (#26633)"
            }
        ],
        "2023-02-22": [
            {
                "date": "2023-02-22T12:39:41Z",
                "message": "log: improve documentation (#26753)\n\nAdd usage examples"
            },
            {
                "date": "2023-02-22T12:25:19Z",
                "message": "params: begin v.1.11.3 release cycle"
            },
            {
                "date": "2023-02-22T12:23:51Z",
                "message": "params: release Geth v1.11.2"
            },
            {
                "date": "2023-02-22T11:55:09Z",
                "message": "common/math: allow HexOrDecimal to accept unquoted decimals too (#26758)"
            },
            {
                "date": "2023-02-22T11:06:43Z",
                "message": "eth/filters: fix a breaking change and return rpctransaction (#26757)\n\n* eth/filters: fix a breaking change and return rpctransaction\r\n\r\n* eth/filters: fix test cases\r\n\r\n---------\r\n\r\nCo-authored-by: Catror <me@catror.com>"
            }
        ],
        "2023-02-21": [
            {
                "date": "2023-02-21T11:12:27Z",
                "message": "all: use unified emptyRootHash and emptyCodeHash (#26718)\n\nThe EmptyRootHash and EmptyCodeHash are defined everywhere in the codebase, this PR replaces all of them with unified one defined in core/types package, and also defines constants for TxRoot, WithdrawalsRoot and UncleRoot"
            },
            {
                "date": "2023-02-21T11:10:01Z",
                "message": "core/rawdb: expose chain freezer constructor without internals (#26748)"
            },
            {
                "date": "2023-02-21T10:18:33Z",
                "message": "core: fix accessor mismatch for genesis state (#26747)"
            },
            {
                "date": "2023-02-21T10:17:34Z",
                "message": "core, eth: merge snap-sync chain download progress logs (#26676)"
            },
            {
                "date": "2023-02-21T07:35:04Z",
                "message": "cmd/geth: clarify dumpconfig options (#26729)\n\nClarifies the documentation around dumpconfi\r\n\r\nSigned-off-by: Sungwoo Kim <git@sung-woo.kim>"
            }
        ],
        "2023-02-20": [
            {
                "date": "2023-02-20T14:54:52Z",
                "message": "Revert \"core/trie: remove trie tracer (#26665)\" (#26732)\n\nThis reverts commit 7c749c947a9d5181f5f2c1b3fdb5ea6b0e401e8e."
            },
            {
                "date": "2023-02-20T11:26:37Z",
                "message": "build: enable Lunar Lobster PPA builds"
            },
            {
                "date": "2023-02-20T10:36:46Z",
                "message": "build: fix Go 1.19.0 bootstrapper issues on 386 PPA"
            },
            {
                "date": "2023-02-20T09:31:19Z",
                "message": "build: fix (finaly?) the PPA env vars for Go bootstrapping"
            },
            {
                "date": "2023-02-20T09:07:33Z",
                "message": "build: yet another weird PPA fix"
            },
            {
                "date": "2023-02-20T08:43:55Z",
                "message": "internal/build: revert raising the chunk size for PPA"
            },
            {
                "date": "2023-02-20T08:31:35Z",
                "message": "build: add some PPA debug logs, sigh"
            },
            {
                "date": "2023-02-20T08:09:00Z",
                "message": "build: fix gobootstrap path for the PPA"
            },
            {
                "date": "2023-02-20T07:56:03Z",
                "message": "build: fix setting env var, temp early exit"
            },
            {
                "date": "2023-02-20T06:53:15Z",
                "message": "build: ship bootstrapper Go along with builder for PPA (#26731)"
            }
        ],
        "2023-02-19": [
            {
                "date": "2023-02-19T19:23:18Z",
                "message": "rpc: fix unmarshaling of null result in CallContext (#26723)\n\nThe change fixes unmarshaling of JSON null results into json.RawMessage.\r\n\r\n---------\r\n\r\nCo-authored-by: Jason Yuan <jason.yuan@curvegrid.com>\r\nCo-authored-by: Jason Yuan <jason.yuan869@gmail.com>"
            },
            {
                "date": "2023-02-19T19:10:19Z",
                "message": "core/trie: remove trie tracer (#26665)\n\nThis PR contains a small portion of the full pbss PR, namely\r\n\r\n    Remove the tracer from trie (and comitter), and instead using an accessList.\r\n    Related changes to the Nodeset.\r\n\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            }
        ],
        "2023-02-17": [
            {
                "date": "2023-02-17T18:30:38Z",
                "message": "eth/catalyst: request too large error (#26722)\n\nThe method `GetPayloadBodiesByRangeV1` now returns \"-38004: Too large request\" error if the requested range is too large, according to spec\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-02-17T14:34:30Z",
                "message": "ci: disable coverage reporting in appveyor and travis"
            },
            {
                "date": "2023-02-17T10:25:09Z",
                "message": "eth/catalyst: send INVALID instead of INVALID_BLOCK_HASH (#26696)\n\nThis change will break one hive test, but pass another and it will be the better way going forward"
            }
        ],
        "2023-02-16": [
            {
                "date": "2023-02-16T19:53:16Z",
                "message": "params: begin v1.11.2 release cycle"
            },
            {
                "date": "2023-02-16T19:51:51Z",
                "message": "params: go-ethereum v1.11.1 stable"
            },
            {
                "date": "2023-02-16T19:36:58Z",
                "message": "all: remove deprecated uses of math.rand (#26710)\n\nThis PR is a (superior) alternative to https://github.com/ethereum/go-ethereum/pull/26708, it handles deprecation, primarily two specific cases. \r\n\r\n`rand.Seed` is typically used in two ways\r\n- `rand.Seed(time.Now().UnixNano())` -- we seed it, just to be sure to get some random, and not always get the same thing on every run. This is not needed, with global seeding, so those are just removed. \r\n- `rand.Seed(1)` this is typically done to ensure we have a stable test. If we rely on this, we need to fix up the tests to use a deterministic prng-source. A few occurrences like this has been replaced with a proper custom source. \r\n\r\n`rand.Read` has been replaced by `crypto/rand`.`Read` in this PR."
            },
            {
                "date": "2023-02-16T17:40:16Z",
                "message": "eth/downloader: fix typo (#26716)"
            },
            {
                "date": "2023-02-16T10:28:01Z",
                "message": "eth/downloader: fix empty-body case in queue fetchresult (#26707)"
            },
            {
                "date": "2023-02-16T10:10:16Z",
                "message": "core, eth/downloader: make body validation more strict (#26704)"
            },
            {
                "date": "2023-02-16T10:09:41Z",
                "message": "core: check genesis state presence by disk read (#26703)"
            },
            {
                "date": "2023-02-16T07:00:45Z",
                "message": "travis, build: update Go to 1.20.1 (#26653)\n\ntravis, build: update Go to 1.20"
            }
        ],
        "2023-02-15": [
            {
                "date": "2023-02-15T18:15:31Z",
                "message": "params: begin v1.11.1 release cycle"
            },
            {
                "date": "2023-02-15T18:14:20Z",
                "message": "params: go-ethereum v1.11.0 stable"
            },
            {
                "date": "2023-02-15T12:23:07Z",
                "message": "eth/downloader: handle missing withdrawals if empty list is expected (#26675)\n\nThis PR relaxes the block body ingress handling a bit: if block body withdrawals are missing (but expected to be empty), the body withdrawals are set to 'empty list' before being passed to upper layers. \r\n\r\nThis fixes an issue where a block passed from EthereumJS to geth was deemed invalid."
            },
            {
                "date": "2023-02-15T08:27:52Z",
                "message": "ethdb/pebble: Fix `MemTableStopWritesThreshold` (#26692)\n\nMemTableStopWritesThreshold was set to the max size of all memtables before blocking writing but should be set to the max number of memtables. This is documented [here](https://github.com/cockroachdb/pebble/blob/master/options.go#L738-L742)."
            }
        ],
        "2023-02-14": [
            {
                "date": "2023-02-14T18:39:00Z",
                "message": "eth/catalyst: return error if withdrawals are nil post-shanghai (#26691)\n\nSpec: https://github.com/ethereum/execution-apis/blob/main/src/engine/shanghai.md#request"
            },
            {
                "date": "2023-02-14T13:58:43Z",
                "message": "p2p/dnsdisc: fix tests with Go 1.20 (#26690)"
            },
            {
                "date": "2023-02-14T13:48:22Z",
                "message": "eth/filters: replace atomic pointer with value (#26689)\n\n* eth/filters: replace atomic.Pointer\r\n\r\n* fix\r\n\r\n* improve\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-02-14T09:12:34Z",
                "message": "params: update mainnet + rinkeby CHT (#26677)\n\nThis change updates the CHT entries for mainnet and rinkeby"
            },
            {
                "date": "2023-02-14T08:08:06Z",
                "message": "cmd/devp2p: reduce output of node crawler (#26674)\n\nOur discovery crawler spits out a huge amount of logs, most of which is pretty non-interesting. This change moves the very verbose output to Debug, and adds a 8-second status log message giving the general idea about what's going on."
            }
        ],
        "2023-02-13": [
            {
                "date": "2023-02-13T13:14:34Z",
                "message": "tests/fuzzers: supply gnark multiexp config, fixes #26669 (#26670)\n\nThis change fixes a fuzzer which broke when we updated the gnark dependency earlier."
            },
            {
                "date": "2023-02-13T10:01:35Z",
                "message": "eth/tracers: more fork overrides in traceBlockToFile (#26655)\n\nThis change allows all post-Berlin forks to be specified as overrides for futureForkBlock in the config parameter for traceBlockToFile."
            },
            {
                "date": "2023-02-13T09:59:27Z",
                "message": "eth/filters: avoid block body retrieval when no matching logs (#25199)\n\nLogs stored on disk have minimal information. Contextual information such as block\r\nnumber, index of log in block, index of transaction in block are filled in upon request.\r\nWe can fill in all these fields only having the block header and list of receipts.\r\nBut determining the transaction hash of a log requires the block body.\r\n\r\nThe goal of this PR is postponing this retrieval until we are sure we the transaction hash.\r\nIt happens often that the header bloom filter signals there might be matches in a block,\r\nbut after actually checking them reveals the logs do not match. We want to avoid fetching\r\nthe body in this case.\r\n\r\nNote that this changes the semantics of Backend.GetLogs. Downstream callers of\r\nGetLogs now assume log context fields have not been derived, and need to call\r\nDeriveFields on the logs if necessary."
            }
        ],
        "2023-02-10": [
            {
                "date": "2023-02-10T11:34:45Z",
                "message": "params: schedule shanghai fork on sepolia (#26662)\n\n* params: schedule shanghai fork on sepolia\r\n\r\n* params: u64 -> newUint64"
            },
            {
                "date": "2023-02-10T09:35:00Z",
                "message": "ethdb: add benchmark test suite (#26659)"
            },
            {
                "date": "2023-02-10T09:26:43Z",
                "message": "core/vm: set tracer-observable `value` of a delegatecall to match parent `value` (#26632)\n\nThis is a breaking change in the tracing hooks API as well as semantics of the callTracer:\r\n\r\n- CaptureEnter hook provided a nil value argument in case of DELEGATECALL. However to stay consistent with how delegate calls behave in EVM this hook is changed to pass in the value of the parent call.\r\n- callTracer will return parent call's value for DELEGATECALL frames.\r\n\r\n---------\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            }
        ],
        "2023-02-09": [
            {
                "date": "2023-02-09T17:01:31Z",
                "message": "go.mod: update pebble to latest master (#26654)"
            },
            {
                "date": "2023-02-09T13:56:59Z",
                "message": "core/state, trie: remove unused error-return from trie Commit operation (#26641)"
            },
            {
                "date": "2023-02-09T12:56:15Z",
                "message": "eth/downloader: fix timeout resurrection panic (#26652)\n\n* common/prque, eth/downloader: fix timeout resurrection panic\r\n\r\n* common/prque: revert -1 hack for les, temporaryly!"
            },
            {
                "date": "2023-02-09T11:31:42Z",
                "message": "ethdb/pebble: fix nil callbacks (#26650)"
            },
            {
                "date": "2023-02-09T11:03:54Z",
                "message": "common/prque: generic priority queue (#26290)\n\n* common, core, eth, les, trie: make prque generic\r\n\r\n* les/vflux/server: fixed issues in priorityPool\r\n\r\n* common, core, eth, les, trie: make priority also generic in prque\r\n\r\n* les/flowcontrol: add test case for priority accumulator overflow\r\n\r\n* les/flowcontrol: avoid priority value overflow\r\n\r\n* common/prque: use int priority in some tests\r\n\r\nNo need to convert to int64 when we can just change the type used by the\r\nqueue.\r\n\r\n* common/prque: remove comment about int64 range\r\n\r\n---------\r\n\r\nCo-authored-by: Zsolt Felfoldi <zsfelfoldi@gmail.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-02-09T08:53:22Z",
                "message": "eth/catalyst: disallow forkchoiceupdate v1 post-shanghai (#26645)"
            },
            {
                "date": "2023-02-09T08:48:34Z",
                "message": "ethdb: pebble backend (64bit platforms only) (#26517)\n\n* ethdb: use pebble\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\r\n\r\nfoo\r\n\r\nupdate\r\n\r\n* apply suggested changes\r\n\r\n* flags: go format\r\n\r\nnode: fix ddir lookup mistake\r\n\r\naccounts/abi/bind: fix go.mod replacement for generated binding\r\n\r\ndeps: update pebble + with fix 32-bit build\r\n\r\n* ethdb/pebble: respect max memtable size\r\n\r\n* core/rawdb, ethdb: enable pebble on non-32bit platforms only\r\n\r\n* core/rawdb: fix build tags, fix some review concerns\r\n\r\n* core/rawdb: refactor methods for database opening\r\n\r\n* core/rawdb: remove erroneous build tag\r\n\r\n* cmd/geth: fix the flag default handling + testcase\r\n\r\n* cmd/geth: improve testing regarding custom backends\r\n\r\n* ethdb/pebble, deps: update pebble dependency\r\n\r\n* core/rawdb: replace method with Open\r\n\r\n* ethdb/pebble: several updates for pebble (#49)\r\n\r\n* ethdb/pebble: fix size count in batch\r\n\r\n* ethdb/pebble: disable seek compaction\r\n\r\n* ethdb/pebble: more fixes\r\n\r\n* ethdb, core, cmd: polish and fixes (#50)\r\n\r\n* cmd/utils, core/rawdb, ethdb/pebble: address some review concerns\r\n\r\n* Update flags.go\r\n\r\n* ethdb/pebble: minor refactors\r\n\r\n* ethdb/pebble: avoid copy on batch replay\r\n\r\n* ethdb: fix compilation flaw\r\n\r\n* cmd: fix test fail due to mismatching error message\r\n\r\n* cmd/geth, node: rename backingdb to db.engine\r\n\r\n---------\r\n\r\nCo-authored-by: Jared Wasinger <j-wasinger@hotmail.com>\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2023-02-09T08:03:00Z",
                "message": "all: remove support for Ropsten (#26644)"
            }
        ],
        "2023-02-08": [
            {
                "date": "2023-02-08T15:04:40Z",
                "message": "eth/catalyst: make getPayloadBodiesByRange take hex inputs (#26624)\n\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
            },
            {
                "date": "2023-02-08T11:14:34Z",
                "message": "all: remove database commit callback, rework noderesolver (#26637)\n\nThis change ports some changes from the main PBSS PR:\r\n\r\n  - get rid of callback function in `trie.Database.Commit` which is not required anymore\r\n  - rework the `nodeResolver` in `trie.Iterator` to make it compatible with multiple state scheme\r\n  - some other shallow changes in tests and typo-fixes"
            },
            {
                "date": "2023-02-08T09:39:17Z",
                "message": "log: allow tabs in log messages (#26630)\n\n* log: allow tabs in log messages\r\n\r\nThis fixes a regression where panic reports in RPC handlers were quoted\r\nbecause they contain tab characters.\r\n\r\n* Update format.go"
            },
            {
                "date": "2023-02-08T09:37:33Z",
                "message": "light: fix receiver name from Python style to Go (#26631)\n\nCo-authored-by: Halil Yildirim <halilgolang@gmail.com>"
            }
        ],
        "2023-02-07": [
            {
                "date": "2023-02-07T18:16:53Z",
                "message": "eth/catalyst,miner: include withdrawals in payload id calculation (#26554)\n\nAccording to the spec the payloadID needs to be random or dependent on all arguments, to prevent two payloads from clashing. This change adds withdrawals into the payload derivation. \r\n\r\n---------\r\n\r\nCo-authored-by: lightclient@protonmail.com <lightclient@protonmail.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-02-07T14:44:27Z",
                "message": "rpc: remove DecimalOrHex type (#26629)\n\nIt's the same as math.HexOrDecimal64, which has more uses across the codebase."
            },
            {
                "date": "2023-02-07T13:32:27Z",
                "message": "accounts/abi: fix integer encoding/decoding (#26568)\n\nThis PR fixes this abi encoder/decoder to be more stringent."
            }
        ],
        "2023-02-06": [
            {
                "date": "2023-02-06T19:52:51Z",
                "message": "tests: update (#26548)\n\nThis updates the reference tests to the latest version.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-02-06T17:15:13Z",
                "message": "build: upgrade to golangci-lint v1.51.1 (#26618)"
            },
            {
                "date": "2023-02-06T15:37:58Z",
                "message": "beacon/engine: move core/beacon to beacon/engine (#26616)\n\nThis PR moves core/beacon to beacon/engine so that beacon-chain related code has its own top level package which also can house the the beacon lightclient-code."
            },
            {
                "date": "2023-02-06T15:28:40Z",
                "message": "all: prepare for path-based trie storage (#26603)\n\nThis PR moves some trie-related db accessor methods to a different file, and also removes the schema type. Instead of the schema type, a string is used to distinguish between hashbased/pathbased db accessors.\r\nThis also moves some code from trie package to rawdb package.\r\n\r\nThis PR is intended to be a no-functionality-change prep PR for #25963 .\r\n\r\n---------\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2023-02-06T14:10:46Z",
                "message": "README: remove text about GPU mining (#26609)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-02-06T12:41:29Z",
                "message": "core/vm: add bn256ScalarMul testcase for zero scalar value (#26607)\n\nEIP-196 allows a zero value in the scalar argument to precompile `0x07`. This change adds a test for that case."
            },
            {
                "date": "2023-02-06T12:25:42Z",
                "message": "rpc: fix off-by-one in ipc endpoint length check (#26614)\n\nThis change fixes a minor flaw in the check for ipc endpoint length. The max_path_size is the max path that an ipc endpoint can have, which is 208. However, that size concerns the null-terminated pathname, so we need to account for an extra null-character too."
            },
            {
                "date": "2023-02-06T10:18:50Z",
                "message": "readme: fix broken link  (#26612)"
            },
            {
                "date": "2023-02-06T09:21:40Z",
                "message": "eth/catalyst: implement engine_getPayloadBodiesByHash/Range methods (#26232)\n\nThis change implements engine_getPayloadBodiesByHash and engine_getPayloadBodiesByRange, according to the specification at https://github.com/ethereum/execution-apis/blob/main/src/engine/shanghai.md#specification-4 .\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2023-02-05": [
            {
                "date": "2023-02-05T14:11:25Z",
                "message": "core/vm: improve EVM instance reusability (#26341)\n\nThis change improves reusability of the EVM struct. Two methods are added:\r\n\r\n- SetBlockContext(...)\r\n- SetTracer(...)\r\n\r\nOther attributes like the TransactionContext and the StateDB can already be updated.\r\nBlockContext and Tracer are partially not updateable right now. This change fixes it and\r\nopens the potential to reuse an EVM struct in more ways.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2023-02-03": [
            {
                "date": "2023-02-03T10:52:10Z",
                "message": "Merge pull request #26599 from karalabe/mobile-nuke\n\naccounts, build, mobile: remove Android and iOS support"
            },
            {
                "date": "2023-02-03T10:26:29Z",
                "message": "accounts, build, mobile: remove Andriod and iOS support"
            }
        ],
        "2023-02-02": [
            {
                "date": "2023-02-02T11:52:19Z",
                "message": "cmd, eth, node: deprecate personal namespace (#26390)\n\n* eth: cmd: deprecate personal namespace\r\n\r\n* eth: cmd: move deprecation to node\r\n\r\n* node: disable toml of enablepersonal\r\n\r\n* node: disable personal on ipc as well\r\n\r\n* Update node/node.go\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\n* console: error -> warn\r\n\r\n* node: less roulette\r\n\r\n---------\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-02-02T09:52:26Z",
                "message": "eth/catalyst: return invalid params instead of invalid payload params (#26591)"
            },
            {
                "date": "2023-02-02T08:00:23Z",
                "message": "Merge pull request #26581 from holiman/nuke_puppet\n\ncmd/puppeth: remove puppeth"
            }
        ],
        "2023-02-01": [
            {
                "date": "2023-02-01T15:08:25Z",
                "message": "core: improve ambiguous block validation message (#26582)"
            }
        ],
        "2023-01-31": [
            {
                "date": "2023-01-31T09:16:30Z",
                "message": "cmd/puppeth: remove puppeth"
            },
            {
                "date": "2023-01-31T08:34:03Z",
                "message": "internal/ethapi: always return block withdrawals if present (#26565)\n\nThe execution-apis specification says that the full list of withdrawals should always be returned when requesting a block over RPC:\r\n\r\nhttps://github.com/ethereum/execution-apis/blob/378c4304f75b5af2c9b5263c9c76b511e33e8984/src/schemas/block.yaml#L90-L94\r\n\r\nThis change adopts the expected behavior."
            },
            {
                "date": "2023-01-31T08:29:17Z",
                "message": "eth/tracer: rename to revertReason (#26574)"
            },
            {
                "date": "2023-01-31T08:28:32Z",
                "message": "ethclient/gethclient: fix typo (#26580)\n\nfix grammar typo"
            }
        ],
        "2023-01-30": [
            {
                "date": "2023-01-30T17:43:12Z",
                "message": "log: better sanitation (#26556)"
            },
            {
                "date": "2023-01-30T14:12:55Z",
                "message": "cmd/devp2p: fix broken link in readme(#26576)\n\nfix broken link to DNS discovery tutorial"
            },
            {
                "date": "2023-01-30T13:33:03Z",
                "message": "log: fix typo in comment (#26569)"
            }
        ],
        "2023-01-27": [
            {
                "date": "2023-01-27T14:33:28Z",
                "message": "eth/catalyst: fix panic in TestWithdrawals (#26563)\n\nFixes a regression introduced in #26549"
            },
            {
                "date": "2023-01-27T13:30:13Z",
                "message": "cmd/evm: add blocktest subcommand to evm (#26526)\n\nAdds blocktest subcommand to the evm command, which is very similar to statetest, but instead of loading a StateTest static test it loads a BlockchainTest from a json file and runs it.\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: lightclient <14004106+lightclient@users.noreply.github.com>"
            },
            {
                "date": "2023-01-27T12:39:26Z",
                "message": "go.mod: gnark-crypto upgrade (#26545)"
            },
            {
                "date": "2023-01-27T12:32:24Z",
                "message": "params: remove deprecated bootnodes (#26530)\n\nThis change removes the Infura rinkeby bootnode as well as two deprecated ropsten bootnodes. \r\n\r\nCo-authored-by: Nicola Cocchiaro <ncocchiaro@users.noreply.github.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2023-01-27T11:03:34Z",
                "message": "params: fix timestamp display in fork banner (#26553)"
            },
            {
                "date": "2023-01-27T11:03:03Z",
                "message": "eth/catalyst: implement exchangeCapabilities method (#26555)\n\nSpec: ethereum/execution-apis#364"
            },
            {
                "date": "2023-01-27T10:42:14Z",
                "message": "eth/catalyst: error on nil withdrawals post-shanghai (#26549)\n\nThis adds explicit checks for the presence of withdrawals in the engine API.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2023-01-26": [
            {
                "date": "2023-01-26T09:07:20Z",
                "message": "cmd/utils: fix error at geth startup in --dev mode (#26550)\n\nThis fixes a regression in #26541 where we turned the miner address\r\nbeing missing into a startup error. The address was not configured in\r\n--dev mode."
            }
        ],
        "2023-01-25": [
            {
                "date": "2023-01-25T14:32:25Z",
                "message": "all: implement withdrawals (EIP-4895)  (#26484)\n\nThis change implements withdrawals as specified in EIP-4895.\r\n\r\nCo-authored-by: lightclient@protonmail.com <lightclient@protonmail.com>\r\nCo-authored-by: marioevz <marioevz@gmail.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2023-01-25T11:12:28Z",
                "message": "all: make timestamp-based fork checks based on uint64 (#26474)\n\nThis PR changes the API so that uint64 is used for fork timestamps.\r\nIt's a good choice because types.Header also uses uint64 for time.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2023-01-24": [
            {
                "date": "2023-01-24T10:11:33Z",
                "message": "cmd/utils: improve parsing of --miner.etherbase address (#26541)\n\nThis fixes a regression where the flag did not accept values without\r\nthe 0x prefix anymore. What's worse, if an invalid value was passed,\r\nthe client would just log an INFO level message and continue."
            },
            {
                "date": "2023-01-24T09:12:25Z",
                "message": "all: use http package to replace http method names (#26535)"
            }
        ],
        "2023-01-23": [
            {
                "date": "2023-01-23T23:59:57Z",
                "message": "go.sum: go mod tidy (#26536)"
            },
            {
                "date": "2023-01-23T16:59:25Z",
                "message": "go.mod: upgrade to latest goja (#26523)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2023-01-20": [
            {
                "date": "2023-01-20T16:26:01Z",
                "message": "miner, cmd, eth: require explicit etherbase address (#26413)\n\nThis change introduces a breaking change to miner.etherbase is configured.\r\n\r\nPreviously, users did not need to explicitly set the  etherbase address via flag, since 'first' local account was used as etherbase automatically. This change removes the  \"default first account\" feature.\r\n\r\nIn Proof-of-stake world, the fee recipient address is provided by CL, and not configured in Geth any more - meaning that miner.etherbase is mostly for legacy networks(pow, clique networks etc)."
            },
            {
                "date": "2023-01-20T10:01:33Z",
                "message": "signer/core: don't require capital lettered reference types (#26462)"
            },
            {
                "date": "2023-01-20T09:57:50Z",
                "message": "params: define cancun and prague as timestamp based forks (#26481)\n\n* params: define cancun and osaka as timestamp based forks\r\n\r\n* core, params: change osaka to prague\r\n\r\n* params: fix"
            },
            {
                "date": "2023-01-20T09:54:53Z",
                "message": ".travis.yml: go1.19.5 for android builds (#26524)"
            },
            {
                "date": "2023-01-20T09:53:24Z",
                "message": "go.sum: tidy (#26525)"
            },
            {
                "date": "2023-01-20T09:33:41Z",
                "message": "go.mod: upgrade to go-bip39 v1.1.0 (#26527)"
            }
        ],
        "2023-01-19": [
            {
                "date": "2023-01-19T18:43:29Z",
                "message": "console, internal/jsre: fix autocomplete issues (#26518)\n\nFixes #26505 where the console crashed when a property getter\r\nraised an exception during autocompletion. I also noticed while fixing this\r\nissue that autocomplete wasn't working for objects/fields with numbers in\r\nthem (most importantly web3.<tab><tab>) which is also now fixed."
            },
            {
                "date": "2023-01-19T09:49:48Z",
                "message": "all: remove Kiln testnet (#26522)\n\nKiln was deprecated after the merge."
            }
        ],
        "2023-01-18": [
            {
                "date": "2023-01-18T08:47:42Z",
                "message": "core/txpool: check if initcode size is exceeded (#26504)\n\n* core/txpool: check if initcode size is exceeded\r\n\r\n* core/txpool: move check"
            },
            {
                "date": "2023-01-18T08:46:32Z",
                "message": "les/fetcher : fix requestTimer leak (#26514)\n\nles/fetcher : fix requestTimer leak"
            }
        ],
        "2023-01-17": [
            {
                "date": "2023-01-17T22:29:08Z",
                "message": "eth/filters: fix typo in comment (#26515)"
            },
            {
                "date": "2023-01-17T12:45:35Z",
                "message": "metrics/influxdb: fix time ticker leaks (#26507)"
            }
        ],
        "2023-01-16": [
            {
                "date": "2023-01-16T18:14:21Z",
                "message": "cmd/evm: typo fix in docs (#26506)"
            },
            {
                "date": "2023-01-16T13:24:11Z",
                "message": "build: upgrade -dlgo version to Go 1.19.5 (#26472)"
            },
            {
                "date": "2023-01-16T10:23:24Z",
                "message": "cmd/evm: fix typo in README.md (#26500)"
            },
            {
                "date": "2023-01-16T10:21:41Z",
                "message": "cmd/bootnode, cmd/utils: add 'pmp:<IP>' to --nat flag description (#26381)"
            },
            {
                "date": "2023-01-16T10:00:55Z",
                "message": "swarm: fix outdated link (#26501)"
            },
            {
                "date": "2023-01-16T09:57:35Z",
                "message": "cmd/utils: update Rinkeby deprecation message (#26496)"
            },
            {
                "date": "2023-01-16T08:57:27Z",
                "message": "core/rawdb: fix cornercase shutdown behaviour in freezer (#26485)\n\nThis PR does a few things. \r\nIt fixes a shutdown-order flaw in the chainfreezer. Previously, the chain-freezer would shutdown the freezer backend first, and then signal for the loop to exit. This can lead to a scenario where the freezer tries to fsync closed files, which is an error-conditon that could lead to exit via log.Crit. \r\n\r\nIt also makes the printout more detailed when truncating 'dangling' items, by showing the exact number instead of approximate MB.\r\n\r\nThis PR also adds calls to fsync files before closing them, and also makes the `db inspect` command slightly more robust."
            }
        ],
        "2023-01-15": [
            {
                "date": "2023-01-15T08:23:58Z",
                "message": "readme: fix broken link to installation instructions (#26497)\n\nupdate link to the installation instructions"
            }
        ],
        "2023-01-13": [
            {
                "date": "2023-01-13T14:48:42Z",
                "message": "Use filepath.clean instead of path.clean (#26404)\n\n* internal/flags: use filepath.Clean instead of path.Clean\r\n\r\n* internal/flags: fix windows pipe issue\r\n\r\n* internal/flags: modify test for windows\r\n\r\n* internal/flags: use backticks, fix test"
            },
            {
                "date": "2023-01-13T10:55:50Z",
                "message": "core/rawdb: fsync head data file before closing it (#26490)\n\nThis PR fixes an issue which might result in data lost in freezer.\r\n\r\nWhenever mutation happens in freezer, all data will be written into head data file\r\nand it will be rotated with a new one in case the size of file reaches the threshold.\r\n\r\nTheoretically, the rotated old data file should be fsync'd to prevent data loss.\r\nIn freezer.Sync function, we only fsync: (1) index file (2) meta file and (3) head\r\ndata file. So this PR forcibly fsync the head data file if mutation happens in the\r\nboundary of data file."
            },
            {
                "date": "2023-01-13T07:13:27Z",
                "message": "eth/catalyst: trigger beacon sync directly with provided chain head (#26489)"
            }
        ],
        "2023-01-12": [
            {
                "date": "2023-01-12T10:31:21Z",
                "message": "ethclient/gethclient: ensure getProof keys parameter is not null (#26409)\n\nOther clients do not accept a parameter value of null for this array."
            },
            {
                "date": "2023-01-12T10:19:16Z",
                "message": "eth/downloader: fix cornercase when clean stale beacon headers (#26441)"
            },
            {
                "date": "2023-01-12T10:04:34Z",
                "message": "rpc: fix setting client in DialHTTPWithClient (#26470)"
            },
            {
                "date": "2023-01-12T10:00:08Z",
                "message": "core/vm: enable EIP-3855 (PUSH0) in Shanghai (#26475)"
            }
        ],
        "2023-01-11": [
            {
                "date": "2023-01-11T09:05:47Z",
                "message": "core/vm: implement EIP-3860: Limit and meter initcode (#23847)\n\nImplementation of https://eips.ethereum.org/EIPS/eip-3860, limit and meter initcode. This PR enables EIP-3860 as part of the Shanghai fork. \r\n\r\n\r\nCo-authored-by: lightclient@protonmail.com <lightclient@protonmail.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
            }
        ],
        "2023-01-10": [
            {
                "date": "2023-01-10T17:16:54Z",
                "message": "eth/downloader: move the pivot in beacon sync mode too (#26453)\n\nIn legacy (pre-merge) sync mode, headers were contiguously downloaded from the network and when no more headers were available, we checked every few seconds whether there are 64 new blocks to move the pivot.\r\n\r\nIn beacon (post-merge) sync mode, we don't need to check for new skeleton headers non stop, since those re delivered one by one by the engine API. The missing code snippet from the header fetcher was to actually look at the latest head and move the pivot if it was more than 2*64-8 away. This PR adds the missing movement logic."
            },
            {
                "date": "2023-01-10T14:11:53Z",
                "message": "eth/tracers: use non-threaded tracechain (#24283)\n\nThis makes non-JS tracers execute all block txs on a single goroutine.\r\nIn the previous implementation, we used to prepare every tx pre-state\r\non one goroutine, and then run the transactions again with tracing enabled.\r\nNative tracers are usually faster, so it is faster overall to use their output as\r\nthe pre-state for tracing the next transaction.\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            },
            {
                "date": "2023-01-10T13:24:30Z",
                "message": "core/state: remove notion of fake storage (#24916)\n\nThis PR removes the notion of fakeStorage from the state objects, and instead, for any state modifications that are needed, it simply makes the changes."
            },
            {
                "date": "2023-01-10T13:22:43Z",
                "message": "tests: fix DIFFICULTY error in state executor (#26465)"
            },
            {
                "date": "2023-01-10T13:20:47Z",
                "message": "README.md: add website contribution instructions (#26442)"
            },
            {
                "date": "2023-01-10T08:16:17Z",
                "message": "crypto/bls12381: use worst case scalar for input to G1/G2 mul benchmarks (#26447)\n\n* test\r\n\r\n* crypto/bls12381: use worst case scalar for input to G1/G2 mul benchmarks"
            },
            {
                "date": "2023-01-10T08:04:21Z",
                "message": "cmd/evm: support shanghai in tests + evm t8n (#26458)"
            }
        ],
        "2023-01-09": [
            {
                "date": "2023-01-09T10:55:51Z",
                "message": "Merge pull request #26451 from rjl493456442/fix-beacon-sync-2\n\neth/downloader: fix unexpected skeleton header deletion"
            },
            {
                "date": "2023-01-09T10:12:25Z",
                "message": "eth/downloader: create repro testcase for beacon header loss"
            },
            {
                "date": "2023-01-09T07:07:08Z",
                "message": "eth/downloader: fix unexpected skeleton header deletion"
            }
        ],
        "2023-01-06": [
            {
                "date": "2023-01-06T14:10:12Z",
                "message": "Merge pull request #25878 from MariusVanDerWijden/shanghai-by-time\n\nparams: core: enable shanghai based on timestamps"
            },
            {
                "date": "2023-01-06T13:07:38Z",
                "message": "cmd, core, eth, els, params: disallow setheads below genesis, tweaks"
            },
            {
                "date": "2023-01-06T11:25:58Z",
                "message": "build: upgrade -dlgo version to Go 1.19.4 (#26440)"
            }
        ],
        "2023-01-03": [
            {
                "date": "2023-01-03T11:06:32Z",
                "message": "eth, les: polish forkid a bit, fix races and transition validation"
            },
            {
                "date": "2023-01-03T13:41:40Z",
                "message": "core, eth, trie, light: clean up trie interface (#26388)\n\n* all: cleanup trie interface\r\n\r\n* eth, trie: address comments"
            },
            {
                "date": "2023-01-03T11:37:48Z",
                "message": "cmd/evm: update documentation (#26385)"
            },
            {
                "date": "2023-01-03T11:36:38Z",
                "message": "p2p/discover: add more packet information in logs (#26307)\n\n* p2p/discover: add more packet information in logs\r\n\r\nThis adds more fields to discv5 packet logs. These can be useful when\r\ndebugging multi-packet interactions.\r\n\r\nThe FINDNODE message also gets an additional field, OpID for debugging\r\npurposes. This field is not encoded onto the wire.\r\n\r\nI'm also removing topic system related message types in this change.\r\nThese will come back in the future, where support for them will be\r\nguarded by a config flag.\r\n\r\n* p2p/discover/v5wire: rename 'Total' to 'RespCount'\r\n\r\nThe new name captures the meaning of this field better."
            },
            {
                "date": "2023-01-03T11:10:48Z",
                "message": "common/mclock: add Alarm (#26333)\n\nAlarm is a timer utility that simplifies code where a timer needs to be rescheduled over\r\nand over. Doing this can be tricky with time.Timer or time.AfterFunc because the channel\r\nrequires draining in some cases.\r\n\r\nAlarm is optimized for use cases where items are tracked in a heap according to their expiry\r\ntime, and a goroutine with a for/select loop wants to be woken up whenever the next item expires.\r\nIn this application, the timer needs to be rescheduled when an item is added or removed\r\nfrom the heap. Using a timer naively, these updates will always require synchronization\r\nwith the global runtime timer datastructure to update the timer using Reset. Alarm avoids\r\nthis by tracking the next expiry time and only modifies the timer if it would need to fire earlier\r\nthan already scheduled.\r\n\r\nAs an example use, I have converted p2p.dialScheduler to use Alarm instead of AfterFunc."
            },
            {
                "date": "2023-01-03T10:30:34Z",
                "message": "cmd/devp2p/internal/v4test: add pong validation in bond (#26400)"
            },
            {
                "date": "2023-01-03T09:04:54Z",
                "message": "cmd, internal: update copyright year to 2023 (#26382)\n\n* internal/flags: update copyright year to 2023\r\n\r\n* cmd/geth: update copyright year to 2023"
            },
            {
                "date": "2023-01-03T09:03:44Z",
                "message": "eth/downloader: fix some typos (#26396)"
            }
        ],
        "2022-12-16": [
            {
                "date": "2022-12-16T12:06:22Z",
                "message": "core, les, light: implement timestamp based sethead and genesis rewinds"
            }
        ],
        "2022-12-15": [
            {
                "date": "2022-12-15T07:40:33Z",
                "message": "core, les, params: add timestamp based fork compatibility checks"
            },
            {
                "date": "2022-12-15T12:52:07Z",
                "message": "eth/filters, eth/tracers: add request cancellation checks (#26320)\n\nThis ensures that RPC method handlers will react to a timeout or\r\ncancelled request soon after the event occurs.\r\n\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            }
        ],
        "2022-11-10": [
            {
                "date": "2022-11-10T14:25:32Z",
                "message": "all: implement forkid changes for shanghai"
            },
            {
                "date": "2022-11-10T00:32:02Z",
                "message": "go.mod: update status-im/keycard-go (#26141)"
            }
        ],
        "2022-09-27": [
            {
                "date": "2022-09-27T11:42:57Z",
                "message": "params: core: enable shanghai based on timestamps"
            },
            {
                "date": "2022-09-27T17:23:53Z",
                "message": "ethclient/gethclient: fix bugs in override object encoding (#25616)\n\nThis fixes a bug where contract code would be overridden to empty code (\"0x\")\r\nwhen the Code field of OverrideAccount was left nil. The change also cleans up\r\nthe encoding of overrides to only send necessary fields, and improves documentation.\r\n\r\nFixes #25615\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-09-27T13:49:52Z",
                "message": "eth/downloader: make flakey test less flakey (#25879)"
            },
            {
                "date": "2022-09-27T11:16:54Z",
                "message": "eth: return state error via GetEVM (#25876)\n\n* make vmError more useful\r\n\r\n* fix for review\r\n\r\n* Update api.go\r\n\r\n* revert calling site\r\n\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
            },
            {
                "date": "2022-09-27T08:01:02Z",
                "message": "cmd, core, eth, les, light: track deleted nodes (#25757)\n\n* cmd, core, eth, les, light: track deleted nodes\r\n\r\n* trie: add docs\r\n\r\n* trie: address comments\r\n\r\n* cmd, core, eth, les, light, trie: trie id\r\n\r\n* trie: add tests\r\n\r\n* trie, core: updates\r\n\r\n* trie: fix imports\r\n\r\n* trie: add utility print-method for nodeset\r\n\r\n* trie: import err\r\n\r\n* trie: fix go vet warnings\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2022-12-29": [
            {
                "date": "2022-12-29T12:24:34Z",
                "message": "core: reset txpool on sethead (#26392)\n\nThis change sends a HeadChainEvent when SetHead is invoked. The txpool will then reset the txnoncer on receiving the event."
            }
        ],
        "2022-12-28": [
            {
                "date": "2022-12-28T13:53:43Z",
                "message": "core/state: maintain destruction flag by default (#26371)\n\nThis changes moves the tracking of \"deleted in this block\" out from snap-only domain, so that it happens regardless of whether the execution is snapshot-backed or trie-backed."
            },
            {
                "date": "2022-12-28T08:48:26Z",
                "message": "miner: allow for extradata in post-merge blocks (#26387)\n\n* miner: allow for extradata in post-merge blocks\r\n\r\n* miner: nits\r\n\r\n* miner: remove extradata checks"
            }
        ],
        "2022-12-27": [
            {
                "date": "2022-12-27T07:52:29Z",
                "message": "build: add support for Ubuntu 22.10 (Kinetic Kudu) (#26379)\n\nAdds uploads to Kinetic in Launchpad, and removes the upload for 21.10 impish (not supported since July)"
            }
        ],
        "2022-12-21": [
            {
                "date": "2022-12-21T09:21:21Z",
                "message": "core/state: return error when storage trie can't be opened (#26350)\n\nThis changes the StorageTrie method to return an error when the trie\r\nis not available. It used to return an 'empty trie' in this case, but that's\r\nnot possible anymore under PBSS."
            }
        ],
        "2022-12-20": [
            {
                "date": "2022-12-20T14:56:52Z",
                "message": "tests: update tests (#26314)\n\nThis PR builds on #26299, but also updates the tests to the most recent version, which includes tests regarding TheMerge.\r\n\r\nThis change adds checks to the beacon consensus engine, making it more strict in validating the pre- and post-headers, and not relying on the caller to have already correctly sanitized the headers/blocks."
            }
        ],
        "2022-12-19": [
            {
                "date": "2022-12-19T09:59:12Z",
                "message": "core/rawdb: implement resettable freezer (#26324)\n\nThis PR implements resettable freezer by adding a ResettableFreezer wrapper.\r\n\r\nThe resettable freezer wraps the original freezer in a way that makes it possible to ensure atomic resets. Implementation wise, it relies on the os.Rename and os.RemoveAll to atomically delete the original freezer data and re-create a new one from scratch."
            },
            {
                "date": "2022-12-19T09:56:13Z",
                "message": "trie: wrap deletion in case trie.root is nil (#26365)\n\nThis PR fixes an error in trie commit. If the trie.root is nil, it can be two possible scenarios:\r\n\r\n-  The trie was empty, and no change happens\r\n-  The trie was non-empty and all nodes are dropped\r\n\r\nFor the latter one, we should collect the deletions and apply them into database(e.g. in PBSS)."
            }
        ],
        "2022-12-14": [
            {
                "date": "2022-12-14T09:48:12Z",
                "message": "core: fix typo in blockchain_snapshot_test.go (#26357)\n\ncorrespnding -> corresponding"
            },
            {
                "date": "2022-12-14T09:33:57Z",
                "message": "signer/core: handle gnosis safe problem with missing chain id (#26309)\n\nThis PR adds a check that the safetxhash that we sign corresponds to the one that is expected by the input. If it differs, it tries again with the configured chainid."
            }
        ],
        "2022-12-13": [
            {
                "date": "2022-12-13T13:32:29Z",
                "message": "eth/tracers/native: fix possible crash in prestate tracer (#26351)"
            },
            {
                "date": "2022-12-13T12:54:16Z",
                "message": "core, cmd: fill blockNumber in logs (#26345)\n\n* core, cmd: fill blockNumber in logs\r\n\r\n* Update core/state/statedb.go\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\n* core/types: revert\r\n\r\n* core/state: improve comments\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-12-13T08:33:40Z",
                "message": "core: fix comment about recipient for contract creation (#26349)\n\nA comment suggests that contract creation happens if the recipient of a call is 0x00..00 (\"zero address\") but in fact the sender must be nil. The zero address is a regular valid address that is commonly used as a \"burn\" address."
            }
        ],
        "2022-12-10": [
            {
                "date": "2022-12-10T13:34:43Z",
                "message": "eth/tracers: return proper error from debug_TraceTransaction when tx not found (#26211)\n\nCurrently calling `debug_TraceTransaction` with a transaction hash that doesn't exist returns a confusing error: `genesis is not traceable`. This PR changes the behaviour to instead return an error message saying `transaction not found`\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            }
        ],
        "2022-12-09": [
            {
                "date": "2022-12-09T15:20:46Z",
                "message": "event: add FeedOf[T] (#26310)\n\nThis PR adds a new type event.FeedOf[T], which is like event.Feed but parameterized\r\nover the channel element type. Performance is unchanged, and it still uses reflect. But\r\nunlike Feed, the generic version doesn't need to type-check interface{} arguments.\r\nAll panic cases are gone from the API."
            },
            {
                "date": "2022-12-09T15:14:33Z",
                "message": "core: pass block into collectLogs (#26335)\n\nWhile investigating another issue, I found that all callers of collectLogs have the\r\ncomplete block available. rawdb.ReadReceipts loads the block from the database,\r\nso it is better to use ReadRawReceipts here, and derive the receipt information using\r\nthe block which is already in memory."
            },
            {
                "date": "2022-12-09T12:40:17Z",
                "message": "core,eth: add `debug_setTrieFlushInterval` to change trie flush frequency (#24785)\n\nThis PR makes it possible to modify the flush interval time via RPC. On one extreme, `0s`, it would act as an archive node. If set to `1h`, means that after one hour of effective block processing time, the trie would be flushed. If one block takes 200ms, this means that a flush would occur every `5*3600=18000`  blocks -- however, if the memory size of the cached states grows too large, it will flush sooner. \r\n\r\nEssentially, this makes it possible to configure the node to be more or less \"archive:ish\", and without restarting the node while reconfiguring it."
            }
        ],
        "2022-12-08": [
            {
                "date": "2022-12-08T13:40:43Z",
                "message": "eth, cmd: remove syncTarget from eth config (#26330)\n\n--syncTarget is a feature for development purpose in post-merge world. Previously\r\nit's added into eth.Config. But it turns out that's a stupid idea.\r\n\r\n- syncTarget is a block object, which is hard to be put in config file(large)\r\n- syncTarget is just a dev feature, doesn't make too much sense to add it in config file\r\n\r\nSo I remove it from the eth config object. And it also fixes the #26328"
            }
        ],
        "2022-12-07": [
            {
                "date": "2022-12-07T22:31:47Z",
                "message": "p2p/discover: improve nodesByDistance.push code (#26019)\n\nThis improves readability of function 'push'.\r\n\r\nsort.Search(N, ...) will at most return N when no match, so ix should be compared\r\nwith N. The previous version would compare ix with N+1 in case an additional item\r\nwas appended. No bug resulted from this comparison, but it's not easy to understand\r\nwhy.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-12-07T16:36:54Z",
                "message": "core: fix state flushing for catalyst mode (#26319)\n\nThe gcproc field tracks the amount of time spent processing blocks,\r\nand is used to trigger a state flush to disk when a certain threshold is\r\nreached. After the merge, single block insertion by CL is the most\r\ncommon source of block processing time, but this time was not added\r\ninto gcproc."
            },
            {
                "date": "2022-12-07T15:22:04Z",
                "message": "p2p/nat: handle responses with alternative port in NAT-PMP (#26321)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-12-07T13:02:14Z",
                "message": "graphql, node, rpc: improve HTTP write timeout handling (#25457)\n\nHere we add special handling for sending an error response when the write timeout of the\r\nHTTP server is just about to expire. This is surprisingly difficult to get right, since is\r\nmust be ensured that all output is fully flushed in time, which needs support from\r\nmultiple levels of the RPC handler stack:\r\n\r\nThe timeout response can't use chunked transfer-encoding because there is no way to write\r\nthe final terminating chunk. net/http writes it when the topmost handler returns, but the\r\ntimeout will already be over by the time that happens. We decided to disable chunked\r\nencoding by setting content-length explicitly.\r\n\r\nGzip compression must also be disabled for timeout responses because we don't know the\r\ntrue content-length before compressing all output, i.e. compression would reintroduce\r\nchunked transfer-encoding."
            }
        ],
        "2022-12-06": [
            {
                "date": "2022-12-06T15:25:53Z",
                "message": "cmd/devp2p: add --extaddr flag (#26312)\n\nThe new flag allows configuring an explicit endpoint which is to be\r\nannounced in the DHT. This feature was originally developed for the\r\ndiscv5 wormhole experiment (#25798), but it's useful in other contexts\r\nas well."
            }
        ],
        "2022-12-05": [
            {
                "date": "2022-12-05T17:59:00Z",
                "message": "cmd/geth: fix typo in comment (#26308)"
            },
            {
                "date": "2022-12-05T17:58:32Z",
                "message": "cmd/evm: output stateroot in statetest result (#26297)\n\nThis adds stateRoot as a field in the JSON output."
            },
            {
                "date": "2022-12-05T15:57:47Z",
                "message": "eth/tracers, core/vm: remove `time` from trace output and tracing interface (#26291)\n\nThis removes the 'time' field from logs, as well as from the tracer interface. This change makes the trace output deterministic.  If a tracer needs the time they can measure it themselves. No need for evm to do this.\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            },
            {
                "date": "2022-12-05T12:49:54Z",
                "message": "all: assign zero after resize in implementations of heap.Interface (#26296)\n\nThis changes the Pop method to assign the zero value before\r\nreducing slice size. Doing so ensures the backing array does not\r\nreference removed item values."
            }
        ],
        "2022-12-03": [
            {
                "date": "2022-12-03T20:42:11Z",
                "message": "core: drop legacy receipt types (#26225)\n\nThis PR drops the legacy receipt types, the freezer-migrate command and the startup check. The previous attempt #22852 at this failed because there were users who still had legacy receipts in their db, so it had to be reverted #23247. Since then we added a command to migrate legacy dbs #24028.\r\n\r\nAs of the last hardforks all users either must have done the migration, or used the --ignore-legacy-receipts flag which will stop working now."
            }
        ],
        "2022-12-02": [
            {
                "date": "2022-12-02T11:26:52Z",
                "message": "miner: fix potential goroutine leak in test (#26281)"
            }
        ],
        "2022-11-30": [
            {
                "date": "2022-11-30T21:03:34Z",
                "message": "p2p/discover: add config option for discv5 protocol ID (#26041)\n\nThis option is occasionally useful for advanced uses of the discv5 protocol.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2022-11-28": [
            {
                "date": "2022-11-28T19:27:01Z",
                "message": "console: use default APIs when server doesn't have rpc_modules (#26267)"
            },
            {
                "date": "2022-11-28T13:31:28Z",
                "message": "core, eth, les, tests, trie: abstract node scheme (#25532)\n\nThis PR introduces a node scheme abstraction. The interface is only implemented by `hashScheme` at the moment, but will be extended by `pathScheme` very soon.\r\n\r\nApart from that, a few changes are also included which is worth mentioning:\r\n\r\n-  port the changes in the stacktrie, tracking the path prefix of nodes during commit\r\n-  use ethdb.Database for constructing trie.Database. This is not necessary right now, but it is required for path-based used to open reverse diff freezer"
            },
            {
                "date": "2022-11-28T10:30:05Z",
                "message": "internal/web3ext: fix eth_call in console, part III (#26268)\n\nFixes regression in #26266."
            },
            {
                "date": "2022-11-28T10:15:34Z",
                "message": "internal/web3ext: fix eth.call regression in console (#26266)\n\nFixes a regression from #26265, which made it so that the call only worked if all three parameters were provided."
            },
            {
                "date": "2022-11-28T10:13:41Z",
                "message": "tests: update evm-benchmarks (#26255)\n\ntests: update evm-benchmarks"
            },
            {
                "date": "2022-11-28T10:07:25Z",
                "message": "core: clarify code in forkchoice (#26257)\n\nrefactoring without logic change"
            },
            {
                "date": "2022-11-28T10:03:20Z",
                "message": "internal/web3ext: fix eth_call stateOverrides in console (#26265)\n\nweb3.js's eth_call which we were defaulting to doesn't have the stateOverrides parameter, so this param wasn't working in the console."
            }
        ],
        "2022-11-25": [
            {
                "date": "2022-11-25T15:30:07Z",
                "message": "p2p/nat: use IP.IsPrivate (#26252)"
            },
            {
                "date": "2022-11-25T15:29:38Z",
                "message": "rpc: decrease websocket ping interval (#26253)\n\nThis is to cater for more node providers."
            },
            {
                "date": "2022-11-25T08:13:45Z",
                "message": "signer: enable typed data signing from signer rpc (#26241)\n\nThis PR should makes it easier to sign EIP-712 typed data via the accounts.Wallet API, by using the mimetype for typed data. \r\n\r\nCo-authored-by: nasdf <keenan.nemetz@gmail.com>"
            },
            {
                "date": "2022-11-25T08:10:31Z",
                "message": "core/rawdb: fix freezer validation (#26251)\n\n* core/rawdb: fix freezer validation\r\n\r\n* core/rawdb: address comment"
            }
        ],
        "2022-11-24": [
            {
                "date": "2022-11-24T12:03:38Z",
                "message": "cmd/utils: gofmt"
            },
            {
                "date": "2022-11-24T10:45:20Z",
                "message": "signer/core/apitypes: deep convert types in slice (#26203)"
            },
            {
                "date": "2022-11-24T10:37:58Z",
                "message": "cmd/utils: print warning when --metrics.port set without --metrics.addr (#26248)"
            },
            {
                "date": "2022-11-24T09:50:28Z",
                "message": "core/rawdb: improve freezerTable.Sync (#26245)\n\nWhile investigating #22374, I noticed that the Sync operation of the\r\nfreezer does not take the table lock. It also doesn't call sync for all files\r\nif there is an error with one of them. I doubt this will fix anything, but\r\ndidn't want to drop the fix on the floor either."
            }
        ],
        "2022-11-22": [
            {
                "date": "2022-11-22T21:39:52Z",
                "message": "core: implement EIP-3651, warm coinbase (#25819)\n\nImplements EIP-3651, \"Warm Coinbase\", for Shanghai hardfork. Specification: https://eips.ethereum.org/EIPS/eip-3651."
            }
        ],
        "2022-11-21": [
            {
                "date": "2022-11-21T09:18:18Z",
                "message": "cmd/utils: log path used when checking disk space (#26212)\n\nThis change logs the path checked when encountering low disk space."
            },
            {
                "date": "2022-11-21T08:52:12Z",
                "message": "eth/catalyst: make tests less time-sensitive (#26201)\n\nThis makes a couple of sometimes-failing tests less brittle."
            }
        ],
        "2022-11-17": [
            {
                "date": "2022-11-17T14:33:03Z",
                "message": "ethstats: set readlimit on ethstats server connection (#26207)\n\nThis prevents DoS when connected to a malicious ethstats server."
            },
            {
                "date": "2022-11-17T14:30:53Z",
                "message": "rpc, internal/guide: speed up tests a bit (#26193)\n\nThis removes an RPC test which takes > 90s to execute, and updates the\r\ninternal/guide tests to use lighter scrypt parameters.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-11-17T13:19:03Z",
                "message": "rlp: improve tests for Split functions (#26200)\n\nThis PR improves and extends the tests a bit"
            },
            {
                "date": "2022-11-17T10:15:28Z",
                "message": "all: remove remaining uses of untyped golang-lru (#26194)"
            },
            {
                "date": "2022-11-17T09:54:28Z",
                "message": "Dockerfile: upgrade to Go 1.19 (#26195)"
            },
            {
                "date": "2022-11-17T08:27:48Z",
                "message": "eth/tracers: small refactor for native tracers (#26196)\n\nUse noopTracer as a base for other native tracers to avoid extra boilerplate for unimplemented hooks."
            }
        ],
        "2022-11-16": [
            {
                "date": "2022-11-16T14:22:12Z",
                "message": "rpc: support injecting HTTP headers through context (#26023)\n\nThis adds a way to specify HTTP headers per request.\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-11-16T09:18:52Z",
                "message": "all: implement EIP-1153 transient storage (#26003)\n\nImplements TSTORE and TLOAD as specified by the following EIP:\r\n\r\nhttps://eips.ethereum.org/EIPS/eip-1153\r\nhttps://ethereum-magicians.org/t/eip-1153-transient-storage-opcodes/553\r\n\r\n\r\nCo-authored-by: Sara Reynolds <snreynolds2506@gmail.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2022-11-16T07:44:54Z",
                "message": "ethclient: docs, fix misleading comment (#26189)\n\ncloses #26188"
            }
        ],
        "2022-11-15": [
            {
                "date": "2022-11-15T13:05:16Z",
                "message": "rpc: fix connection tracking set in Server (#26180)\n\nrpc: fix connection tracking in Server\r\n\r\nWhen upgrading to mapset/v2 with generics, the set element type used in\r\nrpc.Server had to be changed to *ServerCodec because ServerCodec is not\r\n'comparable'. While the distinction is technically correct, we know all\r\npossible ServerCodec types, and all of them are comparable. So just use\r\na map instead."
            }
        ],
        "2022-11-14": [
            {
                "date": "2022-11-14T14:41:56Z",
                "message": "common/lru: add generic LRU implementation (#26162)\n\nIt seems there is no fully typed library implementation of an LRU cache.\r\nSo I wrote one. Method names are the same as github.com/hashicorp/golang-lru,\r\nand the new type can be used as a drop-in replacement.\r\n\r\nTwo reasons to do this:\r\n\r\n- It's much easier to understand what a cache is for when the types are right there.\r\n- Performance: the new implementation is slightly faster and performs zero memory\r\n   allocations in Add when the cache is at capacity. Overall, memory usage of the cache\r\n   is much reduced because keys are values are no longer wrapped in interface."
            },
            {
                "date": "2022-11-14T14:16:52Z",
                "message": "all: use github.com/deckarep/golang-set/v2 (generic set) (#26159)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-11-14T13:48:01Z",
                "message": "eth/filters: send rpctransactions in pending-subscription (#26126)\n\nThis PR changes the pending tx subscription to return RPCTransaction types instead of normal Transaction objects. This will fix the inconsistencies with other tx returning API methods (i.e. getTransactionByHash), and also fill in the sender value for the tx.\r\n\r\nco-authored by @s1na"
            },
            {
                "date": "2022-11-14T11:38:10Z",
                "message": "accounts/keystore: replace inotify with fsnotify (#26176)"
            }
        ],
        "2022-11-11": [
            {
                "date": "2022-11-11T18:48:36Z",
                "message": "common/lru: fix race in lru (#26164)\n\nThis fixes a problem in the SizeConstrainedLRU. The SCLRU uses an underlying simple lru which is not thread safe.\r\nDuring the Get operation, the recentness of the accessed item is updated, so it is not a pure read-operation. Therefore, the mutex we need is a full mutex, not RLock.\r\n\r\nThis PR changes the mutex to be a regular Mutex, instead of RWMutex, so a reviewer can at a glance see that all affected locations are fixed."
            },
            {
                "date": "2022-11-11T12:22:54Z",
                "message": "eth, catalyst: fix flaky tests (#26153)\n\n* eth/catalyst: fix time-dependent (flaky) test\r\n\r\n* eth: increase timeout on TestTransactionPropagation"
            },
            {
                "date": "2022-11-11T12:16:13Z",
                "message": "metrics: improve reading Go runtime metrics (#25886)\n\nThis changes how we read performance metrics from the Go runtime. Instead\r\nof using runtime.ReadMemStats, we now rely on the API provided by package\r\nruntime/metrics.\r\n\r\nruntime/metrics provides more accurate information. For example, the new\r\ninterface has better reporting of memory use. In my testing, the reported\r\nvalue of held memory more accurately reflects the usage reported by the OS.\r\n\r\nThe semantics of metrics system/memory/allocs and system/memory/frees have\r\nchanged to report amounts in bytes. ReadMemStats only reported the count of\r\nallocations in number-of-objects. This is imprecise: 'tiny objects' are not\r\ncounted because the runtime allocates them in batches; and certain\r\nimprovements in allocation behavior, such as struct size optimizations,\r\nwill be less visible when the number of allocs doesn't change.\r\n\r\nChanging allocation reports to be in bytes makes it appear in graphs that\r\nlots more is being allocated. I don't think that's a problem because this\r\nmetric is primarily interesting for geth developers.\r\n\r\nThe metric system/memory/pauses has been changed to report statistical\r\nvalues from the histogram provided by the runtime. Its name in influxdb has\r\nchanged from geth.system/memory/pauses.meter to\r\ngeth.system/memory/pauses.histogram.\r\n\r\nWe also have a new histogram metric, system/cpu/schedlatency, reporting the\r\nGo scheduler latency."
            },
            {
                "date": "2022-11-11T12:11:24Z",
                "message": "go.mod: minimum Go version 1.18 (#26160)\n\nThis will allow use of generics and other new standard library APIs\r\nsuch as package net/netip."
            },
            {
                "date": "2022-11-11T10:33:18Z",
                "message": "internal/debug: add --log.file option (#26149)\n\nThis adds an option to direct log output to a file. This feature has been\r\nrequested a lot. It's sometimes useful to have this available when running\r\ngeth in an environment that doesn't easily allow redirecting the output.\r\n\r\nNotably, there is no support for log rotation with this change. The --log.file option\r\nopens the file once on startup and then keeps writing to the file handle. \r\nThis can become an issue when external log rotation tools are involved, so it's\r\nbest not to use them with this option for now."
            }
        ],
        "2022-11-09": [
            {
                "date": "2022-11-09T08:49:42Z",
                "message": "eth/filters: fix failing benchmark-test (#26144)"
            },
            {
                "date": "2022-11-09T08:34:42Z",
                "message": "cmd/evm: slight change in how t8n handles coinbase pre eip-158 (#26139)\n\nThis PR fixes a subtle bug in t8n. After this PR, t8n behaves like our state-test runner in certain pre-EIP-158 scenarios"
            },
            {
                "date": "2022-11-09T07:06:02Z",
                "message": "core/state: replace fastcache code cache with gc-friendly structure (#26092)\n\nThis PR replaces fastcache with a pretty simple LRU which does not require explicit closing."
            },
            {
                "date": "2022-11-09T06:52:13Z",
                "message": "core/vm: deepcopy jumptable when enabling extra eips (#26137)\n\nWhen the interpreter is configured to use extra-eips, this change makes it so that all the opcodes are deep-copied, to prevent accidental modification of the 'base' jumptable. \r\n\r\nCloses: #26136\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2022-11-08": [
            {
                "date": "2022-11-08T20:17:12Z",
                "message": "cmd/clef: only print first N accounts on startup (#26128)\n\nPR #26082 added account listing to OnSignerStartup but did not consider the case where a user has a large number of accounts which would be annoying to display.\r\n\r\nThis PR updates showAccounts() so that if there are more than 20 accounts available the user sees the first 20 displayed in the console followed by: First 20 accounts listed (N more available).\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-11-08T12:14:14Z",
                "message": "graphql: add query timeout (#26116)\n\nThis PR adds a 60 second timeout to graphql queries."
            },
            {
                "date": "2022-11-08T11:15:32Z",
                "message": "cmd/devp2p: add more nodekey commands (#26129)\n\nThis adds new commands to turn a node key file into signed ENR / node ID."
            },
            {
                "date": "2022-11-08T11:14:11Z",
                "message": "common/types: add `Address.Big` (#26132)\n\nMany of the other types have a function to convert the type to a big.Int,\r\nbut Address was missing this function.\r\n\r\nIt is useful to be able to turn an Address into a big.Int when doing\r\nEVM-like computations natively in Go. Sometimes a Solidity address\r\ntype is casted to a uint256 and having a Big method on the Address\r\ntype makes this easy."
            },
            {
                "date": "2022-11-08T11:12:36Z",
                "message": "p2p/enode: implement per-source timeout in FairMix (#25962)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-11-08T09:16:52Z",
                "message": "eth/tracers: add multiplexing tracer (#26086)\n\n* eth/tracers: add native multiplexing tracer\r\n\r\n* minor improv callTracer\r\n\r\n* mv evm cancellation to api"
            }
        ],
        "2022-11-07": [
            {
                "date": "2022-11-07T21:46:21Z",
                "message": "cmd/devp2p/internal/v4test: ignore FINDNODE in BondThenPingWithWrongFrom (#26085)\n\nThis fixes a race in the test.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-11-07T19:47:04Z",
                "message": "cmd/devp2p/internal/ethtest: add support for eth/68 (#26078)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-11-07T18:19:02Z",
                "message": "p2p/discover: improve discv5 NODES response packing (#26033)\n\nInstead of using a limit of three nodes per message, we can pack more nodes\r\ninto each message based on ENR size. In my testing, this halves the number\r\nof sent NODES messages, because ENR size is usually < 300 bytes.\r\n\r\nThis also adds RLP helper functions that compute the encoded size of\r\n[]byte and string.\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-11-07T15:41:36Z",
                "message": "cmd/clef: list accounts at startup (#26082)\n\nReports accounts known to Clef during startup, after master seed is provided by the user."
            },
            {
                "date": "2022-11-07T14:30:54Z",
                "message": "eth/catalyst, miner: deduplicate work + show payload id (#26115)\n\nThis PR now also includes a fix to the problem of mult-routines building blocks on the same input. This PR works as before with regards to stopping the work, but it just will not spin up a second routine if one is already building. So if the CL does N calls to FCU+buildblock, and N calls to GetPayload, only the first of each will do something, the other calls will be mostly no-ops.\r\n\r\nThis PR also adds printout of the payload id into the logs."
            },
            {
                "date": "2022-11-07T12:58:00Z",
                "message": "accounts/abi: properly quote untrusted data in error message (#26110)\n\n* abi: Format data as hex-string instead of string(data)\r\n\r\n* Update accounts/abi/abi.go\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2022-11-06": [
            {
                "date": "2022-11-06T12:02:49Z",
                "message": "cmd/clef: add importraw feature to clef (#26058)\n\nThis adds a subcommand that imports a raw secp256k1 key\r\ninto the keystore managed by clef."
            }
        ],
        "2022-11-04": [
            {
                "date": "2022-11-04T21:03:34Z",
                "message": "accounts/abi.bind: don't fetch head in transact unless required (#25988)\n\nIf GasFeeCap and GasTipCap are specified, we don't need to retrieve the head block for constructing a transaction"
            },
            {
                "date": "2022-11-04T15:28:12Z",
                "message": "signer/core/apitypes: support more input types for eip-712 encoding (#26074)\n\n* apitypes: synchronize handling of types\r\n\r\n* signer/core/apitypes: improve array check\r\n\r\n* apitypes: add a test for big.Int -> int32\r\n\r\n* signer/core/apitypes: Add a test for parsing addresses from [20]byte, []byte and string\r\n\r\n* signer/core/apitypes: add some testcases\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-11-04T15:27:15Z",
                "message": " params: make eip1559 params non-global (#25994)\n\nThis PR changes geth to read the eip1559 params from the chain config instead of the globals.\r\n\r\nThis way the parameters may be changed by forking the chain config code, without creating a large diff throughout the past and future usages of the parameters.\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2022-11-03": [
            {
                "date": "2022-11-03T14:18:28Z",
                "message": "miner: display change in fees, change recommit period (#26097)\n\n* miner: add logs for displaying fees change\r\n\r\n* miner: simplify feesInEther calculation\r\n\r\n* miner: fix lock\r\n\r\n* miner: change to default recommit to 2 seconds"
            },
            {
                "date": "2022-11-03T07:48:13Z",
                "message": "crypto/bls12381: docs - fix broken links to references (#26095)"
            }
        ],
        "2022-11-02": [
            {
                "date": "2022-11-02T18:02:32Z",
                "message": "cmd/clef: add `list-accounts` and `list-wallets` to CLI (#26080)\n\nThis commit adds support for two new commands to clef, making it possible to list accounts / wallets from the command-line-interface. \r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-11-02T14:29:33Z",
                "message": "rpc: handle wrong HTTP batch response length (#26064)"
            },
            {
                "date": "2022-11-02T13:50:48Z",
                "message": "rlp: add more tests for nil pointer / optional field encoding (#26077)"
            },
            {
                "date": "2022-11-02T13:50:07Z",
                "message": "p2p/discover: fix handling of distance 256 in lookupDistances (#26087)\n\nNoticed that lookupDistances for FINDNODE requests didn't consider 256 a valid\r\ndistance. This is actually part of the example in the comment above the\r\nfunction, surprised that wasn't tested before."
            },
            {
                "date": "2022-11-02T11:57:09Z",
                "message": "miner: fail early if core.NewBlockChain fails (#26079)\n\ndon't ignore errors returned by core.NewBlockChain when initializing tests"
            },
            {
                "date": "2022-11-02T09:32:20Z",
                "message": "miner, eth: implement recommit mechanism for payload building (#25836)\n\n* miner, eth: implement recommit for payload building\r\n\r\n* miner: address comments from marius"
            }
        ],
        "2022-11-01": [
            {
                "date": "2022-11-01T13:50:03Z",
                "message": "docs/postmortems: remove wrong parentheses (#26066)\n\nRemoved parentheses in line 71 because line 80 doesn't have them either."
            },
            {
                "date": "2022-11-01T13:39:39Z",
                "message": "consensus/ethash: fix typo (#26016)\n\nfix typo"
            },
            {
                "date": "2022-11-01T13:28:40Z",
                "message": "accounts/abi: return error on fixed bytes with size larger than 32 bytes (#26075)\n\n* fixed bytes with size larger than 32 bytes is not allowed\r\n\r\n* add testcase"
            },
            {
                "date": "2022-11-01T13:25:44Z",
                "message": "eth/tracers: prestateTracer - exclude unchanged storage slots in diffMode (#25944)\n\nFixes #25943"
            },
            {
                "date": "2022-11-01T11:03:26Z",
                "message": "eth/tracers: add withLog to callTracer (#25991)\n\nIn some cases, it is desirable to capture what is triggered by each trace, when using the `callTracer`. For example: call `USDT.transfer` will trigger a `Transfer(from, to, value)` event.\r\n\r\nThis PR adds the option to capture logs to the call tracer, by specifying `{\"withLog\": true}` in the tracerconfig. \r\nAny logs belonging to failed/reverted call-scopes are removed from the output, to prevent interpretation mistakes.\r\n\r\nSigned-off-by: Delweng <delweng@gmail.com>\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            }
        ],
        "2022-10-31": [
            {
                "date": "2022-10-31T14:23:26Z",
                "message": "eth: implement eth/68 (#25980)\n\n* eth: implement eth/68\r\n\r\n* eth/protocols/eth: added tx size to announcement\r\n\r\n* eth/protocols/eth: check equal lengths on receiving announcement\r\n\r\n* eth/protocols/eth: add +1 to tx size because of the type byte\r\n\r\n* eth: happy lint, add eth68 tests, enable eth68\r\n\r\n* eth: various nitpick fixes on eth/68\r\n\r\n* eth/protocols/eth: fix announced tx size wrt type byte\r\n\r\nCo-authored-by: MariusVanDerWijden <m.vanderwijden@live.de>\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2022-10-31T08:50:21Z",
                "message": "Fix trace call for inner reverts (#25971)\n\nInner call reverts will now return the reason similar to the top-level call. Separately, if top-level call is of type CREATE and it fails, its `to` field will now be cleared to `0x00...00` instead of being set to the created address."
            },
            {
                "date": "2022-10-31T08:42:25Z",
                "message": "rpc: update docstring (#26072)\n\nCo-authored-by: seven <seven@nodereal.io>"
            }
        ],
        "2022-10-28": [
            {
                "date": "2022-10-28T12:48:08Z",
                "message": "cmd, eth: implement full-sync tester (#26035)\n\nThis PR adds a parameter to startup, --synctarget. The synctarget flag is a developer-flag, that can be useful in some scenarios as a replacement for a CL node. It defines a fixed block sync target:\r\n\r\ngeth --syncmode=full --synctarget=./block_15816882.hex_rlp \r\n\r\nThe --synctarget is only made available during syncmode=full"
            },
            {
                "date": "2022-10-28T10:28:29Z",
                "message": "eth/tracers: fix gasUsed for native and JS tracers (#26048)\n\n* eth/tracers: fix gasUsed in call tracer\r\n\r\n* fix js tracers gasUsed\r\n\r\n* fix legacy prestate tracer\r\n\r\n* fix restGas in test\r\n\r\n* drop intrinsicGas field from js tracers"
            },
            {
                "date": "2022-10-28T10:25:37Z",
                "message": "cmd/evm: calc base fee if parent data is present (#26051)\n\nCurrently, in order to chain together sequential valid t8n transitions the caller must manually calculate the block base fee. This PR adds support for the necessary parent fee market data to calculate the base fee for the current transition.\r\n\r\nConcretely, env is extended to accept the following:\r\n\r\n    parentBaseFee\r\n    parentGasUsed\r\n    parentGasLimit\r\n\r\nExample usage can be found in ./cmd/evm/testdata/25.\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-10-28T08:23:49Z",
                "message": "core/rawdb: refactor db inspector for extending multiple ancient store (#25896)\n\nThis PR ports a few changes from PBSS:\r\n\r\n- Fix the snapshot generator waiter in case the generation is not even initialized\r\n- Refactor db inspector for ancient store"
            }
        ],
        "2022-10-27": [
            {
                "date": "2022-10-27T13:25:01Z",
                "message": "eth/filters: change filter block to be by-ref (#26054)\n\nThis PR changes the block field in the filter to be a pointer, to disambiguate between empty hash and no hash"
            },
            {
                "date": "2022-10-27T08:39:01Z",
                "message": "core/vm: use optimized bigint (#26021)"
            },
            {
                "date": "2022-10-27T08:23:11Z",
                "message": "build: make ios work again (#26052)"
            },
            {
                "date": "2022-10-27T08:06:28Z",
                "message": "accounts/scwallet: fix keycard data signing error (#25331)\n\naccounts/scwallet: fix keycard data signing"
            },
            {
                "date": "2022-10-27T08:01:12Z",
                "message": "Merge pull request #26049 from sandakersmann/master\n\nbuild: upgrade -dlgo version to Go 1.19.2"
            }
        ],
        "2022-10-26": [
            {
                "date": "2022-10-26T12:49:12Z",
                "message": "build: upgrade -dlgo version to Go 1.19.2"
            },
            {
                "date": "2022-10-26T12:23:07Z",
                "message": "core, eth: for types with accurate size calcs, return uint64, not float (#26046)\n\n* core, eth: for types with accurate size calcs, return uint64, not float\r\n\r\n* core/types: proper tx size tests\r\n\r\n* core/types: extend tx size test with decoded sizes, fix error\r\n\r\n* core/txpool: fix linter\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-10-26T10:51:46Z",
                "message": "Merge pull request #26044 from karalabe/rename-typed-tx-files\n\ncore/types: rename tx files to group them better together"
            },
            {
                "date": "2022-10-26T10:30:51Z",
                "message": "core/types: rename tx files to group them better together"
            }
        ],
        "2022-10-24": [
            {
                "date": "2022-10-24T17:30:33Z",
                "message": "Merge pull request #26038 from karalabe/split-txpool\n\nall: refactor txpool into it's own package in prep for 4844"
            },
            {
                "date": "2022-10-24T13:13:55Z",
                "message": "all: refactor txpool into it's own package in prep for 4844"
            }
        ],
        "2022-10-21": [
            {
                "date": "2022-10-21T15:55:15Z",
                "message": "eth/tracers: simplify test framework (#25973)\n\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            },
            {
                "date": "2022-10-21T09:48:53Z",
                "message": "eth/tracers: fix the issue prestate missing existing contract state (#25996)\n\nThe prestate tracer did not report accounts that existed at a given address prior to a contract being created at that address.\r\n\r\nSigned-off-by: Delweng <delweng@gmail.com>\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            }
        ],
        "2022-10-20": [
            {
                "date": "2022-10-20T10:56:12Z",
                "message": "internal/ethapi, accounts/abi/backends: use error defined in core (#26012)\n\nCo-authored-by: seven <seven@nodereal.io>"
            }
        ],
        "2022-10-19": [
            {
                "date": "2022-10-19T19:15:43Z",
                "message": "core/rawdb: open meta file in read only mode (#26009)"
            },
            {
                "date": "2022-10-19T07:53:09Z",
                "message": "core/rawdb: refactor db key prefix (#26000)\n\nCo-authored-by: seven <seven@nodereal.io>"
            },
            {
                "date": "2022-10-19T06:20:39Z",
                "message": "cmd/utils: enable snapshot generation in import-mode (#25990)\n\nThis PR fixes a regression causing snapshots not to be generated in \"geth --import\" mode.  It also fixes the geth export command to be truly readonly, and adds a new test for geth export."
            }
        ],
        "2022-10-18": [
            {
                "date": "2022-10-18T13:42:16Z",
                "message": "common/math, tests/fuzzers: use big.Int clone (#26006)\n\n* common/math, tests/fuzzers: use big.Int clone\r\n\r\n* common/math: license"
            }
        ],
        "2022-10-12": [
            {
                "date": "2022-10-12T18:08:36Z",
                "message": "Revert \"go.mod: upgrade github.com/dop251/goja\" (#25975)\n\nRevert \"go.mod: upgrade github.com/dop251/goja (#25955)\"\r\n\r\nThis reverts commit 9207e348f0d3c2bd2b65f6c52b20a37de76350ae."
            },
            {
                "date": "2022-10-12T10:50:01Z",
                "message": "eth/tracers: fix the issue of panic in prestate with diffmode (#25957)\n\nIn some cases, inner contract creation may not be successful, and an inner contract was not created. This PR fixes a crash that could occur when doing tracing in such situations."
            },
            {
                "date": "2022-10-12T10:03:45Z",
                "message": "go.mod: upgrade github.com/dop251/goja (#25955)\n\nThis upgrade pulls in a fix to handling of 'continue' in loops."
            },
            {
                "date": "2022-10-12T09:54:52Z",
                "message": "eth/filters, ethclient/gethclient: add fullTx option to pending tx filter (#25186)\n\nThis PR adds a way to subscribe to the _full_ pending transactions, as opposed to just being notified about hashes. \r\n\r\nIn use cases where client subscribes to newPendingTransactions and gets txhashes only to then request the actual transaction, the caller can now shortcut that flow and obtain the transactions directly. \r\n\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-10-12T09:15:19Z",
                "message": "eth/protocols/eth: fix typo in log message (#25969)"
            },
            {
                "date": "2022-10-12T08:53:01Z",
                "message": "accounts/keystore: faster tests (#25827)\n\nThis PR removes some optimistic tests -- a'la \"do something,\r\nwait a while, and hope it has trickled through and continue\" -- and\r\ninstead uses some introspection to ensure that prerequisites are met."
            },
            {
                "date": "2022-10-12T08:50:12Z",
                "message": "node: drop support for static & trusted node list files (#25610)\n\nThis changes the node setup to ignore datadir files\r\n\r\n    static-nodes.json\r\n    trusted-nodes.json\r\n\r\nWhen these files are present, it an error will be printed to the log."
            },
            {
                "date": "2022-10-12T08:39:21Z",
                "message": "tests/fuzzers/modexp: gofmt (#25972)"
            },
            {
                "date": "2022-10-12T08:34:52Z",
                "message": "common/math: optimized modexp (+ fuzzer) (#25525)\n\nThis adds a \r\n* core/vm, tests: optimized modexp + fuzzer\r\n\r\n* common/math: modexp optimizations\r\n\r\n* core/vm: special case base 1 in big modexp\r\n\r\n* core/vm: disable fastexp"
            },
            {
                "date": "2022-10-12T08:27:39Z",
                "message": "core/types: add more context around ErrInvalidChainID (#25367)\n\nThis changes the error message for mismatching chain ID to show\r\nthe given and expected value. Callers expecting this error must be\r\nchanged to use errors.Is."
            },
            {
                "date": "2022-10-12T07:35:09Z",
                "message": "core/rawdb: provide more info on 'gap in the chain' error (#25938)"
            }
        ],
        "2022-10-11": [
            {
                "date": "2022-10-11T07:37:33Z",
                "message": "cmd/geth, core: fix typo in comment (#25954)\n\n* fix typo on comment\r\n\r\n* typo \"can't accept\""
            },
            {
                "date": "2022-10-11T07:37:00Z",
                "message": "all: fix spelling mistakes (#25961)"
            },
            {
                "date": "2022-10-11T07:31:32Z",
                "message": "accounts/usbwallet: support Ledger Nano S Plus and FTS (#25933)\n\n* usbwallet support Ledger Nano S Plus\r\n\r\n* accounts/usbwallet: add definitions + ref to ledger docs\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2022-10-06": [
            {
                "date": "2022-10-06T17:59:23Z",
                "message": "cmd/geth: fix help output issues (#25941)\n\nThis update resolves an issue where StringSliceFlag would not be\r\nrendered correctly in help output + mention that -H can be used multiple times\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-10-06T12:43:55Z",
                "message": "eth/filters: fix for eth_getLogs failing with finalized- and safe tag  (#25922)\n\nPrior to this change, f.begin (and possibly end) stay negative, leading to strange results later in the code. With this change, filters using \"safe\" and \"finalized\" block produce results consistent w/ the overall behavior of this RPC method.\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-10-06T12:01:04Z",
                "message": "node: prevent exposing engine API on unauthenticated endpoint (#25939)\n\n* node: prevent exposing engine API on unauthenticated endpoint\r\n\r\n* node: improve RPC setup"
            },
            {
                "date": "2022-10-06T11:39:20Z",
                "message": "core, ethclient/gethclient: improve flaky tests (#25918)\n\n* ethclient/gethclient: improve time-sensitive flaky test\r\n\r\n* eth/catalyst: fix (?) flaky test\r\n\r\n* core: stop blockchains in tests after use\r\n\r\n* core: fix dangling blockchain instances\r\n\r\n* core: rm whitespace\r\n\r\n* eth/gasprice, eth/tracers, consensus/clique: stop dangling blockchains in tests\r\n\r\n* all: address review concerns\r\n\r\n* core: goimports\r\n\r\n* eth/catalyst: fix another time-sensitive test\r\n\r\n* consensus/clique: add snapshot test run function\r\n\r\n* core: rename stop() to stopWithoutSaving()\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-10-06T09:41:07Z",
                "message": "core/bloombits: speed up windows-test (#25844)\n\ncore/bloombits: remove micro-sleep"
            },
            {
                "date": "2022-10-06T08:48:04Z",
                "message": "eth/traces: add state limit (#25812)\n\nThis PR introduces a new mechanism in chain tracer for preventing creating too many trace states.\r\n\r\nThe workflow of chain tracer can be divided into several parts:\r\n\r\n- state creator generates trace state in a thread\r\n- state tracer retrieves the trace state and applies the tracing on top in another thread\r\n- state collector gathers all result from state tracer and stream to users\r\n\r\nIt's basically a producer-consumer model here, while if we imagine that the state producer generates states too fast, then it will lead to accumulate lots of unused states in memory. Even worse, in path-based state scheme it will only keep the latest 128 states in memory, and the newly generated state will invalidate the oldest one by marking it as stale.\r\n\r\nThe solution for fixing it is to limit the speed of state generation. If there are over 128 states un-consumed in memory, then the creation will be paused until the states are be consumed properly."
            },
            {
                "date": "2022-10-06T00:05:43Z",
                "message": "eth/tracers: add diffMode to prestateTracer (#25422)\n\nBackwards compatibility warning: The result will from now on omit empty fields instead\r\nof including a zero value (e.g. no more `balance: '0x'`).\r\n\r\nThe prestateTracer will now take an option `diffMode: bool`. In this mode\r\nthe tracer will output the pre state and post data for the modified parts of state.\r\nRead-only accesses will be completely omitted. Creations (be it account or slot)\r\nwill be signified by omission in the `pre` list and inclusion in `post`. Whereas\r\ndeletion (be it account or slot) will be signified by inclusion in `pre` and omission\r\nin `post` list.\r\n\r\nSigned-off-by: Delweng <delweng@gmail.com>"
            }
        ],
        "2022-10-04": [
            {
                "date": "2022-10-04T16:09:05Z",
                "message": "core: fix linter complaint (#25927)"
            },
            {
                "date": "2022-10-04T10:30:00Z",
                "message": "Merge pull request #25924 from holiman/comments_fix\n\nall: fix docstrings"
            },
            {
                "date": "2022-10-04T06:44:05Z",
                "message": "all: fix docstrings"
            }
        ],
        "2022-10-03": [
            {
                "date": "2022-10-03T12:10:00Z",
                "message": "eth, miner: add timeout for building sealing block (#25407)\n\n* eth, miner: add timeout for building sealing block\r\n\r\n* eth, cmd, miner: add newpayloadtimeout flag\r\n\r\n* eth, miner, cmd: address comments\r\n\r\n* eth, miner: minor fixes\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-10-03T11:37:17Z",
                "message": "eth/protocols/snap: serve snap requests when possible (#25644)\n\nThis PR makes it so that the snap server responds to trie heal requests when possible, even if the snapshot does not exist. The idea being that it might prolong the lifetime of a state root, so we don't have to pivot quite as often."
            },
            {
                "date": "2022-10-03T10:56:21Z",
                "message": "core/types: add a testcase to TestLegacyReceiptDecoding (#25909)\n\nadd a testcase to TestLegacyReceiptDecoding"
            }
        ],
        "2022-09-30": [
            {
                "date": "2022-09-30T11:50:25Z",
                "message": "cmd/geth, cmd/utils: geth attach with custom headers (#25829)\n\nThis PR makes it possible to set custom headers, in particular for two scenarios: \r\n\r\n- geth attach\r\n- geth commands which can use --remotedb, e..g geth db inspect\r\n\r\nThe ability to use custom headers is typically useful for connecting to cloud-apis, e.g. providing an infura- or alchemy key, or for that matter access-keys for environments behind cloudflare.  \r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2022-09-29": [
            {
                "date": "2022-09-29T18:16:36Z",
                "message": "internal/flags: fix issue with stringslice migration (#25830)\n\nThis fixes a cornercase bug where the flag migration would mess\r\nup the value of StringSlice flags."
            },
            {
                "date": "2022-09-29T09:44:22Z",
                "message": "accounts/abi/bind: parse ABI only once on bind (#25574)\n\n* accounts/abi/bind: parse ABI once on bind\r\n\r\n* accounts/abi/bind: suppress 'imported and not used' error for abi package"
            },
            {
                "date": "2022-09-29T09:36:07Z",
                "message": "eth/tracers: remove revertReasonTracer, add revert reason to callTracer (#25508)\n\n* eth/tracers: add revertReason to callTracer\r\n\r\n* update callframe gen json\r\n\r\n* add revertal to calltrace test"
            },
            {
                "date": "2022-09-29T08:47:12Z",
                "message": "accounts/abi: return toGoType error immediately (#25565)"
            },
            {
                "date": "2022-09-29T07:50:24Z",
                "message": "core: rework tx indexer (#25723)\n\nThis PR reworks tx indexer a bit. Compared to the original version, one scenario is no longer handled - upgrading  from legacy geth without indexer support. \r\n\r\nThe tx indexer was introduced in 2020 and have been present through hardforks, so it can be assumed that all Geth nodes have tx indexer already. So we can simplify the tx indexer logic a bit:\r\n\r\n-    If the tail flag is not present, it means node is just initialized may or may not with an ancient store attached. In this case all blocks are regarded as unindexed\r\n-   If the tail flag is present, it means blocks below tail are unindexed, blocks above tail are indexed\r\n\r\nThis change also address some weird cornercases that could make the indexer not work after a crash."
            }
        ],
        "2022-09-28": [
            {
                "date": "2022-09-28T16:55:44Z",
                "message": "internal/ethapi: handle odd length hex in decodeHash (#25883)\n\nThis change adds zero-padding (prefix) of odd nibbles in the decodeHash function. \r\n\r\nCo-authored-by: ty <ty@oncoder.com>"
            },
            {
                "date": "2022-09-28T15:52:39Z",
                "message": "eth/tracers: fix a bug in prestateTracer (#25884)"
            },
            {
                "date": "2022-09-28T11:21:54Z",
                "message": "core/vm: minor trivial clean up (#25880)\n\n* dropped `vm.keccakState` for `crypto.KeccakState`\r\n\r\n* cleaned up `OpCode.IsPush()`"
            },
            {
                "date": "2022-09-28T08:39:20Z",
                "message": "tests: report mgas/s metric in evm benchmarks (#25700)\n\n* test(state): report mgas/s metric in EVM benchmark\r\n\r\n* revert testdata submodule update\r\n\r\n* aggregate mgas/s results\r\n\r\n* calculate elapsed time better\r\n\r\n* tests: benchmarks - handle access list + take refund into account\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-09-28T07:55:07Z",
                "message": "accounts/abi/bind/backends: fix AdjustTime to respect Fork (#25225)"
            },
            {
                "date": "2022-09-28T06:08:18Z",
                "message": "trie, eth/protocols/snap: less tiny db-writes during trie-healing (#25681)\n\nThis PR prevent making tiny writes during state healing, by only performing the batch-write if the accumulated data is large enough to be meaningful."
            }
        ],
        "2022-09-26": [
            {
                "date": "2022-09-26T16:35:44Z",
                "message": "eth/tracers: use gencodec for native tracers (#25637)\n\nThe call tracer and prestate tracer store data JSON-encoded in memory. In order to support alternative encodings (specifically RLP), it's better to keep data a native format during tracing. This PR does marshalling at the end, using gencodec.\r\n\r\nOBS! \r\nThis PR changes the call tracer result slightly:\r\n\r\n-  Order of type and value fields are changed (should not matter). \r\n-  Output fields are completely omitted when they're empty (no more output: \"0x\"). Previously, this was only _sometimes_ omitted (e.g. when call ended in a non-revert error) and otherwise 0x when the output was actually empty."
            },
            {
                "date": "2022-09-26T14:00:56Z",
                "message": "tests: fix state test error checking (#25702)\n\nSome tests define an 'expectException' error but the tests runner does not check for conditions where this test value is filled (error expected) but in which no error is returned by the test runner.\r\n\r\nAn example of this scenario is GeneralStateTests/stTransactionTest/HighGasPrice.json, which expects a 'TR_NoFunds' error, but the test runner does not return any error.\r\n\r\nSigned-off-by: meows <b5c6@protonmail.com>"
            },
            {
                "date": "2022-09-26T11:55:18Z",
                "message": "cmd/geth: make dumpgenesis load genesis datadir if it exists (#25135)\n\n`geth dumpgenesis` currently does not respect the content of the data directory. Instead, it outputs the genesis block created by command-line flags. This PR fixes it to read the genesis from the database, if the database already exists.\r\n\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-09-26T11:20:38Z",
                "message": "core/vm: better handle error on eip activation check (#25131)\n\n* core/vm: correct logic for eip check of NewEVMInterpreter\r\n\r\n* refactor"
            },
            {
                "date": "2022-09-26T10:33:21Z",
                "message": "eth/downloader, les/downloader: fix subtle flaw in queue delivery (#25861)\n\n* fix queue.deliver\r\n\r\n* les/downloader: fix queue.deliver\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-09-26T09:34:15Z",
                "message": "core: fix datarace in txpool, fixes #25870 and #25869  (#25872)\n\ncore: fix datarace in txpool pendingnoce, fixes #25870"
            },
            {
                "date": "2022-09-26T09:30:50Z",
                "message": "cmd/faucet: fix readme typos (#25867)\n\n* Fix: typos\r\n\r\nFix: typos\r\n\r\n* Undo change\r\n\r\nUndo change"
            },
            {
                "date": "2022-09-26T07:56:45Z",
                "message": "eth/tracers: pad memory slice on OOB case (#25213)\n\n* eth/tracers: pad memory slice on oob case\r\n\r\n* eth/tracers/js: fix testfailure due to err msg capitalization\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-09-26T07:10:39Z",
                "message": "core/types: improve accuracy of header.Size() (#25859)\n\nThe header.Size() method did not take the basefee into account."
            }
        ],
        "2022-09-23": [
            {
                "date": "2022-09-23T20:32:10Z",
                "message": "cmd/puppeth, cmd/utils: finalize removal of gasTarget flag (#24370)\n\nThis PR fully removes the --miner.gastarget flag, as previously it was only hidden from the geth --help command, but could still be used."
            },
            {
                "date": "2022-09-23T18:20:36Z",
                "message": "all: clean up the configs for pruner and snapshotter (#22396)\n\nThis PR cleans up the configurations for pruner and snapshotter by passing a config struct.\r\n\r\nAnd also, this PR disables the snapshot background generation if the chain is opened in \"read-only\" mode. The read-only mode is necessary in some cases. For example, we have a list of commands to open the etheruem node in \"read-only\" mode, like export-chain. In these cases, the snapshot background generation is non expected and should be banned explicitly."
            },
            {
                "date": "2022-09-23T17:33:15Z",
                "message": "tests, les, eth: remove mentions of deprecated Morden testnet (#23570)\n\n* remove morden\r\n\r\n* Update commons.go\r\n\r\n* Update handler.go\r\n\r\n* empty commit to make appveyor happy"
            },
            {
                "date": "2022-09-23T17:04:02Z",
                "message": "cmd/abigen: change --exc to exclude by type name (#22620)\n\nThe abigen exclusion pattern, previously on the form \"path:type\", now supports wildcards. Examples \"*:type\" to exclude a named type in all files, or \"/path/to/foo.sol:*\" all types in foo.sol."
            },
            {
                "date": "2022-09-23T12:08:25Z",
                "message": "internal/version: use gitCommit injection in version handling code (#25851)\n\nThis changes the CI build to store the git commit and date into package\r\ninternal/version instead of package main. Doing this essentially merges our\r\ntwo ways of tracking the go-ethereum version into a single place, achieving\r\ntwo objectives:\r\n\r\n- Bad block reports, which use version.Info(), will now have the git commit\r\n  information even when geth is built in an environment such as\r\n  launchpad.net where git access is unavailable.\r\n\r\n- For geth builds created by `go build ./cmd/geth` (i.e. not using `go run\r\n  build/ci.go install`), git information stored by the go tool is now used\r\n  in the p2p node name as well as in `geth version` and `geth\r\n  version-check`."
            },
            {
                "date": "2022-09-23T08:51:12Z",
                "message": "p2p: add channel buffers to avoid goroutine leaks in tests (#24929)"
            },
            {
                "date": "2022-09-23T08:25:16Z",
                "message": ".github: add CL client to issue template (#25814)"
            },
            {
                "date": "2022-09-23T08:11:41Z",
                "message": "eth/protocols/snap: make log messages more clear that sync is ongoing (#25837)\n\n* eth/protocols/snap: make log messages more clear that sync is ongoing\r\n\r\n* Update sync.go\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2022-09-22": [
            {
                "date": "2022-09-22T13:43:47Z",
                "message": "cmd/utils: make --authrpc.jwtsecret a DirectoryFlag (#25849)\n\n\r\nSigned-off-by: Delweng <delweng@gmail.com>"
            }
        ],
        "2022-09-21": [
            {
                "date": "2022-09-21T13:12:45Z",
                "message": "eth/catalyst: make tests run faster (#25818)"
            },
            {
                "date": "2022-09-21T11:48:09Z",
                "message": "eth/catalyst: add locking around newpayload (#25816)\n\nSometimes we get stuck on db compaction, and the CL re-issues the \"same\" command to us multiple times. Each request get stuck on the same place, in the middle of the handler.\r\n\r\nThis changes makes it so we do not reprocess the same payload, but instead detects it early."
            },
            {
                "date": "2022-09-21T07:55:48Z",
                "message": "eth/tracers: fix trace config for `TraceCall` (#25821)\n\nCo-authored-by:  AtomicAzzaz  <AtomicAzzaz@users.noreply.github.com>\r\nCo-authored-by:  ewile <ewile@users.noreply.github.com>"
            },
            {
                "date": "2022-09-21T07:49:17Z",
                "message": "core/blockchain: downgrade tx indexing and unindexing logs  (#25832)\n\ncore/blockchain: downgrade tx indexing and unindexing logs from info to debug\r\n\r\nIf a user has a finite tx lookup limit, they will see an \"unindexing\" info level log each time a block is imported. This information might help a user understand that they are removing the index each block and some txs may not be retrievable by hash, but overall it is generally more of a nuisance than a benefit. This change downgrades the log to a debug log."
            }
        ],
        "2022-09-20": [
            {
                "date": "2022-09-20T12:58:03Z",
                "message": "core/vm: return copy of input slice in identity precompile, avoid returndata copy (#25183)\n\n* core/vm: return copy of input slice in identity precompile.  don't deep copy return data slice upon call completion\r\n\r\n* make use of common.CopyBytes"
            },
            {
                "date": "2022-09-20T12:30:15Z",
                "message": "Merge pull request #25831 from karalabe/fix-challenge-stop-hang\n\neth: fix a rare datarace on CHT challenge reply / shutdown"
            },
            {
                "date": "2022-09-20T11:14:24Z",
                "message": "eth: fix a rare datarace on CHT challenge reply / shutdown"
            }
        ],
        "2022-09-19": [
            {
                "date": "2022-09-19T08:04:16Z",
                "message": "core: move build version reading to its own package (#25806)\n\nThis fixes the build with Go 1.17, which does not have BuildInfo.Settings yet."
            }
        ],
        "2022-09-17": [
            {
                "date": "2022-09-17T19:27:10Z",
                "message": "core: more compact bad block report (#25714)\n\nThis shortens the chain config summary in bad block reports,\r\nand adds go-ethereum version information as well.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2022-09-16": [
            {
                "date": "2022-09-16T16:23:13Z",
                "message": "core: don't cache zero nonce in txNoncer (#25603)\n\nThis changes the nonce cache used by TxPool to not store cached\r\nnonces for non-existing accounts."
            },
            {
                "date": "2022-09-16T16:16:32Z",
                "message": "internal/ethapi: return error when requesting invalid trie key (#25762)\n\nThis change makes eth_getProof and eth_getStorageAt return an error when\r\nthe argument contains invalid hex in storage keys.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-09-16T09:40:42Z",
                "message": "crypto/bls12381: docfix of g1 Affine (#25729)\n\nbls12381: docfix of g1 Affine."
            },
            {
                "date": "2022-09-16T09:33:48Z",
                "message": "core/rawdb: fix leak of backoff timer (#25776)"
            }
        ],
        "2022-09-15": [
            {
                "date": "2022-09-15T21:35:53Z",
                "message": "trie: handle more batch commit errors in Database (#25674)"
            },
            {
                "date": "2022-09-15T15:50:54Z",
                "message": "params: set TerminalTotalDifficultyPassed to true (#25769)\n\n* params: set TerminalTotalDifficultyPassed to true\r\n\r\n* Update params/config.go\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-09-15T13:36:31Z",
                "message": "les/catalyst/api: add support for ExchangeTransitionConfigurationV1 (#25752)\n\nThis method is missing in light client mode and breaks consensus clients\r\nthat require a valid response."
            },
            {
                "date": "2022-09-15T13:21:44Z",
                "message": "node: fix lint issue in rpcstack.go (#25774)"
            },
            {
                "date": "2022-09-15T11:18:23Z",
                "message": "core: fix log order in \"Imported new chain segment\" (#25768)"
            }
        ],
        "2022-09-14": [
            {
                "date": "2022-09-14T16:37:53Z",
                "message": "node: fix HTTP server always force closing (#25755)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-09-14T10:05:03Z",
                "message": "cmd/geth: add a verkle subcommand (#25718)\n\n* cmd/geth: add a verkle subcommand\r\n\r\n* fix copyright year\r\n\r\n* remove unused command parameters\r\n\r\n* check that the output file was successfully written to\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\n* cmd/geth: goimports fix\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2022-09-13": [
            {
                "date": "2022-09-13T19:49:52Z",
                "message": "graphql: fixes missing tx logs (#25745)\n\n* graphql: fix tx logs\r\n\r\n* graphql: refactor test service setup\r\n\r\n* graphql: add test for tx logs"
            },
            {
                "date": "2022-09-13T12:02:34Z",
                "message": "accounts/abi: fix typo in error message (#25742)"
            }
        ],
        "2022-09-12": [
            {
                "date": "2022-09-12T13:02:41Z",
                "message": "core: preallocate maps in TxPool helper methods (#25737)"
            },
            {
                "date": "2022-09-12T13:02:03Z",
                "message": "p2p/discover/v5wire: reject packets smaller than 63 bytes (#25740)"
            }
        ],
        "2022-09-10": [
            {
                "date": "2022-09-10T11:25:40Z",
                "message": "build: upgrade to go 1.19 (#25726)\n\nThis changes the CI / release builds to use the latest Go version. It also\r\nupgrades golangci-lint to a newer version compatible with Go 1.19.\r\n\r\nIn Go 1.19, godoc has gained official support for links and lists. The\r\nsyntax for code blocks in doc comments has changed and now requires a\r\nleading tab character. gofmt adapts comments to the new syntax\r\nautomatically, so there are a lot of comment re-formatting changes in this\r\nPR. We need to apply the new format in order to pass the CI lint stage with\r\nGo 1.19.\r\n\r\nWith the linter upgrade, I have decided to disable 'gosec' - it produces\r\ntoo many false-positive warnings. The 'deadcode' and 'varcheck' linters\r\nhave also been removed because golangci-lint warns about them being\r\nunmaintained. 'unused' provides similar coverage and we already have it\r\nenabled, so we don't lose much with this change."
            }
        ],
        "2022-09-09": [
            {
                "date": "2022-09-09T13:25:55Z",
                "message": "core: place a cap on reorglogs (#25711)\n\nThis PR makes the event-sending for deleted and new logs happen in batches, to prevent OOM situation due to large reorgs. \r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-09-09T12:03:23Z",
                "message": "rpc: improve error codes for internal server errors (#25678)\n\nThis changes the error code returned by the RPC server in certain situations:\r\n\r\n- handler panic: code -32603\r\n- result marshaling error: code -32603\r\n- attempt to subscribe via HTTP: code -32001\r\n\r\nIn all of the above cases, the server previously returned the default error\r\ncode -32000.\r\n\r\nCo-authored-by: Nicholas Zhao <nicholas.zhao@gmail.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-09-09T08:47:30Z",
                "message": "p2p/msgrate: be more lenient when calculating 'mean' (#25653)\n\nThe p2p msgrate tracker is a thing which tries to estimate some mean round-trip times. However, it did so in a very curious way: if a node had 200 peers, it would sort their 200 respective rtt estimates, and then it would pick item number 2 as the mean. So effectively taking third fastest and calling it mean. This probably works \"ok\" when the number of peers are low (there are other factors too, such as ttlScaling which takes some of the edge off this) -- however when the number of peers is high, it becomes very skewed.\r\n\r\nThis PR instead bases the 'mean' on the square root of the length of the list. Still pretty harsh, but a bit more lenient."
            },
            {
                "date": "2022-09-09T08:42:57Z",
                "message": "eth/protocols/snap: throttle trie heal requests when peers DoS us (#25666)\n\n* eth/protocols/snap: throttle trie heal requests when peers DoS us\r\n\r\n* eth/protocols/snap: lower heal throttle log to debug\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\n* eth/protocols/snap: fix comment\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2022-09-08": [
            {
                "date": "2022-09-08T10:36:07Z",
                "message": "trie: update comments + err check for preimages (#25672)\n\nThis PR includes minor updates to comments in trie/committer that reference insertion to the db, and adds an err != nil check for the return value of preimages.commit."
            },
            {
                "date": "2022-09-08T06:06:06Z",
                "message": "eth/tracer: fix broken test (#25715)"
            }
        ],
        "2022-09-07": [
            {
                "date": "2022-09-07T18:25:58Z",
                "message": "eth, les: rework chain tracer (#25143)\n\nThis PR simplifies the logic of chain tracer and also adds the unit tests.\r\n\r\nThe most important change has been made in this PR is the state management. Whenever a tracing state is acquired there is a corresponding release function be returned as well. It must be called once the state is used up, otherwise resource leaking can happen.\r\n\r\nAnd also the logic of state management has been simplified a lot. Specifically, the state provider(eth backend, les backend) should ensure the state is available and referenced. State customers can use the state according to their own needs, or build other states based on the given state. But once the release function is called, there is no guarantee of the availability of the state.\r\n\r\n\r\nCo-authored-by: Sina Mahmoodi <1591639+s1na@users.noreply.github.com>\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2022-09-07T18:21:59Z",
                "message": "all: cleanup tests (#25641)\n\nFollow-up to PR #25523 to cleanup all relevant tests."
            },
            {
                "date": "2022-09-07T11:09:52Z",
                "message": "core/vm: rename RANDOM to PREVRANDAO (#25691)\n\nSee: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-4399.md\r\n\r\n>  This EIP supplants the semantics of the return value of existing DIFFICULTY (0x44) opcode and renames the opcode to PREVRANDAO (0x44)."
            },
            {
                "date": "2022-09-07T09:48:34Z",
                "message": "params: update chts (#25707)"
            },
            {
                "date": "2022-09-07T07:08:56Z",
                "message": "core, light, trie: remove DiskDB function from trie database (#25690)"
            }
        ],
        "2022-09-06": [
            {
                "date": "2022-09-06T12:49:13Z",
                "message": "Merge pull request #25694 from karalabe/concurrent-heal-check\n\ntrie: check childrens' existence concurrently for snap heal"
            },
            {
                "date": "2022-09-06T09:57:03Z",
                "message": "trie: check childrens' existence concurrently for snap heal"
            }
        ],
        "2022-09-05": [
            {
                "date": "2022-09-05T12:06:16Z",
                "message": "eth/tracers/js: improve integer types in log object (#25668)\n\nAll fields related to gas must be represented as uint64. Depth is\r\ninternally tracked as int, so it makes sense to also store it as int."
            }
        ],
        "2022-09-02": [
            {
                "date": "2022-09-02T16:07:55Z",
                "message": "trie: fix unhandled error in test (#25628)"
            },
            {
                "date": "2022-09-02T15:48:26Z",
                "message": "trie: fix typo in comment (#25667)"
            },
            {
                "date": "2022-09-02T15:47:29Z",
                "message": "rpc: check that \"version\" is \"2.0\" in request objects (#25570)\n\nThe JSON-RPC spec requires the \"version\" field to be exactly \"2.0\",\r\nso we should verify that. This change is not backwards-compatible with\r\nsloppy client implementations, but I decided to go ahead with it anyway\r\nbecause the failure will be caught via the returned error."
            },
            {
                "date": "2022-09-02T15:40:41Z",
                "message": "node, rpc: add JWT auth support in client (#24911)\n\nThis adds a generic mechanism for 'dial options' in the RPC client,\r\nand also implements a specific dial option for the JWT authentication\r\nmechanism used by the engine API. Some real tests for the server-side\r\nauthentication handling are also added.\r\n\r\nCo-authored-by: Joshua Gutow <jgutow@optimism.io>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-09-02T15:28:33Z",
                "message": "eth/fetcher: throttle peers which deliver many invalid transactions (#25573)\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-09-02T15:08:25Z",
                "message": "eth/tracers/js: fill in log.refund field (#25661)\n\nFor some reason, an accessor method for this field exists in JS, but\r\nthe value was never actually assigned."
            },
            {
                "date": "2022-09-02T14:58:20Z",
                "message": "README.md: improve grammar (#25646)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-09-02T14:53:58Z",
                "message": "mobile: register filter APIs (#25642)\n\nThis fixes a regression introduced in PR #25459."
            }
        ],
        "2022-09-01": [
            {
                "date": "2022-09-01T09:38:34Z",
                "message": "Merge pull request #25651 from holiman/fix_snapqueue\n\neth/protocols/snap: fix problems due to idle-but-busy peers"
            },
            {
                "date": "2022-09-01T07:34:32Z",
                "message": "core/state: filter out nil trie for copy (#25575)"
            },
            {
                "date": "2022-09-01T06:41:10Z",
                "message": "trie: better error reporting (#25645)"
            }
        ],
        "2022-08-31": [
            {
                "date": "2022-08-31T18:29:39Z",
                "message": "eth/catalyst: prevent division by zero (#25654)\n\neth/catalyst: prevent diff by zero"
            },
            {
                "date": "2022-08-31T16:18:18Z",
                "message": "trie: cleanup stateTrie (#25640)\n\nIt's a trivial PR to hide the error log when the trie node is not found in the database. The idea for this change is for all TryXXX functions, the error is already returned and we don't need to fire a log explicitly.\r\n\r\nRecently there are a few tickets #25613 #25589 reporting that the trie nodes are missing because of debug.SetHead. The root cause is after resetting, the chain rewinds to a historical point and re-imports the blocks on top.\r\n\r\nSince the node is already synced and started to accept transactions previously, these transactions are still kept in the txpool and verified by txpool with a live state. This live state is constructed based on the live trie database, which is changed fast by node referencing and de-referencing.\r\n\r\nUnfortunately, when we construct a live state(like the state in txpool), we don't reference the state we have. The blockchain will garbage collect the intermediate version nodes in another thread which leads the broken live state.\r\n\r\nThe best solution for this is to forcibly obtain a reference for all live states we create and call release function once it's used up. But it might end up with more junks persisted into disk. Will try to find an elegant solution later in the following PR."
            },
            {
                "date": "2022-08-31T15:58:18Z",
                "message": "eth/protocols/snap: fix problems due to idle-but-busy peers"
            },
            {
                "date": "2022-08-31T14:26:39Z",
                "message": "trie: fix grammar in comment (#25648)"
            },
            {
                "date": "2022-08-31T14:14:53Z",
                "message": "graphql: return correct logs for tx (#25612)\n\n* graphql: fix tx logs\r\n\r\n* minor\r\n\r\n* Use optimized search for selecting tx logs"
            },
            {
                "date": "2022-08-31T10:31:16Z",
                "message": "mobile: close node on error (#25643)"
            },
            {
                "date": "2022-08-31T10:28:35Z",
                "message": "eth/catalyst: adjust eta for themerge (#25601)\n\n* eth/catalyst: adjust eta for themerge\r\n\r\n* squash\r\n\r\n* squash\r\n\r\n* eth/catalyst: address review concerns"
            }
        ],
        "2022-08-30": [
            {
                "date": "2022-08-30T16:22:28Z",
                "message": "all: move genesis initialization to blockchain (#25523)\n\n* all: move genesis initialization to blockchain\r\n\r\n* core: add one more check\r\n\r\n* core: fix tests"
            },
            {
                "date": "2022-08-30T14:41:09Z",
                "message": "node: fix regression in TestJWT (#25635)"
            },
            {
                "date": "2022-08-30T13:25:02Z",
                "message": "node: change JWT error status to 401 Unauthorized (#25629)"
            },
            {
                "date": "2022-08-30T12:56:39Z",
                "message": "ethclient: add 'finalized' and 'safe' block number support (#25580)"
            },
            {
                "date": "2022-08-30T12:48:04Z",
                "message": "docs: specify execution client (#25566)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-08-30T12:40:15Z",
                "message": "build: fix ignored errors (#25591)"
            },
            {
                "date": "2022-08-30T12:38:35Z",
                "message": "cmd/geth: fix legacy receipt detection for empty db (#25609)"
            }
        ],
        "2022-08-29": [
            {
                "date": "2022-08-29T08:16:34Z",
                "message": "all: remove duplicate word in comments (#25618)\n\nSigned-off-by: Abirdcfly <fp544037857@gmail.com>\r\n\r\nSigned-off-by: Abirdcfly <fp544037857@gmail.com>"
            }
        ],
        "2022-08-25": [
            {
                "date": "2022-08-25T08:59:50Z",
                "message": "accounts/abi/bind: add const for tx fee elasticity multiplier (#25504)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
            },
            {
                "date": "2022-08-25T08:41:37Z",
                "message": "internal/ethapi: rename debug getters to match spec (#25176)\n\nSome small fixes to get the existing debug methods to conform to the spec. Mainly dropping the encoding information from the method name as it should be deduced from the debug context and allowing the method to be invoked by either block number or block hash. It also adds the method debug_getTransaction which returns the raw tx bytes by tx hash. This is pretty much equivalent to the eth_getRawTransactionByHash method."
            },
            {
                "date": "2022-08-25T08:37:04Z",
                "message": "params: begin go-ethereum v1.11 release cycle"
            }
        ],
        "2022-08-24": [
            {
                "date": "2022-08-24T09:11:17Z",
                "message": "params: begin v1.10.24 release cycle"
            },
            {
                "date": "2022-08-24T09:09:02Z",
                "message": "params: release Geth v1.10.23"
            }
        ],
        "2022-08-23": [
            {
                "date": "2022-08-23T19:26:33Z",
                "message": "Merge pull request #25582 from holiman/err_handling\n\nconsensus/beacon: don't ignore errors"
            },
            {
                "date": "2022-08-23T19:13:33Z",
                "message": "Merge pull request #25581 from karalabe/triedb-fix-flush-order\n\ncore/state, trie: fix trie flush order for proper pruning"
            },
            {
                "date": "2022-08-23T18:48:50Z",
                "message": "consensus/beacon: don't ignore errors"
            },
            {
                "date": "2022-08-23T18:17:12Z",
                "message": "core/state, trie: fix trie flush order for proper pruning"
            },
            {
                "date": "2022-08-23T11:02:51Z",
                "message": "core, eth/downloader: handle spurious junk bodies from racey rollbacks (#25578)\n\n* eth/downloader: handle junkbodies/receipts in the beacon sync\r\n\r\n* core: check for header presence when checking for blocks"
            }
        ],
        "2022-08-22": [
            {
                "date": "2022-08-22T08:39:18Z",
                "message": "params: begin v1.10.23 release cycle"
            },
            {
                "date": "2022-08-22T08:36:39Z",
                "message": "params: release go-ethereum v1.10.22"
            },
            {
                "date": "2022-08-22T08:27:39Z",
                "message": "eth/catalyst: warn less frequently if no beacon client is available (#25569)\n\n* eth/catalyst: warn less frequently if no beacon client is available\r\n\r\n* eth/catalyst: tweak warning frequency a bit\r\n\r\n* eth/catalyst: some more tweaks\r\n\r\n* Update api.go\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-08-22T07:14:56Z",
                "message": "Revert \"eth/fetcher: don't spend too much time on transaction inclusion\" (#25567)\n\nRevert \"eth/fetcher: don't spend too much time on transaction inclusion (#25524)\"\r\n\r\nThis reverts commit 0ce494b60cd00d70f1f9f2dd0b9bfbd76204168a."
            }
        ],
        "2022-08-19": [
            {
                "date": "2022-08-19T13:59:36Z",
                "message": "eth/fetcher: don't spend too much time on transaction inclusion (#25524)\n\n* eth/fetcher: introduce some lag in tx fetching\r\n\r\n* eth/fetcher: change conditions a bit\r\n\r\n* eth/fetcher: use per-batch quota check\r\n\r\n* eth/fetcher: fix some comments\r\n\r\n* eth/fetcher: address review concerns\r\n\r\n* eth/fetcher: fix panic + add warn log\r\n\r\n* eth/fetcher: fix log\r\n\r\n* eth/fetcher: fix log\r\n\r\n* cmd/devp2p/internal/ethtest: fix ignorign tx announcements from prev. tests\r\n\r\n* cmd/devp2p/internal/ethtest: fix TestLargeTxRequest\r\n\r\nThis increases the number of tx relay messages the test waits for. Since\r\ngo-ethereum now processes incoming txs in smaller batches, the\r\nannouncement messages it sends are also smaller.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-08-19T12:48:49Z",
                "message": "internal/ethapi: fix build regression (#25555)"
            },
            {
                "date": "2022-08-19T10:15:04Z",
                "message": "accounts/abi: fix set function (#25477)\n\n* accounts/abi: fix set function\r\n\r\n* don't break things\r\n\r\n* update test"
            },
            {
                "date": "2022-08-19T09:14:59Z",
                "message": "eth/filters: add global block logs cache (#25459)\n\nThis adds a cache for block logs which is shared by all filters. The cache\r\nsize of is configurable using the `--cache.blocklogs` flag.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-08-19T08:37:53Z",
                "message": "consensus/beacon: check ttd reached on pos blocks (#25552)\n\n* consensus/beacon: check ttd reached on pos blocks\r\n\r\n* consensus/beacon: check ttd reached on pos blocks\r\n\r\n* consensus/beacon: check ttd reached on pos blocks"
            },
            {
                "date": "2022-08-19T06:03:45Z",
                "message": "cmd/geth: parse uint64 value with ParseUint instead of Atoi (#25545)\n\nParse uint64 value with ParseUint instead of Atoi"
            },
            {
                "date": "2022-08-19T06:02:47Z",
                "message": "eth, les: unlock downloader peerSet if there's an error (#25546)\n\nUnlock peerSet if there's an error in the downloader"
            },
            {
                "date": "2022-08-19T06:01:43Z",
                "message": "accounts/abi/bind/backends: typo fix (#25549)"
            },
            {
                "date": "2022-08-19T06:01:09Z",
                "message": "internal/ethapi: fix comment typo (#25548)"
            },
            {
                "date": "2022-08-19T06:00:21Z",
                "message": "all: fix some typos (#25551)\n\n* Fix some typos\r\n\r\n* Fix some mistakes\r\n\r\n* Revert 4byte.json\r\n\r\n* Fix an incorrect fix\r\n\r\n* Change files to fails"
            }
        ],
        "2022-08-18": [
            {
                "date": "2022-08-18T22:39:47Z",
                "message": "trie: improve node rlp decoding performance (#25357)\n\nThis avoids copying the input []byte while decoding trie nodes. In most\r\ncases, particularly when the input slice is provided by the underlying\r\ndatabase, this optimization is safe to use.\r\n\r\nFor cases where the origin of the input slice is unclear, the copying version\r\nis retained. The new code performs better even when the input must be\r\ncopied, because it is now only copied once in decodeNode."
            },
            {
                "date": "2022-08-18T22:34:57Z",
                "message": "rlp/rlpgen: fix error handling when target type not found (#25547)\n\ntyp will be nil when lookupStructType returns an error. cfg.Type should be used instead."
            },
            {
                "date": "2022-08-18T11:28:06Z",
                "message": "cmd. core: save preimages on genesis creation (#25538)\n\nforce preimage dump for genesis"
            }
        ],
        "2022-08-17": [
            {
                "date": "2022-08-17T11:16:18Z",
                "message": "core: make tx journal check and open atomic (#25530)\n\n* core: reduce system call about `os`\r\n\r\n* avoid deprecated method"
            },
            {
                "date": "2022-08-17T11:14:49Z",
                "message": "core/state, trie, light: add a TryDeleteAccount method (#25531)\n\n* core/state, trie, light: Add a DeleteAccount method\r\n\r\n* review feedback\r\n\r\n* Update database.go\r\n\r\n* pr triage feedback\r\n\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
            },
            {
                "date": "2022-08-17T11:12:10Z",
                "message": "core, trie: flush preimages to db on blockchain close (#25533)\n\n* core, trie: flush preimages to db on database close\r\n\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>\r\n\r\n* rename Close to CommitPreimages for clarity\r\n\r\n* core, trie: nitpick fixes\r\n\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            }
        ],
        "2022-08-16": [
            {
                "date": "2022-08-16T06:38:23Z",
                "message": "params: set mainnet terminal total difficulty for the merge (#25528)\n\n* params: set mainnet ttd to 58_750_000_000_000_000_000_000\r\n\r\n* params: set mainnet ttd to 58_750_000_000_000_000_000_000"
            }
        ],
        "2022-08-15": [
            {
                "date": "2022-08-15T08:04:58Z",
                "message": "params: set ttdpassed on goerli (#25519)"
            }
        ],
        "2022-08-12": [
            {
                "date": "2022-08-12T11:58:06Z",
                "message": "core/genesis: remove calaverasAllocData (#25516)\n\ncore/genesis: calaverasAllocData no longer used"
            }
        ],
        "2022-08-11": [
            {
                "date": "2022-08-11T08:56:53Z",
                "message": "internal/ethapi: rework setDefaults for tx args so fee logic is separate (#25197)\n\n\r\nCo-authored-by: bobpkr <bob.p@krustuniverse.com>"
            },
            {
                "date": "2022-08-11T07:25:54Z",
                "message": "accounts/abi: display name in \"method/event not found\" error (#25512)"
            }
        ],
        "2022-08-10": [
            {
                "date": "2022-08-10T08:30:59Z",
                "message": "build: add static linking support (#25492)\n\nThis adds support for building statically-linked executables using ci.go.\r\n\r\nStatic linking is enabled by default in Docker builds, making it possible to\r\nuse the geth executable in any Docker image, regardless of the Linux\r\ndistribution the Dockerfile is based on.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-08-10T08:02:22Z",
                "message": "Merge pull request #25506 from ycyraum/apply-transaction-no-bc\n\ncore: remove unused bc ChainContext in applyTransaction"
            },
            {
                "date": "2022-08-10T07:31:15Z",
                "message": "signer/rules: register clef api properly when rules are used (#25455)\n\nsigner/rules: register clef api properly when rules are used, fixes #25298"
            },
            {
                "date": "2022-08-10T06:02:37Z",
                "message": "core: remove unused bc ChainContext in applyTransaction"
            }
        ],
        "2022-08-09": [
            {
                "date": "2022-08-09T09:44:39Z",
                "message": "all: cleanup the APIs for initializing genesis (#25473)\n\n* all: polish tests\r\n\r\n* core: apply feedback from Guillaume\r\n\r\n* core: fix comment"
            },
            {
                "date": "2022-08-09T09:04:57Z",
                "message": "eth/tracers: add onlyTopCall option to callTracer (#25430)\n\nThis PR allows users to pass in a config object directly to the tracers. Previously only the struct logger was configurable.\r\n\r\nIt also adds an option to the call tracer which if enabled makes it ignore any subcall and collect only information about the top-level call. See #25419 for discussion.\r\n\r\nThe tracers will silently ignore if they are passed a config they don't care about."
            },
            {
                "date": "2022-08-09T08:23:41Z",
                "message": "eth: formatted error nit (#25499)"
            }
        ],
        "2022-08-08": [
            {
                "date": "2022-08-08T22:20:46Z",
                "message": "core: fix uncle creation in TestFastVsFullChains (#25476)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-08-08T13:07:54Z",
                "message": "eth/downloader: fix log errors of queue_test.go (#25494)"
            },
            {
                "date": "2022-08-08T09:08:36Z",
                "message": "cmd, core, ethdb, node: move chain freezer one folder deeper (#25487)\n\n* cmd, core, ethdb, node: create chain freezer in a sub folder\r\n\r\n* core/rawdb: remove unused code\r\n\r\n* core, ethdb, node: add AncientDatadir API back\r\n\r\n* cmd, core: extend freezer info dump for sub-ancient-store\r\n\r\n* core/rawdb: rework freezer inspector\r\n\r\n* core/rawdb: address comments from Peter\r\n\r\n* core/rawdb: fix build issue"
            }
        ],
        "2022-08-04": [
            {
                "date": "2022-08-04T14:13:18Z",
                "message": "core: use TryGetAccount to read what TryUpdateAccount has written (#25458)\n\n* core: use TryGetAccount to read where TryUpdateAccount has been used to write\r\n\r\n* Gary's review feedback\r\n\r\n* implement Gary's suggestion\r\n\r\n* fix bug + rename NewSecure into NewStateTrie\r\n\r\n* trie: add backwards-compatibility aliases for SecureTrie\r\n\r\n* Update database.go\r\n\r\n* make the linter happy\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
            },
            {
                "date": "2022-08-04T08:03:20Z",
                "message": "core, trie: rework trie committer (#25320)\n\n* all: rework trie and trie committer\r\n\r\n* all: get rid of internal cache in trie\r\n\r\n* all: fixes\r\n\r\n* trie: polish\r\n\r\n* core, trie: address comments\r\n\r\n* trie: fix imports\r\n\r\n* core/state: address comments\r\n\r\n* core/state/snapshot: polish\r\n\r\n* trie: remove unused code\r\n\r\n* trie: update tests\r\n\r\n* trie: don't set db as nil\r\n\r\n* trie: address comments\r\n\r\n* trie: unskip test"
            },
            {
                "date": "2022-08-04T07:42:03Z",
                "message": "node: remove noop path.Join (#25475)\n\nSigned-off-by: Delweng <delweng@gmail.com>"
            }
        ],
        "2022-08-03": [
            {
                "date": "2022-08-03T17:08:32Z",
                "message": "graphql: embed *Resolver instead of backend interface (#25468)\n\nThis creates some infrastructure to share resources between graphql\r\nAPI objects."
            },
            {
                "date": "2022-08-03T16:18:45Z",
                "message": "internal/ethapi: don't estimate gas if no limit provided in eth_createAccessList (#25467)\n\nBecause the goal of eth_createAccessList is providing the caller with the largest-possible\r\naccess list, it's generally not important that the gas limit used by the tracer will match the usage\r\nof the call exactly. Avoiding the gas estimation step is a performance improvement. As long as the\r\ncall does not branch based on gas limit, the returned access list will be accurate."
            },
            {
                "date": "2022-08-03T15:02:09Z",
                "message": "core: preallocate batch size in bloomIndexer (#25289)\n\nThis change reduces allocations when committing bloombits indexes\r\nby creating the database batch with a larger initial size."
            },
            {
                "date": "2022-08-03T14:56:57Z",
                "message": "core/types: fix typo in comment (#25359)"
            },
            {
                "date": "2022-08-03T14:50:12Z",
                "message": "node, rpc: add ReadHeaderTimeout config option (#25338)\n\nThis change makes http.Server.ReadHeaderTimeout configurable separately\r\nfrom ReadTimeout for RPC servers. The default is set to the same as\r\nReadTimeout, which in order to cause no change in existing deployments."
            }
        ],
        "2022-08-02": [
            {
                "date": "2022-08-02T12:48:55Z",
                "message": "cmd/devp2p/internal/ethtest: update tests for eth/67 (#25306)"
            },
            {
                "date": "2022-08-02T12:33:23Z",
                "message": "consensus/ethash: remove temp files created during DAG generation (#25381)\n\nThis makes it remove not only the actual DAG file, but also the temporary file\r\nwhich the DAG data is written to while generating."
            },
            {
                "date": "2022-08-02T07:23:24Z",
                "message": "Merge pull request #25461 from sandakersmann/master\n\nbuild: upgrade -dlgo version to Go 1.18.5"
            }
        ],
        "2022-08-01": [
            {
                "date": "2022-08-01T17:13:30Z",
                "message": "eth/gasprice/feehistory: support finalized block (#25442)"
            },
            {
                "date": "2022-08-01T16:21:58Z",
                "message": "build: upgrade -dlgo version to Go 1.18.5"
            },
            {
                "date": "2022-08-01T14:33:39Z",
                "message": "eth: fix typo in catalyst api (#25460)\n\neth: fix typo"
            },
            {
                "date": "2022-08-01T12:13:25Z",
                "message": "cmd, core, eth, les, params: add merge-passed chain config (#24538)\n\n* cmd, core, eth, les, params: add merge-passed chain config\r\n\r\n* eth/catalyst, params: add various warning on malfunctioning beacons\r\n\r\n* eth/catalyst: fix warning for beacons without transition exchanges"
            },
            {
                "date": "2022-08-01T11:47:21Z",
                "message": "common/compiler: json unmarshalling error checks (#25449)\n\ncomplier/solidity:add json.Unmarshal err check"
            }
        ],
        "2022-07-29": [
            {
                "date": "2022-07-29T16:29:01Z",
                "message": "eth: fix typo in comment (#25327)"
            },
            {
                "date": "2022-07-29T16:28:14Z",
                "message": "cm/puppeth: fix crash when of ethstats specifier doesn't contain `:` (#25405)\n\n\r\nSigned-off-by: Delweng <delweng@gmail.com>"
            },
            {
                "date": "2022-07-29T16:23:30Z",
                "message": "all: use AbsTime.Add instead of conversion (#25417)"
            },
            {
                "date": "2022-07-29T16:22:04Z",
                "message": "ethereum, ethclient: add FeeHistory support (#25403)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2022-07-28": [
            {
                "date": "2022-07-28T13:16:15Z",
                "message": "eth/catalyst: return 0x0 if latestvalid is pow block (#25423)\n\n* eth/catalyst: return 0x0 if latestvalid is pow block\r\n\r\n* eth/catalyst: return 0x0 if latestvalid is pow block\r\n\r\n* eth/catalyst: fix header retrieval, fix sign check\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2022-07-28T13:01:35Z",
                "message": "eth/catalyst: return syncing not accepted (#25414)\n\n* eth/catalyst: return syncing not accepted\r\n\r\n* eth/catalyst: fix test"
            },
            {
                "date": "2022-07-28T06:30:50Z",
                "message": "node: set JWT expiry to 60 seconds (#25416)\n\n* node: set JWT expiry to 60 seconds\r\n\r\n* node: rename var"
            },
            {
                "date": "2022-07-28T05:50:42Z",
                "message": "Merge pull request #25428 from karalabe/engineapi-snap-import-deny\n\neth/catalyst: fix NewPayload warn log when dropping due to snap sync"
            },
            {
                "date": "2022-07-28T05:46:13Z",
                "message": "eth/catalyst: fix NewPayload warn log when dropping due to snap sync"
            }
        ],
        "2022-07-27": [
            {
                "date": "2022-07-27T18:37:04Z",
                "message": "core, trie, eth, cmd: rework preimage store (#25287)\n\n* core, trie, eth, cmd: rework preimage store\r\n\r\n* trie: address comment"
            },
            {
                "date": "2022-07-27T11:56:40Z",
                "message": "params: begin v1.10.22 release cycle"
            },
            {
                "date": "2022-07-27T11:53:06Z",
                "message": "params: go-ethereum v1.10.21 stable"
            },
            {
                "date": "2022-07-27T06:31:13Z",
                "message": "go.mod: downgrade leveldb (#25413)"
            }
        ],
        "2022-07-25": [
            {
                "date": "2022-07-25T15:42:05Z",
                "message": "core: eth: rpc: implement safe rpc block (#25165)\n\n* core: eth: rpc: implement safe rpc block\r\n\r\n* core: fix setHead, panics"
            },
            {
                "date": "2022-07-25T14:50:29Z",
                "message": "Merge pull request #25371 from Zachinquarantine/mergeconfig-message\n\nparams: change Merge config to print simpler message"
            },
            {
                "date": "2022-07-25T13:51:04Z",
                "message": "eth: support bubbling up bad blocks from sync to the engine API (#25190)\n\n* eth: support bubbling up bad blocks from sync to the engine API\r\n\r\n* eth/catalyst: fix typo\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\n\r\n* eth/catalyst: fix typo\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\n\r\n* Update eth/catalyst/api.go\r\n\r\n* eth/catalyst: when forgetting bad hashes, also forget descendants\r\n\r\n* eth/catalyst: minor bad block tweaks for resilience\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-07-25T13:50:40Z",
                "message": "Merge pull request #25397 from karalabe/fix-tracer-capitalization\n\neth/tracers/js: fix capitalization in tests"
            },
            {
                "date": "2022-07-25T13:49:16Z",
                "message": "eth/tracers/js: fix capitalization in tests"
            },
            {
                "date": "2022-07-25T10:14:03Z",
                "message": "all: add whitespace linter (#25312)\n\n* golangci: typo\r\n\r\nSigned-off-by: Delweng <delweng@gmail.com>\r\n\r\n* golangci: add whietspace\r\n\r\nSigned-off-by: Delweng <delweng@gmail.com>\r\n\r\n* *: rm whitesapce using golangci-lint\r\n\r\nSigned-off-by: Delweng <delweng@gmail.com>\r\n\r\n* cmd/puppeth: revert accidental resurrection\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2022-07-25T09:54:31Z",
                "message": "light: fix differTries err message in tests (#25358)"
            },
            {
                "date": "2022-07-25T09:53:44Z",
                "message": "eth, internal, light: fix error string capitalization (#25364)"
            },
            {
                "date": "2022-07-25T09:52:49Z",
                "message": "p2p/netutil: minor code cosmetic\n\nSigned-off-by: Abirdcfly <fp544037857@gmail.com>"
            },
            {
                "date": "2022-07-25T09:08:08Z",
                "message": "consensus/beacon: fix typo in comment (#25391)"
            },
            {
                "date": "2022-07-25T09:07:44Z",
                "message": "cmd: use flags.Merge for grouping flags (#25392)"
            },
            {
                "date": "2022-07-25T09:06:22Z",
                "message": "eth/catalyst: better warning for ttd not configured (#25394)"
            },
            {
                "date": "2022-07-25T06:01:01Z",
                "message": "Merge pull request #25379 from holiman/leveldb_update\n\ndeps: update goleveldb"
            }
        ],
        "2022-07-23": [
            {
                "date": "2022-07-23T07:56:02Z",
                "message": "cmd/geth: eth/catalyst: enable authrpc by default (#25152)\n\n* cmd/geth: eth/catalyst: enable authrpc by default\r\n\r\n* eth/catalyst: rename catalyst -> Engine API in logs\r\n\r\n* eth/catalyst: don't panic"
            },
            {
                "date": "2022-07-23T07:54:11Z",
                "message": "params: set sepolia mergeNetsplitBlock to 1735371 (#25372)"
            },
            {
                "date": "2022-07-23T07:46:28Z",
                "message": "deps: update goleveldb"
            }
        ],
        "2022-07-22": [
            {
                "date": "2022-07-22T07:53:35Z",
                "message": "signer/core: add canonical TypedData hashing methods (#25283)"
            },
            {
                "date": "2022-07-22T07:52:12Z",
                "message": "params: set goerli TTD to 10_790_000 (#25324)"
            },
            {
                "date": "2022-07-22T07:51:01Z",
                "message": "cmd/puppeth: remove support for exporting non-Geth genesis configurations (#25329)\n\n* cmd/puppeth: remove support for exporting non-Geth genesis configurations\r\n\r\n* remove unused function"
            }
        ],
        "2022-07-21": [
            {
                "date": "2022-07-21T20:37:08Z",
                "message": "params: change Merge config to print simpler message\n\nThis fixes #25366"
            }
        ],
        "2022-07-19": [
            {
                "date": "2022-07-19T12:50:17Z",
                "message": "params: Add Shanghai and Cancun blocks (#25305)\n\n* params: Add Shangai and Cancun blocks\r\n\r\n* fix copy/paste error\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\n* fix typo in Shanghai name\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-07-19T09:44:48Z",
                "message": "accounts/abi: substitude arg%d to the range keyword (#25307)\n\n* accounts/abi: substitude arg%d to the range keyword\r\n\r\n* support more keywords\r\n\r\n* review feedback"
            }
        ],
        "2022-07-18": [
            {
                "date": "2022-07-18T11:22:56Z",
                "message": "cmd/geth: remove redundant 0x in dbGet/dbDelete (#25315)"
            }
        ],
        "2022-07-15": [
            {
                "date": "2022-07-15T16:37:51Z",
                "message": "p2p/discover: apply netrestrict in discv5 response handler (#25304)"
            },
            {
                "date": "2022-07-15T16:36:05Z",
                "message": "trie: fix 'gosimple' lint issue (#25309)"
            },
            {
                "date": "2022-07-15T12:01:07Z",
                "message": "tests: only activate merge on london rules (#25239)"
            },
            {
                "date": "2022-07-15T11:55:51Z",
                "message": "core, les, eth: port snap sync changes (#24898)\n\ncore, eth, les, trie: rework snap sync"
            },
            {
                "date": "2022-07-15T09:32:54Z",
                "message": "core: prevent negative fee during RPC calls (#25214)\n\nDuring RPC calls such as eth_call and eth_estimateGas, st.evm.Config.NoBaseFee is set\r\nwhich allows the gas price to be below the base fee. This results the tip being negative,\r\nand balance being subtracted from the coinbase instead of added to it, which results in a\r\npotentially negative coinbase balance interestingly. This can't happen during normal chain\r\nprocessing as outside of RPC calls the gas price is required to be at least the base fee,\r\nas NoBaseFee is false.\r\n\r\nThis change prevents this behavior by disabling fee payment when the fee is not set.\r\n\r\nCo-authored-by: lightclient@protonmail.com <lightclient@protonmail.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2022-07-14": [
            {
                "date": "2022-07-14T12:55:54Z",
                "message": "core: remove lock in BlockChain.ExportN (#25254)\n\n* Remove locking in (*BlockChain).ExportN\r\n\r\nSince ExportN is read-only, it shouldn't need the lock. (?)\r\n\r\n* Add hash check to detect reorgs during export.\r\n\r\n* fix check order\r\n\r\n* Update blockchain.go\r\n\r\n* Update blockchain.go\r\n\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
            },
            {
                "date": "2022-07-14T10:17:25Z",
                "message": "internal/ethapi: error if tx args includes chain id that doesn't match local (#25157)\n\n* internal/ethapi: error if tx args includes chain id that doesn't match local\r\n\r\n* internal/ethapi: simplify code a bit\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2022-07-14T09:13:59Z",
                "message": "Merge pull request #25096 from lightclient/remove-version-field\n\nall: remove version field"
            },
            {
                "date": "2022-07-14T08:34:16Z",
                "message": "accounts/abi/bind/backends: return hash of new blocks (#25163)\n\n\r\nCo-authored-by: Jens <jmw.1906@gmx.de>"
            },
            {
                "date": "2022-07-14T08:29:05Z",
                "message": "accounts/abi: fix typo in comment (#25271)"
            },
            {
                "date": "2022-07-14T07:30:53Z",
                "message": "Merge pull request #25293 from sandakersmann/master\n\nbuild: upgrade -dlgo version to Go 1.18.4"
            }
        ],
        "2022-07-12": [
            {
                "date": "2022-07-12T21:19:41Z",
                "message": "build: upgrade -dlgo version to Go 1.18.4"
            },
            {
                "date": "2022-07-12T11:39:05Z",
                "message": "Merge pull request #25290 from karalabe/tar-archive-folder-time\n\ninternal/build: add a timestamp to the tar archive folder"
            },
            {
                "date": "2022-07-12T11:35:35Z",
                "message": "internal/build: add a timestamp to the tar archive folder"
            },
            {
                "date": "2022-07-12T11:09:42Z",
                "message": "Merge pull request #25288 from karalabe/enable-sepolia-dnsdisc\n\nparams: enable DNS discovery on Sepolia too"
            },
            {
                "date": "2022-07-12T11:06:23Z",
                "message": "params: enable DNS discovery on Sepolia too"
            },
            {
                "date": "2022-07-12T08:10:12Z",
                "message": "eth/tracers: add initial revertReasonTracer tracer (#25265)\n\nAdds a native tracer that returns that in case of failure returns the error message or the revert reason of a transaction.\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-07-12T07:08:45Z",
                "message": "core, eth: pre-allocate map in storage copy (#25279)"
            }
        ],
        "2022-07-11": [
            {
                "date": "2022-07-11T07:33:12Z",
                "message": "Merge pull request #25247 from sandakersmann/master\n\nbuild: upgrade -dlgo version to Go 1.18.3"
            }
        ],
        "2022-07-10": [
            {
                "date": "2022-07-10T08:15:54Z",
                "message": "p2p/discover: fix typos in comments (#25272)"
            }
        ],
        "2022-07-08": [
            {
                "date": "2022-07-08T19:25:12Z",
                "message": "rpc: add graceful shutdown timeout for HTTP server (#25258)\n\nThis change ensures the HTTP server will always terminate within\r\nat most 5s, even when all connections are busy and do not become\r\nidle.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2022-07-07": [
            {
                "date": "2022-07-07T19:50:28Z",
                "message": "internal/ethapi: fix chain ID check to return all non-zero IDs (#25244)"
            }
        ],
        "2022-07-06": [
            {
                "date": "2022-07-06T13:16:05Z",
                "message": "core/types: fix typo in comment (#25249)"
            },
            {
                "date": "2022-07-06T06:49:09Z",
                "message": "trie: fix typo in comment (#25241)\n\nparalallel -> parallel"
            }
        ],
        "2022-07-05": [
            {
                "date": "2022-07-05T22:12:39Z",
                "message": "build: upgrade -dlgo version to Go 1.18.3"
            },
            {
                "date": "2022-07-05T12:48:34Z",
                "message": "internal/ethapi: add basefee to block overrides (#25219)"
            },
            {
                "date": "2022-07-05T12:45:44Z",
                "message": "go.mod: updated logfmt dependency (#25231)\n\nThis fixes an issue in abigen tests with go 1.17."
            },
            {
                "date": "2022-07-05T07:05:10Z",
                "message": "consensus/beacon: verify timestamp is greater than parent timestamp (#25236)"
            },
            {
                "date": "2022-07-05T07:02:49Z",
                "message": "core: allow external processor (#25233)"
            }
        ],
        "2022-07-04": [
            {
                "date": "2022-07-04T17:52:19Z",
                "message": "cmd/geth, cmd/devp2p: fix some cli parsing issues (#25234)\n\n* cmd/geth: add some missing argument count checks\r\n\r\n* internal/flags: skip cmds with no action func in MigrateGlobalFlags\r\n\r\n* internal/flags: add Merge\r\n\r\n* cmd/devp2p: re-add listener config flags in discv4 commands"
            },
            {
                "date": "2022-07-04T13:01:07Z",
                "message": "signer/core/apitypes: support primitive types int96/uint96 (#25105)\n\nI have a EIP712 typehash using uint96, but it's currently not supported\r\nby go-ethereum. This change fixes it."
            },
            {
                "date": "2022-07-04T09:25:17Z",
                "message": "core: apply ttd override to uninitialized db (#25136)\n\n* core: apply ttd override to genesis block\r\n\r\n* core: apply overrides properly"
            },
            {
                "date": "2022-07-04T09:24:06Z",
                "message": "core: allow external code to set the block validator for malicious tests (#25119)\n\n* core: don't validate state\r\n\r\n* core: allow external validator\r\n\r\n* core: revert\r\n\r\n* core: comments\r\n\r\n* Update blockchain_reader.go\r\n\r\n* core: move SetValidator to blockchain.go\r\n\r\n* core: rename method"
            },
            {
                "date": "2022-07-04T08:54:15Z",
                "message": "consensus/beacon: copy td value so we can modify it (#25230)\n\n* consensus/beacon: copy td value so we can modify it\r\n\r\n* consensus/beacon: copy td value so we can modify it"
            },
            {
                "date": "2022-07-04T08:03:32Z",
                "message": "all: change format `0x%x` to `%#x` (#25221)"
            },
            {
                "date": "2022-07-04T07:21:00Z",
                "message": "Replace fmt.Errorf with errors.New in abi argument (#25181)\n\nReplace unnecessary fmt.Errorf with errors.New in accounts/abi/argument.go"
            }
        ],
        "2022-07-01": [
            {
                "date": "2022-07-01T11:38:26Z",
                "message": "eth/catalyst: disallow importing blocks via newPayload during snap sync (#25210)\n\n* eth/catalyst: disallow importing blocks via newPayload during snap sync\r\n\r\n* eth/catalyst: make tests pass by using full sync only\r\n\r\n* eth/catalysts: make the import delay a bit cleaner\r\n\r\n* eth/catalyst: fix typo\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
            }
        ],
        "2022-06-30": [
            {
                "date": "2022-06-30T06:23:34Z",
                "message": "Merge pull request #25206 from dbadoy/master\n\ncommon/prque: fix typo"
            },
            {
                "date": "2022-06-30T04:24:04Z",
                "message": "common/prque: fix typo"
            }
        ],
        "2022-06-29": [
            {
                "date": "2022-06-29T22:30:39Z",
                "message": "params: begin v1.10.21 release cycle"
            },
            {
                "date": "2022-06-29T22:27:43Z",
                "message": "params: go-ethereum v1.10.20 stable"
            },
            {
                "date": "2022-06-29T21:19:30Z",
                "message": "build/deb: fix auto-completion install paths (#25204)"
            },
            {
                "date": "2022-06-29T18:49:04Z",
                "message": "build: upgrade to golangci-lint v1.46.2 (#25202)\n\nThis upgrade is required to fix lint issues with urfave/cli/v2, which\r\nuses generics when built with Go 1.18"
            },
            {
                "date": "2022-06-29T17:41:39Z",
                "message": "build: fix auto-completion scripts and include them in .deb package (#25195)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-06-29T12:13:19Z",
                "message": "consensus/beacon: check that only the latest pow block is valid ttd block (#25187)\n\n* consensus/beacon: check that only the latest pow block is valid ttd block\r\n\r\n* consensus/beacon: move verification to async function\r\n\r\n* consensus/beacon: fix verifyTerminalPoWBlock, add test cases\r\n\r\n* consensus/beacon: cosmetic changes\r\n\r\n* consensus/beacon: apply karalabe's fixes"
            },
            {
                "date": "2022-06-29T10:13:00Z",
                "message": "common: increase StorageSize test coverage (#25188)"
            },
            {
                "date": "2022-06-29T09:58:59Z",
                "message": "internal/ethapi: return chain id for EIP-155 legacy txs (#25155)"
            },
            {
                "date": "2022-06-29T09:57:12Z",
                "message": "cmd/utils: fix applying bootstrap nodes from config file (#25174)"
            },
            {
                "date": "2022-06-29T09:54:42Z",
                "message": "core/rawdb: simplify TestDiskSeek to use memorydb (#25182)"
            },
            {
                "date": "2022-06-29T09:47:33Z",
                "message": "core/rawdb: fix typo in comment (#25191)"
            },
            {
                "date": "2022-06-29T08:54:57Z",
                "message": "fix: linter warning (#25192)"
            }
        ],
        "2022-06-28": [
            {
                "date": "2022-06-28T15:25:47Z",
                "message": "cmd/geth, p2p: add support for custom discovery UDP port (#24979)\n\nThis adds a new flag to set the discovery port to be different from\r\nthe TCP listener port.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-06-28T12:48:13Z",
                "message": "params: set TTD for sepolia testnet (#25179)"
            }
        ],
        "2022-06-27": [
            {
                "date": "2022-06-27T16:22:36Z",
                "message": "cmd: migrate to urfave/cli/v2 (#24751)\n\nThis change updates our urfave/cli dependency to the v2 branch of the library.\r\nThere are some Go API changes in cli v2:\r\n\r\n- Flag values can now be accessed using the methods ctx.Bool,\r\n  ctx.Int, ctx.String, ... regardless of whether the flag is 'local' or\r\n  'global'.\r\n\r\n- v2 has built-in support for flag categories. Our home-grown category\r\n  system is removed and the categories of flags are assigned as part of\r\n  the flag definition.\r\n\r\nFor users, there is only one observable difference with cli v2: flags must now\r\nstrictly appear before regular arguments. For example, the following command is\r\nnow invalid:\r\n\r\n   geth account import mykey.json --password file.txt\r\n\r\nInstead, the command must be invoked as follows:\r\n\r\n   geth account import --password file.txt mykey.json"
            },
            {
                "date": "2022-06-27T10:33:13Z",
                "message": "all: remove `public` field from `rpc.API` (#25059)\n\nall: remove public field from rpc.API"
            }
        ],
        "2022-06-15": [
            {
                "date": "2022-06-15T08:39:07Z",
                "message": "all: remove version field from rpc.API"
            },
            {
                "date": "2022-06-15T12:56:01Z",
                "message": "params: begin v1.10.20 release cycle"
            },
            {
                "date": "2022-06-15T12:35:32Z",
                "message": "params: release Geth v1.10.19"
            },
            {
                "date": "2022-06-15T12:35:53Z",
                "message": "node: add info message when JWT secret is loaded (#25095)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-06-15T11:10:38Z",
                "message": "cmd, params: implement Gray Glacier hard-fork (EIP-5133) (#25088)\n\n* cmd/geth, params: implement Gray Glacier (EIP-5133)\r\n\r\n* cmd/evm: add gray glacier tests\r\n\r\n* params: nitpicks\r\n\r\n* params: fixes"
            },
            {
                "date": "2022-06-15T10:56:47Z",
                "message": "eth: introduce eth67 protocol (#24093)\n\nThe new protocol version removes support for GetNodeData.\r\nSee https://eips.ethereum.org/EIPS/eip-4938 for more information.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-06-15T07:29:23Z",
                "message": "eth: add missing period at end of sentences (#25058)\n\neth: add missing periods on end of comments"
            }
        ],
        "2022-06-25": [
            {
                "date": "2022-06-25T19:34:21Z",
                "message": "internal/ethapi: add note about eth_chainId compatibility with EIP-695 (#25168)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2022-06-24": [
            {
                "date": "2022-06-24T16:03:13Z",
                "message": "internal/ethapi: always return chain id (#25166)\n\nThe error was introduced in PR #21686, but there is no good reason to enforce sync\r\nin this method, and it causes issues with EL/CL integration."
            },
            {
                "date": "2022-06-24T12:28:01Z",
                "message": "eth: fix typo (#25161)"
            }
        ],
        "2022-06-23": [
            {
                "date": "2022-06-23T16:11:47Z",
                "message": "eth/tracers: optimize goja buffer conversion (#25156)\n\nThis changes the []byte <-> Uint8Array conversion to use an\r\nArrayBuffer, avoiding inefficient copying of the slice data in Goja.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-06-23T08:35:27Z",
                "message": "go.mod: upgrade to latest goleveldb (#25067)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2022-06-22": [
            {
                "date": "2022-06-22T20:51:45Z",
                "message": "core: fix typo in txpool (#25149)\n\nFix typo in txPool truncateQueue comment"
            },
            {
                "date": "2022-06-22T11:59:55Z",
                "message": "eth, miner: retrieve mining state from live database (#25139)\n\n* miner: retrieve mining state from live database\r\n\r\n* eth/catalyst: ignore stale fcu events from cl"
            }
        ],
        "2022-06-21": [
            {
                "date": "2022-06-21T09:59:02Z",
                "message": "README,rpc: remove mention of \"shh\" RPC API (#25137)"
            },
            {
                "date": "2022-06-21T09:16:05Z",
                "message": "cmd/geth: drop geth js command (#25000)\n\n* cmd/geth: drop js command\r\n\r\n* cmd: simplify ipc path determination for attach\r\n\r\n* Add deprecation warning for js\r\n\r\n* rm testdata for exec\r\n\r\n* fix account unlock test cases\r\n\r\n* Update cmd/geth/consolecmd.go\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\n* fix\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-06-21T09:05:43Z",
                "message": "all: remove concept of public/private API definitions (#25053)\n\n* internal/ethapi: rename PublicEthereumAPI to EthereumAPI\r\n\r\n* eth: rename PublicEthereumAPI to EthereumAPI\r\n\r\n* internal/ethapi: rename PublicTxPoolAPI to TxPoolAPI\r\n\r\n* internal/ethapi: rename PublicAccountAPI to EthereumAccountAPI\r\n\r\n* internal/ethapi: rename PrivateAccountAPI to PersonalAccountAPI\r\n\r\n* internal/ethapi: rename PublicBlockChainAPI to BlockChainAPI\r\n\r\n* internal/ethapi: rename PublicTransactionPoolAPI to TransactionAPI\r\n\r\n* internal/ethapi: rename PublicDebugAPI to DebugAPI\r\n\r\n* internal/ethapi: move PrivateDebugAPI methods to DebugAPI\r\n\r\n* internal/ethapi: rename PublicNetAPI to NetAPI\r\n\r\n* les: rename PrivateLightServerAPI to LightServerAPI\r\n\r\n* les: rename PrivateLightAPI to LightAPI\r\n\r\n* les: rename PrivateDebugAPI to DebugAPI\r\n\r\n* les: rename PublicDownloaderAPI to DownloaderAPI\r\n\r\n* eth,les: rename PublicFilterAPI to FilterAPI\r\n\r\n* eth: rename PublicMinerAPI to MinerAPI\r\n\r\n* eth: rename PublicDownloaderAPI to DownloaderAPI\r\n\r\n* eth: move PrivateMinerAPI methods to MinerAPI\r\n\r\n* eth: rename PrivateAdminAPI to AdminAPI\r\n\r\n* eth: rename PublicDebugAPI to DebugAPI\r\n\r\n* eth: move PrivateDebugAPI methods to DebugAPI\r\n\r\n* node: rename publicAdminAPI to adminAPI\r\n\r\n* node: move privateAdminAPI methods to adminAPI\r\n\r\n* node: rename publicWeb3API to web3API\r\n\r\n* eth,internal/ethapi: sync comments with previous renamings"
            },
            {
                "date": "2022-06-21T09:00:37Z",
                "message": "trie: fix size accounting in cleaner (#25007)\n\nDecrease children size instead of dirties size when marking dirties as cleaned up in trie cleaner"
            }
        ],
        "2022-06-20": [
            {
                "date": "2022-06-20T08:40:06Z",
                "message": "cmd/faucet: add sepolia network support (#25128)\n\ncmd/faucet: Add Sepolia network support to faucet"
            },
            {
                "date": "2022-06-20T08:38:46Z",
                "message": "internal/ethapi: remove SignAndSendTransaction (#25111)"
            },
            {
                "date": "2022-06-20T08:20:32Z",
                "message": "cmd/faucet: more verbose message about private posts (#25129)\n\n* cmd/faucet: Add error message for private posts\r\n\r\nFixes #22631\r\n\r\n* grammar"
            },
            {
                "date": "2022-06-20T08:10:25Z",
                "message": "node: make jwt tests less time-dependent (#25120)"
            }
        ],
        "2022-06-16": [
            {
                "date": "2022-06-16T22:44:30Z",
                "message": "tests/fuzzers/rlp: avoid very large input (#25109)\n\nThe oss-fuzz engine crashes due to stack overflow decoding a large nested\r\nstructure into a interface{}. This PR limits the size of the input data, so\r\nshould avoid such crashes."
            },
            {
                "date": "2022-06-16T15:08:25Z",
                "message": "internal/ethapi: add comment explaining return of nil instead of error (#25097)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2022-06-14": [
            {
                "date": "2022-06-14T12:09:48Z",
                "message": "all: prefer `new(big.Int)` over `big.NewInt(0)` (#25087)\n\nminor performance improvement: `big.NewInt(0).Xxx` -> `new(big.Int).Xxx`"
            },
            {
                "date": "2022-06-14T12:08:43Z",
                "message": "common: improve pretty duration regex (#25073)\n\n* common: improve pretty duration regex\r\n\r\n* common: improve pretty duration regex"
            },
            {
                "date": "2022-06-14T11:47:11Z",
                "message": "cmd/ethkey: use accounts.TextHash (#25069)"
            },
            {
                "date": "2022-06-14T10:59:05Z",
                "message": "readme,eth: remove references to eth.wiki (#25086)"
            },
            {
                "date": "2022-06-14T08:24:29Z",
                "message": "cmd/utils: update --ropsten description (#25078)"
            }
        ],
        "2022-06-13": [
            {
                "date": "2022-06-13T14:24:45Z",
                "message": "all: more linters (#24783)\n\nThis enables the following linters\r\n\r\n- typecheck\r\n- unused\r\n- staticcheck\r\n- bidichk\r\n- durationcheck\r\n- exportloopref\r\n- gosec\r\n\r\nWIth a few exceptions.\r\n\r\n- We use a deprecated protobuf in trezor. I didn't want to mess with that, since I cannot meaningfully test any changes there.\r\n- The deprecated TypeMux is used in a few places still, so the warning for it is silenced for now.\r\n- Using string type in context.WithValue is apparently wrong, one should use a custom type, to prevent collisions between different places in the hierarchy of callers. That should be fixed at some point, but may require some attention.\r\n- The warnings for using weak random generator are squashed, since we use a lot of random without need for cryptographic guarantees."
            }
        ],
        "2022-06-10": [
            {
                "date": "2022-06-10T15:47:06Z",
                "message": "Chore:  Minimal gramatical errors (signleton -> singleton) (#25057)\n\ncore: fix typos"
            },
            {
                "date": "2022-06-10T08:57:32Z",
                "message": "internal/ethapi: fix typo in comment (#25056)\n\ntypo error: keccack256 -> keccak256"
            }
        ],
        "2022-06-08": [
            {
                "date": "2022-06-08T16:40:37Z",
                "message": "core/evm: fix error in comment (#25040)\n\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-06-08T16:32:07Z",
                "message": "core/types: improve LogForStorage and ReceiptForStorage comments (#25032)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-06-08T16:31:43Z",
                "message": "core/types: remove unused field 'td' in Block (#25010)"
            },
            {
                "date": "2022-06-08T13:36:25Z",
                "message": "eth/catalyst: remove unauthenticated 'engine' api (#24997)\n\nRemoves engine from any unauthenticated RPC service."
            },
            {
                "date": "2022-06-08T13:34:43Z",
                "message": "Merge pull request #25044 from karalabe/rpc-histograms\n\nrpc: swap out timer metrics to histograms"
            },
            {
                "date": "2022-06-08T13:24:33Z",
                "message": "rpc: swap out timer metrics to histograms"
            }
        ],
        "2022-06-07": [
            {
                "date": "2022-06-07T15:27:21Z",
                "message": "p2p: use errors.Is for error comparison (#24882)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-06-07T10:49:07Z",
                "message": "eth, les, params: log chain config a bit saner (#24904)\n\nPreviously on Geth startup we just logged the chain config is a semi-json-y format. Whilst that worked while we had a handful of hard-forks defined, currently it's kind of unwieldy. \r\n\r\nThis PR converts that original data dump and converts it into a user friendly - alas multiline - log output."
            },
            {
                "date": "2022-06-07T10:46:27Z",
                "message": "accounts: increase parseURL test coverage (#25033)\n\naccounts/url: add test logic what check null string to parseURL()"
            },
            {
                "date": "2022-06-07T10:15:22Z",
                "message": "p2p/discover: fix panicky test (#25038)"
            },
            {
                "date": "2022-06-07T07:06:34Z",
                "message": "tests/fuzzers/bls12381: fix blst pairing (#25037)\n\n* tests/fuzzers/bls12381: fix blst pairing\r\n\r\n* tests/fuzzers/bls12381: only build on gofuzz\r\n\r\n* tests/fuzzers/bls12381: remove unused code\r\n\r\n* tests/fuzzers/bls12381: remove unused code"
            },
            {
                "date": "2022-06-07T06:38:54Z",
                "message": "accounts/abi/bind: fix duplicate field names in the generated go struct (#24924)\n\n* accounts/abi/bind: fix duplicate field names in the generated go struct #24627\r\n\r\n* accounts, cmd/abigen: resolve name conflicts\r\n\r\n* ci lint, accounts/abi: remove unused function overloadedArgName\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2022-06-07T06:31:19Z",
                "message": "eth/filters: fix getLogs for pending block (#24949)\n\n* eth/filters: fix pending for getLogs\r\n\r\n* add pending method to test backend\r\n\r\n* fix block range validation"
            },
            {
                "date": "2022-06-07T06:11:01Z",
                "message": "params: update ropsten terminal total difficulty block (#25018)"
            },
            {
                "date": "2022-06-07T06:02:04Z",
                "message": "trie: move locking into trieDB insert method (#25030)\n\nMove locking into trieDB insert function"
            }
        ],
        "2022-06-06": [
            {
                "date": "2022-06-06T15:55:16Z",
                "message": "eth/tracers: fix typo in 4byte_tracer_legacy.js (#25020)\n\nindentifier -> identifier"
            },
            {
                "date": "2022-06-06T15:33:05Z",
                "message": "eth/api: use `hexutil.Bytes` for account range method (#25024)\n\neth/api: use hexutil.Bytes for range at methods"
            },
            {
                "date": "2022-06-06T15:14:55Z",
                "message": "all: introduce trie owner notion (#24750)\n\n* cmd, core/state, light, trie, eth: add trie owner notion\r\n\r\n* all: refactor\r\n\r\n* tests: fix goimports\r\n\r\n* core/state/snapshot: fix ineffasigns\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-06-06T15:09:39Z",
                "message": "cmd/geth, core/state/snapshot: rework journal loading, implement account-check (#24765)\n\n* cmd/geth, core/state/snapshot: rework journal loading, implement account-check\r\n\r\n* core/state/snapshot, cmd/geth: polish code (#37)\r\n\r\n* core/state/snapshot: minor nits\r\n\r\n* core/state/snapshot: simplify error logic\r\n\r\n* cmd/geth: go format\r\n\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
            },
            {
                "date": "2022-06-06T15:01:59Z",
                "message": "tests/fuzzers/bls12381: fix blst deserializing (#25036)\n\n* tests/fuzzers/bls12381: fix blst deserializing\r\n\r\n* tests/fuzzers/bls12381: fix blst deserializing"
            }
        ],
        "2022-06-03": [
            {
                "date": "2022-06-03T08:40:14Z",
                "message": "core/vm: optimize jumpdest analysis (#23500)\n\ncore/vm: optimize PUSH opcode discrimination"
            },
            {
                "date": "2022-06-03T07:25:25Z",
                "message": "go.mod: clean up (#25017)"
            }
        ],
        "2022-06-02": [
            {
                "date": "2022-06-02T18:26:44Z",
                "message": "go.mod: set go version to 1.17 (#24926)\n\nset go version to 1.17"
            },
            {
                "date": "2022-06-02T18:25:12Z",
                "message": "consensus/misc: reduce allocations and improve comments in CalcBaseFee (#24958)\n\n* consensus/misc: reduce allocations in CalcBaseFee\r\n\r\n* consensus/misc: add formulas of CalcBaseFee"
            },
            {
                "date": "2022-06-02T18:21:35Z",
                "message": "node: make jwt test less dependent on time (#25016)"
            },
            {
                "date": "2022-06-02T11:15:17Z",
                "message": "eth/catalyst: return 0x0 on Invalid block on top of pow block (#25006)"
            },
            {
                "date": "2022-06-02T11:13:28Z",
                "message": "tests/fuzzers/bls12381: Add BLST to fuzzing support (#24249)\n\n* tests/fuzzers/bls12381: added blst library\r\n\r\n* go.mod: added blst dependency\r\n\r\n* tests/fuzzers/bls12381: stuff\r\n\r\n* tests/fuzzers/bls12381: added blst to pairing fuzzer"
            },
            {
                "date": "2022-06-02T09:39:36Z",
                "message": "eth/tracers: add support for block overrides in debug_traceCall (#24871)\n\nThis PR adds support for block overrides when doing debug_traceCall.\r\n\r\n- Previously, debug_traceCall against pending erroneously used a common.Hash{} stateroot when looking up the state, meaning that a totally empty state was used -- so it always failed,\r\n- With this change, we reject executing debug_traceCall against pending.\r\n- And we add ability to override all evm-visible header fields."
            }
        ],
        "2022-06-01": [
            {
                "date": "2022-06-01T09:03:24Z",
                "message": "core: fix canonical hash marker update (#24996)\n\n* core: fix reorg\r\n\r\n* core: revert change for memory efficiency\r\n\r\n* core: revert changes"
            }
        ],
        "2022-05-31": [
            {
                "date": "2022-05-31T09:11:50Z",
                "message": "core/beacon: prevent invalid logsBloom length panic (#24946)\n\n* core/beacon: prevent invalid logsBloom length panic\r\n\r\n* core/beacon: prevent negative baseFeePerGas\r\n\r\n* Update core/beacon/types.go\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\n* eth/catalys: go format\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2022-05-30": [
            {
                "date": "2022-05-30T18:35:37Z",
                "message": "eth/filters: use buffered channel to avoid goroutine leak (#24928)"
            },
            {
                "date": "2022-05-30T12:45:27Z",
                "message": "contracs/checkpointoracle: fix directives (#24944)\n\ncontracts/checkpointoracle: redefine go-generate logic"
            },
            {
                "date": "2022-05-30T11:28:15Z",
                "message": "eth/catalyst: fix edge case in NewPayload (#24955)\n\nFixes an issue where we would accept a NewPayload where the grandparent is already post ttd, and the parent still has a Difficulty"
            },
            {
                "date": "2022-05-30T11:00:23Z",
                "message": "consensus/clique: fix race condition (#24957)\n\n* consensus/clique: remove race condition\r\n\r\n* consensus/clique: fix one more signer data race\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2022-05-30T10:37:42Z",
                "message": "cmd/geth: extend traverseRawState command (#24954)\n\nThis PR adds node verification into traverseRawState command, so corrupted trie nodes can also be detected."
            },
            {
                "date": "2022-05-30T06:42:06Z",
                "message": "core: use less memory during reorgs (#24616)\n\nThis PR significantly reduces the memory consumption of a long reorg"
            }
        ],
        "2022-05-27": [
            {
                "date": "2022-05-27T06:23:55Z",
                "message": "params: set emergency ropsten TTD to 100_000_000_000_000_000_000_000 (#24975)"
            }
        ],
        "2022-05-26": [
            {
                "date": "2022-05-26T07:26:37Z",
                "message": "cmd/abigen: accept combined-json via stdin (#24960)"
            },
            {
                "date": "2022-05-26T07:22:10Z",
                "message": "cmd/geth: exit when freezer has legacy receipts (#24943)\n\nIn #24028 we flagged a warning when finding legacy receipts in the freezer. This PR nudges users a bit more strongly by preventing geth from starting in this case until receipts have been migrated.\r\n\r\nIt also adds a flag --ignore-legacy-receipts which when present allows geth to start normally."
            }
        ],
        "2022-05-25": [
            {
                "date": "2022-05-25T12:44:52Z",
                "message": "params: begin v1.10.19 release cycle"
            },
            {
                "date": "2022-05-25T12:42:54Z",
                "message": "params: go-ethereum v1.10.18 stable"
            },
            {
                "date": "2022-05-25T11:37:02Z",
                "message": "go.mod: upgrade to docker v1.6.2 (#24956)\n\nThis upgrade is necessary to silence a Dependabot warning."
            }
        ],
        "2022-05-24": [
            {
                "date": "2022-05-24T19:04:21Z",
                "message": "AUTHORS: remove one more duplicate entry (#24950)"
            },
            {
                "date": "2022-05-24T18:39:40Z",
                "message": "all: update license headers and AUTHORS from git history (#24947)"
            },
            {
                "date": "2022-05-24T14:11:14Z",
                "message": "Merge pull request #24945 from karalabe/cht-1.10.18\n\nparams: update CHTs for Geth 1.10.18"
            },
            {
                "date": "2022-05-24T12:50:37Z",
                "message": "params: update CHTs for Geth 1.10.18"
            },
            {
                "date": "2022-05-24T08:53:11Z",
                "message": "Merge pull request #24867 from holiman/no_preop_memexpand\n\ncore/vm: for tracing, do not report post-op memory"
            },
            {
                "date": "2022-05-24T08:20:37Z",
                "message": "go.mod: upgrade to btcsuite/btcd/btcec v2.2.0 (#24939)\n\nThis should fully resolve dependency conflict issues in modules\r\nthat also depend on btcsuite/btcd v0.22.0."
            },
            {
                "date": "2022-05-24T08:18:03Z",
                "message": "signer/core: always pad clique header extra data with space for sealer's signature (#24941)\n\n* signer/core: always pad clique header extra data with space for sealer's signature\r\n\r\n* capitalize comment"
            },
            {
                "date": "2022-05-24T07:50:47Z",
                "message": "Merge pull request #24936 from holiman/no_compilers\n\ncommon/compiler, cmd/abigen: remove solc/vyper compiler integration"
            }
        ],
        "2022-05-23": [
            {
                "date": "2022-05-23T20:26:10Z",
                "message": "eth/tracers/js: drop duktape engine (#24934)\n\n#23773 added a JS tracer which uses Goja as its engine. In this PR I remove the previous tracer which used duktape as well as remove the dependencies.\r\n\r\nThis PR also comes with 2 fixes in the Goja tracer and one small behavioural change:\r\n\r\n    I had handled errors in the native Go functions by panicing. My oversight was that Goja only handles panics with a Goja.Value as argument. The difference is panic(goja.Value) allows JS to catch the exception whereas Interrupt(error) doesn't.\r\n    There was a race in how I handled Stop.\r\n    Because of 1. some of the methods that simply return nil on error (like memory.slice) now throw an exception."
            },
            {
                "date": "2022-05-23T12:29:23Z",
                "message": "common/compiler, cmd/abigen: remove solc/vyper compiler integration"
            },
            {
                "date": "2022-05-23T15:35:46Z",
                "message": "accounts/abi: validate fieldnames, fixes #24930 (#24932)"
            },
            {
                "date": "2022-05-23T10:26:22Z",
                "message": "core/state/snapshot: detect and clean up dangling storage snapshot in generation (#24811)\n\n* core/state/snapshot: check dangling storages when generating snapshot\r\n\r\n* core/state/snapshot: polish\r\n\r\n* core/state/snapshot: wipe the last part of the dangling storages\r\n\r\n* core/state/snapshot: fix and add tests\r\n\r\n* core/state/snapshot: fix comment\r\n\r\n* README: remove mentions of fast sync (#24656)\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\n\r\n* core, cmd: expose dangling storage detector for wider usage\r\n\r\n* core/state/snapshot: rename variable\r\n\r\n* core, ethdb: use global iterators for snapshot generation\r\n\r\n* core/state/snapshot: polish\r\n\r\n* cmd, core/state/snapshot: polish\r\n\r\n* core/state/snapshot: polish\r\n\r\n* Update core/state/snapshot/generate.go\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\n* ethdb: extend db test suite and fix memorydb iterator\r\n\r\n* ethdb/dbtest: rollback changes\r\n\r\n* ethdb/memorydb: simplify iteration\r\n\r\n* core/state/snapshot: update dangling counter\r\n\r\n* core/state/snapshot: release iterators\r\n\r\n* core/state/snapshot: update metrics\r\n\r\n* core/state/snapshot: update time metrics\r\n\r\n* metrics/influxdb: temp solution to present counter meaningfully, remove it\r\n\r\n* add debug log, revert later\r\n\r\n* core/state/snapshot: fix iterator panic\r\n\r\n* all: customized snapshot iterator for backward iteration\r\n\r\n* core, ethdb: polish\r\n\r\n* core/state/snapshot: remove debug log\r\n\r\n* core/state/snapshot: address comments from peter\r\n\r\n* core/state/snapshot: reopen the iterator at the next position\r\n\r\n* ethdb, core/state/snapshot: address comment from peter\r\n\r\n* core/state/snapshot: reopen exhausted iterators\r\n\r\nCo-authored-by: Tbnoapi <63448616+nuoomnoy02@users.noreply.github.com>\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2022-05-20": [
            {
                "date": "2022-05-20T15:25:17Z",
                "message": "build/bot: create .ssh directory in ppa-build.sh (#24922)"
            },
            {
                "date": "2022-05-20T15:19:22Z",
                "message": "build/bot: avoid install of python-bzrlib, python-paramiko in PPA build (#24921)"
            },
            {
                "date": "2022-05-20T14:46:38Z",
                "message": "build/bot: add ppa-build.sh (#24919)"
            },
            {
                "date": "2022-05-20T13:52:22Z",
                "message": "build/bot: remove xctool invocation in macos build script (#24918)"
            },
            {
                "date": "2022-05-20T13:03:15Z",
                "message": "build/bot: add mac build script (#24917)"
            },
            {
                "date": "2022-05-20T09:50:56Z",
                "message": "Merge pull request #24915 from karalabe/catalyst-custom-errors\n\ncore, eth, les, rpc: polish catalyst errors, add context"
            },
            {
                "date": "2022-05-20T09:15:54Z",
                "message": "core, eth, les, rpc: polish catalyst errors, add context"
            },
            {
                "date": "2022-05-20T08:12:12Z",
                "message": "eth/catalyst: update implementation to spec (#24802)\n\n* eth/catalyst: return invalid payload attributes error\r\n\r\n* eth/catalyst: implement LVH as specified, add tests\r\n\r\n* eth/catalyst: return current block hash not header hash\r\n\r\n* eth/catalyst: fix test\r\n\r\n* eth/catalyst: bring error codes in line with spec"
            }
        ],
        "2022-05-19": [
            {
                "date": "2022-05-19T12:35:30Z",
                "message": "eth/tracers/js: add memory.length method (#24887)"
            },
            {
                "date": "2022-05-19T08:27:29Z",
                "message": "Merge pull request #24908 from zhaochonghe/master\n\ncore: fix the order of address in queue"
            },
            {
                "date": "2022-05-19T08:00:45Z",
                "message": "tests: update reference tests (#24899)\n\n* tests: update reference tests\r\n\r\n* tests: fix flaw in state test execution\r\n\r\n* f"
            },
            {
                "date": "2022-05-19T07:25:22Z",
                "message": "core: fix the order of address in queue (#24907)\n\nreverse the order of address in queue"
            },
            {
                "date": "2022-05-19T05:25:34Z",
                "message": "Merge pull request #24905 from holiman/fix_has\n\nethdb/remotedb: fix flawed check in Has/HasAncient"
            }
        ],
        "2022-05-18": [
            {
                "date": "2022-05-18T18:02:05Z",
                "message": "ethdb/remotedb: fix flawed check in Has/HasAncient"
            },
            {
                "date": "2022-05-18T15:00:28Z",
                "message": "Merge pull request #24901 from karalabe/fix-linter\n\nparams: fix broken linter"
            },
            {
                "date": "2022-05-18T14:58:59Z",
                "message": "params: fix broken linter"
            },
            {
                "date": "2022-05-18T14:48:08Z",
                "message": "params: update goerli bootnodes (#24900)\n\n* params: update goerli bootnodes\r\n\r\n* params: use ip for enodes"
            },
            {
                "date": "2022-05-18T14:34:18Z",
                "message": "eth/tracers/js: goja tracer (#23773)\n\nThis adds a JS tracer runtime environment based on the Goja VM. The new\r\nruntime replaces the duktape runtime, which will be removed soon.\r\n\r\nGoja is implemented in Go and is faster for cases where the Go <-> JS\r\ntransition overhead dominates overall performance. It is faster because\r\nduktape is written in C, and the transition cost includes the cost of using\r\ncgo. Another reason for using Goja is that go-duktape is not maintained\r\nanymore.\r\n\r\nWe expect the performace of JS tracing to be at least as good or better with\r\nthis change."
            },
            {
                "date": "2022-05-18T14:33:37Z",
                "message": "eth/catalyst, miner: build the execution payload async (#24866)\n\n* eth/catalyst: build the execution payload async\r\n\r\n* miner: added comment, added test case\r\n\r\n* eth/catalyst: miner: move async block production to miner\r\n\r\n* eth/catalyst, miner: support generate seal block async\r\n\r\n* miner: rework GetSealingBlockAsync to use a passed channel\r\n\r\n* miner: apply rjl's diff\r\n\r\n* eth/catalyst: nitpicks\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2022-05-18T14:30:42Z",
                "message": "core, eth, internal, rpc: implement final block (#24282)\n\n* eth: core: implement finalized block\r\n\r\n* eth/catalyst: fix final block\r\n\r\n* eth/catalyst: update finalized head gauge\r\n\r\n* internal/jsre/deps: updated web3.js to allow for finalized block\r\n\r\n* eth/catalyst: make sure only one thread can call fcu\r\n\r\n* eth/catalyst: nitpicks\r\n\r\n* eth/catalyst: use plain mutex\r\n\r\n* eth: nitpicks"
            },
            {
                "date": "2022-05-18T14:27:17Z",
                "message": "ethdb/remotedb, cmd: add support for remote (readonly) databases (#24836)\n\n* ethdb/remotedb, cmd: add support for remote (readonly) databases\r\n\r\n* ethdb/remotedb: minor changes\r\n\r\n* ethdb/remotedb: close the conn\r\n\r\n* cmd, ethdb: add rpc accessor for ancient data\r\n\r\n* internal/ethapi: license\r\n\r\n* ethdb/remotedb: linter fixes"
            }
        ],
        "2022-05-17": [
            {
                "date": "2022-05-17T12:27:04Z",
                "message": "all: replace non-trivial uses of package ioutil with os (#24886)\n\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-05-17T11:56:52Z",
                "message": "all: use strings.EqualFold for string comparison (#24890)"
            },
            {
                "date": "2022-05-17T11:01:46Z",
                "message": "cmd/geth: add `db check-state-content` to verify integrity of trie nodes (#24840)\n\nThis PR adds db tooling (geth db check-state-content)  to verify the integrity of trie nodes. It iterates through the 32-byte key space in the database, which is expected to contain RLP-encoded trie nodes, addressed by hash."
            },
            {
                "date": "2022-05-17T09:32:55Z",
                "message": "eth/catalyst: set the correct LatestValidHash (#24855)\n\n* eth/catalyst: set the correct LatestValidHash\r\n\r\n* eth/catalyst: core: return LVH during reorg, rework invalid teminal block\r\n\r\n* eth/catalyst: nitpicks"
            },
            {
                "date": "2022-05-17T08:31:17Z",
                "message": "graphql: add raw fields to block and tx (#24816)"
            },
            {
                "date": "2022-05-17T08:19:51Z",
                "message": "eth: fix flaky test, don't attach empty slots/proofs (#24885)\n\n* eth/protocols/snap: don't include empty snapshot slot slice\r\n\r\nThis PR fixes the snapshot storage serving handler. In snap protocol\r\nthe response is capped by the response size. Server can cutdown the\r\nresponse if the accumulated byte size exceeds the local hard limit.\r\n\r\nIt means we can meet a special scenario that there is no storage slot\r\nincluded for a requested account, but we attach the proof for this\r\naccount by mistake.\r\n\r\nSo in the prover side, when it meets a empty storage response but with\r\na valid proof proves there are some more slots left in the trie, then\r\nrequestor will reject this response and disconnect with server.\r\n\r\nIn this PR, if there is no storage slot served for the requested account,\r\nthen no proof should be attached as well.\r\n\r\n* eth/protocols/snap: loosen restrictions for flaky tests\r\n\r\n* eth/catalyst: fix flaky test in catalyst"
            },
            {
                "date": "2022-05-17T07:21:43Z",
                "message": "core/vm: reduce overhead in instructions-benchmark (#24860)\n\n* core/vm: reduce footprint of OP benchmark\r\n\r\n* core/vm: for opBenchmark, add code to detect inputs mutation\r\n\r\n* Update core/vm/instructions_test.go\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\n* core/vm: opBenchmark, stop timer before sanity-test code\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2022-05-16": [
            {
                "date": "2022-05-16T11:41:36Z",
                "message": "cmd/geth: update vulnerabilities.json testdata (#24856)"
            },
            {
                "date": "2022-05-16T09:59:35Z",
                "message": "all: replace uses of ioutil with io and os (#24869)"
            },
            {
                "date": "2022-05-16T09:39:07Z",
                "message": "core/asm: use strings.Builder and fix godoc issues (#24861)"
            },
            {
                "date": "2022-05-16T08:10:55Z",
                "message": "Merge pull request #24884 from karalabe/deprecate-rinkeby\n\ncmd/utils: add deprecation warning for Rinkeby"
            },
            {
                "date": "2022-05-16T05:27:30Z",
                "message": "cmd/utils: add deprecation warning for Rinkeby"
            },
            {
                "date": "2022-05-16T04:32:56Z",
                "message": "params: set ropsten TTD for TheMerge (#24876)"
            }
        ],
        "2022-05-14": [
            {
                "date": "2022-05-14T20:33:41Z",
                "message": "internal/ethapi: add debug_getRawReceipts RPC method (#24773)\n\nAdds a method to retrieve all the binary encoded receipts from a block"
            }
        ],
        "2022-05-12": [
            {
                "date": "2022-05-12T19:20:40Z",
                "message": "core/vm: for tracing, do not report post-op memory"
            },
            {
                "date": "2022-05-12T19:10:08Z",
                "message": "graphql: fix long literal passed in a variable (#24864)"
            }
        ],
        "2022-05-11": [
            {
                "date": "2022-05-11T09:00:29Z",
                "message": "core/vm: optimize Memory.Set32 (#24847)\n\n* core/vm: remove unnecessary memset for Memory.Set32\r\n\r\n* core/vm: optimize Memory.Set32"
            },
            {
                "date": "2022-05-11T05:05:55Z",
                "message": "ethclient: add PeerCount method (#24849)\n\n* adding peer count function\r\n\r\n* Update ethclient.go\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-05-11T05:04:16Z",
                "message": "core/vm: separate opcode group for 0x20 range (#24850)"
            },
            {
                "date": "2022-05-11T05:03:35Z",
                "message": "core/vm: clean up some dead functions (#24851)"
            }
        ],
        "2022-05-10": [
            {
                "date": "2022-05-10T22:29:22Z",
                "message": "cmd/geth: print info banner for --dev mode (#24759)\n\n\r\nCo-authored-by: nedifi <nedifi@users.noreply.github.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-05-10T14:37:24Z",
                "message": "eth/protocols/snap: sort trienode heal requests by path (#24779)\n\n* sort snap trienode heal requests\r\n\r\n* eth/protocols/snap: remove debug code\r\n\r\n* eth/protocols/snap: simplify sort, generate pathsets later\r\n\r\n* eth/protocols/snap: review concern\r\n\r\n* eth/protocols/snap: renamings\r\n\r\n* eth/protocols/snap: add comments in Merge\r\n\r\n* eth/protocols/snap: remove variable 'last' in Merge\r\n\r\n* eth/protocols/snap: fix lint flaws in test\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-05-10T14:26:48Z",
                "message": "core/vm: update benchmark to use Errorf instead of Sprintf (#24845)"
            },
            {
                "date": "2022-05-10T11:54:11Z",
                "message": "signer/fourbyte: remove offending signatures (#24842)"
            },
            {
                "date": "2022-05-10T08:46:26Z",
                "message": "internal: drop TestSignCliqueBlock (#24837)"
            }
        ],
        "2022-05-09": [
            {
                "date": "2022-05-09T10:13:23Z",
                "message": "all: replace strings.Replace with string.ReplaceAll (#24835)"
            }
        ],
        "2022-05-06": [
            {
                "date": "2022-05-06T15:20:41Z",
                "message": "core/state/snapshot: fix race condition (#24685)\n\nFixes three race conditions found through fuzzing by David Theodore"
            },
            {
                "date": "2022-05-06T14:45:57Z",
                "message": "abi: fix checks when all fields are indexed (#24792)\n\nThis PR fixes abi checks in the edge case where all arguments are indexed"
            },
            {
                "date": "2022-05-06T14:12:06Z",
                "message": "signer/fourbyte: import new signatures (#22865)"
            },
            {
                "date": "2022-05-06T13:23:43Z",
                "message": "eth/fetcher: avoid hang in tests (partial fix for #23331) (#23351)\n\n* eth/fetcher: fix test to avoid hanging. Partial fix for #23331\r\n\r\n* eth/filters: avoid dangling goroutines\r\n\r\n* eth/fetcher: revert closing of proceed"
            },
            {
                "date": "2022-05-06T12:36:45Z",
                "message": "core/vm: implement EIP-3855: PUSH0 instruction (#24039)\n\n* core/vm: Implement PUSH0\r\n\r\n* Move PUSH0 to enable3855\r\n\r\n* Add method doc"
            },
            {
                "date": "2022-05-06T11:28:42Z",
                "message": "core/rawdb: untie freezer and ancient chain data (#24684)\n\nPreviously freezer has only been used for storing ancient chain data, while obviously it can be used more. This PR unties the chain data and freezer, keep the minimal freezer structure and move all other logic (like incrementally freezing block data) into a separate structure called ChainFreezer.\r\n\r\nThis PR also extends the database interface by adding a new ancient store function AncientDatadir which can return the root directory of ancient store. The ancient root directory can be used when we want to open some other ancient-stores (e.g. reverse diff freezer)."
            },
            {
                "date": "2022-05-06T09:19:30Z",
                "message": "miner: discard interrupted blocks (#24638)\n\nDuring mining, when a new head arrives and interrupts the block building, the block being built should not be commited (but discarded). Committing the interrupted block introduces unnecessary delay, and possibly causes miner to mine on the previous head, which could result in higher uncle rate."
            }
        ],
        "2022-05-05": [
            {
                "date": "2022-05-05T18:20:11Z",
                "message": "p2p/simulations: fix typo in network_test.go (#24824)"
            },
            {
                "date": "2022-05-05T17:44:36Z",
                "message": "p2p/simulations: escape mockerType value from request (#24822)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-05-05T15:58:43Z",
                "message": "eth/filters: remove explicit continue label in filterLogs (#24795)\n\nThe loop label can be removed because this 'continue' statement\r\nis not in a nested loop."
            },
            {
                "date": "2022-05-05T15:35:36Z",
                "message": "eth/protocols/eth: fix godoc comments (#24810)\n\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-05-05T07:36:26Z",
                "message": "core: recover state when beacon sets canonical head if it's missing (#24613)\n\n* core: recover the state in SetChainHead if the head state is missing\r\n\r\n* core: disable test logging\r\n\r\n* core: address comment from martin\r\n\r\n* core: improve log level in case state is recovered\r\n\r\n* core, eth, les, light: rename SetChainHead to SetCanonical"
            },
            {
                "date": "2022-05-05T07:22:00Z",
                "message": "core: fix WriteBlockAndSetHead documentation (#24818)"
            },
            {
                "date": "2022-05-05T07:02:41Z",
                "message": "Merge pull request #24817 from karalabe/fix-PC-regression\n\ncmd, eth: fix required blocks regression"
            }
        ],
        "2022-05-04": [
            {
                "date": "2022-05-04T16:55:17Z",
                "message": "cmd, eth: fix required blocks regression"
            },
            {
                "date": "2022-05-04T15:22:37Z",
                "message": "Merge pull request #24813 from holiman/jammy\n\nbuild: ppa build for jammy (ubuntu 22.04)"
            },
            {
                "date": "2022-05-04T14:14:14Z",
                "message": "cmd/geth: fix init genesis for dev (#24693)\n\n* cmd/geth: fix init genesis for dev\r\n\r\n* use ancient flag for init genesis cmd"
            },
            {
                "date": "2022-05-04T13:32:51Z",
                "message": "eth/filters: fix code comment (#24799)"
            },
            {
                "date": "2022-05-04T12:31:07Z",
                "message": "graphql: add rawReceipt field to transaction type (#24738)\n\n* graphql: add tx receiptsRLP field\r\n\r\n* use MarshalBinary\r\n\r\nCo-authored-by: Ryan Schneider <ryanleeschneider@gmail.com>\r\n\r\n* update schema\r\n\r\nCo-authored-by: Ryan Schneider <ryanleeschneider@gmail.com>\r\n\r\n* rename to rawReceipt\r\n\r\n* indent fix\r\n\r\nCo-authored-by: Ryan Schneider <ryanleeschneider@gmail.com>"
            },
            {
                "date": "2022-05-04T09:41:24Z",
                "message": "build: ppa build for jammy (ubuntu 22.04)"
            }
        ],
        "2022-05-03": [
            {
                "date": "2022-05-03T21:37:37Z",
                "message": "build: fix formatted logs (#24807)\n\nChanged `log.Fatal` to `log.Fatalf()` as it has a parameter..."
            },
            {
                "date": "2022-05-03T10:12:40Z",
                "message": "cmd/utils: double limit on free-disk monitor (#24781)\n\nThis PR doubles the limit on which to trigger automatic shutdown, and also changes the timer to run once every 30s instead of 60s."
            },
            {
                "date": "2022-05-03T09:17:24Z",
                "message": "docker: speed up docker image build (#24796)\n\nThis PR improves the docker build speed for repeated builds where go.mod and go.sum do no change, by placing the downloaded dependencies in a lower layer"
            },
            {
                "date": "2022-05-03T06:49:41Z",
                "message": "accounts: fix typo in comments (#24805)"
            },
            {
                "date": "2022-05-03T06:46:17Z",
                "message": "cmd: group network and db path flags together (#24698)\n\nThis PR groups all built-in network flags together and list them in the command as a whole.\r\n\r\nAnd all database path flags(datadir, ancient) are also grouped, since usually these two are\r\nused together."
            }
        ],
        "2022-05-02": [
            {
                "date": "2022-05-02T14:26:30Z",
                "message": "cmd/evm: make evm t8n handle post-merge transitions (#24546)\n\nThis adds the ability to run --state.fork=Merged, and have post-merge rules apply. When doing so, it also requires the input env to contain currentRandom, and enforces the currentDifficulty to be omitted or zero."
            },
            {
                "date": "2022-05-02T12:28:11Z",
                "message": "cmd/clef: fixups to the python clef poc (#24440)\n\nThis PR fixes up the example python clef wrapper. The poc is intended to demonstrate how to wite a UI for clef, and had severely bitrotted.\r\nWith these changes, it \"works\" in the sense that all the built-in tests triggers the intended python callbacks (no errors about method not found). It does not \"work\" in the sense that the wrapper can be used as an actual UI. It will auto-reject any signing requests, for example."
            }
        ],
        "2022-04-29": [
            {
                "date": "2022-04-29T08:07:52Z",
                "message": "eth/filters: remove unused struct fields (#24782)"
            }
        ],
        "2022-04-27": [
            {
                "date": "2022-04-27T09:51:24Z",
                "message": "ethclient/gethclient: return storage proofs in GetProof (#24697)\n\nStorage proofs were being unmarshalled from the RPC form to the go struct, but were not being included in the final returned struct."
            },
            {
                "date": "2022-04-27T09:48:02Z",
                "message": "all: use common.FileExist for checking file existence (#24748)"
            },
            {
                "date": "2022-04-27T09:45:14Z",
                "message": "cmd/utils: utilize beacon wrapper in makechain (#24620)\n\n* cmd/utils: utilize beacon wrapper in makechain\r\n\r\n* cmd/utils: fix fake-pow to also be wrapped in beacon\r\n\r\n* consensus/misc: correct error message"
            },
            {
                "date": "2022-04-27T08:56:50Z",
                "message": "core/types: fix unhandled errors in TestTransactionCoding (#24692)"
            },
            {
                "date": "2022-04-27T06:37:48Z",
                "message": "internal/ethapi: add db operations to api (#24739)\n\nAdds `debug_dbGet` method to rpc api"
            }
        ],
        "2022-04-26": [
            {
                "date": "2022-04-26T08:16:57Z",
                "message": "consensus/ethash: fix typos in var names (#24745)"
            },
            {
                "date": "2022-04-26T07:32:31Z",
                "message": "cmd/*: refactor get flag value (#24761)"
            },
            {
                "date": "2022-04-26T07:08:43Z",
                "message": "cmd/geth, core/state/snapshot: fix flaw in dangling-storage check + inspect difflayers (#24677)\n\nThis PR fixes the flaw that @rjl493456442 found in https://github.com/ethereum/go-ethereum/pull/#issuecomment-1093817551 , namely, that the snapshot iterator uses the combined (disk + difflayers) 'view', wheres the raw iterator uses only the disk 'view'.\r\n\r\nThis PR instead splits up the work: one phase is iterating the disk layer data, another phase is loading the journalled difflayers and performing the same check there."
            }
        ],
        "2022-04-25": [
            {
                "date": "2022-04-25T09:15:14Z",
                "message": "all: use 'embed' instead of go-bindata (#24744)"
            },
            {
                "date": "2022-04-25T09:05:47Z",
                "message": "p2p: fix type of DiscSubprotocolError (#24747)\n\nIt was 'int' accidentally, should be DiscReason instead."
            },
            {
                "date": "2022-04-25T07:35:04Z",
                "message": "mobile: fix receipt encoding to json (#24701)"
            },
            {
                "date": "2022-04-25T07:28:03Z",
                "message": "fix typo (#24731)"
            },
            {
                "date": "2022-04-25T07:16:49Z",
                "message": "cmd/evm: ensure input length is even (#24721)\n\n* cmd/evm: ensure input length is even\r\n\r\n* cmd/evm: minor nit + lintfix\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2022-04-23": [
            {
                "date": "2022-04-23T14:53:21Z",
                "message": "cmd/faucet: fix genesis flag and improve documentation (#24735)"
            },
            {
                "date": "2022-04-23T14:52:26Z",
                "message": "internal/flags: fix godoc (#24734)"
            },
            {
                "date": "2022-04-23T12:37:04Z",
                "message": ".github: update CODEOWNERS (#24743)"
            }
        ],
        "2022-04-21": [
            {
                "date": "2022-04-21T23:31:33Z",
                "message": "README.md: update Go min required version to 1.16 (#24713)"
            },
            {
                "date": "2022-04-21T23:30:15Z",
                "message": "eth/tracers/logger: remove unnecessary comparisons in accessList.equal (#24663)\n\nThis change removes extraneous/unnecessary checks for equality\r\nwhen comparing 2 accessList values A and B. Given that we validate that\r\ntheir lengths of A and B are equal, if so and if every element in A is\r\nin B, reflexively every element in B is already in A. If that weren't\r\nthe case and an element g existed in A but not in B, that would mean\r\nthat there is an extra element and hence a mathematical contradiction.\r\n\r\nFixes #24658"
            }
        ],
        "2022-04-20": [
            {
                "date": "2022-04-20T14:17:29Z",
                "message": "eth/downloader: fix typo in downloader.go (#24704)\n\nsynchornization -> synchronization"
            },
            {
                "date": "2022-04-20T14:13:47Z",
                "message": "core/vm: fix typo (#24714)\n\nWas just browsing the code and found this."
            },
            {
                "date": "2022-04-20T14:12:06Z",
                "message": "trie: remove unused makeHashNode (#24702)"
            }
        ],
        "2022-04-17": [
            {
                "date": "2022-04-17T12:53:25Z",
                "message": "go.mod: upgrade btcec and add 'chainhash' module requirement (#24700)\n\nSee ethereum/go-ethereum#24554 and btcsuite/btcd#1839\r\n\r\nThis is an attempt to resolve a Go module dependency issue that arises\r\nwhen both 'github.com/btcsuite/btcd/btcec/v2' and the older, non-v2\r\nbtcd module are required as dependencies."
            }
        ],
        "2022-04-14": [
            {
                "date": "2022-04-14T06:49:23Z",
                "message": "eth/downloader: resolve local header by hash for beacon sync (#24691)\n\n* eth/downlaoder: resolve local header by hash for beacon sync\r\n\r\n* eth/downloader: fix error message\r\n\r\n* eth/downloader: cap the reverse header resolving\r\n\r\n* eth/downloader: re-enable tests\r\n\r\n* eth/downloader: add warning logs"
            },
            {
                "date": "2022-04-14T05:45:04Z",
                "message": "build: upgrade -dlgo version to Go 1.18.1 (#24689)\n\n* build: upgrade -dlgo version to Go 1.18.1\r\n\r\n* build: upgrade -dlgo version for macOS to Go 1.18.1"
            }
        ],
        "2022-04-13": [
            {
                "date": "2022-04-13T17:31:08Z",
                "message": "eth/downloader: remove stale beacon headers as backfilling progresses (#24670)\n\n* eth/downloader: remove stale beacon headers as backfilling progresses\r\n\r\n* eth/downloader: remove leftover from a previous design\r\n\r\n* eth/downloader: do partial beacon cleanups if chain is large\r\n\r\n* eth/downloader: linter != heart"
            },
            {
                "date": "2022-04-13T09:28:23Z",
                "message": "cmd/geth: support bigints for --override.terminaltotaldifficulty (#24646)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2022-04-12": [
            {
                "date": "2022-04-12T19:09:27Z",
                "message": "eth/tracers: make txhash blockhash accessible to native tracers (#24679)"
            },
            {
                "date": "2022-04-12T18:24:02Z",
                "message": "build: add imports for go generate tools (#24682)\n\nThis adds a tools.go file to import all command packages used for\r\ngo:generate. Doing so makes it possible to execute go-based code\r\ngenerators using 'go run', locking in the tool version using go.mod.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-04-12T08:36:29Z",
                "message": "abi/base: return error for pending call error (#24649)\n\nIf a pending contract call errors, return that error right away rather\r\nthan ignoring it to allow an error somewhere else. This is helpful for\r\ncallers to know if perhaps a call failed because of the context deadline\r\nbeing expired. This change mirrors the behavior of non-pending contract\r\ncalls."
            },
            {
                "date": "2022-04-12T08:34:07Z",
                "message": "core: fix benchmark panic (#24657)\n\nThis PR fixes a few panics in the chain marker benchmarks. The root\r\ncause for panic is in chain marker the genesis header/block is not\r\naccessible, while it's expected to be obtained in tests. So this PR\r\navoids touching genesis header at all to avoid panic."
            },
            {
                "date": "2022-04-12T05:48:03Z",
                "message": "cmd: set DefaultGasLimit to 30M (#24680)\n\n* cmd: set DefaultGasLimit to 30M, rem deprec. Flag\r\n\r\n* cmd: revert flag deprecation"
            }
        ],
        "2022-04-11": [
            {
                "date": "2022-04-11T18:19:13Z",
                "message": "core/types: make \"miner\" optional in Header JSON (#24666)\n\n\"miner\" is not set for pending block responses in some cases.\r\n\r\nFixes #24632"
            },
            {
                "date": "2022-04-11T18:04:08Z",
                "message": "build/deb: update Debian control file to remove unencrypted git protocol (#24676)"
            }
        ],
        "2022-04-08": [
            {
                "date": "2022-04-08T14:02:16Z",
                "message": "log: modify lock defer unlock order in sync handler (#24667)\n\nThis modifies the order of Lock() defer Unlock() to follow the more\r\ntypically used pattern."
            },
            {
                "date": "2022-04-08T13:48:52Z",
                "message": "les: fix panic in ultralight client sync (#24641)"
            },
            {
                "date": "2022-04-08T13:44:55Z",
                "message": "all: use T.TempDir to create temporary test directories (#24633)\n\nThis commit replaces ioutil.TempDir with t.TempDir in tests. The\r\ndirectory created by t.TempDir is automatically removed when the test\r\nand all its subtests complete.\r\n\r\nPrior to this commit, temporary directory created using ioutil.TempDir\r\nhad to be removed manually by calling os.RemoveAll, which is omitted in\r\nsome tests. The error handling boilerplate e.g.\r\n\r\n\tdefer func() {\r\n\t\tif err := os.RemoveAll(dir); err != nil {\r\n\t\t\tt.Fatal(err)\r\n\t\t}\r\n\t}\r\n\r\nis also tedious, but t.TempDir handles this for us nicely.\r\n\r\nReference: https://pkg.go.dev/testing#T.TempDir\r\nSigned-off-by: Eng Zer Jun <engzerjun@gmail.com>"
            },
            {
                "date": "2022-04-08T13:38:23Z",
                "message": "accounts/abi: handle tuple arrays in ParseSelector (#24587)\n\nCloses #24571"
            },
            {
                "date": "2022-04-08T13:08:46Z",
                "message": "cmd/geth: inspect snapshot dangling storage (#24643)\n\n* cmd/geth: inspect snapshot dangling storage\r\n\r\n* cmd/geth: make verify-state invoke verify-dangling"
            }
        ],
        "2022-04-07": [
            {
                "date": "2022-04-07T09:58:44Z",
                "message": "Merge pull request #24659 from karalabe/snapshot-remove-noo\n\ncore/state/snapshot: remove noop map item assignment"
            },
            {
                "date": "2022-04-07T06:36:44Z",
                "message": "core/state/snapshot: remove noop map item assignment"
            },
            {
                "date": "2022-04-07T06:23:55Z",
                "message": "README: remove mentions of fast sync (#24656)\n\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
            }
        ],
        "2022-04-06": [
            {
                "date": "2022-04-06T07:43:18Z",
                "message": "Merge pull request #24652 from karalabe/block-fetcher-timeouts\n\neth/fetcher: if peers never respond, drop them"
            },
            {
                "date": "2022-04-06T07:34:18Z",
                "message": "eth/tracers: refactor traceTx to separate out struct logging (#24326)\n\n* eth/tracers: refactor traceTx to separate out struct logging\r\n\r\nreview fix\r\n\r\nUpdate eth/tracers/api.go\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\nMv ExecutionResult type to logger package\r\n\r\nreview fix\r\n\r\nimpl GetResult for StructLogger\r\n\r\nmake formatLogs private\r\n\r\nconfused exit and end..\r\n\r\naccount for intrinsicGas in structlogger, fix TraceCall test\r\n\r\nAdd Stop method to logger\r\n\r\nSimplify traceTx\r\n\r\nFix test\r\n\r\nrm logger from blockchain test\r\n\r\naccount for refund in structLogger\r\n\r\n* use tx hooks in struct logger\r\n\r\n* minor\r\n\r\n* avoid executionResult in struct logger\r\n\r\n* revert blockchain test changes"
            },
            {
                "date": "2022-04-06T07:18:57Z",
                "message": "eth/fetcher: if peers never respond, drop them"
            }
        ],
        "2022-04-05": [
            {
                "date": "2022-04-05T07:45:20Z",
                "message": "rpc: fixed a typo (#24642)"
            },
            {
                "date": "2022-04-05T05:45:13Z",
                "message": "README: update free space required (#24636)"
            }
        ],
        "2022-04-04": [
            {
                "date": "2022-04-04T07:10:16Z",
                "message": "eth/downloader: retrieve pivot header from local chain if necessary (#24610)\n\n* eth/downloader: retrieve pivot header from local chain if necessary\r\n\r\n* eth/downloader: improve readability\r\n\r\n* eth/downloader: update fix\r\n\r\n* eth/downloader: add beacon sync tests\r\n\r\n* eth/downloader: remove duplicated code"
            }
        ],
        "2022-03-31": [
            {
                "date": "2022-03-31T19:16:03Z",
                "message": "eth: clarify the error string on getlogs failure (#24617)\n\nThis PR makes the errors we spit out a bit more clear about what block is problematic."
            },
            {
                "date": "2022-03-31T09:51:44Z",
                "message": "core,eth: implement tx-level hooks for tracers (#24510)\n\n* core,eth: add empty tx logger hooks\r\n\r\n* core,eth: add initial and remaining gas to tx hooks\r\n\r\n* store tx gasLimit in js tracer\r\n\r\n* use gasLimit to compute intrinsic cost for js tracer\r\n\r\n* re-use rules in transitiondb\r\n\r\n* rm logs\r\n\r\n* rm logs\r\n\r\n* Mv some fields from Start to TxStart\r\n\r\n* simplify sender lookup in prestate tracer\r\n\r\n* mv env to TxStart\r\n\r\n* Revert \"mv env to TxStart\"\r\n\r\nThis reverts commit 656939634b9aff19f55a1cd167345faf8b1ec310.\r\n\r\n* Revert \"simplify sender lookup in prestate tracer\"\r\n\r\nThis reverts commit ab65bce48007cab99e68232e7aac2fe008338d50.\r\n\r\n* Revert \"Mv some fields from Start to TxStart\"\r\n\r\nThis reverts commit aa50d3d9b2559addc80df966111ef5fb5d0c1b6b.\r\n\r\n* fix intrinsic gas for prestate tracer\r\n\r\n* add comments\r\n\r\n* refactor\r\n\r\n* fix test case\r\n\r\n* simplify consumedGas calc in prestate tracer"
            },
            {
                "date": "2022-03-31T07:28:32Z",
                "message": "trie, les, tests, core: implement trie tracer (#24403)\n\nTrie tracer is an auxiliary tool to capture all deleted nodes\r\nwhich can't be captured by trie.Committer. The deleted nodes\r\ncan be removed from the disk later."
            }
        ],
        "2022-03-30": [
            {
                "date": "2022-03-30T08:28:27Z",
                "message": "eth: change snapshot extension registration failure to warning instead of error (#24475)\n\n* core: Change Snapshot extension registration failed to Debug\r\n\r\n* Update eth/handler.go\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-03-30T08:27:25Z",
                "message": "core: verify genesis extradata for clique (#24470)\n\n* Add extra-data checks for clique genesis\r\n\r\n* Update genesis.go\r\n\r\n* Update genesis.go\r\n\r\n* core: simplify clique genesis check\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2022-03-29": [
            {
                "date": "2022-03-29T20:38:59Z",
                "message": "common/compiler: add extra include paths to solidity compiler (#24541)\n\nThis PR adds a ExtraAllowedPath field to Solidity and exposes two APIs: CompileSource and CompileFiles, which were hidden inside CompileSolidityString and CompileSolidity before."
            },
            {
                "date": "2022-03-29T20:36:55Z",
                "message": "eth/tracers/logger: use omitempty to reduce log bloat  (#24547)\n\nMakes the evm json output less verbose: omitting output of `memory` and `returndata` in case they are empty."
            },
            {
                "date": "2022-03-29T20:34:10Z",
                "message": "internal/ethapi: add refund to StructLogRes (#24567)\n\n* internal/ethapi: add refund to StructLogRes\r\n\r\n* Update internal/ethapi/api.go\r\n\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>\r\n\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
            },
            {
                "date": "2022-03-29T20:33:19Z",
                "message": "go.mod : upnp 1.0.3 stable version (#24573)"
            },
            {
                "date": "2022-03-29T18:37:35Z",
                "message": "core/state/snapshot: clean up the generation code (#24479)"
            },
            {
                "date": "2022-03-29T18:30:09Z",
                "message": "rlp: fix typo in comment (#24595)\n\nCo-authored-by: Yong Yang <yangyong775654@163.com>"
            },
            {
                "date": "2022-03-29T17:19:40Z",
                "message": "params: begin v1.10.18 release cycle"
            },
            {
                "date": "2022-03-29T17:18:26Z",
                "message": "params: go-ethereum v1.10.17 stable"
            },
            {
                "date": "2022-03-29T16:26:18Z",
                "message": "eth/catalyst: only apply block if we actually have the state (#24598)\n\n* eth/catalyst: only apply block if we actually have the state\r\n\r\n* add header to payload queue\r\n\r\n* Update cmd/geth/dbcmd.go\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-03-29T08:40:42Z",
                "message": "cmd/geth: change to non-fatal error message when legacy receipt storage is not implemented (#24603)\n\n* cmd/geth: only check for presence of legacy receipts if developer mode is not enabled\r\n\r\n* cmd/geth: degrade log level\r\n\r\n* cmd/geth: fix format\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>"
            },
            {
                "date": "2022-03-29T08:39:45Z",
                "message": "Merge pull request #24605 from karalabe/revert-setting-ttd\n\ncore: set ttd override on all chain variations"
            },
            {
                "date": "2022-03-29T08:21:11Z",
                "message": "core/vm: fix sstore gas comment type (#24583)"
            },
            {
                "date": "2022-03-29T07:44:09Z",
                "message": "core: set ttd override on all chain variations"
            }
        ],
        "2022-03-27": [
            {
                "date": "2022-03-27T11:21:36Z",
                "message": "build: close sftp connection when done (#24593)"
            }
        ],
        "2022-03-25": [
            {
                "date": "2022-03-25T15:46:31Z",
                "message": "internal/build: exit sftp upload (#24590)"
            },
            {
                "date": "2022-03-25T14:43:07Z",
                "message": "internal/build: prevent travis timeout during ppa upload (#24589)"
            },
            {
                "date": "2022-03-25T14:06:29Z",
                "message": "internal/build: show ppa upload process stdout on stdout (#24588)"
            },
            {
                "date": "2022-03-25T12:46:33Z",
                "message": "build: upgrade to golangci-lint v1.45.2 (#24586)"
            }
        ],
        "2022-03-24": [
            {
                "date": "2022-03-24T14:04:47Z",
                "message": "node: allow JWT pass by file only (#24579)"
            }
        ],
        "2022-03-23": [
            {
                "date": "2022-03-23T20:00:26Z",
                "message": "eth/catalyst: fix log message (#24574)"
            },
            {
                "date": "2022-03-23T19:57:53Z",
                "message": "eth/downloader: fix flakey test (#24576)"
            },
            {
                "date": "2022-03-23T19:57:32Z",
                "message": "core/rawdb: simple legacy receipt converter (#24028)\n\n* cmd,core: add simple legacy receipt converter\r\n\r\ncore/rawdb: use forEach in migrate\r\n\r\ncore/rawdb: batch reads in forEach\r\n\r\ncore/rawdb: make forEach anonymous fn\r\n\r\ncmd/geth: check for legacy receipts on node startup\r\n\r\nfix err msg\r\n\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>\r\n\r\nfix log\r\n\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>\r\n\r\nfix some review comments\r\n\r\nadd warning to cmd\r\n\r\ndrop isLegacy fn from migrateTable params\r\n\r\nadd test for windows rename\r\n\r\ntest replacing in windows case\r\n\r\n* minor fix\r\n\r\n* sanity check for tail-deletion\r\n\r\n* add log before moving files around\r\n\r\n* speed-up hack for mainnet\r\n\r\n* fix mainnet check, use networkid instead\r\n\r\n* check mainnet genesis\r\n\r\n* review fixes\r\n\r\n* resume previous migration attempt\r\n\r\n* core/rawdb: lint fix\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2022-03-22": [
            {
                "date": "2022-03-22T17:58:05Z",
                "message": "eth/downloader: ignore zero size header batch for importing (#24569)\n\n* eth/downloader: ignore zero size header batch for importing\r\n\r\n* core, light: reject empty header batch for importing"
            },
            {
                "date": "2022-03-22T09:53:22Z",
                "message": "core: store genesis allocation and recommit them if necessary (#24460)\n\n* core: store genesis allocation and recommit them if necessary\r\n\r\n* core: recover predefined genesis allocation if possible"
            },
            {
                "date": "2022-03-22T09:32:13Z",
                "message": "crypto/bls12381: go format"
            },
            {
                "date": "2022-03-22T09:19:04Z",
                "message": "core/rawdb: fix db commands (#24540)"
            }
        ],
        "2022-03-21": [
            {
                "date": "2022-03-21T08:43:54Z",
                "message": "eth/downloader: terminate beacon sync early when linked to local chain (#24550)\n\n* eth/downloader: terminate beacon sync early when linked to local chain\r\n\r\n* eth/downloader: fix backfiller resume on early beacon termination"
            }
        ],
        "2022-03-18": [
            {
                "date": "2022-03-18T10:39:11Z",
                "message": "docs/postmortems: fix spelling (#24558)"
            }
        ],
        "2022-03-17": [
            {
                "date": "2022-03-17T15:34:22Z",
                "message": "core, params: add kiln flag (#24548)"
            },
            {
                "date": "2022-03-17T15:20:03Z",
                "message": "core: eth: implement Kiln-v2 spec (#24506)\n\n* core/beacon: eth/catalyst: updated engine api to new version\r\n\r\n* core: implement exchangeTransitionConfig\r\n\r\n* core/beacon: prevRandao instead of Random\r\n\r\n* eth/catalyst: Fix ExchangeTransitionConfig, add test\r\n\r\n* eth/catalyst: stop external miners on TTD reached\r\n\r\n* node: implement --authrpc.vhosts flag\r\n\r\n* core: allow for config override on non-mainnet networks\r\n\r\n* eth/catalyst: fix peters comments\r\n\r\n* eth/catalyst: make stop remote sealer more explicit\r\n\r\n* eth/catalyst: add log output\r\n\r\n* cmd/utils: rename authrpc.host to authrpc.addr\r\n\r\n* eth/catalyst: disable the disabling of the miner\r\n\r\n* eth: core: remove notion of terminal pow block\r\n\r\n* eth: les: more of peters nitpicks"
            }
        ],
        "2022-03-16": [
            {
                "date": "2022-03-16T13:23:14Z",
                "message": "crypto: use btcec/v2 for no-cgo (#24533)\n\nThis updates the no-cgo implementations in the crypto package to use\r\nthe github.com/btcsuite/btcd/btcec/v2 module instead of the older btcec\r\npackage that was part of the main github.com/btcsuite/btcd module.\r\n\r\nname                   old time/op  new time/op  delta\r\nEcrecoverSignature-32   198\u00b5s \u00b1 0%   144\u00b5s \u00b1 0%  -27.11%\r\nVerifySignature-32      177\u00b5s \u00b1 0%   128\u00b5s \u00b1 0%  -27.44%\r\nDecompressPubkey-32    20.9\u00b5s \u00b1 0%  10.1\u00b5s \u00b1 0%  -51.51%\r\n\r\nUse (*ModNScalar).IsOverHalfOrder instead of math/big.Int when checking\r\nfor malleable signatures."
            },
            {
                "date": "2022-03-16T10:13:10Z",
                "message": "les, tests: fix vflux fuzzer by removing unnecessary panic (#24537)"
            },
            {
                "date": "2022-03-16T07:01:45Z",
                "message": "Merge pull request #24544 from karalabe/go-1.18\n\nbuild, Dockerfile: bump Go to 1.18"
            },
            {
                "date": "2022-03-16T07:01:04Z",
                "message": "Merge pull request #24545 from karalabe/beacon-sync-fix-test\n\neth/downloader: fix off-by-one error in test causing 50% fails"
            },
            {
                "date": "2022-03-16T06:57:00Z",
                "message": "eth/downloader: fix off-by-one error in test causing 50% fails"
            },
            {
                "date": "2022-03-16T06:27:16Z",
                "message": "build, Dockerfile: bump Go to 1.18"
            }
        ],
        "2022-03-15": [
            {
                "date": "2022-03-15T11:20:03Z",
                "message": "cmd/geth: rename --whitelist to --eth.requiredblocks (#24505)\n\n* cmd, eth: Rename whitelist argument to peer.requiredblocks\r\n\r\n* eth/ethconfig: document PeerRequiredBlocks better\r\n\r\n* cmd/utils: rename new flag to --eth.requiredblocks\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-03-15T09:38:23Z",
                "message": "cmd/geth: set EnableBashCompletion = true (#24313)\n\nprepare #24145"
            },
            {
                "date": "2022-03-15T09:27:30Z",
                "message": "eth/tracers: use hex encoding for debug_traceBlock argument (#24517)"
            },
            {
                "date": "2022-03-15T09:24:45Z",
                "message": "build: fix linter install on windows (#24523)"
            },
            {
                "date": "2022-03-15T09:23:37Z",
                "message": "trie: fix two issues in trie iterator (#24539)\n\n* trie: fix memory leak in trie iterator\r\n\r\nIn the trie iterator, live nodes are tracked in a stack while iterating.\r\nPopped node states should be explictly set to nil in order to get\r\ngarbage-collected.\r\n\r\n* trie: fix empty trie iterator"
            },
            {
                "date": "2022-03-15T08:28:26Z",
                "message": "core/rawdb: add specified key length iterator (#24535)"
            }
        ],
        "2022-03-14": [
            {
                "date": "2022-03-14T08:51:32Z",
                "message": "Merge pull request #24515 from karalabe/pending-statedb-accesslist-init\n\ncore/statedb: always clear out access list when setting a new one"
            },
            {
                "date": "2022-03-14T08:12:51Z",
                "message": "go.mod: upgrade upnp dependency (#24536)"
            }
        ],
        "2022-03-11": [
            {
                "date": "2022-03-11T15:24:13Z",
                "message": "rpc: fix defer in test (#24490)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-03-11T12:14:45Z",
                "message": "eth/downloader: implement beacon sync (#23982)\n\n* eth/downloader: implement beacon sync\r\n\r\n* eth/downloader: fix a crash if the beacon chain is reduced in length\r\n\r\n* eth/downloader: fix beacon sync start/stop thrashing data race\r\n\r\n* eth/downloader: use a non-nil pivot even in degenerate sync requests\r\n\r\n* eth/downloader: don't touch internal state on beacon Head retrieval\r\n\r\n* eth/downloader: fix spelling mistakes\r\n\r\n* eth/downloader: fix some typos\r\n\r\n* eth: integrate legacy/beacon sync switchover and UX\r\n\r\n* eth: handle UX wise being stuck on post-merge TTD\r\n\r\n* core, eth: integrate the beacon client with the beacon sync\r\n\r\n* eth/catalyst: make some warning messages nicer\r\n\r\n* eth/downloader: remove Ethereum 1&2 notions in favor of merge\r\n\r\n* core/beacon, eth: clean up engine API returns a bit\r\n\r\n* eth/downloader: add skeleton extension tests\r\n\r\n* eth/catalyst: keep non-kiln spec, handle mining on ttd\r\n\r\n* eth/downloader: add beacon header retrieval tests\r\n\r\n* eth: fixed spelling, commented failing tests out\r\n\r\n* eth/downloader: review fixes\r\n\r\n* eth/downloader: drop peers failing to deliver beacon headers\r\n\r\n* core/rawdb: track beacon sync data in db inspect\r\n\r\n* eth: fix review concerns\r\n\r\n* internal/web3ext: nit\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
            },
            {
                "date": "2022-03-11T08:40:55Z",
                "message": "Merge pull request #24529 from holiman/fix_inf\n\neth/protocols/snap: avoid estimating infinite percentage"
            },
            {
                "date": "2022-03-11T08:32:08Z",
                "message": "eth/protocols/snap: a little typo Merkel -> Merkle (#24530)"
            }
        ],
        "2022-03-10": [
            {
                "date": "2022-03-10T12:59:22Z",
                "message": "graphql: fee history fields (#24452)\n\nThis PR adds the `NextBaseFeePerGas` to `Block` and `EffectiveTip` to `Transaction` to make it easier for clients to compute fee history themselves via graphql queries."
            },
            {
                "date": "2022-03-10T11:46:48Z",
                "message": "eth/protocols/snap: avoid estimating infinite percentage"
            },
            {
                "date": "2022-03-10T08:37:23Z",
                "message": "core/rawdb, cmd, ethdb, eth: implement freezer tail deletion (#23954)\n\n* core/rawdb, cmd, ethdb, eth: implement freezer tail deletion\r\n\r\n* core/rawdb: address comments from martin and sina\r\n\r\n* core/rawdb: fixes cornercase in tail deletion\r\n\r\n* core/rawdb: separate metadata into a standalone file\r\n\r\n* core/rawdb: remove unused code\r\n\r\n* core/rawdb: add random test\r\n\r\n* core/rawdb: polish code\r\n\r\n* core/rawdb: fsync meta file before manipulating the index\r\n\r\n* core/rawdb: fix typo\r\n\r\n* core/rawdb: address comments"
            },
            {
                "date": "2022-03-10T08:35:22Z",
                "message": "core, ethdb, tests, trie: introduce database snapshot (#24486)"
            }
        ],
        "2022-03-09": [
            {
                "date": "2022-03-09T13:45:39Z",
                "message": "cmd/geth: make authrpc listening address settable from command line (#24522)\n\nThe default listening address \"localhost\" is not sufficient when running\r\ngeth in Docker."
            },
            {
                "date": "2022-03-09T13:45:17Z",
                "message": "rlp, trie: faster trie node encoding (#24126)\n\nThis change speeds up trie hashing and all other activities that require\r\nRLP encoding of trie nodes by approximately 20%. The speedup is achieved by\r\navoiding reflection overhead during node encoding.\r\n\r\nThe interface type trie.node now contains a method 'encode' that works with\r\nrlp.EncoderBuffer. Management of EncoderBuffers is left to calling code.\r\ntrie.hasher, which is pooled to avoid allocations, now maintains an\r\nEncoderBuffer. This means memory resources related to trie node encoding\r\nare tied to the hasher pool.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-03-09T09:44:53Z",
                "message": "core/types: improve error for too short transaction / receipt encoding (#24256)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2022-03-08": [
            {
                "date": "2022-03-08T23:42:14Z",
                "message": "mobile: remove deprecated Stop function (#24369)"
            },
            {
                "date": "2022-03-08T23:39:34Z",
                "message": "core/rawdb: add HasCode, HashTrieNode and use them where possible (#24454)"
            },
            {
                "date": "2022-03-08T23:23:13Z",
                "message": "crypto/bn256/cloudflare: fix asm for dynamic linking (#24476)\n\nWhen using -buildmode=shared, R15 is clobbered by a global variable\r\naccess; use a different register instead.\r\n\r\nFixes: #24439"
            },
            {
                "date": "2022-03-08T10:00:29Z",
                "message": "core/statedb: always clear out access list when setting a new one"
            },
            {
                "date": "2022-03-08T09:48:25Z",
                "message": " crypto/bls12381: fix typo in comment (#24509)"
            }
        ],
        "2022-03-07": [
            {
                "date": "2022-03-07T17:25:45Z",
                "message": "p2p: define DiscReason as uint8 (#24507)\n\nAll other implementations store disconnect reasons as a single byte,\r\nso go-ethereum should do it too."
            },
            {
                "date": "2022-03-07T08:21:06Z",
                "message": "cmd: allow file descriptor limit to be set via CLI (#24477)\n\n* eth, cmd: allow FdLimit to be set in config/command line (#24148)\r\n\r\n* eth/ethconfig: format code\r\n\r\n* cmd, eth/ethconfig: simplify fdlimit arg, disallow toml\r\n\r\n* cnd/utils: make fdlimit setting nicer on the logs\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2022-03-07T07:30:27Z",
                "message": "cmd/geth, node, rpc: implement jwt tokens (#24364)\n\n* rpc, node: refactor request validation and add jwt validation\r\n\r\n* node, rpc: fix error message, ignore engine api in RegisterAPIs\r\n\r\n* node: make authenticated port configurable\r\n\r\n* eth/catalyst: enable unauthenticated version of engine api\r\n\r\n* node: rework obtainjwtsecret (backport later)\r\n\r\n* cmd/geth: added auth port flag\r\n\r\n* node: happy lint, happy life\r\n\r\n* node: refactor authenticated api\r\n\r\nModifies the authentication mechanism to use default values\r\n\r\n* node: trim spaces and newline away from secret\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
            }
        ],
        "2022-03-04": [
            {
                "date": "2022-03-04T12:39:09Z",
                "message": "signer/fourbyte: add support for nested types in selectors (#24407)\n\nThis replaces the simple selector parser in signer/fourbyte with one that\r\ncan actually handle most types. The new parser is added in accounts/abi\r\nto also make it useable elsewhere."
            }
        ],
        "2022-03-02": [
            {
                "date": "2022-03-02T11:05:14Z",
                "message": "internal/build: switch azure sdk from Azure/azure-storage-blob-go to Azure/azure-sdk-for-go/sdk/storage/azblob. (#24473)\n\n* go.mod: update azure-storage-blob-go\r\n\r\nupdate Azure/azure-storage-blob-go from v0.7.0 to v0.14.0.\r\nrelation #24396.\r\n\r\n* internal/build: fix for breaking changes of azure-storage-blob-go\r\n\r\nfix for breaking changes of update Azure/azure-storage-blob-go from v0.7.0 to v0.14.0.\r\nrelation #24396.\r\n\r\n* internal/build: switch azure sdk from Azure/azure-storage-blob-go to Azure/azure-sdk-for-go/sdk/storage/azblob.\r\n\r\n* internal/build refactor appending BlobItems\r\n\r\n* internal/build: fix azure blobstore client to include container id\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2022-03-02T01:51:55Z",
                "message": "rpc: fix godoc (#24488)\n\nCo-authored-by: seven <seven@nodereal.io>"
            }
        ],
        "2022-03-01": [
            {
                "date": "2022-03-01T10:00:44Z",
                "message": "README.md: add hardware requirements (#24395)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-03-01T09:53:19Z",
                "message": "internal/flags: update copyright year (#24415)"
            },
            {
                "date": "2022-03-01T09:36:42Z",
                "message": "les/vflux/client: fix goroutine leak in testIter (#24449)"
            },
            {
                "date": "2022-03-01T09:36:11Z",
                "message": "appveyor.yml: fetch sub-modules recursively (#24451)"
            }
        ],
        "2022-02-24": [
            {
                "date": "2022-02-24T21:55:45Z",
                "message": "rlp: add WriteString method on EncoderBuffer (#24425)\n\nrlpgen outputs calls to this method for values of type string."
            }
        ],
        "2022-02-23": [
            {
                "date": "2022-02-23T10:33:14Z",
                "message": "params: replace 2 bootnodes (#24432)"
            }
        ],
        "2022-02-22": [
            {
                "date": "2022-02-22T09:45:11Z",
                "message": "graphql: fix nonce for pending accounts (#24443)"
            }
        ],
        "2022-02-18": [
            {
                "date": "2022-02-18T07:10:26Z",
                "message": "core/types: faster RLP encoding of Header, StateAcccount, ReceiptForStorage (#24420)\n\nThis change makes use of the new code generator rlp/rlpgen to improve the\r\nperformance of RLP encoding for Header and StateAccount. It also speeds up\r\nencoding of ReceiptForStorage using the new rlp.EncoderBuffer API.\r\n\r\nThe change is much less transparent than I wanted it to be, because Header and\r\nStateAccount now have an EncodeRLP method defined with pointer receiver. It\r\nused to be possible to encode non-pointer values of these types, but the new\r\nmethod prevents that and attempting to encode unadressable values (even if\r\npart of another value) will return an error. The error can be surprising and may\r\npop up in places that previously didn't expect any errors.\r\n\r\nTo make things work, I also needed to update all code paths (mostly in unit tests)\r\nthat lead to encoding of non-pointer values, and pass a pointer instead.\r\n\r\nBenchmark results:\r\n\r\n    name                             old time/op    new time/op    delta\r\n    EncodeRLP/legacy-header-8           328ns \u00b1 0%     237ns \u00b1 1%   -27.63%  (p=0.000 n=8+8)\r\n    EncodeRLP/london-header-8           353ns \u00b1 0%     247ns \u00b1 1%   -30.06%  (p=0.000 n=8+8)\r\n    EncodeRLP/receipt-for-storage-8     237ns \u00b1 0%     123ns \u00b1 0%   -47.86%  (p=0.000 n=8+7)\r\n    EncodeRLP/receipt-full-8            297ns \u00b1 0%     301ns \u00b1 1%    +1.39%  (p=0.000 n=8+8)\r\n\r\n    name                             old speed      new speed      delta\r\n    EncodeRLP/legacy-header-8        1.66GB/s \u00b1 0%  2.29GB/s \u00b1 1%   +38.19%  (p=0.000 n=8+8)\r\n    EncodeRLP/london-header-8        1.55GB/s \u00b1 0%  2.22GB/s \u00b1 1%   +42.99%  (p=0.000 n=8+8)\r\n    EncodeRLP/receipt-for-storage-8  38.0MB/s \u00b1 0%  64.8MB/s \u00b1 0%   +70.48%  (p=0.000 n=8+7)\r\n    EncodeRLP/receipt-full-8          910MB/s \u00b1 0%   897MB/s \u00b1 1%    -1.37%  (p=0.000 n=8+8)\r\n\r\n    name                             old alloc/op   new alloc/op   delta\r\n    EncodeRLP/legacy-header-8           0.00B          0.00B           ~     (all equal)\r\n    EncodeRLP/london-header-8           0.00B          0.00B           ~     (all equal)\r\n    EncodeRLP/receipt-for-storage-8     64.0B \u00b1 0%      0.0B       -100.00%  (p=0.000 n=8+8)\r\n    EncodeRLP/receipt-full-8             320B \u00b1 0%      320B \u00b1 0%      ~     (all equal)"
            }
        ],
        "2022-02-17": [
            {
                "date": "2022-02-17T17:35:33Z",
                "message": "build: add Ubuntu 21.10 PPA target (#24418)\n\nAlso specify EOL dates of all listed releases."
            }
        ],
        "2022-02-16": [
            {
                "date": "2022-02-16T17:14:12Z",
                "message": "rlp/rlpgen: RLP encoder code generator (#24251)\n\nThis change adds a code generator tool for creating EncodeRLP method\r\nimplementations. The generated methods will behave identically to the\r\nreflect-based encoder, but run faster because there is no reflection overhead.\r\n\r\nPackage rlp now provides the EncoderBuffer type for incremental encoding. This\r\nis used by generated code, but the new methods can also be useful for\r\nhand-written encoders.\r\n\r\nThere is also experimental support for generating DecodeRLP, and some new\r\nmethods have been added to the existing Stream type to support this. Creating\r\ndecoders with rlpgen is not recommended at this time because the generated\r\nmethods create very poor error reporting.\r\n\r\nMore detail about package rlp changes:\r\n\r\n* rlp: externalize struct field processing / validation\r\n\r\nThis adds a new package, rlp/internal/rlpstruct, in preparation for the\r\nRLP encoder generator.\r\n\r\nI think the struct field rules are subtle enough to warrant extracting\r\nthis into their own package, even though it means that a bunch of\r\nadapter code is needed for converting to/from rlpstruct.Type.\r\n\r\n* rlp: add more decoder methods (for rlpgen)\r\n\r\nThis adds new methods on rlp.Stream:\r\n\r\n- Uint64, Uint32, Uint16, Uint8, BigInt\r\n- ReadBytes for decoding into []byte\r\n- MoreDataInList - useful for optional list elements\r\n\r\n* rlp: expose encoder buffer (for rlpgen)\r\n\r\nThis exposes the internal encoder buffer type for use in EncodeRLP\r\nimplementations.\r\n\r\nThe new EncoderBuffer type is a sort-of 'opaque handle' for a pointer to\r\nencBuffer. It is implemented this way to ensure the global encBuffer pool\r\nis handled correctly."
            },
            {
                "date": "2022-02-16T16:38:21Z",
                "message": "build: disable Ubuntu Hirsuite (#24408)\n\nThis Ubuntu release has reached EOL and Launchpad does not\r\naccept uploads for it anymore."
            }
        ],
        "2022-02-15": [
            {
                "date": "2022-02-15T13:35:47Z",
                "message": "Merge pull request #24391 from rjl493456442/trie-iterator\n\ntrie: implement NodeBlob API for trie iterator"
            },
            {
                "date": "2022-02-15T13:15:13Z",
                "message": "core, ethdb, tests, trie: implement NewBatchWithSize API for batcher (#24392)\n\nThis PR adds an addtional API called `NewBatchWithSize` for db\r\nbatcher. It turns out that leveldb batch memory allocation is\r\nsuper inefficient. The main reason is the allocation step of\r\nleveldb Batch is too small when the batch size is large. It can\r\ntake a few second to build a leveldb batch with 100MB size.\r\n\r\nLuckily, leveldb also offers another API called MakeBatch which can\r\npre-allocate the memory area. So if the approximate size of batch is\r\nknown in advance, this API can be used in this case.\r\n\r\nIt's needed in new state scheme PR which needs to commit a batch of\r\ntrie nodes in a single batch. Implement the feature in a seperate PR."
            },
            {
                "date": "2022-02-15T12:34:12Z",
                "message": "params: begin v1.10.17 release cycle"
            },
            {
                "date": "2022-02-15T12:32:24Z",
                "message": "params: go-ethereum v1.10.16 stable"
            },
            {
                "date": "2022-02-15T09:55:55Z",
                "message": "ethclient: add CallContractAtHash  (#24355)\n\n* add CallContractAtHash to ethclient\r\n\r\n* add docstring and test\r\n\r\n* optimize test\r\n\r\n* ethclient: nits\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2022-02-15T09:44:22Z",
                "message": "internal/ethapi: fix incorrect type on empty slice (#24372)\n\n* Fixes #24368\r\n\r\nSigned-off-by: 0x6f736f646f <blackd0t@protonmail.com>\r\n\r\n* Update internal/ethapi/api.go\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-02-15T08:07:27Z",
                "message": "trie: implement NodeBlob API for trie iterator\n\nThis functionality is needed in new path-based storage scheme, but\ncan be implemented in a seperate PR though.\n\nWhen an account is deleted, then all the storage slots should be\nnuked out from the disk as well. In hash-based storage scheme they\nare still left in the disk but in new scheme, they will be iterated\nand marked as deleted.\n\nBut why the NodeBlob API is needed in this scenario? Because when\nthe node is marked deleted, the previous value is also required to\nbe recorded to construct the reverse diff."
            }
        ],
        "2022-02-14": [
            {
                "date": "2022-02-14T11:05:48Z",
                "message": "p2p: reduce the scope of variable dialPubkey (#24385)\n\ndialPubkey isn't used anywhere else after dialDest.Load, so it should be safe to\r\nrestrict its scope to the if clause."
            },
            {
                "date": "2022-02-14T08:22:57Z",
                "message": "core/state: fix read-meters + simplify code (#24304)"
            }
        ],
        "2022-02-08": [
            {
                "date": "2022-02-08T18:58:27Z",
                "message": "go.mod: upgrade to github.com/karalabe/usb v0.0.2 (#24356)\n\nThis upgrade resolves a build issue on Android 7+ and removes\r\na build warning on macOS >= 12.0."
            },
            {
                "date": "2022-02-08T13:40:00Z",
                "message": "signer/core: fix complex typed data sign (EIP712) (#24220)\n\nCo-authored-by: specerxi <xhxpecer@gmail.com>"
            }
        ],
        "2022-02-07": [
            {
                "date": "2022-02-07T17:34:13Z",
                "message": "miner: avoid data race in miner (#24349)"
            }
        ],
        "2022-02-04": [
            {
                "date": "2022-02-04T14:24:32Z",
                "message": "cmd/devp2p: implement snap protocol testing (#24276)\n\nThis also contains some changes to the protocol handler to\r\nmake the tests pass."
            }
        ],
        "2022-02-02": [
            {
                "date": "2022-02-02T16:21:25Z",
                "message": "go.mode: bump graphql-go dependency to v1.3.0 (#24324)"
            },
            {
                "date": "2022-02-02T16:15:38Z",
                "message": "Merge pull request #24328 from karalabe/uke-catalyst\n\ncmd: auto-enable beacon APIs if TTD is defined"
            },
            {
                "date": "2022-02-02T15:57:34Z",
                "message": "cmd: auto-enable beacon APIs if TTD is defined"
            }
        ],
        "2022-02-01": [
            {
                "date": "2022-02-01T15:42:51Z",
                "message": "accounts/abi/bind: improve WaitMined error handling (#24321)\n\nThis change makes it so WaitMined no longer logs an error when the receipt\r\nis unavailable. It also changes the simulated backend to return NotFound for\r\nunavailable receipts, just like ethclient does."
            },
            {
                "date": "2022-02-01T09:44:44Z",
                "message": "eth/tracers: clean-up tracer collection (#24320)\n\n* eth/tracers: clean-up tracer collection\r\n\r\n* Rm test for dropped tracer"
            },
            {
                "date": "2022-02-01T09:36:39Z",
                "message": "accounts: correct spelling mistake (#24323)\n\nI believe the sentence is attempting to explain that the URL is \"[used] by upper layers to define a sorting order over all wallets from multiple backends.\""
            }
        ],
        "2022-01-31": [
            {
                "date": "2022-01-31T12:22:35Z",
                "message": "all: separate catalyst package (#24280)\n\n* all: seperate catalyst package\r\n\r\n* eth/catalyst: moved some methods, added docs\r\n\r\n* eth/catalyst, les/catalyst: add method docs\r\n\r\n* core, eth, les, miner: move common function to beacon package\r\n\r\n* eth/catalyst: goimported\r\n\r\n* cmd/utils, miner/stress/beacon: naming nitpicks\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2022-01-31T12:17:18Z",
                "message": "build: fix lint on ARM (#24311)\n\n* build: append GOARM to arm lint download URL\r\n\r\notherwise it fails with:\r\n\r\ndownloading from https://github.com/golangci/golangci-lint/releases/download/v1.42.0/golangci-lint-1.42.0-linux-arm.tar.gz\r\nci.go:347: download error: status 404\r\n\r\n* build: increase timeout for lint\r\n\r\nOtherwise it times out on a pi\r\n\r\n* Increase timeout even further\r\n\r\nsaw longer build times"
            },
            {
                "date": "2022-01-31T08:51:17Z",
                "message": "eth/tracers: native prestate tracer (#24268)\n\n* eth/tracers: add initial native prestate tracer\r\n\r\n* fix balance hex\r\n\r\n* handle prestate for tx from and to\r\n\r\n* drop created contract from prestate\r\n\r\n* fix sender balance\r\n\r\n* use switch instead\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\n* minor fix\r\n\r\n* lookup create2 account\r\n\r\n* mv code around a bit\r\n\r\n* check stackLen for create2\r\n\r\n* fix transfer tx for js prestate tracer\r\n\r\n* fix create2 addr\r\n\r\n* track extcodehash in js prestate tracer\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-01-31T08:50:10Z",
                "message": "cmd/geth: make test pass on a pi4 by using lightkdf (#24314)"
            }
        ],
        "2022-01-28": [
            {
                "date": "2022-01-28T07:47:19Z",
                "message": "tests: external evm benchmarks (#24050)\n\n* tests: add ipsilon/evm-benchmarks git submodule\r\n\r\n* tests: plug-in evm-benchmarks"
            }
        ],
        "2022-01-27": [
            {
                "date": "2022-01-27T09:59:05Z",
                "message": " rpc: set Request.GetBody for client requests (#24292)\n\nWhen talking to an HTTP2 server, there are situations where it needs to\r\n\"rewind\" the Request.Body. To allow this, we have to set up the Request.GetBody\r\nfunction to return a brand new instance of the body.\r\n\r\nIf not set, we can end up with the following error:\r\n\r\n    http2: Transport: cannot retry err [http2: Transport received Server's graceful shutdown GOAWAY] after Request.Body was written; define Request.GetBody to avoid this error\r\n\r\nSee this commit for more information: https://sourcegraph.com/github.com/golang/net/-/commit/cffdcf672aee934982473246bc7e9a8ba446aa9b?visible=2"
            },
            {
                "date": "2022-01-27T09:56:04Z",
                "message": "internal/web3ext: add eth.getLogs wrapper (#24297)"
            },
            {
                "date": "2022-01-27T09:06:40Z",
                "message": "cmd/utils: open db in readonly when dev datadir exists (#24298)"
            }
        ],
        "2022-01-25": [
            {
                "date": "2022-01-25T13:45:30Z",
                "message": "eth/tracers: avoid using blockCtx concurrently (#24286)"
            },
            {
                "date": "2022-01-25T10:36:51Z",
                "message": "core/rawdb: fix typo (#24289)"
            },
            {
                "date": "2022-01-25T10:18:16Z",
                "message": "Merge pull request #24288 from holiman/prefer_prefixed\n\ncore/rawdb: do prefixed lookup first"
            },
            {
                "date": "2022-01-25T09:51:18Z",
                "message": "core/rawdb: do prefixed lookup first"
            }
        ],
        "2022-01-24": [
            {
                "date": "2022-01-24T16:19:43Z",
                "message": "accounts/abi: simplify Arguments.Unpack (#24277)\n\nSince len(nonIndexedArgs) is definitely 0 in this context, the code can be simplified."
            },
            {
                "date": "2022-01-24T08:35:39Z",
                "message": "Merge pull request #24281 from karalabe/dev-read-write\n\ncmd/utils: fix regression placing dev mode datadir readonly"
            },
            {
                "date": "2022-01-24T08:19:31Z",
                "message": "cmd/utils: fix regression placing dev mode datadir readonly"
            },
            {
                "date": "2022-01-24T07:19:52Z",
                "message": "eth, miner: use miner for post-merge block production (#23256)\n\n* eth, miner: remove duplicated code\r\n\r\n* eth/catalyst: remove unneeded code\r\n\r\n* miner: keep update pending state even the Merge is happened\r\n\r\n* eth, miner: rebase\r\n\r\n* miner: fix tests\r\n\r\n* eth, miner: address comments from marius\r\n\r\n* miner: use empty zero randomness for pending blocks after the merge\r\n\r\n* eth/catalyst: gofmt\r\n\r\n* miner: add warning log for state recovery\r\n\r\n* miner: ignore uncles for post-merge blocks\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2022-01-24T04:46:49Z",
                "message": "go.mod : golang-set 1.8.0 go.mod added & cardinality check for subset (#24165)"
            },
            {
                "date": "2022-01-24T04:44:29Z",
                "message": "accounts: fix typo in errors.go (#24270)"
            },
            {
                "date": "2022-01-24T04:43:51Z",
                "message": "internal/ethapi: remove unnecessary comment (#24271)\n\nBecause there is no `fullTx` parameter at function signatures and\r\nuncle apis does not return txs also, those lines are un-necessary."
            }
        ],
        "2022-01-21": [
            {
                "date": "2022-01-21T13:35:30Z",
                "message": "trie: test for edgecase in VerifyRangeProof (#24257)\n\n* trie/proof: edge case for VerifyRangeProof\r\n\r\n* more consistency with other tests in the file\r\n\r\n* trie: fix test todo\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-01-21T11:22:44Z",
                "message": "core, miner, rpc, eth: fix goroutine leaks in tests (#24211)\n\n* fix blocking and non-blocking issues\r\n\r\n* core: revert change in blockchain.go\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-01-21T09:41:51Z",
                "message": "trie: fix range prover (#24266)"
            },
            {
                "date": "2022-01-21T08:12:40Z",
                "message": "core: fix typo in blockchain test (#24263)"
            }
        ],
        "2022-01-20": [
            {
                "date": "2022-01-20T11:45:07Z",
                "message": "rpc: add PeerInfo (#24255)\n\nThis replaces the sketchy and undocumented string context keys for HTTP requests\r\nwith a defined interface. Using string keys with context is discouraged because\r\nthey may clash with keys created by other packages.\r\n\r\nWe added these keys to make connection metadata available in the signer, so this\r\nchange also updates signer/core to use the new PeerInfo API."
            },
            {
                "date": "2022-01-20T11:29:06Z",
                "message": "eth/catalyst: evict old payloads, type PayloadID (#24236)\n\n* eth/catalyst: evict old payloads, type PayloadID\r\n\r\n* eth/catalyst: added tracing info to engine api\r\n\r\n* eth/catalyst: add test for create payload timestamps\r\n\r\n* catalyst: better logs\r\n\r\n* eth/catalyst: computePayloadId return style\r\n\r\n* catalyst: add queue for payloads\r\n\r\n* eth/catalyst: nitpicks\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2022-01-20T08:38:42Z",
                "message": "internal/ethapi: use same receiver names (#24252)\n\n* Chore: use same receiver names\r\n\r\n* Fix syntax issues"
            }
        ],
        "2022-01-18": [
            {
                "date": "2022-01-18T12:31:25Z",
                "message": "signer, core: support chainId for GnosisSafeTx (#24231)"
            },
            {
                "date": "2022-01-18T10:30:41Z",
                "message": "cmd/geth: add db cmd to show metadata (#23900)\n\n* cmd/geth: add db cmd to show metadata\r\n\r\n* cmd/geth: better output generator status\r\n\r\nCo-authored-by: Sina Mahmoodi <1591639+s1na@users.noreply.github.com>\r\n\r\n* cmd: minor\r\n\r\nCo-authored-by: Sina Mahmoodi <1591639+s1na@users.noreply.github.com>\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            },
            {
                "date": "2022-01-18T09:29:38Z",
                "message": "core/rawdb: enforce readonly in freezer instantiation (#24119)\n\n* freezer: add readonly flag to table\r\n\r\n* freezer: enforce readonly in table repair\r\n\r\n* freezer: enforce readonly in newFreezer\r\n\r\n* minor fix\r\n\r\n* minor\r\n\r\n* core/rawdb: test that writing during readonly fails\r\n\r\n* rm unused log\r\n\r\n* check readonly on batch append\r\n\r\n* minor\r\n\r\n* Revert \"check readonly on batch append\"\r\n\r\nThis reverts commit 2ddb5ec4ba7534bf6edbdfec158ea99a2eed5036.\r\n\r\n* review fixes\r\n\r\n* minor test refactor\r\n\r\n* attempt at fixing windows issue\r\n\r\n* add comment re windows sync issue\r\n\r\n* k->kind\r\n\r\n* open readonly db for genesis check\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2022-01-18T09:17:37Z",
                "message": "accounts/abi/bind/backends: return errors instead of panic (#24242)"
            }
        ],
        "2022-01-15": [
            {
                "date": "2022-01-15T23:38:43Z",
                "message": "SECURITY.md: fix typo (#24244)"
            }
        ],
        "2022-01-12": [
            {
                "date": "2022-01-12T10:09:10Z",
                "message": "crypto/ecies: use AES-192 for curve P384 (#24139)\n\nUsing curve P384 for encryption causes the error \"ecies: shared key params\r\nare too big\". Also, readme.md says curve P384 should use AES192 not AES256.\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
            }
        ],
        "2022-01-11": [
            {
                "date": "2022-01-11T20:36:48Z",
                "message": "trie: use keyvalue reader for non-mutating methods (#24221)"
            },
            {
                "date": "2022-01-11T20:34:53Z",
                "message": "cmd/geth: update copyright year (#24224)\n\n* cmd/geth: update copyright year\r\n\r\n* cmd/geth: update copyright year"
            },
            {
                "date": "2022-01-11T09:39:04Z",
                "message": "cmd/geth: add tests for version_check (#24169)"
            },
            {
                "date": "2022-01-11T09:35:28Z",
                "message": "Merge pull request #24171 from ucwong/pmp\n\ngo.mod : go-nat-pmp v1.0.2"
            },
            {
                "date": "2022-01-11T09:32:43Z",
                "message": "Merge pull request #24197 from rjl493456442/periodically-flush-batch\n\ncore: periodically flush the transaction indexes"
            }
        ],
        "2022-01-10": [
            {
                "date": "2022-01-10T07:44:21Z",
                "message": "core/evm: RANDOM opcode (EIP-4399) (#24141)\n\n* core: implement eip-4399 random opcode\r\n\r\n* core: make vmconfig threadsafe\r\n\r\n* core: miner: pass vmConfig by value not reference\r\n\r\n* all: enable 4399 by Rules\r\n\r\n* core: remove diff (f)\r\n\r\n* tests: set proper difficulty (f)\r\n\r\n* smaller diff (f)\r\n\r\n* eth/catalyst: nit\r\n\r\n* core: make RANDOM a pointer which is only set post-merge\r\n\r\n* cmd/evm/internal/t8ntool: fix t8n tracing of 4399\r\n\r\n* tests: set difficulty\r\n\r\n* cmd/evm/internal/t8ntool: check that baserules are london before applying the merge chainrules"
            }
        ],
        "2022-01-07": [
            {
                "date": "2022-01-07T14:46:24Z",
                "message": "cmd/ethkey: fix comment typo (#24205)"
            },
            {
                "date": "2022-01-07T14:45:53Z",
                "message": "accouts/scwallet: typo fix (#24207)"
            },
            {
                "date": "2022-01-07T14:44:22Z",
                "message": "Merge pull request #24210 from holiman/whitelist_investigate\n\neth: continue after whitelist check"
            },
            {
                "date": "2022-01-07T13:12:43Z",
                "message": "eth: continue after whitelist check"
            }
        ],
        "2022-01-06": [
            {
                "date": "2022-01-06T14:03:33Z",
                "message": "accounts: corrected spelling mistakes (#24194)\n\nCo-authored-by: sanskar khare <sanskarkhare@sanskars-MacBook-Air.local>"
            },
            {
                "date": "2022-01-06T14:02:57Z",
                "message": "README: fix a typo (#24196)"
            },
            {
                "date": "2022-01-06T14:02:23Z",
                "message": "core: fix a typo (#24198)"
            },
            {
                "date": "2022-01-06T09:30:11Z",
                "message": "Merge pull request #24117 from holiman/db_has\n\ntrie, core, eth: use db.has over db.get where possible"
            }
        ],
        "2022-01-05": [
            {
                "date": "2022-01-05T16:17:32Z",
                "message": "params: begin v1.10.16 release cycle"
            },
            {
                "date": "2022-01-05T16:16:40Z",
                "message": "params: go-ethereum v1.10.15 stable"
            },
            {
                "date": "2022-01-05T15:40:45Z",
                "message": "les: fix serverHandler crash after setHead (#24200)"
            },
            {
                "date": "2022-01-05T15:22:46Z",
                "message": "graphql: fix block resolving for parent field (#24191)\n\nFixes #24161"
            },
            {
                "date": "2022-01-05T15:21:08Z",
                "message": "graphql: fix pre-byzantium receipt status (#24188)\n\nFixes #24124"
            },
            {
                "date": "2022-01-05T15:12:47Z",
                "message": "ethclient: fix unmarshaling of ethereum.SyncProgress (#24199)\n\nSyncProgress was modified in PR #23576 to add the fields reported for\r\nsnap sync. The PR also changed ethclient to use the SyncProgress struct\r\ndirectly instead of wrapping it for hex-decoding. This broke the\r\nSyncProgress method.\r\n\r\nFix it by putting back the custom wrapper. While here, also put back the\r\nfast sync related fields because SyncProgress is stable API and thus\r\nremoving fields is not allowed.\r\n\r\nFixes #24180\r\nFixes #24176"
            },
            {
                "date": "2022-01-05T15:11:46Z",
                "message": "graphql: check header first in blocks query (#24190)\n\nFixes #24167\r\n\r\nNew behaviour is that the endpoint returns results only for available\r\nblocks without returning an error when it doesn't find a block. Note we\r\nskip any block after a non-existent block.\r\n\r\nThis adds a header fetch for every block in range (even if header\r\nis not needed). Alternatively, we could do the check in every field's\r\nresolver method to avoid this overhead."
            },
            {
                "date": "2022-01-05T07:00:03Z",
                "message": "core: periodically flush the transaction indexes"
            }
        ],
        "2022-01-04": [
            {
                "date": "2022-01-04T18:02:37Z",
                "message": "core/rawdb: fix double-lock causing hang (#24189)\n\nFixes #24159\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2022-01-04T15:24:28Z",
                "message": "accounts: correct comment (#24186)\n\nChange two instances of the word `calulcated` to `calculated`."
            },
            {
                "date": "2022-01-04T15:23:52Z",
                "message": "trie: fix spelling mistake (#24185)\n\nmispelled words in comments: th enext"
            }
        ],
        "2021-12-30": [
            {
                "date": "2021-12-30T10:52:59Z",
                "message": "go.mod : go-nat-pmp v1.0.2"
            }
        ],
        "2021-12-26": [
            {
                "date": "2021-12-26T13:58:17Z",
                "message": "core/asm: change order of items in stringtokenTypes (#24153)\n\nThis orders the items in slice definition same as the enum values."
            }
        ],
        "2021-12-23": [
            {
                "date": "2021-12-23T10:23:07Z",
                "message": "params: begin v1.10.15 release cycle"
            },
            {
                "date": "2021-12-23T10:21:45Z",
                "message": "params: release go-ethereum v1.10.14 stable"
            }
        ],
        "2021-12-22": [
            {
                "date": "2021-12-22T16:51:57Z",
                "message": "cmd/geth: add missing sepolia testnet flag checks (#24147)"
            },
            {
                "date": "2021-12-22T14:32:17Z",
                "message": "core/types: document JSON field name equivalents of DynamicFeeTx (#24143)"
            },
            {
                "date": "2021-12-22T14:31:41Z",
                "message": "build: upgrade -dlgo version to Go 1.17.5 (#24144)"
            }
        ],
        "2021-12-20": [
            {
                "date": "2021-12-20T09:25:46Z",
                "message": "accounts/abi: avoid unnecessary alloc (#24128)"
            }
        ],
        "2021-12-17": [
            {
                "date": "2021-12-17T14:44:57Z",
                "message": "core: ignore basefee when comparing with pool gasprice in txpool (#24080)\n\nThis reverts commit 9489853321bb221694f5262772c656413be073af."
            },
            {
                "date": "2021-12-17T14:38:58Z",
                "message": "eth/catalyst: implement kintsugi-spec v3 (#24067)"
            },
            {
                "date": "2021-12-17T14:19:34Z",
                "message": "tests/solidity/contracts: fix typo in OpCodes.sol (#24123)"
            },
            {
                "date": "2021-12-17T14:18:51Z",
                "message": "eth, les: update unclean shutdown markers regularly (#24077)\n\nFixes #22580\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-12-17T12:44:05Z",
                "message": "core/vm: Make INVALID a defined opcode (#24017)\n\n* core/vm: Define 0xfe opcode as INVALID\r\n\r\n* core/vm: Remove opInvalid as opUndefined handles it\r\n\r\nCo-authored-by: Alex Beregszaszi <alex@rtfs.hu>"
            },
            {
                "date": "2021-12-17T09:32:00Z",
                "message": "core/vm: reverse bit order in bytes of code bitmap (#24120)\n\n* core/vm: reverse bit order in bytes of code bitmap\r\n\r\nThis bit order is more natural for bit manipulation operations and we\r\ncan eliminate some small number of CPU instructions.\r\n\r\n* core/vm: drop lookup table"
            }
        ],
        "2021-12-16": [
            {
                "date": "2021-12-16T10:50:05Z",
                "message": "README: remove mentions of snap sync (#24122)"
            }
        ],
        "2021-12-15": [
            {
                "date": "2021-12-15T15:16:45Z",
                "message": "trie, core, eth: use db.has over db.get where possible"
            },
            {
                "date": "2021-12-15T14:30:54Z",
                "message": "rpc: fix time key collision for logger with json output (#24112)\n\nThe \"t\" key overrides the log message time in JSON output.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2021-12-14": [
            {
                "date": "2021-12-14T10:34:50Z",
                "message": "les/vflux/client, p2p/nodestate: fix data races (#24058)\n\nFixes #23848"
            },
            {
                "date": "2021-12-14T10:30:20Z",
                "message": "core/vm: avoid memory expansion check for trivial ops (#24048)"
            },
            {
                "date": "2021-12-14T10:11:05Z",
                "message": "core/rawdb: fix error message fields in ReadLogs (#24104)"
            },
            {
                "date": "2021-12-14T09:17:25Z",
                "message": "consensus: define MaxGasLimit as a const in params (#24092)\n\n* consensus: use the maxGasLimit constant to check the header.GasLimit to avoid creating new variables repeatedly\r\n\r\n* consensus: check the header.GasLimit by the public constant MaxGasLimit\r\n\r\n* consensus: check the header.GasLimit by the constant MaxGasLimit"
            }
        ],
        "2021-12-11": [
            {
                "date": "2021-12-11T15:51:05Z",
                "message": "cmd/geth, console: support interrupting the js console (#23387)\n\nPreviously, Ctrl-C (SIGINT) was ignored during JS execution, so it was not\r\npossible to get out of infinite loops in the console. With this change,\r\nCtrl-C now interrupts JS.\r\n\r\nFixes #23344\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2021-12-09": [
            {
                "date": "2021-12-09T12:55:06Z",
                "message": "core/vm: remove unused code (IsStaticJump) (#24085)"
            }
        ],
        "2021-12-07": [
            {
                "date": "2021-12-07T16:50:58Z",
                "message": "core, eth: improve delivery speed on header requests (#23105)\n\nThis PR reduces the amount of work we do when answering header queries, e.g. when a peer\r\nis syncing from us.\r\n\r\nFor some items, e.g block bodies, when we read the rlp-data from database, we plug it\r\ndirectly into the response package. We didn't do that for headers, but instead read\r\nheaders-rlp, decode to types.Header, and re-encode to rlp. This PR changes that to keep it\r\nin RLP-form as much as possible. When a node is syncing from us, it typically requests 192\r\ncontiguous headers. On master it has the following effect:\r\n\r\n- For headers not in ancient: 2 db lookups. One for translating hash->number (even though\r\n  the request is by number), and another for reading by hash (this latter one is sometimes\r\n  cached).\r\n  \r\n- For headers in ancient: 1 file lookup/syscall for translating hash->number (even though\r\n  the request is by number), and another for reading the header itself. After this, it\r\n  also performes a hashing of the header, to ensure that the hash is what it expected. In\r\n  this PR, I instead move the logic for \"give me a sequence of blocks\" into the lower\r\n  layers, where the database can determine how and what to read from leveldb and/or\r\n  ancients.\r\n\r\nThere are basically four types of requests; three of them are improved this way. The\r\nfourth, by hash going backwards, is more tricky to optimize. However, since we know that\r\nthe gap is 0, we can look up by the parentHash, and stlil shave off all the number->hash\r\nlookups.\r\n\r\nThe gapped collection can be optimized similarly, as a follow-up, at least in three out of\r\nfour cases.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-12-07T09:42:09Z",
                "message": "miner: update pending block even after the PoS transition (#24075)"
            },
            {
                "date": "2021-12-07T01:36:01Z",
                "message": "eth/filters: remove unused field 'chaindb' in PublicFilterAPI (#24072)"
            }
        ],
        "2021-12-06": [
            {
                "date": "2021-12-06T12:46:19Z",
                "message": "security policy: updated pgp key (#24069)"
            },
            {
                "date": "2021-12-06T11:25:42Z",
                "message": "p2p/simulations: improve README language (#24051)"
            },
            {
                "date": "2021-12-06T10:47:25Z",
                "message": "Merge pull request #24066 from holiman/no_no_recursion\n\ncore/vm: remove no-recursion option from config"
            },
            {
                "date": "2021-12-06T10:26:03Z",
                "message": "core, core/rawdb: fix transaction indexing (#24024)\n\nThis PR fixes a special corner case in transaction indexing.\r\n\r\nWhen the chain is rewound by SetHead to a historical point which is even lower than the transaction indexes tail, then system will report Failed to decode block body error all the time, because the relevant blocks are already deleted.\r\n\r\nIn order to avoid this \"non-critical-but-annoying\" issue, we can recap the indexing target to head+1(to is excluded, so it means indexing transactions from 0 to head)."
            },
            {
                "date": "2021-12-06T08:55:50Z",
                "message": "core/vm: remove no-recursion option from config"
            }
        ],
        "2021-12-05": [
            {
                "date": "2021-12-05T13:31:41Z",
                "message": "signer/core: move EIP-712 types to package apitypes (#24029)\n\nFixes #23972"
            }
        ],
        "2021-12-03": [
            {
                "date": "2021-12-03T15:26:28Z",
                "message": "eth/catalyst: implement kintsugi spec v1.0.0-alpha.4 (#23984)\n\nThis PR implements the new kintsugi specification which can be found here: https://github.com/ethereum/execution-apis/blob/v1.0.0-alpha.4/src/engine/specification.md"
            },
            {
                "date": "2021-12-03T12:34:18Z",
                "message": "readme: use correct link for web3.js docs (#24046)\n\nPrevious link leads to incorrect (more recent) version of web3.js docs.\r\n\r\ngo-ethereum uses v0.20.1. The docs for 0.2x.x have been archived at this Github link."
            },
            {
                "date": "2021-12-03T11:55:17Z",
                "message": "Merge pull request #24047 from karalabe/delete-dead-sync-bloom\n\ncore, eth, les, trie: remove the sync bloom, used by fast sync"
            },
            {
                "date": "2021-12-03T10:32:41Z",
                "message": "core, eth, les, trie: remove the sync bloom, used by fast sync"
            },
            {
                "date": "2021-12-03T10:10:26Z",
                "message": "core/vm: move interpreter interruption check to jump instructions (#24026)\n\n* core/vm: Remove interpreter loop interruption check\r\n\r\n* core/vm: Unit test for interpreter loop interruption\r\n\r\n* core/vm: Check for interpreter loop abort on every jump"
            },
            {
                "date": "2021-12-03T10:04:54Z",
                "message": "core/vm: fill gaps in jump table with opUndefined (#24031)"
            },
            {
                "date": "2021-12-03T09:16:49Z",
                "message": "core/vm: remove stack.pushN (#24040)"
            },
            {
                "date": "2021-12-03T08:34:25Z",
                "message": "Merge pull request #24032 from karalabe/downloader-response-preprocess\n\neth: pre-process downloader responses on the peer reader thread"
            }
        ],
        "2021-12-02": [
            {
                "date": "2021-12-02T14:42:09Z",
                "message": "all: fix 'the the' in comments (#24036)"
            },
            {
                "date": "2021-12-02T12:53:10Z",
                "message": "accounts/abi/bind: correctly handle structs used only as constructor params (#23940)\n\nThe `structs` map is populated by iterating over all methods except the constructor, which results in a nil-pointer dereference.\r\n\r\nI've first reproduced the problem with a new test and then implemented the fix.\r\n\r\nCo-authored-by: Arran Schlosberg <me@arranschlosberg.com>"
            },
            {
                "date": "2021-12-02T09:55:01Z",
                "message": "p2p/enr: reduce allocation in Record.encode (#24034)"
            }
        ],
        "2021-12-01": [
            {
                "date": "2021-12-01T18:18:12Z",
                "message": "eth: pre-process downloader responses on the peer reader thread"
            },
            {
                "date": "2021-12-01T09:34:52Z",
                "message": "eth/tracers/js: add support for REVERT/SELFDESTRUCT in evmdis_tracer (#24016)\n\n* eth/tracers: Add support for REVERT in evmdis_tracer\r\n\r\n* evm/tracers: Fix evmdis_tracer to use SELFDESTRUCT instead of SUICIDE\r\n\r\n* eth/tracers: Regenerate tracer library"
            },
            {
                "date": "2021-12-01T09:33:29Z",
                "message": "core/vm: rename opSuicide to opSelfdestruct (#24022)\n\nThe opcode was renamed in the codebase in 2017, but the functions were kept unchanged."
            },
            {
                "date": "2021-12-01T09:21:21Z",
                "message": "core/vm: Move interpreter.ReadOnly check into the opcode implementations (#23970)\n\n* core/vm: Move interpreter.ReadOnly check into the opcode implementations\r\n\r\nAlso remove the same check from the interpreter inner loop.\r\n\r\n* core/vm: Remove obsolete operation.writes flag\r\n\r\n* core/vm: Capture fault states in logger\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\n* core/vm: Remove panic added for testing\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2021-12-01T09:17:18Z",
                "message": "tests/fuzzzers. eth/protocols/snap: add snap protocol fuzzers (#23957)"
            }
        ],
        "2021-11-30": [
            {
                "date": "2021-11-30T12:21:40Z",
                "message": "core/vm: don't copy JumpTable when no EIP mods are needed (#23977)"
            },
            {
                "date": "2021-11-30T09:34:34Z",
                "message": "core/vm: Rename SHA3 instruction to KECCAK256 (#23976)\n\nThis was proposed in 2016, Solidity uses this since 2017, and evmone and other VMs use the keccak256 name. This brings geth in line with those."
            }
        ],
        "2021-11-29": [
            {
                "date": "2021-11-29T13:46:24Z",
                "message": "core/vm: simplify error handling in interpreter loop (#23952)\n\n* core/vm: break loop on any error\r\n\r\n* core/vm: move ErrExecutionReverted to opRevert()\r\n\r\n* core/vm: use \"stop token\" to stop the loop\r\n\r\n* core/vm: unconditionally pc++ in the loop\r\n\r\n* core/vm: set return data in instruction impls"
            },
            {
                "date": "2021-11-29T10:02:40Z",
                "message": "trie: simplify StackTrie implementation (#23950)\n\nTrim the search key from head as it's being pushed deeper into the trie. Previously the search key was never modified but each node kept information how to slice and compare it in keyOffset. Now the keyOffset is not needed as this information is included in the slice of the search key. This way the keyOffset can be removed and key manipulation\r\nsimplified."
            }
        ],
        "2021-11-26": [
            {
                "date": "2021-11-26T11:26:03Z",
                "message": "eth: request id dispatcher and direct req/reply APIs (#23576)\n\n* eth: request ID based message dispatcher\r\n\r\n* eth: fix dispatcher cancellation, rework fetchers idleness tracker\r\n\r\n* eth/downloader: drop peers who refuse to serve advertised chains"
            },
            {
                "date": "2021-11-26T11:23:02Z",
                "message": "all: core rework for the merge transition  (#23761)\n\n* all: work for eth1/2 transtition\r\n\r\n* consensus/beacon, eth: change beacon difficulty to 0\r\n\r\n* eth: updates\r\n\r\n* all: add terminalBlockDifficulty config, fix rebasing issues\r\n\r\n* eth: implemented merge interop spec\r\n\r\n* internal/ethapi: update to v1.0.0.alpha.2\r\n\r\n                                                                 This commit updates the code to the new spec, moving payloadId into\r\n                                                                 it's own object. It also fixes an issue with finalizing an empty blockhash.\r\n                                                                 It also properly sets the basefee\r\n\r\n* all: sync polishes, other fixes + refactors\r\n\r\n* core, eth: correct semantics for LeavePoW, EnterPoS\r\n\r\n* core: fixed rebasing artifacts\r\n\r\n* core: light: performance improvements\r\n\r\n* core: use keyed field (f)\r\n\r\n* core: eth: fix compilation issues + tests\r\n\r\n* eth/catalyst: dbetter error codes\r\n\r\n* all: move Merger to consensus/, remove reliance on it in bc\r\n\r\n* all: renamed EnterPoS and LeavePoW to ReachTDD and FinalizePoS\r\n\r\n* core: make mergelogs a function\r\n\r\n* core: use InsertChain instead of InsertBlock\r\n\r\n* les: drop merger from lightchain object\r\n\r\n* consensus: add merger\r\n\r\n* core: recoverAncestors in catalyst mode\r\n\r\n* core: fix nitpick\r\n\r\n* all: removed merger from beacon, use TTD, nitpicks\r\n\r\n* consensus: eth: add docstring, removed unnecessary code duplication\r\n\r\n* consensus/beacon: better comment\r\n\r\n* all: easy to fix nitpicks by karalabe\r\n\r\n* consensus/beacon: verify known headers to be sure\r\n\r\n* core: comments\r\n\r\n* core: eth: don't drop peers who advertise blocks, nitpicks\r\n\r\n* core: never add beacon blocks to the future queue\r\n\r\n* core: fixed nitpicks\r\n\r\n* consensus/beacon: simplify IsTTDReached check\r\n\r\n* consensus/beacon: correct IsTTDReached check\r\n\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            }
        ],
        "2021-11-25": [
            {
                "date": "2021-11-25T19:10:01Z",
                "message": "core/vm: simplify op lookup in contract (#23974)"
            },
            {
                "date": "2021-11-25T12:18:34Z",
                "message": "Merge pull request #23967 from ipsilon/evm_jumptable_type\n\ncore/vm: use proper JumpTable type"
            },
            {
                "date": "2021-11-25T12:17:09Z",
                "message": "all: move loggers to eth/tracers (#23892)\n\n* all: mv loggers to eth/tracers\r\n\r\n* core/vm: minor\r\n\r\n* eth/tracers: tmp comment out testStoreCapture\r\n\r\n* eth/tracers: uncomment and fix logger test\r\n\r\n* eth/tracers: simplify test\r\n\r\n* core/vm: re-add license\r\n\r\n* core/vm: minor\r\n\r\n* rename LogConfig to Config"
            },
            {
                "date": "2021-11-25T08:37:47Z",
                "message": "core/vm, core/state/snapshot: remove unused code (#23956)\n\n* core/state/snapshot: remove wiper functionality\r\n\r\n* core/vm: remove unused 'unofficial' opcodes"
            }
        ],
        "2021-11-24": [
            {
                "date": "2021-11-24T20:22:45Z",
                "message": "cmd/devp2p/internal/v4test: fix false-positive hive test (#23966)\n\nThis PR fixes two problems in devp2p tests (and through them, hive).\r\n\r\n- Make the output more detailed about what is returned (always print packet kind).\r\n- Allow Ping response to unsolicited findnode.\r\n\r\nWithout this PR, nethermind fails a hive protocol test, and I misinterpreted the result (NethermindEth/nethermind#3617). Ergo, the output was not fool-proof."
            },
            {
                "date": "2021-11-24T15:02:12Z",
                "message": "core/vm: use proper JumpTable type"
            },
            {
                "date": "2021-11-24T13:12:26Z",
                "message": "consensus/clique: fix block number unmarshal (#23961)\n\n* clique: fix block number unmarshal\r\n\r\n* clique: rename"
            },
            {
                "date": "2021-11-24T12:09:57Z",
                "message": "params: begin v1.10.14 release cycle"
            },
            {
                "date": "2021-11-24T11:44:10Z",
                "message": "params: release Geth v1.10.13"
            },
            {
                "date": "2021-11-24T09:15:23Z",
                "message": "cmd/evm: rename t8n args to improve clarity when tracing (#23934)\n\n* cmd/evm: rename t8n args to improve clarity when tracing\r\n\r\n* cmd/evm: add back removed tracing flags and note that they are deprecated\r\n\r\n* cmd/evm: add warning when using deprecated flag"
            }
        ],
        "2021-11-23": [
            {
                "date": "2021-11-23T20:21:10Z",
                "message": "Merge pull request #23960 from karalabe/verify-range-deletion\n\ntrie: reject deletions when verifying range proofs"
            },
            {
                "date": "2021-11-23T17:28:17Z",
                "message": "trie: reject deletions when verifying range proofs"
            },
            {
                "date": "2021-11-23T14:14:08Z",
                "message": "p2p/enode: store local port number as uint16 (#23926)"
            },
            {
                "date": "2021-11-23T11:37:26Z",
                "message": "core/rawdb: use AncientRange when initializing leveldb from freezer (#23612)\n\n* core/rawdb: utilize AncientRange when initiating from freezer\r\n\r\n* core/rawdb: remove debug sanity check"
            },
            {
                "date": "2021-11-23T09:50:17Z",
                "message": "Merge pull request #23928 from holiman/no_iota\n\ncore/vm: don't use iota for opcode definitions"
            },
            {
                "date": "2021-11-23T09:33:15Z",
                "message": "cmd/evm: add support for signing transactions in the unprotected format (#23937)\n\n* cmd/evm: add support for signing transactions in the unprotected format\r\n\r\n* cmd/evm: simplify signing of unprotected txs"
            }
        ],
        "2021-11-22": [
            {
                "date": "2021-11-22T10:16:27Z",
                "message": "Merge pull request #23949 from karalabe/fix-repair-heuristic\n\ncore, eth/downloader: fix resetting below freezer threshold"
            },
            {
                "date": "2021-11-22T09:11:59Z",
                "message": "core, eth/downloader: fix resetting below freezer threshold"
            },
            {
                "date": "2021-11-22T08:25:35Z",
                "message": "cmd/evm: add b11r tool (#23843)\n\nevm block-builder (a.k.a b11r) is a utility to help assemble blocks, for use during the test-creation process."
            },
            {
                "date": "2021-11-22T07:49:18Z",
                "message": "trie: more tests for stacktrie (#23936)"
            },
            {
                "date": "2021-11-22T07:07:17Z",
                "message": "cmd/geth: add ancient flag to db inspect (#23946)"
            },
            {
                "date": "2021-11-22T01:53:16Z",
                "message": "eth: fix typo in comment (#23941)"
            }
        ],
        "2021-11-19": [
            {
                "date": "2021-11-19T09:53:20Z",
                "message": "cmd/evm: make t9n intrinsicGas output hex, fixes #23883 (#23889)"
            }
        ],
        "2021-11-18": [
            {
                "date": "2021-11-18T18:20:36Z",
                "message": "eth/gasprice: sanitize max header and block history (#23886)\n\nFixes #23452"
            },
            {
                "date": "2021-11-18T08:50:52Z",
                "message": "core/vm: don't use iota for opcode definitions"
            }
        ],
        "2021-11-17": [
            {
                "date": "2021-11-17T13:44:41Z",
                "message": "ethclient: fix tx sender cache miss detection (#23877)\n\nThis fixes a bug in TransactionSender where it would return the\r\nzero address for transactions where the sender address wasn't\r\ncached already.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-11-17T12:50:08Z",
                "message": "cmd/evm: rename t8n result to match types.Header (ReceiptRoot->ReceiptsRoot) (#23924)"
            }
        ],
        "2021-11-16": [
            {
                "date": "2021-11-16T12:45:02Z",
                "message": "cmd/geth: add flag --dev.gaslimit for dev mode (#23686)\n\n* cmd, core: add flag --dev.gaslimit to allow configuring initial block gas limit in dev mode\r\n\r\n* core: use provided gaslimit\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2021-11-16T09:33:56Z",
                "message": "core/rawdb: better error message in freezer (#23901)\n\n* core/rawdb: better error message in freezer\r\n\r\n* Apply suggestions from code review"
            },
            {
                "date": "2021-11-16T07:44:57Z",
                "message": "eth/tracers: make native 4byte default, remove js version (#23916)"
            },
            {
                "date": "2021-11-16T07:43:58Z",
                "message": "cmd/evm: add `gasUsed` to t8n `result` (#23919)\n\n* cmd/evm: add gas used accumulator to t8n result\r\n\r\n* cmd/evm: update t8n tests to include gas used field"
            }
        ],
        "2021-11-12": [
            {
                "date": "2021-11-12T14:50:08Z",
                "message": " accounts/abi/bind/backends: fix race condition in simulated backend (#23898)\n\nNow that `SimulatedBackend.SuggestGasPrice` inspects member values, a lock needs to be added to prevent a race condition."
            }
        ],
        "2021-11-11": [
            {
                "date": "2021-11-11T19:20:46Z",
                "message": "eth/tracers: add golang 4byte tracer (#23882)\n\n* native 4byte tracer\r\n\r\n* Update eth/tracers/native/4byte.go\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\n* Update eth/tracers/native/4byte.go\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\n* goimports\r\n\r\n* eth/tracers: make 4byte tracer not care about create\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2021-11-11T16:07:11Z",
                "message": "cmd/devp2p: update TTL max for Cloudflare (#23885)\n\nThis was apparently recently changed by Cloudflare, and\r\nbegan returning an error: 'TTL must be between 60 and 86400\r\nseconds, or 1 for Automatic'\r\n\r\nDate: 2021-11-10 15:25:20-08:00\r\nSigned-off-by: meows <b5c6@protonmail.com>"
            },
            {
                "date": "2021-11-11T14:04:06Z",
                "message": "core/rawdb: add slow path for getting legacy logs (#23879)\n\n* eth/tracers: add slow path for getting legacy logs\r\n\r\n* core/rawdb: fix test"
            },
            {
                "date": "2021-11-11T14:00:58Z",
                "message": "core/vm: implement EIP-2681: Limit account nonce to 2^64-1 (#23853)\n\nThis retroactively implements requirements or EIP-2681 for the account nonce upper limit."
            }
        ],
        "2021-11-10": [
            {
                "date": "2021-11-10T14:15:51Z",
                "message": "Merge pull request #23880 from eltociear/patch-3\n\np2p: fix typo in v4wire.go"
            },
            {
                "date": "2021-11-10T13:18:12Z",
                "message": "p2p: fix typo in v4wire.go\n\nNeigbors -> Neighbors"
            }
        ],
        "2021-11-09": [
            {
                "date": "2021-11-09T13:45:34Z",
                "message": "cmd/devp2p/internal/ethtest: clarify protocol version in tests (#23872)\n\nDebugging recent geth failures in hive, it took a while to realize that it's because\r\ngeth doesn't support eth/65 any longer. This PR makes such failures a bit more\r\neasy to figure out."
            },
            {
                "date": "2021-11-09T11:09:35Z",
                "message": "eth/tracers: package restructuring (#23857)\n\n* eth/tracers: restructure tracer package\r\n\r\n* core/vm/runtime: load js tracers\r\n\r\n* eth/tracers: mv bigint js code to own file\r\n\r\n* eth/tracers: add method docs for native tracers\r\n\r\n* eth/tracers: minor doc fix\r\n\r\n* core,eth: cancel evm on nativecalltracer stop\r\n\r\n* core/vm: fix failing test\r\n\r\nCo-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
            }
        ],
        "2021-11-08": [
            {
                "date": "2021-11-08T14:25:35Z",
                "message": "core: check effective tip in txpool pricelimit validation (#23855)\n\nThe price limit is supposed to exclude transactions with too low fee\r\namount. Before EIP-1559, it was sufficient to check the limit against\r\nthe gas price of the transaction. After 1559, it is more complicated\r\nbecause the concept of 'transaction gas price' does not really exist.\r\n\r\nWhen mining, the price limit is used to exclude transactions below a\r\ncertain effective fee amount. This change makes it apply the same check\r\nearlier, in tx validation. Transactions below the specified fee amount\r\ncannot enter the pool.\r\n\r\nFixes #23837"
            },
            {
                "date": "2021-11-08T13:44:11Z",
                "message": "params: begin v1.10.13 release cycle"
            },
            {
                "date": "2021-11-08T13:42:08Z",
                "message": "params: release Geth v1.10.12"
            },
            {
                "date": "2021-11-08T13:08:12Z",
                "message": "eth/tracers: make native calltracer default (#23867)"
            },
            {
                "date": "2021-11-08T12:13:21Z",
                "message": "Merge pull request #23869 from karalabe/cht-1.10.12-ropsten\n\nparams: update Ropsten CHT too"
            },
            {
                "date": "2021-11-08T12:12:22Z",
                "message": "params: update Ropsten CHT too"
            },
            {
                "date": "2021-11-08T11:41:28Z",
                "message": "Merge pull request #23868 from karalabe/cht-1.10.12\n\nparams: update CHTs for the 1.10.12 release"
            },
            {
                "date": "2021-11-08T11:40:32Z",
                "message": "params: update CHTs for the 1.10.12 release"
            },
            {
                "date": "2021-11-08T11:06:01Z",
                "message": "cmd/geth: add support for sepolia testnet (#23730)\n\n* cmd/geth: add support for sepolia testnet\r\n\r\n* core: last details on sepolia genesis\r\n\r\n* params: fix sepolia hash + reduce testing code\r\n\r\n* Update params/bootnodes.go\r\n\r\n* cmd/geth: fix attach path for sepolia\r\n\r\n* params: update bootnodes\r\n\r\n* params: fix\r\n\r\n* core: fix docstring\r\n\r\n* params: add sepolia CHT"
            },
            {
                "date": "2021-11-08T09:29:59Z",
                "message": "les/vflux: fixed panic and data races (#23865)\n\n* les/vflux/server: fix BalanceOperation\r\n\r\n* les/vflux/client: fixed data races"
            }
        ],
        "2021-11-05": [
            {
                "date": "2021-11-05T15:17:13Z",
                "message": "miner, consensus/clique: avoid memory leak during block stasis (#23861)\n\nThis PR fixes a problem which arises on clique networks when there is a network stall. Previously, the worker packages were tracked, even if the sealing engine decided not to seal the block (due to clique rules about recent signing). These tracked-but-not-sealed blocks kept building up in memory. \r\nThis PR changes the situation so the sealing engine instead returns an error, and the worker can thus un-track the package."
            },
            {
                "date": "2021-11-05T10:48:21Z",
                "message": "eth/tracers: support for golang tracers + add golang callTracer (#23708)\n\n* eth/tracers: add basic native loader\r\n\r\n* eth/tracers: add GetResult to tracer interface\r\n\r\n* eth/tracers: add native call tracer\r\n\r\n* eth/tracers: fix call tracer json result\r\n\r\n* eth/tracers: minor fix\r\n\r\n* eth/tracers: fix\r\n\r\n* eth/tracers: fix benchTracer\r\n\r\n* eth/tracers: test native call tracer\r\n\r\n* eth/tracers: fix\r\n\r\n* eth/tracers: rm extra make\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\n* eth/tracers: rm extra make\r\n\r\n* eth/tracers: make callFrame private\r\n\r\n* eth/tracers: clean-up and comments\r\n\r\n* eth/tracers: add license\r\n\r\n* eth/tracers: rework the model a bit\r\n\r\n* eth/tracers: move tracecall tests to subpackage\r\n\r\n* cmd/geth: load native tracers\r\n\r\n* eth/tracers: minor fix\r\n\r\n* eth/tracers: impl stop\r\n\r\n* eth/tracers: add native noop tracer\r\n\r\n* renamings\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\n* eth/tracers: more renamings\r\n\r\n* eth/tracers: make jstracer non-exported, avoid cast\r\n\r\n* eth/tracers, core/vm: rename vm.Tracer to vm.EVMLogger for clarity\r\n\r\n* eth/tracers: minor comment fix\r\n\r\n* eth/tracers/testing: lint nitpicks\r\n\r\n* core,eth: cancel evm on nativecalltracer stop\r\n\r\n* Revert \"core,eth: cancel evm on nativecalltracer stop\"\r\n\r\nThis reverts commit 01bb908790a369c1bb9d3937df9325c6857bf855.\r\n\r\n* eth/tracers: linter nits\r\n\r\n* eth/tracers: fix output on err\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2021-11-04": [
            {
                "date": "2021-11-04T17:54:00Z",
                "message": "eth: make traceChain avoid OOM on long-running tracing (#23736)\n\nThis PR changes long-running chain tracing, so that it at some points releases the memory trie db, and switch over to a fresh disk-backed trie."
            },
            {
                "date": "2021-11-04T16:44:35Z",
                "message": "rpc: linear time batch response matching (#23856)\n\nThis avoids quadratic time complexity in the lookup of the batch element\r\ncorresponding to an RPC response. Unfortunately, the new approach\r\nrequires additional memory for the mapping from ID to index.\r\n\r\nFixes #22805"
            }
        ],
        "2021-11-02": [
            {
                "date": "2021-11-02T17:32:23Z",
                "message": "core: more efficient nonce-update in txpool (#22231)\n\n* Adjust pending nonce update operation\r\n\r\nBenchmark the speed of transaction insertion under multiple accounts\r\n\r\ncore: fix rebase issues + docstring\r\n\r\ncore: make benchmark test use sync:ed method\r\n\r\n* core: address review comments\r\n\r\n* core: add memreport to benchmark\r\n\r\nCo-authored-by: WeiLoy <wei_loy@163.com>"
            },
            {
                "date": "2021-11-02T12:21:25Z",
                "message": "cmd/puppeth: make it possible to have pw-protected keyfiles (#22148)"
            },
            {
                "date": "2021-11-02T10:33:54Z",
                "message": "consensus/ethash: avoid runtime errors due to OOD on mmap writes (#23799)\n\nWhen we map a file for generating the DAG, we do a simple truncate to e.g. 1Gb. This is fine, even if we have nowhere near 1Gb disk available, as the actual file doesn't take up the full 1Gb, merely a few bytes. When we start generating into it, however, it eventually crashes with a unexpected fault address .\r\n\r\nThis change fixes it (on linux systems) by using the Fallocate syscall, which preallocates suffcient space on disk to avoid that situation. \r\n\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-11-02T10:31:45Z",
                "message": "cmd/geth: implement data import and export (#22931)\n\nThis PR offers two more database sub commands for exporting and importing data.\r\nTwo exporters are implemented: preimage and snapshot data respectively. \r\nThe import command is generic, it can take any data export and import into leveldb. \r\nThe data format has a 'magic' for disambiguation, and a version field for future compatibility."
            }
        ],
        "2021-11-01": [
            {
                "date": "2021-11-01T18:06:33Z",
                "message": "eth/tracers: invoke enter/exit on 0-value calls to inex accounts (#23828)"
            },
            {
                "date": "2021-11-01T13:09:36Z",
                "message": "core: fix snapshot missing when recovery from crash (#23496)\n\nIt is because write known block only checks block and state without snapshot, which could lead to gap between newest snapshot and newest block state. However, new blocks which would cause snapshot to become fixed were ignored, since state was already known. \r\n\r\n\r\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2021-11-01T09:01:22Z",
                "message": "accounts/abi/bind/backends: make suggestGasPrice compatible with non-1559 chains (#23840)"
            },
            {
                "date": "2021-11-01T07:14:00Z",
                "message": "rpc/client: fix typo (#23834)"
            },
            {
                "date": "2021-11-01T06:51:03Z",
                "message": "rpc: avoid crashing on clique getSigner during sync (#23832)"
            },
            {
                "date": "2021-11-01T06:50:29Z",
                "message": "miner: fix receipt deep copy in worker (#23835)"
            },
            {
                "date": "2021-11-01T06:49:45Z",
                "message": "accounts/abi/bin/backends: return basefee in suggestGasPrice (#23838)\n\nCo-authored-by: mrx <mrx@mrx.com>"
            }
        ],
        "2021-10-31": [
            {
                "date": "2021-10-31T18:38:48Z",
                "message": "optimize the judge of invalide notification.number (#22658)\n\nDon't bother fetching genesis\r\n\r\nCo-authored-by: wuff1996 <33193253+wuff1996@users.noreply.github.com>"
            }
        ],
        "2021-10-29": [
            {
                "date": "2021-10-29T12:37:00Z",
                "message": "eth/filters, p2p/simulations: fix benchmarks (#23806)\n\nSome benchmarks in eth/filters were not good: they weren't reproducible, relying on geth chaindata to be present.\r\n\r\nAnother one was rejected because the receipt was lacking a backing transcation.\r\n\r\nThe p2p simulation benchmark had a lot of the warnings below, due to the framework calling both\r\nStop() and Close(). Apparently, the simulated adapter is the only implementation which has a Close(),\r\nand there is no need to call both Stop and Close on it."
            }
        ],
        "2021-10-28": [
            {
                "date": "2021-10-28T20:18:14Z",
                "message": "cmd/geth, cmd/evm, params: implement Arrow Glacier (EIP 4345) (#23810)\n\nThis PR adds support for ArrowGlacier, as defined by\r\n\r\n    https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md\r\n    https://eips.ethereum.org/EIPS/eip-4345\r\n\r\n> Starting with FORK_BLOCK_NUMBER the client will calculate the difficulty based on a fake block number suggesting to the client that the difficulty bomb is adjusting 10,700,000 blocks later than the actual block number.\r\n\r\nThis also adds support for evm t8n to return the calculated difficulty, so it can be used to construct test."
            },
            {
                "date": "2021-10-28T12:59:51Z",
                "message": "core: fixed stale comment in txlist (#23825)"
            }
        ],
        "2021-10-27": [
            {
                "date": "2021-10-27T11:28:50Z",
                "message": "cmd/evm: handle rlp errors in t9n (#23771)\n\n* cmd/evm: handle rlp errors in t9n\r\n\r\n* cmd/evm/testdata: fix readme"
            },
            {
                "date": "2021-10-27T11:08:51Z",
                "message": "core: fix benchmark tests (#23803)\n\nFixes crashes in various benchmarks in the core package"
            }
        ],
        "2021-10-26": [
            {
                "date": "2021-10-26T09:01:01Z",
                "message": "core/state/snapshot: fix benchmarks (#23804)"
            },
            {
                "date": "2021-10-26T08:20:56Z",
                "message": "ethdb: more accurate batch size calculation (#23790)\n\nThis PR also counts the size of the key when calculating the size of a db batch"
            },
            {
                "date": "2021-10-26T06:44:43Z",
                "message": "core: use block difficulty for genesis (#23793)\n\n* core: write test showing that TD is not stored properly at genesis\r\n\r\nThe ToBlock method applies a default value for an empty\r\ndifficulty value. This default is not carried over through the Commit\r\nmethod because the TotalDifficulty database write writes the\r\noriginal difficulty value (nil) instead of the defaulty value\r\npresent on the genesis Block.\r\n\r\nDate: 2021-10-22 08:25:32-07:00\r\nSigned-off-by: meows <b5c6@protonmail.com>\r\n\r\n* core: write TD value from Block, not original genesis value\r\n\r\nThis an issue where a default TD value was not written to\r\nthe database, resulting in a 0 value TD at genesis.\r\n\r\nA test for this issue was provided at 90e3ffd393\r\n\r\nDate: 2021-10-22 08:28:00-07:00\r\nSigned-off-by: meows <b5c6@protonmail.com>\r\n\r\n* core: fix tests by adding GenesisDifficulty to expected result\r\n\r\nSee prior two commits.\r\n\r\nDate: 2021-10-22 09:16:01-07:00\r\nSigned-off-by: meows <b5c6@protonmail.com>\r\n\r\n* les: fix test with genesis change\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2021-10-25": [
            {
                "date": "2021-10-25T14:49:44Z",
                "message": "build: remove xgo cross-builds (#23800)\n\nxgo is not maintained at this time, so none of these builds work.\r\n\r\nCloses #23784"
            },
            {
                "date": "2021-10-25T14:24:27Z",
                "message": "core/rawdb, ethdb: introduce batched/atomic reads from ancients (#23566)\n\nThis PR adds a new accessor method to the freezer database. This new view offers a consistent interface, guaranteeing that all individual tables (headers, bodies etc) are all on the same number, and that this number is not changes (added/truncated) while the operation is performing."
            }
        ],
        "2021-10-21": [
            {
                "date": "2021-10-21T09:43:23Z",
                "message": "common/hexutil: improve performance of EncodeBig (#23780)\n\n- use Text instead of fmt.Sprintf\r\n- reduced allocs from 6 to 2\r\n- improved speed"
            },
            {
                "date": "2021-10-21T09:40:35Z",
                "message": "accounts/abi/bind: fix error handling in baseFee query (#23781)\n\nThis fixes a panic that occurs when HeaderByNumber() returns an error."
            }
        ],
        "2021-10-20": [
            {
                "date": "2021-10-20T14:22:02Z",
                "message": "ethclient: fix typo (#23778)"
            },
            {
                "date": "2021-10-20T12:10:09Z",
                "message": "params: begin v1.10.12 release cycle (second attempt)"
            },
            {
                "date": "2021-10-20T12:08:23Z",
                "message": "params: release go-ethereum v1.10.11 stable (now with gofmt)"
            },
            {
                "date": "2021-10-20T12:02:40Z",
                "message": "params: begin v1.10.12 release cycle"
            },
            {
                "date": "2021-10-20T11:56:37Z",
                "message": "params: update version"
            },
            {
                "date": "2021-10-20T08:05:27Z",
                "message": "core/state/snapshot: fix BAD BLOCK error when snapshot is generating (#23635)\n\n* core/state/snapshot: fix BAD BLOCK error when snapshot is generating\r\n\r\n* core/state/snapshot: alternative fix for the snapshot generator\r\n\r\n* add comments and minor update\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2021-10-19": [
            {
                "date": "2021-10-19T15:06:47Z",
                "message": "all: fix warning flagging the use of DeepEqual on error (#23624)\n\n* core: fix warning flagging the use of DeepEqual on error\r\n\r\n* apply the same change everywhere possible\r\n\r\n* revert change that was committed by mistake\r\n\r\n* fix build error\r\n\r\n* Update config.go\r\n\r\n* revert changes to ConfigCompatError\r\n\r\n* review feedback\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2021-10-18": [
            {
                "date": "2021-10-18T20:36:45Z",
                "message": "cmd/evm: add 256-bit field validations on transactions (t9n) (#23743)\n\n* cmd/evm: add 256-bit field validations on transactions (t9n)\r\n\r\n* cmd/evm: validate gas*gasPrice, return intrinsic gas usage\r\n\r\n* cmd/evm: address review comment"
            },
            {
                "date": "2021-10-18T20:35:08Z",
                "message": "cmd/utils: update gpo.maxprice flag description (#23758)\n\n* cmd/utils: update flag description\r\n\r\n* Update cmd/utils/flags.go\r\n\r\nCo-authored-by: unkonwn-coder <unknown-coder@gmail.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2021-10-18T20:34:20Z",
                "message": "eth/fetcher: remove superfluous nilness-check (#23739)\n\n* eth/fetcher: fix nilness check https://github.com/ethereum/go-ethereum/issues/23738\r\n\r\n* eth/fetcher: Use errors.Is. PR feedback from @holiman."
            },
            {
                "date": "2021-10-18T18:59:01Z",
                "message": "cmd/puppeth: use geth's prompt to read input (#23718)\n\n* cmd/puppeth: use geth's prompt to read input\r\n\r\n* remove wizard.in\r\n\r\n* cmd/puppeth: fix compilation errors\r\n\r\n* reset prompt (don't exit) on receiving ctrl-c\r\n\r\n* make promptInput spin until the user enters a value or interrupts (ctrl-d)\r\n\r\n* make promptInput use parameter\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2021-10-18T18:53:56Z",
                "message": "trie: fix typos (#23768)"
            },
            {
                "date": "2021-10-18T18:53:08Z",
                "message": "internal/ethapi: fix recover sender of pending transaction (#23765)\n\n* internal/ethapi: fix recover sender of pending transaction\r\n\r\n* internal/ethapi: check if current exists"
            },
            {
                "date": "2021-10-18T11:38:00Z",
                "message": "cmd/rlpdump: add support for text to rlp (#23745)\n\nThis PR adds support for the rlpdump tool to go from text format to RLP."
            },
            {
                "date": "2021-10-18T10:18:49Z",
                "message": "cmd/geth: support string (non-hex) keys in db get/put/delete (#23744)\n\nAdds suppor for passing regular strings to db `put`/`get`/`delete`, to avoid having to hex-encode when operating on fixed-key items like `SnapshotSyncStatus`, `SnapshotRecovery`  etc.\r\n\r\n\r\nSigned-off-by: Maxim Zhiburt <zhiburt@gmail.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2021-10-18T07:45:59Z",
                "message": "core: refactored blockchain.go (#23735)"
            }
        ],
        "2021-10-15": [
            {
                "date": "2021-10-15T10:18:10Z",
                "message": "params: begin v1.10.11 release cycle"
            },
            {
                "date": "2021-10-15T10:17:13Z",
                "message": "params: release go-ethereum v1.10.10 stable"
            },
            {
                "date": "2021-10-15T07:52:40Z",
                "message": "core/state/snapshot: fix data race in layer flattening (#23628)\n\n* core/state/snapshot: fix data race in layer flattening\r\n\r\n* core/state/snapshot: fix typo"
            }
        ],
        "2021-10-14": [
            {
                "date": "2021-10-14T11:33:28Z",
                "message": "accounts/abi: add basic support for error types (#23161)\n\nThis is the initial step for support of Solidity errors in contract bindings.\r\nAs of this change, errors can be decoded, but are not supported in\r\nbindings yet.\r\n\r\nCloses #23157"
            }
        ],
        "2021-10-13": [
            {
                "date": "2021-10-13T21:00:45Z",
                "message": "core: remove unused error from TxPool.Pending (#23720)"
            },
            {
                "date": "2021-10-13T20:59:11Z",
                "message": "accounts/abi/bind: refactor transact method (#23719)\n\nThis fixes a bug where gas-related fields of the TransactOpts passed\r\nto transaction methods would be modified, skipping gas estimation for\r\nsubsequent transactions.\r\n\r\nCo-authored-by: Yondon Fu <yondon.fu@gmail.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-10-13T15:31:02Z",
                "message": "all: fix some go-critic linter warnings (#23709)\n\nThis doesn't fix all go-critic warnings, just the most serious ones.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2021-10-13T13:16:16Z",
                "message": "core/types: add MarshalBinary, UnmarshalBinary for Receipt (#22806)"
            },
            {
                "date": "2021-10-13T12:42:00Z",
                "message": "go.mod: upgrade goja (#23721)\n\nThis update adds support for some more ES6 functionality, notably\r\narrow functions."
            }
        ],
        "2021-10-12": [
            {
                "date": "2021-10-12T08:46:04Z",
                "message": "eth,rpc: allow for flag configured timeouts for eth_call (#23645)\n\n* eth,rpc: allow for flag configured timeouts for eth_call\r\n\r\n* lint: account for package-local import order\r\n\r\n* cr: rename `rpc.calltimeout` to `rpc.evmtimeout`"
            },
            {
                "date": "2021-10-12T06:44:07Z",
                "message": "fixed broken web3 methods link in README.md (#23703)"
            }
        ],
        "2021-10-11": [
            {
                "date": "2021-10-11T21:16:46Z",
                "message": "consensus/clique, core: API cleanup (#23100)\n\nThis removes some code:\r\n\r\n- The clique engine calculated the snapshot twice when verifying headers/blocks.\r\n\r\n- The method GetBlockHashesFromHash in Header/Block/Lightchain was only used by tests. It\r\n  is now removed from the API.\r\n  \r\n- The method GetTdByHash internally looked up the number before calling GetTd(hash, num).\r\n  In many cases, callers already had the number, and used this method just because it has a\r\n  shorter name. I have removed the method to make the API surface smaller."
            },
            {
                "date": "2021-10-11T17:37:18Z",
                "message": "ci: enable race tests as cron job on travis (#23480)"
            },
            {
                "date": "2021-10-11T17:25:21Z",
                "message": "core: tests for forked blocks retrievable by hash (#23695)\n\n* Update tests to showcase that forked blocks can still be looked up by their hash"
            },
            {
                "date": "2021-10-11T16:49:26Z",
                "message": "les/vflux/server: fix metrics (#22946)\n\n* les/vflux/server: fix metrics\r\n\r\n* les/vflux/server: fix metrics"
            },
            {
                "date": "2021-10-11T15:58:11Z",
                "message": "params: changed CatalystBlock to TerminalTotalDifficulty (#23700)\n\n* params: changed CatalystBlock to TerminalTotalDifficulty\r\n\r\n* eth/catalyst: comment out unused code"
            },
            {
                "date": "2021-10-11T13:48:41Z",
                "message": "build: increase C thread stack size on linux (#23676)\n\n* build: increase thread stack size when running alpine linux\r\n\r\n* review feedback: force a stack size of 8M on all linux distribs\r\n\r\n* fix missing extldflags"
            },
            {
                "date": "2021-10-11T10:30:13Z",
                "message": "cmd/evm: stricter transaction validation (#23694)\n\n* cmd/evm: t9n: validate transaction intrinsic gas\r\n\r\n* cmd/evm: t9n: stricter tx validation"
            },
            {
                "date": "2021-10-11T08:15:45Z",
                "message": "cmd/puppeth: add txpool to explorer Dockerfile (#23652)"
            }
        ],
        "2021-10-10": [
            {
                "date": "2021-10-10T23:52:30Z",
                "message": "eth/gasprice: avoid modifying TestChainConfig (#23204)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-10-10T13:00:00Z",
                "message": "core/state: fix typos in comments (#23702)"
            },
            {
                "date": "2021-10-10T12:58:47Z",
                "message": "internal/jsre: handle null and undefined to prevent crash (#23701)\n\nThis prevents the console from crashing when auto-completing on\r\na variable or property that is null or undefined.\r\n\r\nFixes #23693"
            }
        ],
        "2021-10-09": [
            {
                "date": "2021-10-09T14:39:53Z",
                "message": "miner/stress: initialize account backends explicitly (#23699)\n\nnode.Node no longer registers any account manager backends by default,\r\nthey need to be registered explicitly.\r\n\r\nFor ethash-based tests, we actually don't need any accounts in the miner\r\nkeystore. Just set the etherbase instead to make mining work. For\r\nclique, the signer account must be in the keystore.\r\n\r\nThe change also adds interrupt handling in stress tests."
            }
        ],
        "2021-10-08": [
            {
                "date": "2021-10-08T18:12:52Z",
                "message": "miner: fix data race during shutdown (#23435)\n\nThis fixes a data race on worker.current by moving the call to StopPrefetcher\r\ninto the main loop.\r\n\r\nThe commit also contains fixes for two other races in unit tests of unrelated packages."
            },
            {
                "date": "2021-10-08T16:36:58Z",
                "message": "eth: close miner on exit (instead of just stopping) (#21992)\n\nThis ensures that all miner goroutines have exited before stopping the blockchain. \r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-10-08T15:23:25Z",
                "message": "build: upgrade -dlgo version to 1.17.2 (#23698)\n\nGo 1.17.2 fixes some miscompilation issues on amd64 and a runtime issue with timers.\r\nWhile the upgrade is not strictly necessary for go-ethereum right now, it is still good\r\nto be up-to-date."
            },
            {
                "date": "2021-10-08T12:57:49Z",
                "message": "cmd/geth: fix typo in error message (#23697)"
            }
        ],
        "2021-10-07": [
            {
                "date": "2021-10-07T13:51:14Z",
                "message": "internal/ethapi: use correct signer when serving old blocks (#23683)\n\nFixes #23681\r\n\r\nAfter the fix I get the address 0x6d6d02e83c4ced98204e20126acf27e9d87b8af2 for the\r\ntx mentioned in the ticket, which agrees with etherscan."
            },
            {
                "date": "2021-10-07T13:47:50Z",
                "message": "core: improve shutdown synchronization in BlockChain (#22853)\n\nThis change removes misuses of sync.WaitGroup in BlockChain. Before this change,\r\nblock insertion modified the WaitGroup counter in order to ensure that Stop would wait\r\nfor pending operations to complete. This was racy and could even lead to crashes\r\nif Stop was called at an unfortunate time. The issue is resolved by adding a specialized\r\n'closable' mutex, which prevents chain modifications after stopping while also\r\nsynchronizing writers with each other.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2021-10-06": [
            {
                "date": "2021-10-06T11:12:52Z",
                "message": "core/types: copy tx recipient address (#23376)\n\nThis resolves a long-standing TODO. The point of copying the address is\r\nto ensure that all data referenced by types.Transaction is independent of the\r\ndata passed into the constructor.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2021-10-05": [
            {
                "date": "2021-10-05T16:33:53Z",
                "message": "go.mod: upgrade github.com/karalable/usb (#23684)\n\nThis update includes fixes for the *BSD build and go module vendoring."
            },
            {
                "date": "2021-10-05T06:13:00Z",
                "message": "eth/api: add rpc method to obtain which states are accessible (#23646)\n\nThis PR adds a method to the debug namespace, to iterate over the blocks and check where we have the roots on disk."
            }
        ],
        "2021-10-04": [
            {
                "date": "2021-10-04T14:10:51Z",
                "message": "eth/protocols/eth: replace array with counter in txn broadcaster (#23656)"
            },
            {
                "date": "2021-10-04T12:09:51Z",
                "message": "eth/filters: fix TestPendingLogsSubscription (#23619)\n\nThe test did not synchronize with per-case goroutines, and thus didn't notice\r\nthat some tests were just hanging. This change adds missing synchronization\r\nand fixes the broken tests."
            },
            {
                "date": "2021-10-04T10:16:50Z",
                "message": "core/state: fix typo in comment (#23665)"
            }
        ],
        "2021-10-03": [
            {
                "date": "2021-10-03T14:45:12Z",
                "message": "Merge pull request #23677 from karalabe/canon-rlp-fetcher\n\ninternal/ethapi: make header/block rlp retrieval canonical"
            },
            {
                "date": "2021-10-03T13:47:21Z",
                "message": "internal/ethapi: make header/block rlp retrieval canonical"
            }
        ],
        "2021-10-01": [
            {
                "date": "2021-10-01T11:03:24Z",
                "message": "eth/tracers: fix callTracer fault handling (#23667)\n\n* eth/tracers: fix calltracer fault handling\r\n\r\n* eth/tracers: fix calltracer indentation"
            },
            {
                "date": "2021-10-01T09:14:32Z",
                "message": "Merge pull request #23670 from karalabe/get-header-rlp\n\ninternal/ethapi: support retrieving header RLPs too"
            },
            {
                "date": "2021-10-01T08:45:47Z",
                "message": "internal/ethapi: support retrieving header RLPs too"
            }
        ],
        "2021-09-29": [
            {
                "date": "2021-09-29T19:28:47Z",
                "message": "core: fix typo in comment (#23658)"
            },
            {
                "date": "2021-09-29T18:00:31Z",
                "message": "params: begin v1.10.10 release cycle"
            },
            {
                "date": "2021-09-29T17:59:30Z",
                "message": "params: release go-ethereum v1.10.9 stable"
            },
            {
                "date": "2021-09-29T13:19:40Z",
                "message": "eth/protocols/snap, trie: better error-handling (#23657)"
            }
        ],
        "2021-09-28": [
            {
                "date": "2021-09-28T22:28:17Z",
                "message": "graphql: add storage slots to access list (#23650)\n\nFixes #23640"
            },
            {
                "date": "2021-09-28T11:44:07Z",
                "message": "eth/protocols/eth: simplify peer known block/txs caches (#23649)\n\n* Simplify peer known block/txns cache\r\n\r\n* Address minor changes\r\n\r\n* Add more minor comments\r\n\r\n* Minor changes from review"
            },
            {
                "date": "2021-09-28T11:06:19Z",
                "message": "eth/tracers: avoid unsyncronized mutations on trie database (#23632)\n\nThis PR fixes an issue in traceChain, where the statedb Commit operation was performed asynchronously with dereference-operations agains the underlying trie.Database instance. Due to how the reference counting works within the trie database (where parent count is recursively updated when new parents are added), doing dereferencing in the middle of Commit can cause the refcount to become wrong, leading to an inconsistent state. \r\n\r\nThis was fixed by doing Commit/Deref from the same routine."
            },
            {
                "date": "2021-09-28T10:56:03Z",
                "message": "accounts/abi/bind: check event signature before parsing (#23230)\n\n* accounts/abi/bind: check event signature before parsing\r\n\r\n* remove redundant break line"
            },
            {
                "date": "2021-09-28T10:54:49Z",
                "message": "core/rawdb: avoid unnecessary receipt processing for log filtering (#23147)\n\n* core/types: rm extranous check in test\r\n\r\n* core/rawdb: add lightweight types for block logs\r\n\r\n* core/rawdb,eth: use lightweight accessor for log filtering\r\n\r\n* core/rawdb: add bench for decoding into rlpLogs"
            },
            {
                "date": "2021-09-28T10:53:11Z",
                "message": "eth/tracers: implement debug.intermediateRoots (#23594)\n\nThis PR implements a new debug method, which I've talked briefly about to some other client developers. It allows the caller to obtain the intermediate state roots for a block (which might be either a canon block or a 'bad' block)."
            },
            {
                "date": "2021-09-28T08:48:07Z",
                "message": "core/state: move state account to core/types + abstracted \"write account to trie\" (#23567)\n\n* core/state: abstracted \"write account to trie\" method\r\n\r\n* fix appveyor build\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\n* review feedback\r\n\r\n* core/state/accounts: move Account to core/types\r\n\r\n* core/types: rename Account -> StateAccount\r\n\r\n* core/state: restore EncodeRLP for stateObject\r\n\r\n* core/types: add the missing file\r\n\r\n* more review feedback\r\n\r\n* more review feedback\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2021-09-27": [
            {
                "date": "2021-09-27T16:44:16Z",
                "message": "eth/tracers: re-write of 4byte tracer using enter/exit (#23622)\n\n* eth/tracers: add re-write of 4byte tracer using enter/exit\r\n\r\n* eth/tracers: fix 4byte indent"
            },
            {
                "date": "2021-09-27T16:42:48Z",
                "message": "cmd/puppeth: remove shh from Dockerfile (#23634)"
            },
            {
                "date": "2021-09-27T14:31:45Z",
                "message": "rpc: set pong read deadline (#23556)\n\nThis PR adds a 30s timeout for the remote part to answer a ping message, thus detecting (silent) disconnnects"
            }
        ],
        "2021-09-22": [
            {
                "date": "2021-09-22T08:18:18Z",
                "message": "accounts/abi: fix resolving single struct argument (#23573)"
            }
        ],
        "2021-09-21": [
            {
                "date": "2021-09-21T20:26:35Z",
                "message": "rpc: set scheme for ws and ipc conns to the server (#23615)\n\n* rpc: set scheme for ws and ipc conns to the server\r\n\r\n* rpc: review fixes\r\n\r\n* rpc: bugfix\r\n\r\n* rpc: empty default scheme"
            },
            {
                "date": "2021-09-21T08:46:08Z",
                "message": "consensus/clique: prevent 0 len extradata from panicing (#23538)\n\nCloses #23522\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2021-09-21T08:19:46Z",
                "message": "console: add note about typing exit to exit (#23602)\n\n* add explicit note about typing exit in console\r\n\r\n* Add note about typing exit as alternative"
            }
        ],
        "2021-09-20": [
            {
                "date": "2021-09-20T16:13:37Z",
                "message": "Merge pull request #23610 from karalabe/gomod-tify\n\ngo.mod: fix module file to prevent go from updating it during build"
            },
            {
                "date": "2021-09-20T16:12:20Z",
                "message": "go.mod: fix module file to prevent go from updating it during build"
            },
            {
                "date": "2021-09-20T16:01:32Z",
                "message": "Merge pull request #23609 from karalabe/regex-fix\n\ninternal/debug: make gosimple linter happy"
            },
            {
                "date": "2021-09-20T15:55:35Z",
                "message": "internal/debug: make gosimple linter happy"
            },
            {
                "date": "2021-09-20T13:29:07Z",
                "message": "internal: support optional filter expression for debug.stacks (#23605)\n\n* internal: support optional filter expression for debug.stacks\r\n\r\n* internal/debug: fix string regexp\r\n\r\n* internal/debug: support searching for line numbers too"
            },
            {
                "date": "2021-09-20T11:33:15Z",
                "message": "docs: fix spelling on 2021-08-22 postmortem (#23595)\n\nSpelling update"
            },
            {
                "date": "2021-09-20T08:23:44Z",
                "message": "ethclient, accounts/keystore: fix flaky tests (#23599)\n\n* ethclient/gethclient: fix flaky test (due to map key ordering)\r\n\r\n* accounts/keystore: fix test failing due to rand collision due to low time resolution on windows"
            }
        ],
        "2021-09-17": [
            {
                "date": "2021-09-17T07:31:22Z",
                "message": "core,eth: call frame tracing (#23087)\n\n\r\nThis change introduces 2 new optional methods; `enter()` and `exit()` for js tracers, and makes `step()` optiona. The two new methods are invoked when entering and exiting a call frame (but not invoked for the outermost scope, which has it's own methods). Currently these are the data fields passed to each of them:\r\n\r\n    enter: type (opcode), from, to, input, gas, value\r\n    exit: output, gasUsed, error\r\n\r\nThe PR also comes with a re-write of the callTracer. As a backup we keep the previous tracing script under the name `callTracerLegacy`. Behaviour of both tracers are equivalent for the most part, although there are some small differences (improvements), where the new tracer is more correct / has more information."
            }
        ],
        "2021-09-16": [
            {
                "date": "2021-09-16T11:45:16Z",
                "message": "eth/tracers: abort evm execution when trace is aborted (#23580)"
            }
        ],
        "2021-09-15": [
            {
                "date": "2021-09-15T08:52:48Z",
                "message": "cmd/devp2p/internal/ethtest: only use eth66 if eth66 is negotiated (#23568)\n\n* cmd/devp2p/internal/ethtest: only use eth66 if eth66 is negotiated\r\n\r\n* cmd/devp2p/internal/ethtest: switch on concrete type not pointer\r\n\r\n* cmd/devp2p/internal/ethtest: switch on concrete type not pointer"
            }
        ],
        "2021-09-13": [
            {
                "date": "2021-09-13T16:59:52Z",
                "message": "core, rpc: disable memory output by default in traces (#23558)\n\n* core: cmd: invert disableMemory\r\n\r\n* core: fix missed inversion\r\n\r\n* cmd/evm: preserve Flags but change default value\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2021-09-13T11:57:40Z",
                "message": "cmd/evm: transaction validation tool (#23494)\n\n* cmd/evm: transaction validation tool\r\n\r\n* cmd/evm: add hash to t9n tool\r\n\r\n* cmd/evm: lint nits\r\n\r\n* cmd/evm: nitpicks"
            },
            {
                "date": "2021-09-13T10:34:00Z",
                "message": "README: add londonBlock to example genesis config (#23565)\n\nUpdated example genesis.json configuration section, added londonBlock within config."
            }
        ],
        "2021-09-10": [
            {
                "date": "2021-09-10T13:05:06Z",
                "message": "Merge pull request #23561 from karalabe/temp-split-leseh\n\nles: duplicate downloader and fetcher to allow progressive refactoring"
            },
            {
                "date": "2021-09-10T07:55:48Z",
                "message": "les: duplicate downloader and fetcher to allow progressive refactoring"
            }
        ],
        "2021-09-08": [
            {
                "date": "2021-09-08T12:21:59Z",
                "message": "appveyor.yml: add linux/amd64 build job (#23548)"
            }
        ],
        "2021-09-07": [
            {
                "date": "2021-09-07T15:54:15Z",
                "message": "core: 64bit alignment of testBlockChain.gasLimit (#23543)\n\nThis fixes crashes in txpool tests on 32bit platforms."
            },
            {
                "date": "2021-09-07T14:15:11Z",
                "message": "core: make txPricedList.stales the first field for 64bit alignment (#23542)\n\nThis fixes crashes on 32bit builds."
            },
            {
                "date": "2021-09-07T10:36:48Z",
                "message": "p2p/enode: use unix timestamp as base ENR sequence number (#19903)\n\nThis PR ensures that wiping all data associated with a node (apart from its nodekey)\r\nwill not generate already used sequence number for the ENRs, since all remote nodes\r\nwould reject them until they out-number the previously published largest one.\r\n\r\nThe big complication with this scheme is that every local update to the ENR can\r\npotentially bump the sequence number by one. In order to ensure that local updates\r\ndo not outrun the clock, the sequence number is a millisecond-precision timestamp,\r\nand updates are throttled to occur at most once per millisecond.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-09-07T10:31:17Z",
                "message": "core/rawdb: freezer batch write (#23462)\n\nThis change is a rewrite of the freezer code.\r\n\r\nWhen writing ancient chain data to the freezer, the previous version first encoded each\r\nindividual item to a temporary buffer, then wrote the buffer. For small item sizes (for\r\nexample, in the block hash freezer table), this strategy causes a lot of system calls for\r\nwriting tiny chunks of data. It also allocated a lot of temporary []byte buffers.\r\n\r\nIn the new version, we instead encode multiple items into a re-useable batch buffer, which\r\nis then written to the file all at once. This avoids performing a system call for every\r\ninserted item.\r\n\r\nTo make the internal batching work, the ancient database API had to be changed. While\r\nintegrating this new API in BlockChain.InsertReceiptChain, additional optimizations were\r\nalso added there.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-09-07T08:52:58Z",
                "message": "cmd/geth, cmd/utils: remove legacy rpc flags (#23358)\n\n* remove rpc flags\r\n\r\n* remove legacy rpc flags\r\n\r\n* remove legacy rpc flags\r\n\r\n* remove legacy rpc commands\r\n\r\n* (hopefully) fix most of the build errors\r\n\r\n* fix build errors\r\n\r\nhttps://app.travis-ci.com/github/ethereum/go-ethereum/jobs/530318686\r\n\r\n* cmd/utils: fix syntax error\r\n\r\n* empty commit to unbreak travis ci\r\n\r\n* fix syntax error\r\n\r\n* syntax fixes\r\n\r\n* syntax fixes\r\n\r\n* fix\r\n\r\nfixes \"cmd/geth/usage.go:234:7: expected '(', found init (typecheck)\"\r\n\r\n* fix\r\n\r\n* various fixes in usage.go\r\n\r\n* various fixes in flags.go\r\n\r\n* adds extra space\r\n\r\nreverts the spacing to how it was before I resolved the merge conflict\r\n\r\n* more fixes in usage.go\r\n\r\n* fix\r\n\r\nfix for cmd/geth/usage.go:243:17: expected operand, found ':=' (typecheck) in travis\r\n\r\n* Update cmd/utils/flags.go\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\n* fix error\r\n\r\n fixes these errors:\r\ncmd/utils/flags_legacy.go:21:2: \"strings\" imported but not used (typecheck)\r\n\r\n\t\"strings\"\r\n\r\n\t^\r\n\r\ncmd/utils/flags_legacy.go:24:2: \"github.com/ethereum/go-ethereum/node\" imported but not used (typecheck)\r\n\r\n\t\"github.com/ethereum/go-ethereum/node\"\r\n\r\n\t^\r\n\r\n* goimports\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2021-09-07T08:51:33Z",
                "message": "internal/debug: remove deprecated flags (#23368)\n\n* internal/debug: remove deprecated flags\r\n\r\nThe removed flags are removed in the main portion of geth, this removes it internally too.\r\n\r\n* internal/debug: remove legacy --debug and legacy --backtrace flag\r\n\r\n* Update flags.go\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2021-09-07T07:22:40Z",
                "message": "docs: add post-mortem (#23518)\n\n* docs: add post-mortem\r\n\r\n* Update docs/postmortems/2021-08-22-split-postmortem.md\r\n\r\nCo-authored-by: Sina Mahmoodi <1591639+s1na@users.noreply.github.com>\r\n\r\n* Update docs/postmortems/2021-08-22-split-postmortem.md\r\n\r\nCo-authored-by: Sina Mahmoodi <1591639+s1na@users.noreply.github.com>\r\n\r\n* Update docs/postmortems/2021-08-22-split-postmortem.md\r\n\r\nCo-authored-by: Sina Mahmoodi <1591639+s1na@users.noreply.github.com>\r\n\r\n* Update docs/postmortems/2021-08-22-split-postmortem.md\r\n\r\n* Update 2021-08-22-split-postmortem.md\r\n\r\n* Update docs/postmortems/2021-08-22-split-postmortem.md\r\n\r\nCo-authored-by: Sina Mahmoodi <1591639+s1na@users.noreply.github.com>\r\n\r\nCo-authored-by: Sina Mahmoodi <1591639+s1na@users.noreply.github.com>"
            },
            {
                "date": "2021-09-07T04:25:54Z",
                "message": "trie: add missing copyright header (#23530)\n\n* Add missing copyright header\r\n\r\n* Update stacktrie_test.go\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            }
        ],
        "2021-09-02": [
            {
                "date": "2021-09-02T07:22:43Z",
                "message": "cmd/evm: add tests for evm t8n (#23507)"
            }
        ],
        "2021-08-31": [
            {
                "date": "2021-08-31T08:33:39Z",
                "message": "core: fix race conditions in txpool (#23474)\n\n* core: fix race conditions in txpool\r\n\r\n* core: fixed races in the txpool\r\n\r\n* core: rebased on master\r\n\r\n* core: move reheap mutex\r\n\r\n* core: renamed mutex\r\n\r\n* core: revert Reheap changes"
            },
            {
                "date": "2021-08-31T08:22:20Z",
                "message": "common: fixes format verb (#23495)"
            },
            {
                "date": "2021-08-31T08:21:42Z",
                "message": "core: fix typo in iterator.go (#23502)\n\nstrorage -> storage"
            },
            {
                "date": "2021-08-31T07:02:04Z",
                "message": "docs: add links to more audits in SECURITY.md (#23482)"
            }
        ],
        "2021-08-30": [
            {
                "date": "2021-08-30T12:13:06Z",
                "message": "core/vm: rework jumpdest analysis benchmarks (#23499)\n\n* core/vm: rework jumpdest analysis benchmarks\r\n\r\nFor BenchmarkJumpdestOpAnalysis use fixed code size of ~1.2MB\r\nand classic benchmark loop.\r\n\r\n* core/vm: clear bitvec in jumpdest analysis benchmark"
            }
        ],
        "2021-08-27": [
            {
                "date": "2021-08-27T12:11:15Z",
                "message": "internal/ethapi: support both input and data for personal_sendTransaction (#23476)\n\nCurrently, setDefaults overwrites the transaction input value if only input is provided. This causes personal_sendTransaction to estimate the gas based on a transaction with empty data. eth_estimateGas never calls setDefaults so it was unaffected by this."
            }
        ],
        "2021-08-26": [
            {
                "date": "2021-08-26T06:35:37Z",
                "message": "Revert \"eth, internal/ethapi: make RPC block miner field show block sealer correctly (#23312)\" (#23466)\n\nThis reverts commit 57feabea663496109e59df669238398239438fb1."
            }
        ],
        "2021-08-25": [
            {
                "date": "2021-08-25T20:34:22Z",
                "message": "node: remove dependency on wallet backend packages (#23019)\n\n* accounts: new AddBackends method in manager\r\n\r\n* node,cmd/geth: mv accman backend init to cmd/geth\r\n\r\n* node,cmd/geth: mv scrypt config downstreawm from node\r\n\r\n* accounts: use static buffer size for accman sub chan\r\n\r\nminor fix\r\n\r\n* accounts,cmd/geth: update accman backends through its event loop\r\n\r\n* accounts,node: add comments\r\n\r\n* accounts: un-export newBackendEvent\r\n\r\n* accounts: use chan instead of wg in newBlockEvent\r\n\r\n* node: rename isKeyDirEphem\r\n\r\n* accounts,cmd: AddBackends->AddBackend\r\n\r\n* accounts: fix potential blocking when adding backend"
            },
            {
                "date": "2021-08-25T19:57:31Z",
                "message": "build: stop publishing deb packages for Ubuntu 20.10 Groovy Gorilla (#23470)\n\nSupport for this Ubuntu release has ended on July 22 2021 and\r\nLaunchpad no longer accepts uploads for it."
            },
            {
                "date": "2021-08-25T17:30:29Z",
                "message": "rpc: add BlockNumber.MarshalText (#23324)\n\nCurrently rpc.BlockNumber is marshalled to JSON as a numeric value, which is\r\nwrong because BlockNumber.UnmarshalJSON() wants it to either be hex-encoded\r\nor string \"earliest\"/\"latest\"/\"pending\". As a result, the call chain\r\n\r\n    rpc.BlockNumberOrHashWithNumber(123) -> json.Marshal() -> json.Unmarshal()\r\n\r\nfails with error \"cannot unmarshal object into Go value of type string\"."
            },
            {
                "date": "2021-08-25T17:06:42Z",
                "message": "cmd/devp2p/internal/ethtest: remove WriteTo method (#23379)\n\nWriteTo is unused, and go vet warns about it because it\r\ndoesn't match the usual signature of the io.WriterTo method."
            },
            {
                "date": "2021-08-25T17:01:10Z",
                "message": "rlp: minor optimizations for slice/array encoding (#23467)\n\nAs per benchmark results below, these changes speed up encoding/decoding of\r\nconsensus objects a bit.\r\n\r\n    name                             old time/op    new time/op    delta\r\n    EncodeRLP/legacy-header-8           384ns \u00b1 1%     331ns \u00b1 3%  -13.83%  (p=0.000 n=7+8)\r\n    EncodeRLP/london-header-8           411ns \u00b1 1%     359ns \u00b1 2%  -12.53%  (p=0.000 n=8+8)\r\n    EncodeRLP/receipt-for-storage-8     251ns \u00b1 0%     239ns \u00b1 0%   -4.97%  (p=0.000 n=8+8)\r\n    EncodeRLP/receipt-full-8            319ns \u00b1 0%     300ns \u00b1 0%   -5.89%  (p=0.000 n=8+7)\r\n    EncodeRLP/legacy-transaction-8      389ns \u00b1 1%     387ns \u00b1 1%     ~     (p=0.099 n=8+8)\r\n    EncodeRLP/access-transaction-8      607ns \u00b1 0%     581ns \u00b1 0%   -4.26%  (p=0.000 n=8+8)\r\n    EncodeRLP/1559-transaction-8        627ns \u00b1 0%     606ns \u00b1 1%   -3.44%  (p=0.000 n=8+8)\r\n    DecodeRLP/legacy-header-8           831ns \u00b1 1%     813ns \u00b1 1%   -2.20%  (p=0.000 n=8+8)\r\n    DecodeRLP/london-header-8           824ns \u00b1 0%     804ns \u00b1 1%   -2.44%  (p=0.000 n=8+7)\r\n\r\n* rlp: pass length to byteArrayBytes\r\n\r\nThis makes it possible to inline byteArrayBytes. For arrays, the length is known\r\nat encoder construction time, so the call to v.Len() can be avoided.\r\n\r\n* rlp: avoid IsNil for pointer encoding\r\n\r\nIt's actually cheaper to use Elem first, because it performs less checks\r\non the value. If the pointer was nil, the result of Elem is 'invalid'.\r\n\r\n* rlp: minor optimizations for slice/array encoding\r\n\r\nFor empty slices/arrays, we can avoid storing a list header entry in the\r\nencoder buffer. Also avoid doing the tail check at encoding time because\r\nit is already known at encoder construction time."
            },
            {
                "date": "2021-08-25T16:46:29Z",
                "message": "all: add go:build lines (#23468)\n\nGenerated by go1.17 fmt ./..."
            },
            {
                "date": "2021-08-25T15:33:09Z",
                "message": "crypto/cloudflare/bn256: fix in-place addition and unmarshalling (#23419)"
            },
            {
                "date": "2021-08-25T13:18:31Z",
                "message": "Dockerfile: upgrade to Go 1.17 (#23465)"
            },
            {
                "date": "2021-08-25T13:07:58Z",
                "message": "tests: avoid performance tests during CI runs (#23304)"
            },
            {
                "date": "2021-08-25T13:04:26Z",
                "message": "cmd/evm: add difficulty calculation to t8n tool (#23353)\n\nThis PR adds functionality to the evm t8n to calculate ethash difficulty. If the caller does not provide a currentDifficulty, but instead provides the parentTimestamp (well, semi-optional, will default to 0 if not given), and parentDifficulty, we can calculate it for him.\r\n\r\nThe caller can also provide a parentUncleHash. In most, but not all cases, the parent uncle hash also affects the formula. If no such hash is provided (or, if the empty all-zero hash is provided), it's assumed that there were no uncles."
            },
            {
                "date": "2021-08-25T12:22:33Z",
                "message": "build, .travis.yml: upgrade to Go 1.17 (#23464)"
            },
            {
                "date": "2021-08-25T11:21:09Z",
                "message": "build: upgrade to golangci-lint v1.42.0 (#23461)\n\nThe new linter version is built with go 1.17 and thus includes the go vet\r\ncheck for mismatched +build and go:build lines.\r\n\r\nFortunately, no new warnings are reported with this update."
            },
            {
                "date": "2021-08-25T09:56:25Z",
                "message": "les: fix data races in tests (#23457)"
            }
        ],
        "2021-08-24": [
            {
                "date": "2021-08-24T19:02:46Z",
                "message": "go.mod: update goleveldb (#23417)"
            },
            {
                "date": "2021-08-24T19:00:42Z",
                "message": "core, light, tests, trie: add state metrics (#23433)"
            },
            {
                "date": "2021-08-24T18:54:55Z",
                "message": "metrics: fix compilation for GOOS=js (#23449)"
            },
            {
                "date": "2021-08-24T18:54:00Z",
                "message": "cmd/utils: fix typo in variable name (#23451)"
            },
            {
                "date": "2021-08-24T18:52:58Z",
                "message": "Revert \"Revert \"eth: drop eth/65, the last non-reqid protocol version\" (#23426)\" (#23456)\n\nThis reverts commit c368f728c19e7fd7a9613513edda68ffcb503af0."
            },
            {
                "date": "2021-08-24T18:48:36Z",
                "message": "core: make txpool reject too sudden changes (#23095)\n\n* core: make txpool reject too sudden changes\r\n\r\n* core: add some metrics to txpool"
            },
            {
                "date": "2021-08-24T12:27:15Z",
                "message": "tests/fuzzers: fix go vet warning about ReadByte (#23380)"
            },
            {
                "date": "2021-08-24T12:10:52Z",
                "message": "node: add comment about --nousb being deprecated (#23439)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-08-24T11:59:15Z",
                "message": "core/types: add benchmarks for rlp encoding/decoding (#23190)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\nCo-authored-by: Sina Mahmoodi <1591639+s1na@users.noreply.github.com>"
            },
            {
                "date": "2021-08-24T11:57:05Z",
                "message": "core/vm: fix typo in comment (#23450)"
            },
            {
                "date": "2021-08-24T11:56:31Z",
                "message": "tests/testdata: make submodule shallow (#23412)\n\nBefore:\r\n\r\n316M .git/modules/tests/\r\n\r\nAfter:\r\n\r\n171M .git/modules/tests/"
            },
            {
                "date": "2021-08-24T11:32:19Z",
                "message": "core/bloombits: avoid crash when storing errors of different type (#23437)\n\nThis fixes a rare crash which could occur when two different errors happened\r\nin the same bloombits.MatcherSession."
            },
            {
                "date": "2021-08-24T10:22:56Z",
                "message": "p2p, p2p/enode: fix data races (#23434)\n\nIn p2p/dial.go, conn.flags was accessed without using sync/atomic.\r\nThis race is fixed by removing the access.\r\n\r\nIn p2p/enode/iter_test.go, a similar race is resolved by writing the field atomically.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-08-24T08:51:28Z",
                "message": "trie, les: add missing calls to Ticker.Stop (#23415)"
            },
            {
                "date": "2021-08-24T07:08:08Z",
                "message": "params: begin Geth v1.10.9 release cycle"
            },
            {
                "date": "2021-08-24T07:04:30Z",
                "message": "params: release Geth v1.10.8"
            },
            {
                "date": "2021-08-24T07:00:10Z",
                "message": "core/vm: faster code analysis (#23381)\n\n* core/vm: more detailed benchmark for jumpdest analysis\r\n\r\n* core/vm: make jd analysis benchmark alloc free\r\n\r\n* core/vm: improve jumpdest analysis\r\n\r\n* core/vm: improve worst-case\r\n\r\n* core/vm: further improvements in analysis\r\n\r\n* core/vm: improve jumpdest analysis >PUSH15\r\n\r\n* core/vm: make jd analysis ref by value\r\n\r\n* core/vm: fix misspell\r\n\r\n* core/vm: improve set8 and set16 a bit\r\n\r\n* core/vm: reduce amount of code\r\n\r\n* core/vm: optimize byte copying"
            }
        ],
        "2021-08-23": [
            {
                "date": "2021-08-23T21:50:24Z",
                "message": "eth/gasprice: feeHistory improvements (#23422)\n\n* eth/gasprice: cache feeHistory results\r\n\r\n* eth/gasprice: changed feeHistory block count limitation\r\n\r\n* eth/gasprice: do not use embedded struct in blockFees\r\n\r\n* eth/gasprice: fee processing logic cleanup\r\n\r\n* eth/gasprice: purge feeHistory cache at chain reorgs"
            },
            {
                "date": "2021-08-23T11:45:16Z",
                "message": "go.mod: upgrade golang.org/x/sys for go1.17 support (#23406)"
            },
            {
                "date": "2021-08-23T10:20:56Z",
                "message": "signer/core/apitypes: remove dependency on internal/ethapi (#23362)"
            },
            {
                "date": "2021-08-23T09:49:39Z",
                "message": "core: only check sendernoeoa in non fake mode (#23424)"
            }
        ],
        "2021-08-20": [
            {
                "date": "2021-08-20T12:14:21Z",
                "message": "Revert \"eth: drop eth/65, the last non-reqid protocol version\" (#23426)"
            }
        ],
        "2021-08-18": [
            {
                "date": "2021-08-18T10:03:41Z",
                "message": "eth/downloader: fix typo in comment (#23413)"
            }
        ],
        "2021-08-17": [
            {
                "date": "2021-08-17T16:55:18Z",
                "message": "eth, internal/ethapi: make RPC block miner field show block sealer correctly (#23312)\n\nMakes the RPC block return the POA sealer for clique blocks on the 'miner' field (was previously zeroes)"
            },
            {
                "date": "2021-08-17T16:49:19Z",
                "message": "cmd/utils: add --nousb to the list of deprecated flags (#23388)\n\nAdds --nousb as a deprecated flag when someone runs the geth show-deprecated-flags command."
            },
            {
                "date": "2021-08-17T16:43:25Z",
                "message": "cmd, core: remove calaveras testnet  (#23366)\n\nRemoves references to the short-lived Calaveras testnet"
            },
            {
                "date": "2021-08-17T16:40:14Z",
                "message": "cmd, metrics: add support for influxdb-v2 (cherry-picking from italoacasas' changes), leave existing support for v1 to maintain backwards-compatibility. (#23194)\n\nThis PR adds flag to enable InfluxDB v2 (--metrics.influxdbv2), flags for v2-specific features (--metrics.influxdb.token, --metrics.influxdb.bucket), also carries over addition of support for specifying organization (--metrics.influxdb.organization), but still retains backwards compatibility with InfluxDB v1."
            },
            {
                "date": "2021-08-17T15:30:21Z",
                "message": "tests: update, enable legacy tests, remove vm tests (#23350)\n\n* tests: update, enable legacy tests, remove vm tests\r\n\r\n* tests: minor fixes"
            }
        ],
        "2021-08-13": [
            {
                "date": "2021-08-13T12:39:51Z",
                "message": "accounts/external: handle 0 chainid as not-set for the Clef API (#23394)\n\n* accounts/external: handle 0 chainid as not-set for the Clef API\r\n\r\n* accounts/external: document SignTx\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-08-13T08:52:47Z",
                "message": "Merge pull request #23120 from karalabe/drop-eth-65\n\neth: drop eth/65, the last non-reqid protocol version"
            },
            {
                "date": "2021-08-13T08:51:01Z",
                "message": "core/rawdb: implement sequential reads in freezer_table (#23117)\n\n* core/rawdb: implement sequential reads in freezer_table\r\n\r\n* core/rawdb, ethdb: add sequential reader to db interface\r\n\r\n* core/rawdb: lint nitpicks\r\n\r\n* core/rawdb: fix some nitpicks\r\n\r\n* core/rawdb: fix flaw with deferred reads not being performed\r\n\r\n* core/rawdb: better documentation"
            }
        ],
        "2021-08-12": [
            {
                "date": "2021-08-12T07:15:49Z",
                "message": "params: begin v1.10.8 release cycle"
            },
            {
                "date": "2021-08-12T07:14:03Z",
                "message": "params: release Geth v1.10.7"
            },
            {
                "date": "2021-08-12T07:13:05Z",
                "message": "Merge pull request #23385 from karalabe/cht-1.10.7\n\nparams: update CHTs for the 1.10.7 release"
            },
            {
                "date": "2021-08-12T07:11:39Z",
                "message": "params: update CHTs for the 1.10.7 release"
            },
            {
                "date": "2021-08-12T06:57:06Z",
                "message": "Merge pull request #23384 from holiman/fix_gasfoo\n\ninternal/ethapi: add back missing check for maxfee < maxPriorityFee"
            },
            {
                "date": "2021-08-12T06:14:21Z",
                "message": "internal/ethapi: add back missing check for maxfee < maxPriorityFee"
            }
        ],
        "2021-08-10": [
            {
                "date": "2021-08-10T14:52:57Z",
                "message": "Merge pull request #23374 from karalabe/fix-docker-tag\n\nbuild: fix docker tag to include `v` prefix in version string"
            },
            {
                "date": "2021-08-10T14:49:52Z",
                "message": "build: fix docker tag to include `v` prefix in version string"
            },
            {
                "date": "2021-08-10T14:31:10Z",
                "message": "Merge pull request #23373 from karalabe/docker-flip\n\ntravis: transition from docker auto builds to manual pushes"
            },
            {
                "date": "2021-08-10T14:13:06Z",
                "message": "travis: transition from docker auto builds to manual pushes"
            },
            {
                "date": "2021-08-10T13:59:25Z",
                "message": "Merge pull request #23371 from karalabe/gofmt\n\ncore/state/snapshot: gofmt"
            },
            {
                "date": "2021-08-10T13:58:38Z",
                "message": "core/state/snapshot: gofmt"
            },
            {
                "date": "2021-08-10T13:56:34Z",
                "message": "internal/ethapi, accounts/abi/bind: cap highest gas limit by account balance for 1559 fee parameters (#23309)\n\n* internal/ethapi/api: cap highest gas limit by account balance for 1559 fee parameters\r\n\r\n* accounts/abi/bind: port gas limit cap for 1559 parameters to simulated backend\r\n\r\n* accounts/abi/bind: add test for 1559 gas estimates for the simulated backend\r\n\r\n* internal/ethapi/api: fix comment\r\n\r\n* accounts/abi/bind/backends, internal/ethapi: unify naming style\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2021-08-10T13:39:06Z",
                "message": "internal/ethapi: return maxFeePerGas for gasPrice for EIP-1559 txs (#23345)"
            },
            {
                "date": "2021-08-10T09:16:53Z",
                "message": "core/state/snapshot: clarify comment about snapshot repair (#23305)\n\n\r\nCo-authored-by: Tyler Chambers <me@tylerchambers.net>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-08-10T09:04:29Z",
                "message": "core/state/snapshot: fix typo in comment (#23219)"
            },
            {
                "date": "2021-08-10T08:40:54Z",
                "message": "mobile: remove deprecated code (#23357)"
            },
            {
                "date": "2021-08-10T08:28:33Z",
                "message": "cmd, core, eth, miner: deprecate miner.gastarget flag (#23213)"
            },
            {
                "date": "2021-08-10T08:04:39Z",
                "message": "Merge pull request #23370 from karalabe/windows-pruning-fix-b\n\ncore/state/pruner: fix state bloom sync permission in Windows"
            },
            {
                "date": "2021-08-10T07:38:49Z",
                "message": "core/state/pruner: fix state bloom sync permission in Windows"
            },
            {
                "date": "2021-08-10T06:53:40Z",
                "message": "internal/ethapi: accept both hex and decimal for blockCount (#23363)"
            }
        ],
        "2021-08-09": [
            {
                "date": "2021-08-09T14:34:20Z",
                "message": "core: fix london-check to avoid duplication (#23333)\n\nCo-authored-by: lxex <liuxmzc1@163.com>"
            }
        ],
        "2021-08-08": [
            {
                "date": "2021-08-08T13:44:42Z",
                "message": "core/rawdb: close database in test to avoid goroutine leak (#23287)\n\n* add db close to avoid goroutine leak\r\n\r\n* core/rawdb: move close to defer\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2021-08-07": [
            {
                "date": "2021-08-07T21:04:34Z",
                "message": "cmd/evm: implement input txs via rlp in t8n tool (#23138)\n\nIn many cases, it's desireable to use already-signed transactions as input to the state transition, instead of having the evm sign them internally (for example to use malformed or not-yet-valid transactions). This PR adds support + docs for that feature."
            },
            {
                "date": "2021-08-07T17:38:18Z",
                "message": "core: check if sender is EOA (#23303)\n\nThis adds a check to verify that a sender-account does not have code, which means that the codehash is either `emptyCodeHash` _OR_ not present. The latter occurs IFF the sender did not previously exist, a situation which can only occur with zero cost gasprices."
            }
        ],
        "2021-08-04": [
            {
                "date": "2021-08-04T08:10:37Z",
                "message": "core/rawdb: fix logs to print block number, not address (#23328)"
            }
        ],
        "2021-08-03": [
            {
                "date": "2021-08-03T15:35:25Z",
                "message": "core/state: add trie prefetcher tests (#23216)\n\n* core/state: add trie prefetcher tests\r\n\r\n* core/state: add missing license"
            },
            {
                "date": "2021-08-03T15:32:13Z",
                "message": "internal/ethapi: fix trace log marshalling (#23292)"
            },
            {
                "date": "2021-08-03T15:29:47Z",
                "message": "core: get header from block cache (#23299)"
            },
            {
                "date": "2021-08-03T09:21:39Z",
                "message": "cmd/devp2p: fix ping/pong race in discv4 tests (#23306)\n\nThis PR modifies the post-PING-send expectations to both be laxer and stricter: it doesn't care what order the packets arrive, but also verifies that exactly one PING and one PONG is returned."
            },
            {
                "date": "2021-08-03T06:06:58Z",
                "message": "cre/state: fix outdated statedb Prepare comment (#23320)"
            }
        ],
        "2021-08-02": [
            {
                "date": "2021-08-02T13:43:01Z",
                "message": "node, cmd/clef: remove term \"whitelist\" (#23296)\n\n* node: remove term \"whitelist\"\r\n\r\n* include cmd/clef"
            }
        ],
        "2021-07-29": [
            {
                "date": "2021-07-29T18:23:37Z",
                "message": "tests: remove whitelist feature (#23297)"
            },
            {
                "date": "2021-07-29T15:50:18Z",
                "message": "p2p: remove term \"whitelist\" (#23295)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-07-29T15:36:15Z",
                "message": "all: remove term \"whitelist\" in comments and log messages (#23294)"
            },
            {
                "date": "2021-07-29T14:06:44Z",
                "message": "signer/core: move API JSON types to separate package (#23275)\n\nThis PR moves (some) account types into a standalone package, to avoid\r\ndepending on signer/core from accounts/external."
            },
            {
                "date": "2021-07-29T14:03:50Z",
                "message": "p2p/simulations: fix unlikely crash in probabilistic connect (#23200)\n\nWhen the nodeCount is less than 10, it will panic with the out of bound error.\r\nHow about we just skip this round, when rand1 and rand2 are equal?"
            },
            {
                "date": "2021-07-29T13:20:45Z",
                "message": "go.mod: bump golang.org/x/text to v0.3.6 (#23291)"
            },
            {
                "date": "2021-07-29T13:20:15Z",
                "message": "go.mod: upgrade to goupnp v1.0.2 (#23197)"
            },
            {
                "date": "2021-07-29T12:05:22Z",
                "message": "tests: update tests/testdata to v9.0.4 (london) (#23279)"
            },
            {
                "date": "2021-07-29T12:00:06Z",
                "message": "accounts/external, internal/ethapi: fixes for London tx signing  (#23274)\n\nTicket #23273 found a flaw where we were unable to sign legacy-transactions\r\nusing the external signer, even if we're still on non-london network. That's\r\nfixed in this PR.\r\n\r\nAdditionally, I found that even when supplying all parameters, it was impossible\r\nto sign a london-transaction on an unsynched node. It's a pretty common usecase\r\nthat someone wants to sign a transaction using an unsynced 'vanilla' node,\r\nproviding all necessary data. Our setDefaults, however, insisted on checking the\r\ncurrent block against the config. This PR therefore adds a case, so that if both\r\nMaxPriorityFeePerGas and MaxFeePerGas are provided, we accept them as given.\r\n\r\nOBS This PR fixes a regression -- on current master, we are unable to sign a\r\nlondon-transaction unless the node is synched, which may break scenarios where\r\ngeth (or clef) is used as a cold wallet.\r\n\r\nFixes #23273"
            },
            {
                "date": "2021-07-29T08:17:40Z",
                "message": "all: change blacklist terms"
            }
        ],
        "2021-07-28": [
            {
                "date": "2021-07-28T16:14:46Z",
                "message": "README: fix default sync mode (#23282)"
            },
            {
                "date": "2021-07-28T12:24:41Z",
                "message": "consensus/ethash: less allocation during mining (#23199)"
            },
            {
                "date": "2021-07-28T12:21:35Z",
                "message": "internal/ethapi: fix panic in accesslist creation (#23225)\n\n* internal/ethapi: revert + fix properly in al tracer\r\n\r\n* internal/ethapi: use toMessage instead of creating new message\r\n\r\n* internal/ethapi: remove ineffassign\r\n\r\n* core: fix invalid unmarshalling, fix test\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2021-07-27": [
            {
                "date": "2021-07-27T14:24:27Z",
                "message": "accounts/abi/bind: set Context in TransactOpts (#23188)"
            },
            {
                "date": "2021-07-27T14:22:21Z",
                "message": "accounts/abi/bind: parse ABI only once, create metadata struct (#22583)"
            },
            {
                "date": "2021-07-27T14:19:48Z",
                "message": "cmd/geth: update vulnerability testdata (#23252)"
            },
            {
                "date": "2021-07-27T03:27:28Z",
                "message": "Use `hexutil.Uint` for `blockCount` parameter in `feeHistory` method (#23239)\n\n* internal/ethapi/api: use hexutil.uint for blockCount parameter instead of int for feeHistory\r\n\r\n* return hex value for oldestBlock instead of number\r\n\r\n* return uint64 from oracle.resolveBlockRange\r\n\r\n* eth/gasprice: fixed test\r\n\r\nCo-authored-by: Zsolt Felfoldi <zsfelfoldi@gmail.com>"
            }
        ],
        "2021-07-22": [
            {
                "date": "2021-07-22T14:45:22Z",
                "message": "params: begin v1.10.7 release cycle"
            },
            {
                "date": "2021-07-22T14:44:28Z",
                "message": "params: release go-ethereum v1.10.6 stable"
            },
            {
                "date": "2021-07-22T13:43:51Z",
                "message": "core/types: revert removal of legacy receipt support (#23247)\n\n* Revert \"core/types: go generate (#23177)\"\r\n\r\nThis reverts commit 00b922fc5dcfb1f0a5dbd5614725424a2221da83.\r\n\r\n* Revert \"core/types: remove LogForStorage type (#23173)\"\r\n\r\nThis reverts commit 7522642393a24dca53061e3f7c9d9a5c3eac4bc2.\r\n\r\n* Revert \"core/types: remove support for legacy receipt/log storage encoding (#22852)\"\r\n\r\nThis reverts commit 643fd0efc6ebc8397311d1ca68fc71d8da247643."
            },
            {
                "date": "2021-07-22T13:39:40Z",
                "message": "core: fix pre-check for account balance under EIP-1559 (#23244)\n\nWhen processing a transaction with London fork rules, EIP-1559 mandates\r\nchecking that the sender must have sufficient balance to cover gas * gasFeeCap.\r\n\r\nIn the EIP's pseudocode, this check happens after the value transferred by the\r\ntransaction has already been deducted. However, in go-ethereum, the balance\r\nhas not yet been updated when the check happens, and therefore needs to be\r\nadded explicitly.\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2021-07-15": [
            {
                "date": "2021-07-15T23:52:40Z",
                "message": "les: fix eth_sendTransaction API (#23215)"
            },
            {
                "date": "2021-07-15T18:23:16Z",
                "message": "eth/tracers: fix typo in test name (#23218)"
            },
            {
                "date": "2021-07-15T08:15:08Z",
                "message": "node: fix stopping websocket rpc.Server (#23211)"
            }
        ],
        "2021-07-14": [
            {
                "date": "2021-07-14T08:04:36Z",
                "message": "params: begin v1.10.6 release cycle"
            },
            {
                "date": "2021-07-14T08:01:38Z",
                "message": "params: release Geth v1.10.5, Exodus Cluster"
            },
            {
                "date": "2021-07-14T07:57:07Z",
                "message": "internal/web3ext: remove unused console APIs (#23208)"
            }
        ],
        "2021-07-13": [
            {
                "date": "2021-07-13T11:40:22Z",
                "message": "consensus/clique: implement getSigner API method (#22987)\n\n* clique: implement getSignerForBlock\r\n\r\n* consensus/clique: use blockNrOrHash in getSignerForBlock\r\n\r\n* consensus/clique: implement getSigner\r\n\r\n* consensus/clique: fixed rlp decoding\r\n\r\n* consensus/clique: use Author instead of getSigner\r\n\r\n* consensus/clique: nit nit nit\r\n\r\n* consensus/clique: nit nit nit"
            },
            {
                "date": "2021-07-13T10:40:58Z",
                "message": "internal: get pending and queued transaction by address (#22992)\n\n* core, eth, internal, les, light: get pending and queued transaction by address\r\n\r\n* core: tiny nitpick fixes\r\n\r\n* light: tiny nitpick\r\n\r\nCo-authored-by: mark <mark@amis.com>\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2021-07-13T10:40:01Z",
                "message": "internal/ethapi: fix transaction APIs (#23179)\n\n* internal/ethapi: fix transaction APIs\r\n\r\n* internal/ethapi: fix typo\r\n\r\n* internal/ethapi: address comments\r\n\r\n* internal/ethapi: address comment from Peter"
            }
        ],
        "2021-07-12": [
            {
                "date": "2021-07-12T19:34:20Z",
                "message": "core/state: avoid unnecessary alloc in trie prefetcher (#23198)"
            },
            {
                "date": "2021-07-12T08:25:08Z",
                "message": "Merge pull request #23183 from karalabe/cht-1.10.5\n\nparams: update CHTs for the 1.10.5 release"
            }
        ],
        "2021-07-09": [
            {
                "date": "2021-07-09T11:27:41Z",
                "message": "params: update CHTs for the 1.10.5 release"
            },
            {
                "date": "2021-07-09T04:47:23Z",
                "message": "Merge pull request #23178 from karalabe/feeapi-fixes\n\neth/gasprice, internal/ethapi, miner: minor feehistory fixes"
            }
        ],
        "2021-07-08": [
            {
                "date": "2021-07-08T06:57:51Z",
                "message": "eth/gasprice, internal/ethapi, miner: minor feehistory fixes"
            },
            {
                "date": "2021-07-08T09:34:56Z",
                "message": "core, params: define london block at 12965000 (#23176)\n\n* core, params: define london block at 12965000\r\n\r\n* core/forkid: fix test"
            },
            {
                "date": "2021-07-08T05:53:28Z",
                "message": "core/types: go generate (#23177)"
            }
        ],
        "2021-07-07": [
            {
                "date": "2021-07-07T17:52:55Z",
                "message": "core/types: remove LogForStorage type (#23173)\n\nThe encoding of Log and LogForStorage is exactly the same\r\nnow. After tracking it down it seems like #17106 changed the\r\nstorage schema of logs to be the same as the consensus\r\nencoding.\r\n\r\nSupport for the legacy format was dropped in #22852 and if\r\nI'm not wrong there's no reason anymore to have these two\r\nequivalent types.\r\n\r\nSince the RLP encoding simply contains the first three fields\r\nof Log, we can also avoid creating a temporary struct for\r\nencoding/decoding, and use the rlp:\"-\" tag in Log instead.\r\n\r\nNote: this is an API change in core/types. We decided it's OK\r\nto make this change because LogForStorage is an implementation\r\ndetail of go-ethereum and the type has zero uses outside of\r\npackage core/types.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-07-07T15:28:14Z",
                "message": "cmd/devp2p: fixes for eth and discv4 tests (#23155)\n\nThis PR fixes a false positive PONG 'to' endpoint mismatch seen in hive tests:\r\n\r\n    got {IP:172.17.0.7 UDP:44025 TCP:44025}, want {IP:172.17.0.7 UDP:44025 TCP:0}\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2021-07-06": [
            {
                "date": "2021-07-06T20:03:09Z",
                "message": "all: remove noop vm config flags (#23111)\n\n* all: rm external interpreter and ewasm config\r\n\r\n* core/vm: rm Interpreter interface\r\n\r\n* cmd/geth: deprecate interpreter config fields"
            },
            {
                "date": "2021-07-06T20:02:38Z",
                "message": "core/types: sanity check the basefee length inside a header (#23171)"
            },
            {
                "date": "2021-07-06T08:35:39Z",
                "message": "eth, miner: add RPC method to modify miner gaslimit (pre london: ceiling) (#23134)"
            },
            {
                "date": "2021-07-06T07:48:29Z",
                "message": "fuzzing: fix typo in fuzzer definitions (#23169)"
            },
            {
                "date": "2021-07-06T07:33:51Z",
                "message": "p2p: fix array out of bounds issue (#23165)"
            },
            {
                "date": "2021-07-06T07:32:26Z",
                "message": "core: fix bad parent hash when jumping to genesis in setHead (#23162)"
            },
            {
                "date": "2021-07-06T06:59:24Z",
                "message": "Merge pull request #23168 from karalabe/puppeth-fix-dashboard\n\ncmd/puppeth: fix dashboard crash caused by updated base image"
            },
            {
                "date": "2021-07-06T06:58:24Z",
                "message": "cmd/puppeth: fix dashboard crash caused by updated base image"
            },
            {
                "date": "2021-07-06T06:34:54Z",
                "message": "Merge pull request #23167 from karalabe/docker-nomake\n\ndockerfile: get rid of make and env, see if that fixes builds"
            },
            {
                "date": "2021-07-06T06:29:55Z",
                "message": "dockerfile: get rid of make and env, see if that fixes builds"
            }
        ],
        "2021-07-05": [
            {
                "date": "2021-07-05T08:18:51Z",
                "message": "Merge pull request #23159 from karalabe/ethstats-fix-fullnode\n\nethstats: fix full node interface post 1559"
            },
            {
                "date": "2021-07-05T07:49:52Z",
                "message": "ethstats: fix full node interface post 1559"
            }
        ],
        "2021-07-04": [],
        "2021-07-10": [],
        "2021-07-11": [],
        "2021-07-16": [],
        "2021-07-17": [],
        "2021-07-18": [],
        "2021-07-19": [],
        "2021-07-20": [],
        "2021-07-21": [],
        "2021-07-23": [],
        "2021-07-24": [],
        "2021-07-25": [],
        "2021-07-26": [],
        "2021-07-30": [],
        "2021-07-31": [],
        "2021-08-01": [],
        "2021-08-05": [],
        "2021-08-06": [],
        "2021-08-11": [],
        "2021-08-14": [],
        "2021-08-15": [],
        "2021-08-16": [],
        "2021-08-19": [],
        "2021-08-21": [],
        "2021-08-22": [],
        "2021-08-28": [],
        "2021-08-29": [],
        "2021-09-01": [],
        "2021-09-03": [],
        "2021-09-04": [],
        "2021-09-05": [],
        "2021-09-06": [],
        "2021-09-09": [],
        "2021-09-11": [],
        "2021-09-12": [],
        "2021-09-14": [],
        "2021-09-18": [],
        "2021-09-19": [],
        "2021-09-23": [],
        "2021-09-24": [],
        "2021-09-25": [],
        "2021-09-26": [],
        "2021-09-30": [],
        "2021-10-02": [],
        "2021-10-16": [],
        "2021-10-17": [],
        "2021-10-22": [],
        "2021-10-23": [],
        "2021-10-24": [],
        "2021-10-30": [],
        "2021-11-03": [],
        "2021-11-06": [],
        "2021-11-07": [],
        "2021-11-13": [],
        "2021-11-14": [],
        "2021-11-15": [],
        "2021-11-20": [],
        "2021-11-21": [],
        "2021-11-27": [],
        "2021-11-28": [],
        "2021-12-04": [],
        "2021-12-08": [],
        "2021-12-10": [],
        "2021-12-12": [],
        "2021-12-13": [],
        "2021-12-18": [],
        "2021-12-19": [],
        "2021-12-21": [],
        "2021-12-24": [],
        "2021-12-25": [],
        "2021-12-27": [],
        "2021-12-28": [],
        "2021-12-29": [],
        "2021-12-31": [],
        "2022-01-01": [],
        "2022-01-02": [],
        "2022-01-03": [],
        "2022-01-08": [],
        "2022-01-09": [],
        "2022-01-13": [],
        "2022-01-14": [],
        "2022-01-16": [],
        "2022-01-17": [],
        "2022-01-19": [],
        "2022-01-22": [],
        "2022-01-23": [],
        "2022-01-26": [],
        "2022-01-29": [],
        "2022-01-30": [],
        "2022-02-03": [],
        "2022-02-05": [],
        "2022-02-06": [],
        "2022-02-09": [],
        "2022-02-10": [],
        "2022-02-11": [],
        "2022-02-12": [],
        "2022-02-13": [],
        "2022-02-19": [],
        "2022-02-20": [],
        "2022-02-21": [],
        "2022-02-25": [],
        "2022-02-26": [],
        "2022-02-27": [],
        "2022-02-28": [],
        "2022-03-03": [],
        "2022-03-05": [],
        "2022-03-06": [],
        "2022-03-12": [],
        "2022-03-13": [],
        "2022-03-19": [],
        "2022-03-20": [],
        "2022-03-26": [],
        "2022-03-28": [],
        "2022-04-01": [],
        "2022-04-02": [],
        "2022-04-03": [],
        "2022-04-09": [],
        "2022-04-10": [],
        "2022-04-15": [],
        "2022-04-16": [],
        "2022-04-18": [],
        "2022-04-19": [],
        "2022-04-22": [],
        "2022-04-24": [],
        "2022-04-28": [],
        "2022-04-30": [],
        "2022-05-01": [],
        "2022-05-07": [],
        "2022-05-08": [],
        "2022-05-13": [],
        "2022-05-15": [],
        "2022-05-21": [],
        "2022-05-22": [],
        "2022-05-28": [],
        "2022-05-29": [],
        "2022-06-04": [],
        "2022-06-05": [],
        "2022-06-09": [],
        "2022-06-11": [],
        "2022-06-12": [],
        "2022-06-17": [],
        "2022-06-18": [],
        "2022-06-19": [],
        "2022-06-26": [],
        "2022-07-02": [],
        "2022-07-03": [],
        "2022-07-09": [],
        "2022-07-13": [],
        "2022-07-16": [],
        "2022-07-17": [],
        "2022-07-20": [],
        "2022-07-24": [],
        "2022-07-26": [],
        "2022-07-30": [],
        "2022-07-31": [],
        "2022-08-05": [],
        "2022-08-06": [],
        "2022-08-07": [],
        "2022-08-13": [],
        "2022-08-14": [],
        "2022-08-20": [],
        "2022-08-21": [],
        "2022-08-26": [],
        "2022-08-27": [],
        "2022-08-28": [],
        "2022-09-03": [],
        "2022-09-04": [],
        "2022-09-11": [],
        "2022-09-18": [],
        "2022-09-24": [],
        "2022-09-25": [],
        "2022-10-01": [],
        "2022-10-02": [],
        "2022-10-05": [],
        "2022-10-07": [],
        "2022-10-08": [],
        "2022-10-09": [],
        "2022-10-10": [],
        "2022-10-13": [],
        "2022-10-14": [],
        "2022-10-15": [],
        "2022-10-16": [],
        "2022-10-17": [],
        "2022-10-22": [],
        "2022-10-23": [],
        "2022-10-25": [],
        "2022-10-29": [],
        "2022-10-30": [],
        "2022-11-05": [],
        "2022-11-12": [],
        "2022-11-13": [],
        "2022-11-18": [],
        "2022-11-19": [],
        "2022-11-20": [],
        "2022-11-23": [],
        "2022-11-26": [],
        "2022-11-27": [],
        "2022-11-29": [],
        "2022-12-01": [],
        "2022-12-04": [],
        "2022-12-11": [],
        "2022-12-12": [],
        "2022-12-17": [],
        "2022-12-18": [],
        "2022-12-22": [],
        "2022-12-23": [],
        "2022-12-24": [],
        "2022-12-25": [],
        "2022-12-26": [],
        "2022-12-30": [],
        "2022-12-31": [],
        "2023-01-01": [],
        "2023-01-02": [],
        "2023-01-04": [],
        "2023-01-05": [],
        "2023-01-07": [],
        "2023-01-08": [],
        "2023-01-14": [],
        "2023-01-21": [],
        "2023-01-22": [],
        "2023-01-28": [],
        "2023-01-29": [],
        "2023-02-04": [],
        "2023-02-11": [],
        "2023-02-12": [],
        "2023-02-18": [],
        "2023-02-24": [],
        "2023-02-25": [],
        "2023-02-26": [],
        "2023-03-01": [],
        "2023-03-04": [],
        "2023-03-05": [],
        "2023-03-11": [],
        "2023-03-12": [],
        "2023-03-18": [],
        "2023-03-19": [],
        "2023-03-26": [],
        "2023-03-29": [],
        "2023-04-01": [],
        "2023-04-02": [],
        "2023-04-06": [],
        "2023-04-07": [],
        "2023-04-09": [],
        "2023-04-10": [],
        "2023-04-11": [],
        "2023-04-12": [],
        "2023-04-13": [],
        "2023-04-14": [],
        "2023-04-15": [],
        "2023-04-16": [],
        "2023-04-22": [],
        "2023-04-23": [],
        "2023-04-29": [],
        "2023-04-30": [],
        "2023-05-01": [],
        "2023-05-06": [],
        "2023-05-07": [],
        "2023-05-13": [],
        "2023-05-14": [],
        "2023-05-18": [],
        "2023-05-20": [],
        "2023-05-21": [],
        "2023-05-26": [],
        "2023-05-27": [],
        "2023-05-28": [],
        "2023-06-03": [],
        "2023-06-04": [],
        "2023-06-09": [],
        "2023-06-10": [],
        "2023-06-11": [],
        "2023-06-12": [],
        "2023-06-17": [],
        "2023-06-24": [],
        "2023-06-26": [],
        "2023-06-29": [],
        "2023-06-30": [],
        "2023-07-01": [],
        "2023-07-03": [],
        "2023-07-08": [],
        "2023-07-09": [],
        "2023-07-16": [],
        "2023-07-19": [],
        "2023-07-20": [],
        "2023-07-21": [],
        "2023-07-22": [],
        "2023-07-23": [],
        "2023-07-25": [],
        "2023-07-26": [],
        "2023-07-29": [],
        "2023-07-30": [],
        "2023-08-05": [],
        "2023-08-06": [],
        "2023-08-13": [],
        "2023-08-19": [],
        "2023-08-20": [],
        "2023-08-27": [],
        "2023-09-01": [],
        "2023-09-02": [],
        "2023-09-03": [],
        "2023-09-09": [],
        "2023-09-10": [],
        "2023-09-16": [],
        "2023-09-18": [],
        "2023-09-23": [],
        "2023-09-24": [],
        "2023-09-30": [],
        "2023-10-01": [],
        "2023-10-05": [],
        "2023-10-06": [],
        "2023-10-08": [],
        "2023-10-09": [],
        "2023-10-14": [],
        "2023-10-15": [],
        "2023-10-21": [],
        "2023-10-24": [],
        "2023-10-28": [],
        "2023-10-29": [],
        "2023-10-30": [],
        "2023-11-01": [],
        "2023-11-04": [],
        "2023-11-05": [],
        "2023-11-06": [],
        "2023-11-11": [],
        "2023-11-12": [],
        "2023-11-13": [],
        "2023-11-16": [],
        "2023-11-18": [],
        "2023-11-19": [],
        "2023-11-26": [],
        "2023-12-02": [],
        "2023-12-03": [],
        "2023-12-09": [],
        "2023-12-10": [],
        "2023-12-11": [],
        "2023-12-14": [],
        "2023-12-16": [],
        "2023-12-17": [],
        "2023-12-23": [],
        "2023-12-24": [],
        "2023-12-25": [],
        "2023-12-27": [],
        "2023-12-29": [],
        "2023-12-31": [],
        "2024-01-01": [],
        "2024-01-06": [],
        "2024-01-07": [],
        "2024-01-13": [],
        "2024-01-21": [],
        "2024-01-25": [],
        "2024-01-28": [],
        "2024-02-01": [],
        "2024-02-03": [],
        "2024-02-10": [],
        "2024-02-11": [],
        "2024-02-12": [],
        "2024-02-18": [],
        "2024-02-24": [],
        "2024-02-25": [],
        "2024-03-01": [],
        "2024-03-03": [],
        "2024-03-09": [],
        "2024-03-16": [],
        "2024-03-17": [],
        "2024-03-23": [],
        "2025-07-22": [],
        "2021-07-02": [
            {
                "date": "2021-07-02T09:08:53Z",
                "message": "cmd/evm, eth/ethconfig: regenerate struct codecs (#23140)"
            },
            {
                "date": "2021-07-02T07:18:50Z",
                "message": "consensus/clique: avoid a copy in clique (#23149)\n\n* consensus/clique:optimize to avoid a copy in clique\r\n\r\n* consensus/clique: test for sealhash\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2021-07-01": [
            {
                "date": "2021-07-01T12:01:19Z",
                "message": "les: avoid shutdown hang (#23139)"
            },
            {
                "date": "2021-07-01T11:21:54Z",
                "message": "go.mod: update UPNP dependency (#23116)"
            },
            {
                "date": "2021-07-01T07:15:04Z",
                "message": "eth/tracers: improve tracing performance (#23016)\n\nImproves the performance of debug.traceTransaction"
            }
        ],
        "2021-06-30": [
            {
                "date": "2021-06-30T21:04:28Z",
                "message": "crypto: gofuzz build directives (#23137)"
            },
            {
                "date": "2021-06-30T20:24:17Z",
                "message": "eth/fetcher, trie: unit test reliability fixes (#23020)\n\nSome tests take quite some time during exit, which I think causes\r\nsome appveyor fails like this:\r\n\r\n    https://ci.appveyor.com/project/ethereum/go-ethereum/builds/39511210/job/xhom84eg2e4uulq3\r\n\r\nOne of the things that seem to take time during exit is waiting\r\n(up to 100ms) for the syncbloom to close. This PR changes it to use\r\na channel, instead of looping with a 100ms wait.\r\n\r\nThis also includes some unrelated changes improving the reliability of\r\neth/fetcher tests, which fail a lot because they are time-dependent."
            },
            {
                "date": "2021-06-30T13:17:01Z",
                "message": " all: removed blockhash from statedb (#23126)\n\nThis PR removes the blockhash from the statedb"
            },
            {
                "date": "2021-06-30T12:23:20Z",
                "message": "internal/ethapi: fix panic in access list creation (#23133)\n\nFixes test failure in the last commit."
            },
            {
                "date": "2021-06-30T10:57:32Z",
                "message": "cmd/geth: dont fail on deprecated toml config fields (#23118)"
            },
            {
                "date": "2021-06-30T09:03:01Z",
                "message": "ethclient/gethclient: RPC client wrapper for geth-specific API (#22977)\n\nThis commit adds the package gethclient which is similar to the ethclient\r\nand implements some geth specific functionality.\r\n\r\nCo-authored-by: Edgar Aroutiounian <edgar.factorial@gmail.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2021-06-28": [
            {
                "date": "2021-06-28T15:40:56Z",
                "message": "eth: drop eth/65, the last non-reqid protocol version"
            },
            {
                "date": "2021-06-28T14:16:32Z",
                "message": "eth/gasprice: implement feeHistory API (#23033)\n\n* eth/gasprice: implement feeHistory API\r\n\r\n* eth/gasprice: factored out resolveBlockRange\r\n\r\n* eth/gasprice: add sanity check for missing block\r\n\r\n* eth/gasprice: fetch actual gas used from receipts\r\n\r\n* miner, eth/gasprice: add PendingBlockAndReceipts\r\n\r\n* internal/ethapi: use hexutil.Big\r\n\r\n* eth/gasprice: return error when requesting beyond head block\r\n\r\n* eth/gasprice: fixed tests and return errors correctly\r\n\r\n* eth/gasprice: rename receiver name\r\n\r\n* eth/gasprice: return directly if blockCount == 0\r\n\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
            },
            {
                "date": "2021-06-28T12:13:27Z",
                "message": "core, eth: fix precompile addresses for tracers (#23097)\n\n* core,eth/tracers: make isPrecompiled dependent on HF\r\n\r\n* eth/tracers: use keys when constructing chain config struct\r\n\r\n* eth/tracers: dont initialize activePrecompiles with random value"
            },
            {
                "date": "2021-06-28T07:48:17Z",
                "message": "p2p/enode: fix method doc (#23115)\n\nThis is an obvious spelling error\r\n\r\nCo-authored-by: liuyaxiong <liuyaxiong@inspur.com>"
            }
        ],
        "2021-06-29": [
            {
                "date": "2021-06-29T09:14:47Z",
                "message": "p2p/server: fix method name in comment (#23123)"
            },
            {
                "date": "2021-06-29T08:57:29Z",
                "message": "accounts/abi/bind: fix gas price suggestion with pre EIP-1559 clients (#23102)\n\nThis fixes transaction sending in the case where an app using go-ethereum v1.10.4\r\nis talking to a pre-EIP-1559 RPC node. In this case, the eth_maxPriorityFeePerGas\r\nendpoint is not available and we can only rely on eth_gasPrice."
            }
        ],
        "2021-06-25": [
            {
                "date": "2021-06-25T12:53:22Z",
                "message": "eth/downloader: increase downloader block body allowance (#23074)\n\nThis change increases the cache size from 64 to 256 Mb for block bodies.\r\nBenchmarks have shown this to be one bottleneck when trying to achieve\r\nhigher download speeds.\r\n\r\nThe commit also includes a minor optimization for header inserts in package\r\ncore: previously, the presence of headers in the database was checked for\r\nevery header before writing it. With the change, if one header fails the\r\npresence check, all subsequent headers are also assumed to be missing.\r\nThis is an improvement because in practice, the headers are almost always\r\nmissing during sync."
            },
            {
                "date": "2021-06-25T12:34:09Z",
                "message": "core/state: remove unused methods ReturnGas, GetStorageProofByHash (#23092)\n\nCo-authored-by: lidongwei <lidongwei@huobi.com>"
            },
            {
                "date": "2021-06-25T10:48:06Z",
                "message": "eth/gasprice: fix typo in comment (#22998)"
            },
            {
                "date": "2021-06-25T10:40:37Z",
                "message": "cmd/geth: fix IPC probe in les test (#23094)\n\nPreviously, the test waited a second and then failed if geth had not\r\nstarted. This caused the test to fail intermittently. This change checks\r\nwhether the IPC is open 10 times over a 5 second period and then fails\r\nif geth is still not available."
            },
            {
                "date": "2021-06-25T06:02:15Z",
                "message": "eth/tracers: convert int/hash values from context into js object (#23108)\n\n* Convert int/hash values from context into js object\r\n\r\n* Use js fixed buffer\r\n\r\nCo-authored-by: William <william.berman@coinbase.com>"
            }
        ],
        "2021-06-24": [
            {
                "date": "2021-06-24T10:50:07Z",
                "message": "Merge pull request #23104 from karalabe/tracer-context\n\neth/tracers: expose contextual infos (block hash, tx hash, tx index)"
            },
            {
                "date": "2021-06-24T09:46:26Z",
                "message": "eth/tracers: expose contextual infos (block hash, tx hash, tx index)"
            }
        ],
        "2021-06-23": [
            {
                "date": "2021-06-23T04:34:35Z",
                "message": "Merge pull request #23089 from holiman/fix_fuzzers\n\ncrypto: fix build directives"
            },
            {
                "date": "2021-06-23T04:29:20Z",
                "message": "core: transaction journal should not be executable (#23090)"
            }
        ],
        "2021-06-22": [
            {
                "date": "2021-06-22T13:21:11Z",
                "message": "crypto: fix build directives"
            },
            {
                "date": "2021-06-22T09:13:48Z",
                "message": "graphql: fix transaction API (#23052)"
            },
            {
                "date": "2021-06-22T09:06:34Z",
                "message": "accounts/abi/bind: replace context.TODO with context.Background (#23088)"
            },
            {
                "date": "2021-06-22T08:47:48Z",
                "message": "Merge pull request #23062 from nfeignon/fix-abi-bind-ensure-context\n\naccounts/abi/bind: call ensureContext on every context"
            },
            {
                "date": "2021-06-22T08:33:49Z",
                "message": "README: Discord server instead of gitter for communication with devs (#23080)\n\nThe `README.md` links the Gitter channel for discussions, but the\r\nofficial docs and even the Gitter channel itself recommend using the\r\nofficial Discord Server for such discussions.\r\nThis PR simply changes the Gitter link and provides Discord invite link."
            }
        ],
        "2021-06-21": [
            {
                "date": "2021-06-21T16:44:23Z",
                "message": "Merge pull request #23083 from karalabe/docker-fix-experimental\n\ntravis: enable experimental docker for manifest building"
            },
            {
                "date": "2021-06-21T16:43:37Z",
                "message": "travis: enable experimental docker for manifest building"
            },
            {
                "date": "2021-06-21T16:32:45Z",
                "message": "Merge pull request #23082 from karalabe/docker-flat-publish\n\ntravis, Dockerfile, build: docker build and multi-arch publish combo"
            },
            {
                "date": "2021-06-21T16:16:51Z",
                "message": "travis, Dockerfile, build: docker build and multi-arch publish combo"
            },
            {
                "date": "2021-06-21T10:50:24Z",
                "message": "Merge pull request #23078 from karalabe/docker-post-publish\n\ntravis: move docker steps further to prevent hanging other builders"
            },
            {
                "date": "2021-06-21T10:01:24Z",
                "message": "travis: move docker steps further to prevent hanging other builders"
            }
        ],
        "2021-06-20": [
            {
                "date": "2021-06-20T13:59:00Z",
                "message": "trie: small optimization of delete in fullNode case (#22979)\n\nWhen deleting in fullNode, and the new child node nn is not nil, there is no need\r\nto check the number of non-nil entries in the node. This is because the fullNode \r\nmust've contained at least two children before deletion, so there must be another\r\nchild node other than nn.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-06-20T13:52:04Z",
                "message": "core: copy CliqueConfig in DeveloperGenesisBlock (#23068)\n\nCopy the CliqueConfig instead of reusing the pointer.\r\nThis makes DeveloperGenesisBlock thread safe and prevents it from\r\nchanging params.AllCliqueProtocolChanges.Clique.Epoch."
            }
        ],
        "2021-06-18": [
            {
                "date": "2021-06-18T12:35:09Z",
                "message": "Merge pull request #23069 from karalabe/docker-multi-arch\n\ntravis, build: add support for multi-arch docker images"
            },
            {
                "date": "2021-06-18T12:28:30Z",
                "message": "travis, build: add support for multi-arch docker images"
            },
            {
                "date": "2021-06-18T10:34:31Z",
                "message": "tests: fix eip1559 tx on non-eip1559 network (#23054)"
            },
            {
                "date": "2021-06-18T10:21:34Z",
                "message": "tests: fix nil pointer panic on failure (#23053)"
            },
            {
                "date": "2021-06-18T10:16:34Z",
                "message": "internal/ethapi: fix typo in comment (#23057)"
            },
            {
                "date": "2021-06-18T10:15:51Z",
                "message": "params: fix typo in gas cost comments (#23065)"
            }
        ],
        "2021-06-17": [
            {
                "date": "2021-06-17T17:54:37Z",
                "message": "core/types: add DynamicFeeTx to TxData implementation list in docs (#23063)"
            },
            {
                "date": "2021-06-17T12:04:24Z",
                "message": "accounts/abi/bind: call ensureContext on every context"
            },
            {
                "date": "2021-06-17T10:36:42Z",
                "message": "params: begin v1.10.5 release cycle"
            },
            {
                "date": "2021-06-17T10:35:17Z",
                "message": "params: release go-ethereum v1.10.4 stable"
            },
            {
                "date": "2021-06-17T09:23:16Z",
                "message": "Merge pull request #23061 from karalabe/docker-noarm\n\ntravis: don't overwrite amd64 images with arm64"
            },
            {
                "date": "2021-06-17T09:22:22Z",
                "message": "travis: don't overwrite amd64 images with arm64"
            },
            {
                "date": "2021-06-17T09:02:18Z",
                "message": "Merge pull request #23060 from karalabe/travis-docker\n\ntravis, build: own docker builder and hub pusher"
            },
            {
                "date": "2021-06-17T07:47:45Z",
                "message": "travis, build: own docker builder and hub pusher"
            }
        ],
        "2021-06-16": [
            {
                "date": "2021-06-16T13:00:36Z",
                "message": "core: readded state processor error tests (#23055)"
            },
            {
                "date": "2021-06-16T06:53:27Z",
                "message": "core/vm: evm fix panic (#23047)\n\n* core/vm: evm fix panic\r\n\r\n* core/vm/runtime: default to params.initialbasefee"
            },
            {
                "date": "2021-06-16T06:52:31Z",
                "message": "Merge pull request #23050 from karalabe/1559-receipt-rpc\n\ncore, graphql, internal: expose effectiveGasPrice in receipts"
            },
            {
                "date": "2021-06-16T05:23:50Z",
                "message": "core, graphql, internal: expose effectiveGasPrice in receipts"
            },
            {
                "date": "2021-06-16T06:37:09Z",
                "message": "Merge pull request #23051 from karalabe/cht-1.10.4\n\nparams: bump CHTs for Geth v1.10.4"
            },
            {
                "date": "2021-06-16T06:14:58Z",
                "message": "params: bump CHTs for Geth v1.10.4"
            }
        ],
        "2021-06-15": [
            {
                "date": "2021-06-15T10:56:14Z",
                "message": "accounts/abi/bind: fix bounded contracts and sim backend for 1559 (#23038)\n\n* accounts/abi/bind: fix bounded contracts and sim backend for 1559\r\n\r\n* accounts/abi/bind, ethclient: don't rely on chain config for gas prices\r\n\r\n* all: enable London for all internal tests\r\n\r\n* les: get receipt type info in les tests\r\n\r\n* les: fix weird test\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2021-06-14": [
            {
                "date": "2021-06-14T17:35:01Z",
                "message": "params, core/forkid: add london testnet blocks (#23041)\n\n* params: add london testnet blocks\r\n\r\n* core/forkid: update fork hashes"
            },
            {
                "date": "2021-06-14T12:54:20Z",
                "message": "Merge pull request #23039 from holiman/basefeepergas\n\ncore: change baseFee into baseFeePerGas in genesis json"
            },
            {
                "date": "2021-06-14T12:04:44Z",
                "message": "core: change baseFee into baseFeePerGas in genesis json"
            },
            {
                "date": "2021-06-14T05:55:44Z",
                "message": "accounts/abi/bind/backends: add simulated reorgs (#22624)\n\n* accounts/abi/bind/backends: add blockByHashNoLock\r\n\r\nSigned-off-by: Oliver Tale-Yazdi <oliver@perun.network>\r\n\r\n* accounts/abi/bind/backends: add 'parent' arg to rollback\r\n\r\nSigned-off-by: Oliver Tale-Yazdi <oliver@perun.network>\r\n\r\n* accounts/abi/bind/backends: add simulated forks\r\n\r\nSigned-off-by: Oliver Tale-Yazdi <oliver@perun.network>\r\n\r\n* accounts/abi/bind/backends: minor nitpicks\r\n\r\n* accounts/abi/bind/backends: don't add defensive panics\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2021-06-14T04:52:33Z",
                "message": "Merge pull request #23013 from holiman/genesis_fix\n\ncore: make genesis parse baseFee correctly"
            }
        ],
        "2021-06-11": [
            {
                "date": "2021-06-11T09:27:30Z",
                "message": "Merge pull request #23027 from karalabe/1559-call\n\ncore, internal: support various eth_call invocations post 1559"
            }
        ],
        "2021-06-10": [
            {
                "date": "2021-06-10T07:53:23Z",
                "message": "common: rename unused function with typo (#23025)\n\nThis function is not used in the code base, so probably safe to do rename, or remove in its entirety, but I'm assuming the logic from the original creator still applies so rename probably better."
            },
            {
                "date": "2021-06-10T07:52:31Z",
                "message": "Merge pull request #23028 from karalabe/1559-rpcgascap\n\neth/ethconfig: bump the RPC gas cap to 50M, since 1559 exceeds 25"
            },
            {
                "date": "2021-06-10T06:07:03Z",
                "message": "eth/ethconfig: bump the RPC gas cap to 50M, since 1559 exceeds 25"
            },
            {
                "date": "2021-06-10T05:02:51Z",
                "message": "core, internal: support various eth_call invocations post 1559"
            }
        ],
        "2021-06-09": [
            {
                "date": "2021-06-09T11:48:47Z",
                "message": "cmd/clef, signer: support for eip-1559 txs in clef (#22966)"
            }
        ],
        "2021-06-08": [
            {
                "date": "2021-06-08T10:05:41Z",
                "message": "all: rename internal 1559 gas fields, add support for graphql (#23010)\n\n* all: rename internal 1559 gas fields, add support for graphql\r\n\r\n* cmd/evm/testdata, core: use public 1559 gas names on API surfaces"
            },
            {
                "date": "2021-06-08T09:07:27Z",
                "message": "core: make genesis parse baseFee correctly"
            },
            {
                "date": "2021-06-08T08:39:24Z",
                "message": "core/rawdb: db inspect move 'config' and 'shutdown' into 'meta data' (#22978)\n\n* core/rawdb: db inspect move 'config' and 'shutdown' into 'meta data'\r\n\r\n* gofmt"
            },
            {
                "date": "2021-06-08T08:39:05Z",
                "message": "go.mod: upgrade to fastcache v1.6.0 (#22982)"
            }
        ],
        "2021-06-07": [
            {
                "date": "2021-06-07T12:37:56Z",
                "message": "tests: update for London  (#22976)\n\nThis updates the tests submodule to the London fork tests, and\r\nalso updates the test runner to support the new EIP-1559 fields in\r\ntest JSON."
            },
            {
                "date": "2021-06-07T07:11:07Z",
                "message": "trie: remove the duplicate batch-write for 'preimage' (#23001)"
            }
        ],
        "2021-06-04": [
            {
                "date": "2021-06-04T07:57:22Z",
                "message": "Merge pull request #22995 from karalabe/enforce-miner-tip\n\ncore, eth, miner: enforce configured mining reward post 1559 too"
            },
            {
                "date": "2021-06-04T07:32:35Z",
                "message": "miner/stress: add stress test for eip 1559 (#22930)\n\n* miner/stress/1559: add 1559 stress tests\r\n\r\n* miner/stress: add 1559 stress test"
            },
            {
                "date": "2021-06-04T06:55:00Z",
                "message": "core, eth, miner: enforce configured mining reward post 1559 too"
            }
        ],
        "2021-06-03": [
            {
                "date": "2021-06-03T15:12:47Z",
                "message": "catalyst: runs every transaction in a snapshot in assembleBlock handler (#7) (#22989)\n\nCo-authored-by: Gary Rong <garyrong0905@gmail.com>\r\nCo-authored-by: Mikhail Kalinin <noblesse.knight@gmail.com>"
            },
            {
                "date": "2021-06-03T12:35:40Z",
                "message": "cmd/faucet: disable flaky facebook test (#22988)"
            },
            {
                "date": "2021-06-03T09:05:08Z",
                "message": "Merge pull request #22973 from karalabe/the-switch\n\neth/ethconfig: flip the default from fast to snap sync"
            }
        ],
        "2021-06-02": [
            {
                "date": "2021-06-02T13:13:10Z",
                "message": "core, eth, internal, les: RPC methods and fields for EIP 1559 (#22964)\n\n* internal/ethapi: add baseFee to RPCMarshalHeader\r\n\r\n* internal/ethapi: add FeeCap, Tip and correct GasPrice to EIP-1559 RPCTransaction results\r\n\r\n* core,eth,les,internal: add support for tip estimation in gas price oracle\r\n\r\n* internal/ethapi,eth/gasprice: don't suggest tip larger than fee cap\r\n\r\n* core/types,internal: use correct eip1559 terminology for json marshalling\r\n\r\n* eth, internal/ethapi: fix rebase problems\r\n\r\n* internal/ethapi: fix rpc name of basefee\r\n\r\n* internal/ethapi: address review concerns\r\n\r\n* core, eth, internal, les: simplify gasprice oracle (#25)\r\n\r\n* core, eth, internal, les: simplify gasprice oracle\r\n\r\n* eth/gasprice: fix typo\r\n\r\n* internal/ethapi: minor tweak in tx args\r\n\r\n* internal/ethapi: calculate basefee for pending block\r\n\r\n* internal/ethapi: fix panic\r\n\r\n* internal/ethapi, eth/tracers: simplify txargs ToMessage\r\n\r\n* internal/ethapi: remove unused param\r\n\r\n* core, eth, internal: fix regressions wrt effective gas price in the evm\r\n\r\n* eth/gasprice: drop weird debug println\r\n\r\n* internal/jsre/deps: hack in 1559 gas conversions into embedded web3\r\n\r\n* internal/jsre/deps: hack basFee to decimal conversion\r\n\r\n* internal/ethapi: init feecap and tipcap for legacy txs too\r\n\r\n* eth, graphql, internal, les: fix gas price suggestion on all combos\r\n\r\n* internal/jsre/deps: handle decimal tipcap and feecap\r\n\r\n* eth, internal: minor review fixes\r\n\r\n* graphql, internal: export max fee cap RPC endpoint\r\n\r\n* internal/ethapi: fix crash in transaction_args\r\n\r\n* internal/ethapi: minor refactor to make the code safer\r\n\r\nCo-authored-by: Ryan Schneider <ryanleeschneider@gmail.com>\r\nCo-authored-by: lightclient@protonmail.com <lightclient@protonmail.com>\r\nCo-authored-by: gary rong <garyrong0905@gmail.com>\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            }
        ],
        "2021-06-01": [
            {
                "date": "2021-06-01T08:50:54Z",
                "message": "metrics: use golang.org/x/sys/unix to support Solaris (#22584)\n\nFixes #11113\r\n\r\nCo-authored-by: rene <41963722+renaynay@users.noreply.github.com>"
            }
        ],
        "2021-05-31": [
            {
                "date": "2021-05-31T10:43:18Z",
                "message": "core/state: fix typos in test error message (#22962)"
            },
            {
                "date": "2021-05-31T07:21:48Z",
                "message": "eth/ethconfig: flip the default from fast to snap sync"
            },
            {
                "date": "2021-05-31T07:06:48Z",
                "message": "cmd/geth, core, params: replace baikal with calaveras (#22972)\n\n* cmd/geth, core, params: replace baikal with calaveras\r\n\r\n* params: fix genesis hash for Calaveras\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            }
        ],
        "2021-05-30": [
            {
                "date": "2021-05-30T17:37:52Z",
                "message": "core: add new eip-1559 tx constraints (#22970)\n\nThis PR adds the new consensus constraints of EIP-1559 transactions as specified in https://github.com/ethereum/EIPs#3594"
            }
        ],
        "2021-05-28": [
            {
                "date": "2021-05-28T08:28:07Z",
                "message": "all: EIP-1559 tx pool support (#22898)\n\nThis pull request implements EIP-1559 compatible transaction pool with dual heap eviction ordering.\r\nIt is based on #22791\r\nThe eviction ordering scheme and the reasoning behind it is described here: https://gist.github.com/zsfelfoldi/9607ad248707a925b701f49787904fd6"
            }
        ],
        "2021-05-27": [
            {
                "date": "2021-05-27T18:53:33Z",
                "message": "cmd/devp2p/internal/ethtest: ignore block announcement in tx test (#22957)"
            },
            {
                "date": "2021-05-27T16:45:13Z",
                "message": "cmd/puppeth: remove outdated mist support (#22940)"
            },
            {
                "date": "2021-05-27T16:43:55Z",
                "message": "p2p/msgrate: return capacity as integer, clamp to max uint32 (#22943)\n\n* p2p/msgrate: return capacity as integer\r\n\r\n* eth/protocols/snap: remove conversions\r\n\r\n* p2p/msgrate: add overflow test\r\n\r\n* p2p/msgrate: make the capacity overflow test actually overflow\r\n\r\n* p2p/msgrate: clamp capacity to max int32\r\n\r\n* p2p/msgrate: fix min/max confusion"
            },
            {
                "date": "2021-05-27T11:30:25Z",
                "message": "crypto/secp256k1: fix undefined behavior in BitCurve.Add (#22621)\n\nThis commit changes the behavior of BitCurve.Add to be more inline\r\nwith btcd. It fixes two different bugs:\r\n\r\n1) When adding a point at infinity to another point, the other point\r\n   should be returned. While this is undefined behavior, it is better\r\n   to be more inline with the go standard library.\r\n   Thus (0,0) + (a, b) = (a,b)\r\n\r\n2) Adding the same point to itself produced the point at infinity.\r\n   This is incorrect, now doubleJacobian is used to correctly calculate it.\r\n   Thus (a,b) + (a,b) == 2* (a,b) and not (0,0) anymore.\r\n\r\nThe change also adds a differential fuzzer for Add, testing it against btcd.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-05-27T09:57:49Z",
                "message": "cmd/devp2p/internal/ethtest: add block hash announcement test (#22535)"
            },
            {
                "date": "2021-05-27T08:19:13Z",
                "message": "p2p/rlpx: reduce allocation and syscalls (#22899)\n\nThis change significantly improves the performance of RLPx message reads\r\nand writes. In the previous implementation, reading and writing of\r\nmessage frames performed multiple reads and writes on the underlying\r\nnetwork connection, and allocated a new []byte buffer for every read.\r\n\r\nIn the new implementation, reads and writes re-use buffers, and perform\r\nmuch fewer system calls on the underlying connection. This doubles the\r\ntheoretically achievable throughput on a single connection, as shown by\r\nthe benchmark result:\r\n\r\n    name             old speed      new speed       delta\r\n    Throughput-8     70.3MB/s \u00b1 0%  155.4MB/s \u00b1 0%  +121.11%  (p=0.000 n=9+8)\r\n\r\nThe change also removes support for the legacy, pre-EIP-8 handshake encoding.\r\nAs of May 2021, no actively maintained client sends this format."
            },
            {
                "date": "2021-05-27T08:13:35Z",
                "message": "cmd/utils: avoid large alloc in --dev mode (#22949)\n\n* cmd/utils: avoid 1Gb alloc in --dev mode\r\n\r\n* cmd/geth: avoid 512Mb alloc in genesis query tests"
            }
        ],
        "2021-05-26": [
            {
                "date": "2021-05-26T20:33:00Z",
                "message": "ethstats: fix typo in comment (#22952)\n\nTrivial but helpful to understanding."
            },
            {
                "date": "2021-05-26T07:58:09Z",
                "message": "core/state/snapshot: fix flaky tests (#22944)\n\n* core/state/snapshot: fix flaky tests\r\n\r\n* core/state/snapshot: fix tests"
            },
            {
                "date": "2021-05-26T06:39:41Z",
                "message": "internal/ethapi: remove unused vm.Config parameter of DoCall (#22942)"
            }
        ],
        "2021-05-25": [
            {
                "date": "2021-05-25T21:22:46Z",
                "message": "ethstats: fix URL parser for '@' or ':' in node name/password (#21640)\n\nFixes the case (example below) where the value passed\r\nto --ethstats flag would be parsed wrongly because the\r\nnode name and/or password value contained the special\r\ncharacters '@' or ':'\r\n\r\n    --ethstats \"ETC Labs Metrics @meowsbits\":mypass@ws://mordor.dash.fault.dev:3000"
            },
            {
                "date": "2021-05-25T21:09:11Z",
                "message": "cmd/devp2p: refactor eth test suite (#22843)\n\nThis PR refactors the eth test suite to make it more readable and\r\neasier to use. Some notable differences:\r\n\r\n- A new file helpers.go stores all of the methods used between\r\n  both eth66 and eth65 and below tests, as well as methods shared\r\n  among many test functions.\r\n- suite.go now contains all of the test functions for both eth65\r\n  tests and eth66 tests.\r\n- The utesting.T object doesn't get passed through to other helper methods,\r\n  but is instead only used within the scope of the test function,\r\n  whereas helper methods return errors, so only the test function\r\n  itself can fatal out in the case of an error.\r\n- The full test suite now only takes 13.5 seconds to run."
            },
            {
                "date": "2021-05-25T20:47:14Z",
                "message": "tests: get test name from testing.T (#22941)\n\nThere were 2 TODOs about that fix after Golang 1.8 release.\r\nIt's here for 3 years already, so now should be the right time."
            },
            {
                "date": "2021-05-25T20:37:30Z",
                "message": "p2p/nat: skip TestUPNP in non-CI environments if discover fails (#22877)\n\nFixes #21476"
            },
            {
                "date": "2021-05-25T20:30:21Z",
                "message": "internal/ethapi: merge CallArgs and SendTxArgs (#22718)\n\nThere are two transaction parameter structures defined in\r\nthe codebase, although for different purposes. But most of\r\nthe parameters are shared. So it's nice to reduce the code\r\nduplication by merging them together.\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2021-05-25T20:20:36Z",
                "message": "eth: unregister peer only when handler exits (#22908)\n\nThis removes the error log message that says \r\n\r\n    Ethereum peer removal failed ... err=\"peer not registered\"\r\n\r\nThe error happened because removePeer was called multiple\r\ntimes: once to disconnect the peer, and another time when the\r\nhandler exited. With this change, removePeer now has the sole\r\npurpose of disconnecting the peer. Unregistering happens exactly\r\nonce, when the handler exits."
            },
            {
                "date": "2021-05-25T19:56:25Z",
                "message": "rlp: optimize big.Int decoding for size <= 32 bytes (#22927)\n\nThis change grows the static integer buffer in Stream to 32 bytes,\r\nmaking it possible to decode 256bit integers without allocating a\r\ntemporary buffer.\r\n\r\nIn the recent commit 088da24, Stream struct size decreased from 120\r\nbytes down to 88 bytes. This commit grows the struct to 112 bytes again,\r\nbut the size change will not degrade performance because Stream\r\ninstances are internally cached in sync.Pool.\r\n\r\n    name             old time/op    new time/op    delta\r\n    DecodeBigInts-8    12.2\u00b5s \u00b1 0%     8.6\u00b5s \u00b1 4%  -29.58%  (p=0.000 n=9+10)\r\n\r\n    name             old speed      new speed      delta\r\n    DecodeBigInts-8   230MB/s \u00b1 0%   326MB/s \u00b1 4%  +42.04%  (p=0.000 n=9+10)"
            },
            {
                "date": "2021-05-25T08:14:39Z",
                "message": "rlp, tests/fuzzers/bls12381: gofmt (#22937)"
            }
        ],
        "2021-05-24": [
            {
                "date": "2021-05-24T12:34:38Z",
                "message": "core: make txpool free space calculation more accurate (#22933)"
            }
        ],
        "2021-05-22": [
            {
                "date": "2021-05-22T13:10:16Z",
                "message": "rlp: optimize byte array handling (#22924)\n\nThis change improves the performance of encoding/decoding [N]byte.\r\n\r\n    name                     old time/op    new time/op    delta\r\n    DecodeByteArrayStruct-8     336ns \u00b1 0%     246ns \u00b1 0%  -26.98%  (p=0.000 n=9+10)\r\n    EncodeByteArrayStruct-8     225ns \u00b1 1%     148ns \u00b1 1%  -34.12%  (p=0.000 n=10+10)\r\n\r\n    name                     old alloc/op   new alloc/op   delta\r\n    DecodeByteArrayStruct-8      120B \u00b1 0%       48B \u00b1 0%  -60.00%  (p=0.000 n=10+10)\r\n    EncodeByteArrayStruct-8     0.00B          0.00B          ~     (all equal)"
            },
            {
                "date": "2021-05-22T11:34:29Z",
                "message": "rlp: use atomic.Value for type cache (#22902)\n\nAll encoding/decoding operations read the type cache to find the\r\nwriter/decoder function responsible for a type. When analyzing CPU\r\nprofiles of geth during sync, I found that the use of sync.RWMutex in\r\ncache lookups appears in the profiles. It seems we are running into\r\nCPU cache contention problems when package rlp is heavily used\r\non all CPU cores during sync.\r\n\r\nThis change makes it use atomic.Value + a writer lock instead of\r\nsync.RWMutex. In the common case where the typeinfo entry is present in\r\nthe cache, we simply fetch the map and lookup the type."
            }
        ],
        "2021-05-21": [
            {
                "date": "2021-05-21T18:52:51Z",
                "message": "miner/stress: update stress tests (#22919)\n\nThis PR updates the miner stress tests and moves them to standalone\r\npackages, so that they can be run directly."
            },
            {
                "date": "2021-05-21T09:51:56Z",
                "message": "Merge pull request #22921 from karalabe/les-simplify-reqids\n\nles: generate random nums directly, not via strange conversions"
            },
            {
                "date": "2021-05-21T09:36:04Z",
                "message": "les: generate random nums directly, not via strange conversions"
            },
            {
                "date": "2021-05-21T08:33:59Z",
                "message": "core/rawdb: handle prefix in table.compact method (#22911)"
            },
            {
                "date": "2021-05-21T07:59:26Z",
                "message": "EIP-1559: miner changes (#22896)\n\n* core/types, miner: create TxWithMinerFee wrapper, add EIP-1559 support to TransactionsByMinerFeeAndNonce\r\n\r\nminer: set base fee when creating a new header, handle gas limit, log miner fees\r\n\r\n* all: rename to NewTransactionsByPriceAndNonce\r\n\r\n* core/types, miner: rename to NewTransactionsByPriceAndNonce + EffectiveTip\r\n\r\nminer: activate 1559 for testGenerateBlockAndImport tests\r\n\r\n* core,miner: revert naming to TransactionsByPriceAndTime\r\n\r\n* core/types/transaction: update effective tip calculation logic\r\n\r\n* miner: update aleut to london\r\n\r\n* core/types/transaction_test: use correct signer for 1559 txs + add back sender check\r\n\r\n* miner/worker: calculate gas target from gas limit\r\n\r\n* core, miner: fix block  gas limits for 1559\r\n\r\nCo-authored-by: Ansgar Dietrichs <adietrichs@gmail.com>\r\nCo-authored-by: lightclient@protonmail.com <lightclient@protonmail.com>"
            }
        ],
        "2021-05-20": [
            {
                "date": "2021-05-20T07:24:41Z",
                "message": "p2p/dnsdisc: fix crash when iterator closed before first call to Next (#22906)"
            }
        ],
        "2021-05-19": [
            {
                "date": "2021-05-19T12:09:03Z",
                "message": "eth, p2p/msgrate: move peer QoS tracking to its own package and use it for snap (#22876)\n\nThis change extracts the peer QoS tracking logic from eth/downloader, moving\r\nit into the new package p2p/msgrate. The job of msgrate.Tracker is determining\r\nsuitable timeout values and request sizes per peer.\r\n\r\nThe snap sync scheduler now uses msgrate.Tracker instead of the hard-coded 15s\r\ntimeout. This should make the sync work better on network links with high latency."
            }
        ],
        "2021-05-18": [
            {
                "date": "2021-05-18T17:54:10Z",
                "message": "cmd/utils: expand tilde in --jspath (#22900)"
            },
            {
                "date": "2021-05-18T10:10:27Z",
                "message": "rlp: improve decoder stream implementation (#22858)\n\nThis commit makes various cleanup changes to rlp.Stream.\r\n\r\n* rlp: shrink Stream struct\r\n\r\nThis removes a lot of unused padding space in Stream by reordering the\r\nfields. The size of Stream changes from 120 bytes to 88 bytes. Stream\r\ninstances are internally cached and reused using sync.Pool, so this does\r\nnot improve performance.\r\n\r\n* rlp: simplify list stack\r\n\r\nThe list stack kept track of the size of the current list context as\r\nwell as the current offset into it. The size had to be stored in the\r\nstack in order to subtract it from the remaining bytes of any enclosing\r\nlist in ListEnd. It seems that this can be implemented in a simpler\r\nway: just subtract the size from the enclosing list context in List instead."
            },
            {
                "date": "2021-05-18T09:48:41Z",
                "message": "p2p/discover/v4wire: use optional RLP field for EIP-868 seq (#22842)\n\nThis changes the definitions of Ping and Pong, adding an optional field\r\nfor the sequence number. This field was previously encoded/decoded using\r\nthe \"tail\" struct tag, but using \"optional\" is much nicer."
            },
            {
                "date": "2021-05-18T08:37:18Z",
                "message": "core/forkid: fix off-by-one bug (#22879)\n\n* forkid: added failing test\r\n\r\n* forkid: fixed off-by-one bug"
            },
            {
                "date": "2021-05-18T08:22:58Z",
                "message": "core/asm: fix the bug of \"00\" prefix number (#22883)"
            }
        ],
        "2021-05-17": [
            {
                "date": "2021-05-17T23:30:01Z",
                "message": "core/rawdb: wait for background freezing to exit when closing freezer (#22878)"
            },
            {
                "date": "2021-05-17T23:10:28Z",
                "message": "core: fix failing tests (#22888)\n\nThis PR fixes two errors that regressed when EIP-1559 was merged."
            },
            {
                "date": "2021-05-17T13:13:22Z",
                "message": "all: implement EIP-1559 (#22837)\n\nThis is the initial implementation of EIP-1559 in packages core/types and core.\r\nMining, RPC, etc. will be added in subsequent commits.\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\nCo-authored-by: lightclient@protonmail.com <lightclient@protonmail.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-05-17T08:49:23Z",
                "message": "consensus/ethash: change eip3554 from 9.5M to 9.7M (#22870)"
            },
            {
                "date": "2021-05-17T06:52:32Z",
                "message": "cmd/evm: return json error if unmarshalling from stdin fails (#22871)\n\n* cmd/evm: return json error if unmarshalling from stdin fails\r\n\r\n* cmd/evm: make error capitalizations uniform (all lowercase starts)\r\n\r\n* cmd/evm: capitalize error sent directly to stderror"
            }
        ],
        "2021-05-12": [
            {
                "date": "2021-05-12T08:05:39Z",
                "message": "cmd/geth, eth, core: snapshot dump + unify with trie dump (#22795)\n\n* cmd/geth, eth, core: snapshot dump + unify with trie dump\r\n\r\n* cmd/evm: dump API fixes\r\n\r\n* cmd/geth, core, eth: fix some remaining errors\r\n\r\n* cmd/evm: dump - add limit, support address startkey, address review concerns\r\n\r\n* cmd, core/state, eth: minor polishes, fix snap dump crash, unify format\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2021-05-12T07:19:08Z",
                "message": "Merge pull request #22840 from holiman/eip_3554\n\nconsensus/ethash: implement EIP-3554 (bomb delay)"
            }
        ],
        "2021-05-11": [
            {
                "date": "2021-05-11T15:12:10Z",
                "message": "core: ensure a broken trie invariant crashes genesis creation (#22780)\n\n* Ensure state could be created in ToBlock\r\n\r\n* Fix rebase errors\r\n\r\n* use a panic instead"
            },
            {
                "date": "2021-05-11T14:21:04Z",
                "message": "Merge pull request #22857 from karalabe/tracer-stack-fix-2\n\neth/tracers: do the JSON serialization via .js to capture C faults"
            },
            {
                "date": "2021-05-11T13:23:54Z",
                "message": "eth/tracers: do the JSON serialization via .js to capture C faults"
            },
            {
                "date": "2021-05-11T09:25:51Z",
                "message": "cmd/geth, eth/gasprice: add configurable threshold to gas price oracle (#22752)\n\nThis adds a cmd line parameter `--gpo.ignoreprice`, to make the gas price oracle ignore transactions below the given threshold."
            },
            {
                "date": "2021-05-11T08:43:35Z",
                "message": "core/types: remove support for legacy receipt/log storage encoding (#22852)\n\n* core/types: remove support for legacy receipt storage encoding\r\n\r\n* core/types: remove support for legacy log storage encoding"
            }
        ],
        "2021-05-10": [
            {
                "date": "2021-05-10T11:35:07Z",
                "message": "eth/protocols/snap: adapt to uint256 API changes (#22851)"
            },
            {
                "date": "2021-05-10T10:38:54Z",
                "message": "eth/protocols/eth, les: avoid Raw() when decoding HashOrNumber (#22841)\n\nGetting the raw value is not necessary to decode this type, and\r\ndecoding it directly from the stream is faster."
            },
            {
                "date": "2021-05-10T10:29:33Z",
                "message": "go.mod: upgrade to github.com/holiman/uint256 v1.2.0 (#22745)"
            },
            {
                "date": "2021-05-10T10:19:32Z",
                "message": "cmd/geth: remove reference to monitor command (#22844)\n\n'geth monitor' subcommand is no longer supported."
            },
            {
                "date": "2021-05-10T10:18:42Z",
                "message": "build: upgrade -dlgo version to Go 1.16.4 (#22848)"
            }
        ],
        "2021-05-07": [
            {
                "date": "2021-05-07T12:37:13Z",
                "message": "rlp: add support for optional struct fields (#22832)\n\nThis adds support for a new struct tag \"optional\". Using this tag, structs used\r\nfor RLP encoding/decoding can be extended in a backwards-compatible way,\r\nby adding new fields at the end."
            },
            {
                "date": "2021-05-07T12:04:54Z",
                "message": "consensus/ethash: implement EIP-3554 (bomb delay)"
            },
            {
                "date": "2021-05-07T08:31:01Z",
                "message": "consensus/clique: add some missing checks (#22836)"
            },
            {
                "date": "2021-05-07T06:25:32Z",
                "message": "core, params: implement EIP-3529 (#22733)\n\n* core, params: implement EIP-3529\r\n\r\n* core/vm: add london instructionset\r\n\r\n* core/vm: add method doc for EIP enabler\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2021-05-07T05:19:21Z",
                "message": "Merge pull request #22809 from holiman/alt_3541\n\ncore: implement EIP-3541"
            }
        ],
        "2021-04-29": [
            {
                "date": "2021-04-29T09:46:03Z",
                "message": "core/vm, params: implement EIP 3541"
            },
            {
                "date": "2021-04-29T14:33:45Z",
                "message": "core, eth: abort snapshot generation on snap sync and resume later"
            },
            {
                "date": "2021-04-29T20:14:57Z",
                "message": "core/types: add license header (#22781)"
            },
            {
                "date": "2021-04-29T17:30:37Z",
                "message": "github: add note about screenshots in issue template (#22764)"
            },
            {
                "date": "2021-04-29T17:30:16Z",
                "message": "evm: remove unused errors left after EIP-2315 removal (#22767)"
            },
            {
                "date": "2021-04-29T17:23:07Z",
                "message": "docs: fix docstring on read head block (#22776)"
            },
            {
                "date": "2021-04-29T16:36:22Z",
                "message": "add myself as code owner for catalyst (#22778)"
            },
            {
                "date": "2021-04-29T14:42:21Z",
                "message": "catalyst: check if block exists in assemble-block call with unknown parent-hash (#22770)"
            },
            {
                "date": "2021-04-29T09:03:15Z",
                "message": "Merge pull request #22765 from karalabe/revert-eth-hashrate\n\neth: restore eth_hashrate API endpoint"
            },
            {
                "date": "2021-04-29T09:02:30Z",
                "message": "eth: restore eth_hashrate API endpoint"
            },
            {
                "date": "2021-04-29T08:29:28Z",
                "message": "Merge pull request #22762 from karalabe/snap-lower-complexity\n\ncore, eth, ethdb, trie: simplify range proofs"
            }
        ],
        "2021-05-06": [
            {
                "date": "2021-05-06T09:07:42Z",
                "message": "all: define London+baikal, undefine yolov3, add london override flag (#22822)\n\n* all: define London+baikal, undefine yolov3, add london override flag\r\n\r\n* cmd, core, params: add baikal genesis definition"
            },
            {
                "date": "2021-05-06T08:46:27Z",
                "message": "core/vm: avoid duplicate log in json logger (#22825)"
            }
        ],
        "2021-05-05": [
            {
                "date": "2021-05-05T11:21:13Z",
                "message": "params: begin v1.10.4 release cycle"
            },
            {
                "date": "2021-05-05T11:20:06Z",
                "message": "params: go-ethereum v1.10.3 stable"
            },
            {
                "date": "2021-05-05T10:27:27Z",
                "message": "cmd/devp2p/internal/ethtest: send simultaneous requests on one connection (#22801)\n\nThis changes the SimultaneousRequests test to send the requests from the same\r\nconnection, as it doesn't really make sense to test whether a node can respond\r\nto two requests with different request IDs from separate connections."
            },
            {
                "date": "2021-05-05T10:19:51Z",
                "message": "build: fix windows installer build for NSIS v3.05 (#22821)\n\nWith the update to a newer AppVeyor build image, creating the Windows\r\ninstaller no longer worked because of a string quoting error in EnvVarUpdate.nsh.\r\n\r\nThis applies the fix recommended in https://stackoverflow.com/questions/62081765."
            }
        ],
        "2021-05-04": [
            {
                "date": "2021-05-04T20:39:09Z",
                "message": "appveyor.yml: upgrade to VisualStudio 2019 image (#22811)"
            },
            {
                "date": "2021-05-04T19:45:45Z",
                "message": "build: fix iOS framework build (#22813)\n\nThis fixes a regression introduced in #22804."
            },
            {
                "date": "2021-05-04T19:45:21Z",
                "message": "go.mod: go mod tidy (#22814)\n\nThis updates go.mod for the addition of golang.org/x/sync."
            },
            {
                "date": "2021-05-04T11:01:20Z",
                "message": "build: improve cross compilation setup (#22804)\n\nThis PR cleans up the CI build system and fixes a couple of issues.\r\n\r\n- The go tool launcher code has been moved to internal/build. With the new\r\n  toolchain functions, the environment of the host Go (i.e. the one that built\r\n  ci.go) and the target Go (i.e. the toolchain downloaded by -dlgo) are isolated\r\n  more strictly. This is important to make cross compilation and -dlgo work\r\n  correctly in more cases.\r\n- The -dlgo option now skips the download and uses the host Go if the running Go\r\n  version matches dlgoVersion exactly.\r\n- The 'test' command now supports -dlgo, -cc and -arch. Running unit tests with\r\n  foreign GOARCH is occasionally useful. For example, it can be used to run\r\n  32-bit tests on Windows. It can also be used to run darwin/amd64 tests on\r\n  darwin/arm64 using Rosetta 2.\r\n- The 'aar', 'xcode' and 'xgo' commands now use a slightly different method to\r\n  install external tools. They previously used `go get`, but this comes with the\r\n  annoying side effect of modifying go.mod. They now use `go install` instead,\r\n  which is the recommended way of installing tools without modifying the local\r\n  module.\r\n- The old build warning about outdated Go version has been removed because we're\r\n  much better at keeping backwards compatibility now."
            },
            {
                "date": "2021-05-04T09:29:32Z",
                "message": "cmd/utils: use eth DNS tree for snap discovery (#22808)\n\nThis removes auto-configuration of the snap.*.ethdisco.net DNS discovery tree.\r\nSince measurements have shown that > 75% of nodes in all.*.ethdisco.net support\r\nsnap, we have decided to retire the dedicated index for snap and just use the eth\r\ntree instead.\r\n\r\nThe dial iterators of eth and snap now use the same DNS tree in the default configuration,\r\nso both iterators should use the same DNS discovery client instance. This ensures that\r\nthe record cache and rate limit are shared. Records will not be requested multiple times.\r\n\r\nWhile testing the change, I noticed that duplicate DNS requests do happen even\r\nwhen the client instance is shared. This is because the two iterators request the tree\r\nroot, link tree root, and first levels of the tree in lockstep. To avoid this problem, the\r\nchange also adds a singleflight.Group instance in the client. When one iterator\r\nattempts to resolve an entry which is already being resolved, the singleflight object\r\nwaits for the existing resolve call to finish and returns the entry to both places."
            },
            {
                "date": "2021-05-04T07:54:25Z",
                "message": "Merge pull request #22803 from karalabe/silence-scary-warning\n\neth: don't print db upgrade warning on db init"
            }
        ],
        "2021-05-03": [
            {
                "date": "2021-05-03T12:42:43Z",
                "message": "eth: don't print db upgrade warning on db init"
            },
            {
                "date": "2021-05-03T12:37:46Z",
                "message": "Merge pull request #22739 from holiman/remove_code\n\ncore: remove old conversion to shuffle leveldb blocks into ancients"
            },
            {
                "date": "2021-05-03T12:29:05Z",
                "message": "cmd/utils: don't crash on nonexistent datadir (#22738)"
            },
            {
                "date": "2021-05-03T12:28:02Z",
                "message": "params: remove dependency on crypto (#22788)\n\n* params: remove dependency on crypto\r\n\r\nPackage params should not depend on package crypto because building\r\ncrypto requires cgo.\r\n\r\nSince build/ci.go needs package params to get the go-ethereum version\r\nnumber, C code must be compiled in order to run the build tool, which is\r\nannoying for certain cross-compilation setups.\r\n\r\n* params: add SectionHead"
            },
            {
                "date": "2021-05-03T08:58:00Z",
                "message": "core/vm: fix interpreter comments (#22797)\n\n* Fix interpreter comment\r\n\r\n* Fix comment"
            }
        ],
        "2021-05-01": [
            {
                "date": "2021-05-01T11:19:24Z",
                "message": "core/vm: clean up contract creation error handling (#22766)\n\nDo not keep separate flag for \"max code size exceeded\" case, but instead\r\nassign appropriate error for it sooner."
            }
        ],
        "2021-04-30": [
            {
                "date": "2021-04-30T20:47:36Z",
                "message": "cmd/devp2p: fix flakey tests in CI (#22757)\n\nThis PR fixes a couple of issues in the eth test suite that caused flakiness when run in the CI."
            },
            {
                "date": "2021-04-30T18:12:09Z",
                "message": "Merge pull request #22789 from karalabe/snap-fix-batch\n\neth/protocols/snap: use storage batch, not account batch in st task"
            },
            {
                "date": "2021-04-30T15:24:34Z",
                "message": "eth/protocols/snap: use storage batch, not account batch in st task"
            },
            {
                "date": "2021-04-30T14:04:05Z",
                "message": "Merge pull request #22777 from karalabe/snapshots-abort-resume-on-sync\n\ncore, eth: abort snapshot generation on snap sync and resume later"
            },
            {
                "date": "2021-04-30T11:10:12Z",
                "message": "core/state: remove toAddr helper in tests (#22772)"
            },
            {
                "date": "2021-04-30T11:00:48Z",
                "message": "eth/filters: fix comment on PublicFilterAPI timeoutLoop (#22782)"
            },
            {
                "date": "2021-04-30T10:52:25Z",
                "message": "README.md: update commands table, add note about web3.js version (#22748)"
            },
            {
                "date": "2021-04-30T10:50:02Z",
                "message": "core: fix typo in comment (#22773)"
            },
            {
                "date": "2021-04-30T10:49:13Z",
                "message": "core/vm: replace repeated string with variable in tests (#22774)"
            },
            {
                "date": "2021-04-30T10:47:05Z",
                "message": "core: remove unused else branch in reorg (#22783)"
            },
            {
                "date": "2021-04-30T10:46:34Z",
                "message": "core/vm: fix typo in comment (#22785)"
            }
        ],
        "2021-04-28": [
            {
                "date": "2021-04-28T20:09:15Z",
                "message": "core, eth, ethdb, trie: simplify range proofs"
            },
            {
                "date": "2021-04-28T19:47:48Z",
                "message": "trie: remove redundant returns + use stacktrie where applicable (#22760)\n\n* trie: add benchmark for proofless range\r\n\r\n* trie: remove unused returns + use stacktrie"
            },
            {
                "date": "2021-04-28T19:40:38Z",
                "message": "Merge pull request #22761 from karalabe/snap-small-packets\n\neth/protocols/snap: lower the packet size to avoid overloading link"
            },
            {
                "date": "2021-04-28T19:38:38Z",
                "message": "cmd/devp2p: fix flaky SameRequestID test (#22754)"
            },
            {
                "date": "2021-04-28T18:40:06Z",
                "message": "eth/protocols/snap: lower the packet size to avoid overloading link"
            },
            {
                "date": "2021-04-28T12:18:25Z",
                "message": "les, tests: fix les clientpool (#22756)\n\n* les, tests: fix les clientpool\r\n\r\n* tests: disable debug mode\r\n\r\n* les: polish code"
            },
            {
                "date": "2021-04-28T10:04:25Z",
                "message": "tests/fuzzers: crypto/bn256 and crypto/bls12381 tests against gnark-crypto  (#22755)\n\nAdd more cross-fuzzers to fuzz bls with gnark versus geth's own bls12-381 library"
            },
            {
                "date": "2021-04-28T07:06:34Z",
                "message": "eth/gasprice: improve stability of estimated price (#22722)\n\nThis PR makes the gas price oracle ignore transactions priced at `<=1 wei`."
            },
            {
                "date": "2021-04-28T06:48:07Z",
                "message": "cmd/devp2p, eth/protocols/eth: fix tests + make sanity checks earlier (#22749)"
            }
        ],
        "2021-04-27": [
            {
                "date": "2021-04-27T18:49:54Z",
                "message": "Merge pull request #22753 from karalabe/p2p-tracker-stopfix\n\np2p/tracker: only reschedule wake if previous didn't run"
            },
            {
                "date": "2021-04-27T18:47:59Z",
                "message": "p2p/tracker: only reschedule wake if previous didn't run"
            },
            {
                "date": "2021-04-27T18:43:07Z",
                "message": "Merge pull request #22751 from holiman/tracker_fix\n\np2p/tracker: properly clean up fulfilled requests"
            },
            {
                "date": "2021-04-27T16:09:34Z",
                "message": "p2p/tracker: properly clean up fulfilled requests"
            },
            {
                "date": "2021-04-27T14:19:59Z",
                "message": "eth/protocols/snap: generate storage trie from full dirty snap data (#22668)\n\n* eth/protocols/snap: generate storage trie from full dirty snap data\r\n\r\n* eth/protocols/snap: get rid of some more dead code\r\n\r\n* eth/protocols/snap: less frequent logs, also log during trie generation\r\n\r\n* eth/protocols/snap: implement dirty account range stack-hashing\r\n\r\n* eth/protocols/snap: don't loop on account trie generation\r\n\r\n* eth/protocols/snap: fix account format in trie\r\n\r\n* core, eth, ethdb: glue snap packets together, but not chunks\r\n\r\n* eth/protocols/snap: print completion log for snap phase\r\n\r\n* eth/protocols/snap: extended tests\r\n\r\n* eth/protocols/snap: make testcase pass\r\n\r\n* eth/protocols/snap: fix account stacktrie commit without defer\r\n\r\n* ethdb: fix key counts on reset\r\n\r\n* eth/protocols: fix typos\r\n\r\n* eth/protocols/snap: make better use of delivered data (#44)\r\n\r\n* eth/protocols/snap: make better use of delivered data\r\n\r\n* squashme\r\n\r\n* eth/protocols/snap: reduce chunking\r\n\r\n* squashme\r\n\r\n* eth/protocols/snap: reduce chunking further\r\n\r\n* eth/protocols/snap: break out hash range calculations\r\n\r\n* eth/protocols/snap: use sort.Search instead of looping\r\n\r\n* eth/protocols/snap: prevent crash on storage response with no keys\r\n\r\n* eth/protocols/snap: nitpicks all around\r\n\r\n* eth/protocols/snap: clear heal need on 1-chunk storage completion\r\n\r\n* eth/protocols/snap: fix range chunker, add tests\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>\r\n\r\n* trie: fix test API error\r\n\r\n* eth/protocols/snap: fix some further liter issues\r\n\r\n* eth/protocols/snap: fix accidental batch reuse\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2021-04-27T11:21:41Z",
                "message": "core/vm: make gas cost reporting to tracers correct (#22702)\n\nPreviously, the makeCallVariantGasCallEIP2929 charged the cold account access cost directly, leading to an incorrect gas cost passed to the tracer from the main execution loop.\r\nThis change still temporarily charges the cost (to allow for an accurate calculation of the available gas for the call), but then afterwards refunds it and instead returns the correct total gas cost to be then properly charged in the main loop."
            },
            {
                "date": "2021-04-27T10:43:47Z",
                "message": "build: upgrade -dlgo version to Go 1.16.3 (#22746)"
            },
            {
                "date": "2021-04-27T09:36:57Z",
                "message": "cmd/puppeth: add support for authentication via ssh agent (#22634)"
            },
            {
                "date": "2021-04-27T09:26:46Z",
                "message": "Merge pull request #21467 from holiman/minor_ethashfix\n\nconsensus/ethash: less lookups of block data"
            },
            {
                "date": "2021-04-27T08:49:06Z",
                "message": "build: upgrade to golangci-lint v1.39.0 (#22696)\n\n* build: upgrade to golangci-lint v1.39.0\r\n\r\n* consensus/ethash: fix go vet warning regarding reflect.SliceHeader\r\n\r\n* eth/catalyst: fix lint issue\r\n\r\n* consensus/ethash: fix bug in memoryMapFile"
            },
            {
                "date": "2021-04-27T07:44:59Z",
                "message": "les: polish code (#22625)\n\n* les: polish code\r\n\r\n* les/vflus/server: fixes\r\n\r\n* les: fix lint"
            }
        ],
        "2021-04-26": [
            {
                "date": "2021-04-26T16:19:07Z",
                "message": "core/rawdb: fix datarace in freezer (#22728)\n\nThe Append / truncate operations were racy. When a datafile reaches 2Gb, a new file is needed. For this operation, we require a writelock, which is not needed in the 99.99% of all cases where the data does fit in the current head-file.\r\n\r\nThis transition from readlock to writelock was incorrect, and as the readlock was released, a truncate operation could slip in between, and truncate the data. This would have been fine, however, the Append operation continued writing as if no truncation had occurred, e.g writing item 5 where item 0 should reside.\r\n\r\nThis PR changes the behaviour, so that if when we run into the situation that a new file is needed, it aborts, and retries, this time with a writelock.\r\n\r\nThe outcome of the situation described above, running on this PR, would instead be that the Append operation exits with a failure."
            },
            {
                "date": "2021-04-26T12:27:56Z",
                "message": "core: remove old conversion to shuffle leveldb blocks into ancients"
            }
        ],
        "2021-04-23": [
            {
                "date": "2021-04-23T16:18:10Z",
                "message": "p2p/discover: improve discv5 handling of IPv4-in-IPv6 addresses (#22703)\n\nWhen receiving PING from an IPv4 address over IPv6, the implementation sent\r\nback a IPv4-in-IPv6 address. This change makes it reflect the IPv4 address."
            },
            {
                "date": "2021-04-23T16:14:39Z",
                "message": "cmd/devp2p/internal/ethtest: add more tx propagation tests (#22630)\n\nThis adds a test for large tx announcement messages, as well as a test to\r\ncheck that announced tx hashes are requested by the node."
            },
            {
                "date": "2021-04-23T11:39:18Z",
                "message": "core/state/snapshot, true: reuse dirty data instead of hitting disk when generating (#22667)\n\n* core/state/snapshot: reuse memory data instead of hitting disk when generating\r\n\r\n* trie: minor nitpicks wrt the resolver optimization\r\n\r\n* core/state/snapshot, trie: use key/value store for resolver\r\n\r\n* trie: fix linter\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2021-04-23T09:15:42Z",
                "message": "cmd/devp2p/internal/ethtest: run test suite as Go unit test (#22698)\n\nThis change adds a Go unit test that runs the protocol test suite\r\nagainst the go-ethereum implementation of the eth protocol."
            }
        ],
        "2021-04-22": [
            {
                "date": "2021-04-22T08:42:46Z",
                "message": "eth/protocols, prp/tracker: add support for req/rep rtt tracking (#22608)\n\n* eth/protocols, prp/tracker: add support for req/rep rtt tracking\r\n\r\n* p2p/tracker: sanity cap the number of pending requests\r\n\r\n* pap/tracker: linter <3\r\n\r\n* p2p/tracker: disable entire tracker if no metrics are enabled"
            }
        ],
        "2021-04-21": [
            {
                "date": "2021-04-21T13:51:30Z",
                "message": "rpc: add HTTPError type for HTTP error responses (#22677)\n\nThe new error type is returned by client operations contains details of\r\nthe response error code and response body.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-04-21T11:03:33Z",
                "message": "accounts/external, signer/core: add support for EIP-2930 transactions (#22585)\n\nThis adds support for signing EIP-2930 with clef."
            },
            {
                "date": "2021-04-21T10:25:26Z",
                "message": "trie: improve the node iterator seek operation (#22470)\n\nThis change improves the efficiency of the nodeIterator seek\r\noperation. Previously, seek essentially ran the iterator forward\r\nuntil it found the matching node. With this change, it skips\r\nover fullnode children and avoids resolving them from the database."
            },
            {
                "date": "2021-04-21T08:19:28Z",
                "message": "les: fix goroutine leaks in tests (#22707)"
            },
            {
                "date": "2021-04-21T08:18:27Z",
                "message": "eth/tracers, internal/ethapi: fix typos causing lint issue (#22711)"
            },
            {
                "date": "2021-04-21T07:21:22Z",
                "message": "eth, internal: extend the TraceCall API (#22245)\n\nAdds an an optional parameter `overrides *map[common.Address]account` to the `eth_call` API in order for the caller to  can customize the state."
            }
        ],
        "2021-04-20": [
            {
                "date": "2021-04-20T10:28:20Z",
                "message": "tests: disable blockchain tests based on general state tests (#22704)"
            },
            {
                "date": "2021-04-20T08:54:41Z",
                "message": "go.mod: upgrade gopsutils to v3.21.4 (#22693)\n\nThis fixes the OpenBSD/arm64 build."
            },
            {
                "date": "2021-04-20T08:42:02Z",
                "message": "trie: make stacktrie support binary marshal/unmarshal (#22685)"
            },
            {
                "date": "2021-04-20T08:29:36Z",
                "message": "ethash: no block reward in catalyst mode (#22697)"
            },
            {
                "date": "2021-04-20T05:27:46Z",
                "message": "core: nuke legacy snapshot supporting (#22663)"
            }
        ],
        "2021-04-19": [
            {
                "date": "2021-04-19T12:54:55Z",
                "message": "cmd/devp2p: add dns nuke-route53 command (#22695)"
            },
            {
                "date": "2021-04-19T12:54:38Z",
                "message": "cmd/devp2p: add support for -limit option in nodeset filter command (#22694)\n\nThe new -limit option makes the filter operate on top N nodes by score.\r\nThis also adds ENR attribute stats in the nodeset info command.\r\nNode set commands are now documented in README."
            }
        ],
        "2021-04-18": [
            {
                "date": "2021-04-18T14:53:01Z",
                "message": "Merge pull request #22686 from holiman/minor_fixes\n\ncore/state/snapshot: avoid copybytes for stacktrie"
            }
        ],
        "2021-04-16": [
            {
                "date": "2021-04-16T19:29:22Z",
                "message": "eth/catalyst: add catalyst API prototype (#22641)\n\nThis change adds the --catalyst flag, enabling an RPC API for eth2 integration.\r\nIn this initial version, catalyst mode also disables all peer-to-peer networking.\r\n\r\nCo-authored-by: Mikhail Kalinin <noblesse.knight@gmail.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-04-16T12:58:23Z",
                "message": "core/state/snapshot: avoid copybytes for stacktrie"
            },
            {
                "date": "2021-04-16T12:21:01Z",
                "message": "trie: make stacktrie not mutate input values (#22673)\n\nThe stacktrie is a bit un-untuitive, API-wise: since it mutates input values.\r\nSuch behaviour is dangerous, and easy to get wrong if the calling code 'forgets' this quirk. The behaviour is fixed by this PR, so that the input values are not modified by the stacktrie. \r\n\r\nNote: just as with the Trie, the stacktrie still references the live input objects, so it's still _not_ safe to mutate the values form the callsite."
            },
            {
                "date": "2021-04-16T07:52:33Z",
                "message": "les/vflux/server: fix priority cornercase causing fuzzer timeout (#22650)\n\n* les/vflux/server: fix estimatePriority corner case\r\n\r\n* les/vflux/server: simplify inactiveAllowance == 0 case"
            },
            {
                "date": "2021-04-16T06:27:39Z",
                "message": "Merge pull request #22678 from karalabe/snap-ephemeral-channels\n\neth/protocols/snap: use ephemeral channels to avoid cross-sync delveries"
            },
            {
                "date": "2021-04-16T06:27:16Z",
                "message": "log: fix formatting of big.Int (#22679)\n\n* log: fix formatting of big.Int\r\n\r\nThe implementation of formatLogfmtBigInt had two issues: it crashed when\r\nthe number was actually large enough to hit the big integer case, and\r\nmodified the big.Int while formatting it.\r\n\r\n* log: don't call FormatLogfmtInt64 for int16\r\n\r\n* log: separate from decimals back, not front\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            }
        ],
        "2021-04-15": [
            {
                "date": "2021-04-15T22:32:16Z",
                "message": "core: add TestGenesisHashes and fix YoloV3 (#22559)\n\nThis adds simple unit test checking if the hard-coded genesis\r\nhash values in package params match the actual genesis block hashes."
            },
            {
                "date": "2021-04-15T18:01:16Z",
                "message": "eth/protocols/snap: use ephemeral channels to avoid cross-sync delveries"
            },
            {
                "date": "2021-04-15T17:35:00Z",
                "message": "all: make logs a bit easier on the eye to digest (#22665)\n\n* all: add thousandths separators for big numbers on log messages\r\n\r\n* p2p/sentry: drop accidental file\r\n\r\n* common, log: add fast number formatter\r\n\r\n* common, eth/protocols/snap: simplifty fancy num types\r\n\r\n* log: handle nil big ints"
            }
        ],
        "2021-04-14": [
            {
                "date": "2021-04-14T23:14:09Z",
                "message": "Merge pull request #22666 from karalabe/remove-stale-datatype\n\ncore/types: drop some relice data types"
            },
            {
                "date": "2021-04-14T20:39:42Z",
                "message": "core/types: drop some relice data types"
            },
            {
                "date": "2021-04-14T20:23:11Z",
                "message": "core, eth: faster snapshot generation (#22504)\n\n* eth/protocols: persist received state segments\r\n\r\n* core: initial implementation\r\n\r\n* core/state/snapshot: add tests\r\n\r\n* core, eth: updates\r\n\r\n* eth/protocols/snapshot: count flat state size\r\n\r\n* core/state: add metrics\r\n\r\n* core/state/snapshot: skip unnecessary deletion\r\n\r\n* core/state/snapshot: rename\r\n\r\n* core/state/snapshot: use the global batch\r\n\r\n* core/state/snapshot: add logs and fix wiping\r\n\r\n* core/state/snapshot: fix\r\n\r\n* core/state/snapshot: save generation progress even if the batch is empty\r\n\r\n* core/state/snapshot: fixes\r\n\r\n* core/state/snapshot: fix initial account range length\r\n\r\n* core/state/snapshot: fix initial account range\r\n\r\n* eth/protocols/snap: store flat states during the healing\r\n\r\n* eth/protocols/snap: print logs\r\n\r\n* core/state/snapshot: refactor (#4)\r\n\r\n* core/state/snapshot: refactor\r\n\r\n* core/state/snapshot: tiny fix and polish\r\n\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>\r\n\r\n* core, eth: fixes\r\n\r\n* core, eth: fix healing writer\r\n\r\n* core, trie, eth: fix paths\r\n\r\n* eth/protocols/snap: fix encoding\r\n\r\n* eth, core: add debug log\r\n\r\n* core/state/generate: release iterator asap (#5)\r\n\r\ncore/state/snapshot: less copy\r\n\r\ncore/state/snapshot: revert split loop\r\n\r\ncore/state/snapshot: handle storage becoming empty, improve test robustness\r\n\r\ncore/state: test modified codehash\r\n\r\ncore/state/snapshot: polish\r\n\r\n* core/state/snapshot: optimize stats counter\r\n\r\n* core, eth: add metric\r\n\r\n* core/state/snapshot: update comments\r\n\r\n* core/state/snapshot: improve tests\r\n\r\n* core/state/snapshot: replace secure trie with standard trie\r\n\r\n* core/state/snapshot: wrap return as the struct\r\n\r\n* core/state/snapshot: skip wiping correct states\r\n\r\n* core/state/snapshot: updates\r\n\r\n* core/state/snapshot: fixes\r\n\r\n* core/state/snapshot: fix panic due to reference flaw in closure\r\n\r\n* core/state/snapshot: fix errors in state generation logic + fix log output\r\n\r\n* core/state/snapshot: remove an error case\r\n\r\n* core/state/snapshot: fix condition-check for exhausted snap state\r\n\r\n* core/state/snapshot: use stackTrie for small tries\r\n\r\n* core/state/snapshot: don't resolve small storage tries in vain\r\n\r\n* core/state/snapshot: properly clean up storage of deleted accounts\r\n\r\n* core/state/snapshot: avoid RLP-encoding in some cases + minor nitpicks\r\n\r\n* core/state/snapshot: fix error (+testcase)\r\n\r\n* core/state/snapshot: clean up tests a bit\r\n\r\n* core/state/snapshot: work in progress on better tests\r\n\r\n* core/state/snapshot: polish code\r\n\r\n* core/state/snapshot: fix trie iteration abortion trigger\r\n\r\n* core/state/snapshot: fixes flaws\r\n\r\n* core/state/snapshot: remove panic\r\n\r\n* core/state/snapshot: fix abort\r\n\r\n* core/state/snapshot: more tests (plus failing testcase)\r\n\r\n* core/state/snapshot: more testcases + fix for failing test\r\n\r\n* core/state/snapshot: testcase for malformed data\r\n\r\n* core/state/snapshot: some test nitpicks\r\n\r\n* core/state/snapshot: improvements to logging\r\n\r\n* core/state/snapshot: testcase to demo error in abortion\r\n\r\n* core/state/snapshot: fix abortion\r\n\r\n* cmd/geth: make verify-state report the root\r\n\r\n* trie: fix failing test\r\n\r\n* core/state/snapshot: add timer metrics\r\n\r\n* core/state/snapshot: fix metrics\r\n\r\n* core/state/snapshot: udpate tests\r\n\r\n* eth/protocols/snap: write snapshot account even if code or state is needed\r\n\r\n* core/state/snapshot: fix diskmore check\r\n\r\n* core/state/snapshot: review fixes\r\n\r\n* core/state/snapshot: improve error message\r\n\r\n* cmd/geth: rename 'error' to 'err' in logs\r\n\r\n* core/state/snapshot: fix some review concerns\r\n\r\n* core/state/snapshot, eth/protocols/snap: clear snapshot marker when starting/resuming snap sync\r\n\r\n* core: add error log\r\n\r\n* core/state/snapshot: use proper timers for metrics collection\r\n\r\n* core/state/snapshot: address some review concerns\r\n\r\n* eth/protocols/snap: improved log message\r\n\r\n* eth/protocols/snap: fix heal logs to condense infos\r\n\r\n* core/state/snapshot: wait for generator termination before restarting\r\n\r\n* core/state/snapshot: revert timers to counters to track total time\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2021-04-14T10:44:32Z",
                "message": "eth/fetcher: avoid spurious timer events at startup (#22652)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2021-04-13": [
            {
                "date": "2021-04-13T21:51:46Z",
                "message": "cmd/faucet: support testnet flags in the faucet (#22545)\n\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2021-04-13T13:45:30Z",
                "message": "cmd/geth: add db-command to inspect freezer index (#22633)\n\nThis PR makes it easier to inspect the freezer index, which could be useful to investigate things like #22111"
            },
            {
                "date": "2021-04-13T08:00:48Z",
                "message": "accounts: documentation fixes (#22645)\n\n* replaces `an chance` with `a chance`\r\n* replaces `SignHashWithPassphrase` with `SignTextWithPassphrase` as there was no SignHashWithPasspharse function in the file"
            }
        ],
        "2021-04-09": [
            {
                "date": "2021-04-09T10:52:21Z",
                "message": "Merge pull request #22636 from karalabe/drop-eth64\n\neth, les: drop support for eth/64"
            }
        ],
        "2021-04-08": [
            {
                "date": "2021-04-08T15:06:03Z",
                "message": "eth, les: drop support for eth/64, fix eth/66 tests"
            },
            {
                "date": "2021-04-08T11:04:30Z",
                "message": "params: begin v1.10.3 release cycle"
            },
            {
                "date": "2021-04-08T11:02:25Z",
                "message": "params: release go-ethereum v1.10.2 stable"
            },
            {
                "date": "2021-04-08T10:27:01Z",
                "message": "Merge pull request #22632 from karalabe/cht-1.10.2\n\nparams: update CHTs for v1.10.2"
            },
            {
                "date": "2021-04-08T10:23:34Z",
                "message": "params: update CHTs for v1.10.2"
            }
        ],
        "2021-04-07": [
            {
                "date": "2021-04-07T15:52:29Z",
                "message": "Merge pull request #22629 from karalabe/fix-chain-tracing-from-0\n\neth: fix tracing state retrieval if requesting the non-dirty genesis"
            },
            {
                "date": "2021-04-07T15:14:24Z",
                "message": "eth: fix tracing state retrieval if requesting the non-dirty genesis"
            },
            {
                "date": "2021-04-07T14:54:31Z",
                "message": "core, eth, internal/ethapi: create access list RPC API (#22550)\n\n* core/vm: implement AccessListTracer\r\n\r\n* eth: implement debug.createAccessList\r\n\r\n* core/vm: fixed nil panics in accessListTracer\r\n\r\n* eth: better error messages for createAccessList\r\n\r\n* eth: some fixes on CreateAccessList\r\n\r\n* eth: allow for provided accesslists\r\n\r\n* eth: pass accesslist by value\r\n\r\n* eth: remove created acocunt from accesslist\r\n\r\n* core/vm: simplify access list tracer\r\n\r\n* core/vm: unexport accessListTracer\r\n\r\n* eth: return best guess if al iteration times out\r\n\r\n* eth: return best guess if al iteration times out\r\n\r\n* core: docstring, unexport methods\r\n\r\n* eth: typo\r\n\r\n* internal/ethapi: move createAccessList to eth package\r\n\r\n* internal/ethapi: remove reexec from createAccessList\r\n\r\n* internal/ethapi: break if al is equal to last run, not if gas is equal\r\n\r\n* internal/web3ext: fixed arguments\r\n\r\n* core/types: fixed equality check for accesslist\r\n\r\n* core/types: no hardcoded vals\r\n\r\n* core, internal: simplify access list generation, make it precise\r\n\r\n* core/vm: fix typo\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2021-04-07T07:30:26Z",
                "message": "eth, les: fix tracers (#22473)\n\n* eth, les: fix tracer\r\n\r\n* eth: isolate live trie database in tracer\r\n\r\n* eth: fix nil\r\n\r\n* eth: fix\r\n\r\n* eth, les: add checkLive param\r\n\r\n* eth/tracer: fix"
            }
        ],
        "2021-04-06": [
            {
                "date": "2021-04-06T18:42:50Z",
                "message": "les: move client pool to les/vflux/server (#22495)\n\n* les: move client pool to les/vflux/server\r\n\r\n* les/vflux/server: un-expose NodeBalance, remove unused fn, fix bugs\r\n\r\n* tests/fuzzers/vflux: add ClientPool fuzzer\r\n\r\n* les/vflux/server: fixed balance tests\r\n\r\n* les: rebase fix\r\n\r\n* les/vflux/server: fixed more bugs\r\n\r\n* les/vflux/server: unexported NodeStateMachine fields and flags\r\n\r\n* les/vflux/server: unexport all internal components and functions\r\n\r\n* les/vflux/server: fixed priorityPool test\r\n\r\n* les/vflux/server: polish balance\r\n\r\n* les/vflux/server: fixed mutex locking error\r\n\r\n* les/vflux/server: priorityPool bug fixed\r\n\r\n* common/prque: make Prque wrap-around priority handling optional\r\n\r\n* les/vflux/server: rename funcs, small optimizations\r\n\r\n* les/vflux/server: fixed timeUntil\r\n\r\n* les/vflux/server: separated balance.posValue and negValue\r\n\r\n* les/vflux/server: polish setup\r\n\r\n* les/vflux/server: enforce capacity curve monotonicity\r\n\r\n* les/vflux/server: simplified requestCapacity\r\n\r\n* les/vflux/server: requestCapacity with target range, no iterations in SetCapacity\r\n\r\n* les/vflux/server: minor changes\r\n\r\n* les/vflux/server: moved default factors to balanceTracker\r\n\r\n* les/vflux/server: set inactiveFlag in priorityPool\r\n\r\n* les/vflux/server: moved related metrics to vfs package\r\n\r\n* les/vflux/client: make priorityPool temp state logic cleaner\r\n\r\n* les/vflux/server: changed log.Crit to log.Error\r\n\r\n* add vflux fuzzer to oss-fuzz\r\n\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
            },
            {
                "date": "2021-04-06T18:02:52Z",
                "message": "consensus/ethash: replace a magic number with it's constant (#22618)"
            },
            {
                "date": "2021-04-06T14:23:35Z",
                "message": "cmd/utils: move cache sanity check to SetEthConfig (#22510)\n\nMove the cache sanity check to the SetEthConfig function\r\nto allow the config file to load."
            },
            {
                "date": "2021-04-06T14:09:51Z",
                "message": "internal/debug: add JSON log format and rename logging flags (#22341)\n\nThis change adds support for logging JSON records when the --log.json flag is\r\ngiven. The --debug and --backtrace flags are deprecated and replaced by\r\n--log.debug and --log.backtrace.\r\n\r\nWhile changing this, it was noticed that the --memprofilerate and\r\n--blockprofilerate were ineffective (they were always overridden even if\r\n--pprof.memprofilerate was not set). This is also fixed.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-04-06T13:58:36Z",
                "message": "graphql: add support for tx types and tx access lists (#22491)\n\nThis adds support for EIP-2718 access list transactions in the GraphQL API.\r\n\r\nCo-authored-by: Amit Shah <amitshah0t7@gmail.com>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-04-06T10:24:39Z",
                "message": "internal/ethapi: fix eth_chainId method (#22243)\n\nThis removes the duplicated definition of eth_chainID\r\nin package eth and updates the definition in internal/ethapi\r\nto treat chain ID as a bigint.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-04-06T08:57:00Z",
                "message": "core/state/snapshot: fix data race in diff layer (#22540)"
            }
        ],
        "2021-03-31": [
            {
                "date": "2021-03-31T16:27:23Z",
                "message": "Merge pull request #22604 from karalabe/hashrate-capitalization-fix\n\nall: fix miner hashRate -> hashrate on API calls"
            },
            {
                "date": "2021-03-31T07:56:51Z",
                "message": "all: fix miner hashRate -> hashrate on API calls"
            }
        ],
        "2021-03-30": [
            {
                "date": "2021-03-30T18:09:30Z",
                "message": "rpc: tighter shutdown synchronization in client subscription (#22597)\n\nThis fixes a rare issue where the client subscription forwarding loop\r\nwould attempt send on the subscription's channel after Unsubscribe has\r\nreturned, leading to a panic if the subscription channel was already\r\nclosed by the user. Example:\r\n\r\n    sub, _ := client.Subscribe(..., channel, ...)\r\n    sub.Unsubscribe()\r\n    close(channel)\r\n\r\nThe race occurred because Unsubscribe called quitWithServer to tell the\r\nforwarding loop to stop sending on sub.channel, but did not wait for the\r\nloop to actually come down. This is fixed by adding an additional channel\r\nto track the shutdown, on which Unsubscribe now waits.\r\n\r\nFixes #22322"
            },
            {
                "date": "2021-03-30T16:04:22Z",
                "message": "core/state/snapshot, ethdb: track deletions more accurately (#22582)\n\n* core/state/snapshot, ethdb: track deletions more accurately\r\n\r\n* core/state/snapshot: don't reset the iterator, leveldb's screwy\r\n\r\n* ethdb: don't mess with the insert batches for now"
            },
            {
                "date": "2021-03-30T13:52:03Z",
                "message": "ethstats: avoid creating subscriptions on background goroutine (#22587)\n\nThis fixes an issue where the ethstats service could crash if geth was\r\nstarted and then immediately stopped due to an internal error. The\r\ncause of the crash was a nil subscription being returned by the backend,\r\nbecause the background goroutine creating them was scheduled after\r\nthe backend had already shut down.\r\n\r\nMoving the creation of subscriptions into the Start method, which runs\r\nsynchronously during startup of the node, means the returned subscriptions\r\ncan never be 'nil'.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2021-03-30T13:38:53Z",
                "message": "core/vm: fix Byzantium address list (#22603)"
            },
            {
                "date": "2021-03-30T11:57:21Z",
                "message": "cmd/geth: add db dumptrie command (#22563)\n\nAdds the command \"geth db dumptrie <root> <seek> <max>\", to better help investigate the trie data"
            },
            {
                "date": "2021-03-30T11:49:59Z",
                "message": "Merge pull request #22596 from holiman/snap_timelimits\n\neth/protocols/snap: try to prevent requests timing out"
            }
        ],
        "2021-03-29": [
            {
                "date": "2021-03-29T18:58:58Z",
                "message": "cmd/puppeth: specify working directory for nodejs 15 (#22549)"
            },
            {
                "date": "2021-03-29T18:54:49Z",
                "message": "core: add BlockGen.GetBalance method  (#22589)"
            },
            {
                "date": "2021-03-29T12:17:35Z",
                "message": "eth/protocols/snap: try to prevent requests timing out"
            },
            {
                "date": "2021-03-29T09:09:29Z",
                "message": "core/state/pruner: move the compaction out of the pruning procedure (#22579)\n\nThe main idea behind it is: the range compaction is very expensive\r\nwhich can take a few hours to finish. During this long procedure,\r\na lot of exceptions can occur, e.g.\r\n- Geth is killed manually\r\n- Geth is killed because of machine crash\r\n- etc\r\n\r\nIn order to minimize the effect of the exceptions, the compaction\r\nis moved out of the pruning. So that even the compaction is not\r\nfinished, the pruning is regarded as done."
            }
        ],
        "2021-03-26": [
            {
                "date": "2021-03-26T21:15:20Z",
                "message": "cmd/devp2p: update to newer cloudflare API client (#22588)\n\nThis upgrades the cloudflare client dependency to v0.14.0. The new\r\nversion changes the API because all methods now require a context\r\nparameter. This change also reduces the log level of the 'Skipping...'\r\nmessage to debug, following a similar change in the AWS deployer."
            },
            {
                "date": "2021-03-26T21:14:16Z",
                "message": "Merge pull request #22591 from karalabe/snap-detailed-timeout-logs\n\neth/protocols/snap: add peer id and req id to the timeout logs"
            },
            {
                "date": "2021-03-26T20:29:22Z",
                "message": "eth/protocols/snap: add peer id and req id to the timeout logs"
            },
            {
                "date": "2021-03-26T19:43:09Z",
                "message": "Merge pull request #22590 from karalabe/nil-histogram\n\nmetrics/influxdb: don't push empty histograms, no measurement != 0"
            },
            {
                "date": "2021-03-26T19:13:52Z",
                "message": "metrics/influxdb: don't push empty histograms, no measurement != 0"
            },
            {
                "date": "2021-03-26T17:30:10Z",
                "message": "cmd/geth, consensus/ethash: add support for --miner.notify.full flag (#22558)\n\nThe PR implements the --miner.notify.full flag that enables full pending block\r\nnotifications. When this flag is used, the block notifications sent to mining\r\nendpoints contain the complete block header JSON instead of a work package\r\narray.\r\n\r\nCo-authored-by: AlexSSD7 <alexandersadovskyi7@protonmail.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2021-03-26T17:06:25Z",
                "message": "eth: fix corner case in sync head determination (#21695)\n\nThis avoids synchronisation failures when the local header is ahead of\r\nthe local full block."
            },
            {
                "date": "2021-03-26T14:49:37Z",
                "message": "Merge pull request #22586 from karalabe/resettting-histogram\n\neth/protocols, metrics: use resetting histograms for rare packets"
            },
            {
                "date": "2021-03-26T14:14:12Z",
                "message": "eth/protocols, metrics: use resetting histograms for rare packets"
            },
            {
                "date": "2021-03-26T12:26:51Z",
                "message": "Merge pull request #22581 from karalabe/network-latency-monitoring\n\neth/protocols, metrics, p2p: add handler performance metrics"
            },
            {
                "date": "2021-03-26T12:00:06Z",
                "message": "eth/protocols, metrics, p2p: add handler performance metrics"
            }
        ],
        "2021-03-25": [
            {
                "date": "2021-03-25T14:37:51Z",
                "message": "eth: dump rpc gas cap and tx fee cap (#22574)"
            },
            {
                "date": "2021-03-25T11:33:53Z",
                "message": "Merge pull request #22573 from holiman/checkfreq\n\ncore: fix condition on header verification"
            },
            {
                "date": "2021-03-25T11:32:32Z",
                "message": "cmd/devp2p: fix comparison of TXT record value (#22572)\n\n* cmd/devp2p: fix comparison of TXT record value\r\n\r\nThe AWS API returns quoted DNS strings, so we must encode the new value\r\nbefore comparing it against the existing record content.\r\n\r\n* cmd/devp2p: add test\r\n\r\n* cmd/devp2p: fix typo and rename val -> newValue"
            },
            {
                "date": "2021-03-25T10:50:14Z",
                "message": "core: fix condition on header verification"
            },
            {
                "date": "2021-03-25T09:13:14Z",
                "message": "eth/tracers, core: use scopecontext in tracers, provide statedb in capturestart (#22333)\n\nFixes the CaptureStart api to include the EVM, thus being able to set the statedb early on. This pr also exposes the struct we used internally in the interpreter to encapsulate the contract, mem, stack, rstack, so we pass it as a single struct to the tracer, and removes the error returns on the capture methods."
            }
        ],
        "2021-03-24": [
            {
                "date": "2021-03-24T14:33:34Z",
                "message": "eth/protocols/snap: fix the flaws in the snap sync (#22553)\n\n* eth/protocols/snap: fix snap sync\r\n\r\n* eth/protocols/snap: fix tests\r\n\r\n* eth: fix tiny\r\n\r\n* eth: update tests\r\n\r\n* eth: update tests\r\n\r\n* core/state/snapshot: testcase for #22534\r\n\r\n* eth/protocols/snap: fix boundary loss on full-but-proven range\r\n\r\n* core/state/snapshot: lintfix\r\n\r\n* eth: address comment\r\n\r\n* eth: fix handler\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2021-03-24T12:37:20Z",
                "message": "p2p/dnsdisc: rate limit resolving before checking cache (#22566)\n\nThis makes the rate limit apply regardless of whether the node is\r\nalready cached."
            },
            {
                "date": "2021-03-24T12:18:29Z",
                "message": "p2p: fix minor typo and remove fd parameter in checkInboundConn (#22547)"
            },
            {
                "date": "2021-03-24T11:32:39Z",
                "message": "cmd/devp2p: skip ENR field tails properly in nodeset filter (#22565)\n\nIn Geth v1.10, we changed the structure of the \"les\" ENR entry. As a result, the DHT crawler that creates the DNS lists\r\nno longer recognizes the les nodes, which is fixed in this commit. \r\n\r\n* cmd/devp2p: skip ENR field tails properly in nodeset filter\r\n* cmd/devp2p: fix tail decoder for snap as well\r\n* les: fix tail decoding in \"eth\" ENR entry"
            }
        ],
        "2021-03-23": [
            {
                "date": "2021-03-23T09:41:23Z",
                "message": "internal/web3ext, node: migrate node admin API (Start|Stop)RPC->HTTP (#22461)\n\n* internal/web3ext,node: migrate node admin API (Start|Stop)RPC->HTTP\r\n\r\nCorresponding CLI flags --rpc have been moved to --http.\r\n\r\nThis moves the admin module HTTP RPC start/stop\r\nmethods to an equivalent namespace.\r\n\r\nRel https://github.com/ethereum/go-ethereum/pull/22263\r\n\r\nDate: 2021-03-08 08:00:11-06:00\r\nSigned-off-by: meows <b5c6@protonmail.com>\r\n\r\n* internal/web3ext: fix startRPC/HTTP param count (4->5)\r\n\r\nDate: 2021-03-16 06:13:23-05:00\r\nSigned-off-by: meows <b5c6@protonmail.com>"
            },
            {
                "date": "2021-03-23T09:37:32Z",
                "message": "Merge pull request #22513 from holiman/no_snap_bloom\n\neth/protocols/snap, eth/downloader: don't use bloom filter in snap sync"
            }
        ],
        "2021-03-22": [
            {
                "date": "2021-03-22T21:34:12Z",
                "message": "Merge pull request #22551 from karalabe/snapshot-parent-get-panic\n\ncore/state/snapshot: fix panic on missing parent"
            },
            {
                "date": "2021-03-22T20:41:28Z",
                "message": "core/state/snapshot: fix panic on missing parent"
            },
            {
                "date": "2021-03-22T18:11:10Z",
                "message": "cmd/geth: check block range against chain head in export cmd (#22387)\n\nCheck the input parameters against the actual head block, exit on error"
            },
            {
                "date": "2021-03-22T18:06:30Z",
                "message": "all: add read-only option to database (#22407)\n\n* all: add read-only option to database\r\n\r\n* all: fixes tests\r\n\r\n* cmd/geth: migrate flags\r\n\r\n* cmd/geth: fix the compact\r\n\r\n* cmd/geth: fix the format\r\n\r\n* cmd/geth: fix log\r\n\r\n* cmd: add chain-readonly\r\n\r\n* core: add readonly notion to freezer\r\n\r\n* core/rawdb: add log\r\n\r\n* core/rawdb: fix freezer close\r\n\r\n* cmd: fix\r\n\r\n* cmd, core: construct db\r\n\r\n* core: update tests"
            },
            {
                "date": "2021-03-22T08:29:32Z",
                "message": "accounts: eip-712 signing for ledger (#22378)\n\n* accounts: eip-712 signing for ledger\r\n\r\n* address review comments"
            },
            {
                "date": "2021-03-22T07:10:51Z",
                "message": "core: fix method comment for `txpool.requestReset` (#22543)"
            }
        ],
        "2021-03-20": [
            {
                "date": "2021-03-20T18:54:17Z",
                "message": "cmd/utils: fix compilation issue on openbsd (#22511)"
            },
            {
                "date": "2021-03-20T18:50:44Z",
                "message": "cmd/devp2p: add old block announcement test to eth test suite (#22474)\n\nAdd old block announcement test to eth test suite, checks to make sure old block announcement isn't propagated"
            },
            {
                "date": "2021-03-20T09:35:22Z",
                "message": "cmd/devp2p: fix error in updating the cursor when collecting records for route53 (#22538)\n\nThis PR fixes a regression introduced in #22360, when we updated to the v2 of the AWS sdk, which causes current crawler to just get the same first 100 results over and over, and get stuck in a loop."
            }
        ],
        "2021-03-19": [
            {
                "date": "2021-03-19T23:22:24Z",
                "message": "cmd/devp2p: add flag for AWS region (#22537)"
            },
            {
                "date": "2021-03-19T14:15:39Z",
                "message": "cmd/devp2p/internal/ethtest: skip eth/66 tests when v66 not supported (#22460)"
            },
            {
                "date": "2021-03-19T12:32:57Z",
                "message": "core: fix potential race in chainIndexerTest (#22346)"
            },
            {
                "date": "2021-03-19T12:20:27Z",
                "message": "p2p/dnsdisc: fix flaw in dns size calculation (#22533)\n\nThis fixes the calculation of the tree branch factor. With the new\r\nformula, we now creat at most 13 children instead of 30, ensuring\r\nthe TXT record size will be below 370 bytes."
            },
            {
                "date": "2021-03-19T12:15:57Z",
                "message": "cmd/devp2p: use AWS-SDK v2 (#22360)\n\nThis updates the DNS deployer to use AWS SDK v2. Migration is relatively\r\nseamless, although there were two locations that required a slightly\r\ndifferent approach to achieve the same results. In particular, waiting for\r\nDNS change propagation is very different with SDK v2. \r\n\r\nThis change also optimizes DNS updates by publishing all changes before\r\nwaiting for propagation."
            },
            {
                "date": "2021-03-19T11:04:15Z",
                "message": "consensus/ethash: remove unnecessary variable definition (#22512)"
            },
            {
                "date": "2021-03-19T11:03:33Z",
                "message": "go.mod: upgrade goupnp to commit 0ca76305 (#22479)\n\nThis pulls in a fix to skip the broadcast on interfaces which are down."
            },
            {
                "date": "2021-03-19T10:58:12Z",
                "message": "go.mod: upgrade goleveldb to commit 64b5b1c (#22436)\n\nThis pulls in a fix for a corruption issue when the process crashes\r\nwhile a new manifest file is being added."
            },
            {
                "date": "2021-03-19T10:56:10Z",
                "message": "accounts/abi/bind: add NoSend transact option (#22446)\n\nThis adds a new option to avoid sending the transaction which is\r\ncreated by calling a bound contract method."
            },
            {
                "date": "2021-03-19T10:14:23Z",
                "message": "ethclient: fix error handling for header test (#22514)\n\nThe wantErr field was disused, and the error returned by HeaderByNumber\r\nwas not properly tested.\r\n\r\nThis simplifies the error checking using errors.Is and asserts that getting\r\nan expected missing header returns ethereum.NotFound. Also adds a nil\r\ncheck condition for header.Number before using big.Int's Sign method."
            },
            {
                "date": "2021-03-19T09:57:23Z",
                "message": "cmd/devp2p/internal/ethtest: return request ID in BlockHeaders response (#22508)\n\nThis PR fixes an issue with the eth66 test suite where, during a readAndServe when\r\nthe test is manually responding to GetBlockHeader requests, it now responds\r\nwith a BlockHeaders eth66 packet that includes the inbound request ID."
            },
            {
                "date": "2021-03-19T07:49:24Z",
                "message": "eth/protocols/snap: fix typo (#22530)"
            }
        ],
        "2021-03-17": [
            {
                "date": "2021-03-17T08:36:34Z",
                "message": "eth/protocols/snap, eth/downloader: don't use bloom filter in snap sync"
            }
        ],
        "2021-03-16": [
            {
                "date": "2021-03-16T11:55:43Z",
                "message": "les: allow either full enode strings or raw hex ids in the API (#22423)"
            },
            {
                "date": "2021-03-16T11:54:45Z",
                "message": "les: fix UDP connection query (#22451)\n\nThis PR fixes multiple issues with the UDP connection pre-negotiation feature:\r\n- the enable condition was wrong (it checked the existence of the DiscV5 struct where it wasn't initialized yet, disabling the feature even if discv5 was enabled)\r\n- the server pool queried already connected nodes when the discovery iterators returned them again\r\n- servers responded positively before they were synced and really willing to accept connections\r\n\r\nMetrics are also added on the server side that count the positive and negative replies to served connection queries."
            },
            {
                "date": "2021-03-16T11:53:54Z",
                "message": "les: fix UDP connection query (#22451)\n\nThis PR fixes multiple issues with the UDP connection pre-negotiation feature:\r\n\r\n- the enable condition was wrong (it checked the existence of the DiscV5 struct where it wasn't initialized yet, disabling the feature even if discv5 was enabled)\r\n- the server pool queried already connected nodes when the discovery iterators returned them again\r\n- servers responded positively before they were synced and really willing to accept connections\r\n\r\nMetrics are also added on the server side that count the positive and negative replies to served connection queries."
            },
            {
                "date": "2021-03-16T10:15:14Z",
                "message": "core/rawdb: fix transaction indexing/unindexing hashing error (#22457)\n\n* core/rawdb: more verbose error logs + better hashing\r\n\r\n* core/rawdb: add failing testcase\r\n\r\n* core/rawdb: properly hash transactions while indexing/unindexing\r\n\r\n* core/rawdb: exit on error + better log msg"
            },
            {
                "date": "2021-03-16T08:55:03Z",
                "message": "cmd/clef (docs): fix image background (#22399)\n\nFlatten the image so we do not have dark text on dark background"
            },
            {
                "date": "2021-03-16T08:53:43Z",
                "message": "cmd/clef: docs - link to ethereum org repo (#22400)"
            },
            {
                "date": "2021-03-16T08:48:54Z",
                "message": "core/types: improve comments in new EIP-2718 code (#22402)\n\nResponding to these comments:\r\n\r\n    https://github.com/ethereum/go-ethereum/pull/21502/files#r579010962\r\n    https://github.com/ethereum/go-ethereum/pull/21502/files#r579021565\r\n    https://github.com/ethereum/go-ethereum/pull/21502/files#r579023510\r\n    https://github.com/ethereum/go-ethereum/pull/21502/files#r578983734"
            },
            {
                "date": "2021-03-16T08:43:33Z",
                "message": "tests/fuzzers: fix goroutine leak in les fuzzer (#22455)\n\nThe oss-fuzz fuzzer has been reporting some failing testcases for les. They're all spurious, and cannot reliably be reproduced. However, running them showed that there was a goroutine leak: the tests created a lot of new clients, which started an exec queue that was never torn down.\r\n\r\nThis PR fixes the goroutine leak, and also a log message which was erroneously formatted."
            }
        ],
        "2021-03-15": [
            {
                "date": "2021-03-15T14:25:45Z",
                "message": "cmd/geth, eth/downloader: remove copydb command (#22501)\n\n* cmd/geth: remove copydb command\r\n\r\n* eth/downloader: remove fakepeer"
            }
        ],
        "2021-03-14": [
            {
                "date": "2021-03-14T15:13:25Z",
                "message": "eth, les: properly init statedb accesslist during tracing (#22480)\n\n* eth/state, les/state: properly init statedb accesslist when tracing, fixes #22475\r\n\r\n* eth: review comments\r\n\r\n* eth/tracers: fix compilation err\r\n\r\n* eth/tracers: apply @karalabe's suggested fix"
            }
        ],
        "2021-03-13": [
            {
                "date": "2021-03-13T20:33:30Z",
                "message": "cmd/devp2p: better testcase failure output for ethtests (#22482)"
            }
        ],
        "2021-03-12": [
            {
                "date": "2021-03-12T09:16:19Z",
                "message": "cmd/geth: add ancient datadir flag to snapshot subcommands (#22486)"
            }
        ],
        "2021-03-11": [
            {
                "date": "2021-03-11T14:09:25Z",
                "message": "p2p/enr: fix decoding of incomplete lists (#22484)\n\nGiven a list of less than two elements DecodeRLP returned rlp.EOL,\r\nleading to issues in outer decoders."
            }
        ],
        "2021-03-09": [
            {
                "date": "2021-03-09T09:50:25Z",
                "message": "cmd: extend dumpgenesis to support network flags on the cmd (#22406)"
            },
            {
                "date": "2021-03-09T08:04:03Z",
                "message": "les: fix errors in metric namespace (#22459)\n\n* les: add trailing slash to metric namespace\r\n\r\n* les: omit '.' in metric namespace"
            }
        ],
        "2021-03-08": [
            {
                "date": "2021-03-08T13:23:28Z",
                "message": "core/types: reduce allocations in GasPriceCmp (#22456)"
            },
            {
                "date": "2021-03-08T09:34:08Z",
                "message": "params: begin v1.10.2 release cycle"
            },
            {
                "date": "2021-03-08T09:32:20Z",
                "message": "params: release Geth v1.10.1"
            }
        ],
        "2021-03-07": [
            {
                "date": "2021-03-07T20:27:53Z",
                "message": "Merge pull request #22452 from holiman/testupdate_berlin\n\ntests: update reference tests with 2315 removed from Berlin"
            },
            {
                "date": "2021-03-07T19:55:01Z",
                "message": "tests: update reference tests with 2315 removed from Berlin"
            },
            {
                "date": "2021-03-07T17:39:11Z",
                "message": "Merge pull request #22426 from ethereum/revert-22413-unship-berlin\n\nRevert \"core/forkid, params: unset Berlin fork number\""
            },
            {
                "date": "2021-03-07T17:38:49Z",
                "message": "Merge pull request #22414 from karalabe/unship-2315\n\ncore, eth: unship EIP 2315"
            }
        ],
        "2021-03-04": [
            {
                "date": "2021-03-04T12:03:54Z",
                "message": "Merge pull request #22432 from karalabe/add-hirsute\n\nbuild: add support for Ubuntu Hirsute Hippo"
            },
            {
                "date": "2021-03-04T11:57:02Z",
                "message": "build: add support for Ubuntu Hirsute Hippo"
            },
            {
                "date": "2021-03-04T11:12:03Z",
                "message": "Merge pull request #22431 from karalabe/builder-fix-ppa\n\nbuild: fix PPA failure due to updated debsrc"
            },
            {
                "date": "2021-03-04T11:04:50Z",
                "message": "build: fix PPA failure due to updated debsrc"
            },
            {
                "date": "2021-03-04T08:44:37Z",
                "message": "Revert \"core/forkid, params: unset Berlin fork number (#22413)\"\n\nThis reverts commit ba999105ef89473cfe39e5e53354f7099e67a290."
            }
        ],
        "2021-03-03": [
            {
                "date": "2021-03-03T17:01:31Z",
                "message": "params: begin v1.10.1 release cycle"
            },
            {
                "date": "2021-03-03T16:44:17Z",
                "message": "params: release geth 1.10.0 stable"
            },
            {
                "date": "2021-03-03T14:50:07Z",
                "message": "tests: update to latest tests (#22290)\n\nThis updates the consensus tests to commit 31d6630 and\r\nadds support for access list transactions in the test runner.\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2021-03-03T14:08:14Z",
                "message": "cmd: retire whisper flags (#22421)\n\n* cmd: retire whisper flags\r\n\r\n* cmd/geth: remove whisper configs"
            },
            {
                "date": "2021-03-03T14:05:24Z",
                "message": "les: fix nodiscover option on the client side (#22422)"
            },
            {
                "date": "2021-03-03T10:05:27Z",
                "message": "core/forkid, params: unset Berlin fork number (#22413)"
            },
            {
                "date": "2021-03-03T10:04:50Z",
                "message": "cmd/utils: fix txlookuplimit for archive node (#22419)\n\n* cmd/utils: fix exclusive check for archive node\r\n\r\n* cmd/utils: set the txlookuplimit to 0"
            },
            {
                "date": "2021-03-03T10:04:25Z",
                "message": "params: update chts (#22418)"
            },
            {
                "date": "2021-03-03T07:42:59Z",
                "message": "cmd/geth: put allowUnsecureTx flag in RPC section (#22412)"
            }
        ],
        "2021-03-02": [
            {
                "date": "2021-03-02T21:51:03Z",
                "message": "core/vm/runtime: more unshipping"
            },
            {
                "date": "2021-03-02T21:40:57Z",
                "message": "core, eth: unship EIP 2315"
            }
        ],
        "2021-03-01": [
            {
                "date": "2021-03-01T09:26:10Z",
                "message": "core/rawdb: fix the transaction indexer (#22395)"
            },
            {
                "date": "2021-03-01T09:24:20Z",
                "message": "les: UDP pre-negotiation of available server capacity (#22183)\n\nThis PR implements the first one of the \"lespay\" UDP queries which\r\nis already useful in itself: the capacity query. The server pool is making\r\nuse of this query by doing a cheap UDP query to determine whether it is\r\nworth starting the more expensive TCP connection process."
            }
        ],
        "2021-02-26": [
            {
                "date": "2021-02-26T15:33:37Z",
                "message": "core/state: fix eta calculation on pruning (#22386)"
            },
            {
                "date": "2021-02-26T14:28:34Z",
                "message": "accounts/keystore: use github.com/google/uuid (#22217)\n\nThis replaces the github.com/pborman/uuid dependency with\r\ngithub.com/google/uuid because the former is only a wrapper for\r\nthe latter (since v1.0.0).\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-02-26T13:04:56Z",
                "message": "Merge pull request #22380 from karalabe/berlin\n\nall: define and enable the Berlin hard fork on all networks"
            },
            {
                "date": "2021-02-26T12:40:35Z",
                "message": "rpc: add separate size limit for websocket (#22385)\n\nThis makes the WebSocket message size limit independent of the\r\nlimit used for HTTP requests. The new limit for WebSocket messages \r\nis 15MB."
            }
        ],
        "2021-02-25": [
            {
                "date": "2021-02-25T07:10:30Z",
                "message": "all: define Berlin hard fork spec"
            },
            {
                "date": "2021-02-25T20:08:34Z",
                "message": "les: move server pool to les/vflux/client (#22377)\n\n* les: move serverPool to les/vflux/client\r\n\r\n* les: add metrics\r\n\r\n* les: moved ValueTracker inside ServerPool\r\n\r\n* les: protect against node registration before server pool is started\r\n\r\n* les/vflux/client: fixed tests\r\n\r\n* les: make peer registration safe"
            },
            {
                "date": "2021-02-25T17:36:01Z",
                "message": "cmd/devp2p: add eth66 test suite (#22363)\n\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2021-02-25T14:26:57Z",
                "message": "all: add support for EIP-2718, EIP-2930 transactions (#21502)\n\nThis adds support for EIP-2718 typed transactions as well as EIP-2930\r\naccess list transactions (tx type 1). These EIPs are scheduled for the\r\nBerlin fork.\r\n\r\nThere very few changes to existing APIs in core/types, and several new APIs\r\nto deal with access list transactions. In particular, there are two new\r\nconstructor functions for transactions: types.NewTx and types.SignNewTx.\r\nSince the canonical encoding of typed transactions is not RLP-compatible,\r\nTransaction now has new methods for encoding and decoding: MarshalBinary\r\nand UnmarshalBinary.\r\n\r\nThe existing EIP-155 signer does not support the new transaction types.\r\nAll code dealing with transaction signatures should be updated to use the\r\nnewer EIP-2930 signer. To make this easier for future updates, we have\r\nadded new constructor functions for types.Signer: types.LatestSigner and\r\ntypes.LatestSignerForChainID. \r\n\r\nThis change also adds support for the YoloV3 testnet.\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>\r\nCo-authored-by: Ryan Schneider <ryanleeschneider@gmail.com>"
            },
            {
                "date": "2021-02-25T13:24:04Z",
                "message": "les, light: improve txstatus retrieval (#22349)\n\nTransaction unindexing will be enabled by default as of 1.10, which causes tx status retrieval will be broken without this PR. \r\n\r\nThis PR introduces a retry mechanism in TxStatus retrieval."
            },
            {
                "date": "2021-02-25T12:55:07Z",
                "message": "cmd, eth, les: enable serving light clients when non-synced (#22250)\n\nThis PR adds a more CLI flag, so that the les-server can serve light clients even the local node is not synced yet.\r\n\r\nThis functionality is needed in some testing environments(e.g. hive). After launching the les server, no more blocks will be imported so the node is always marked as \"non-synced\"."
            },
            {
                "date": "2021-02-25T11:03:07Z",
                "message": "Merge pull request #22381 from karalabe/lower-error-log\n\neth/protocols/snap: lower abortion and resumption logs to debug"
            },
            {
                "date": "2021-02-25T10:56:18Z",
                "message": "eth/protocols/snap: lower abortion and resumption logs to debug"
            }
        ],
        "2021-02-24": [
            {
                "date": "2021-02-24T13:07:58Z",
                "message": "cmd/utils: remove deprecated command line flags (#22263)\n\nThis removes support for all deprecated flags except --rpc*."
            },
            {
                "date": "2021-02-24T09:36:08Z",
                "message": "travis: manually install Android since Travis is stale (#22373)"
            }
        ],
        "2021-02-23": [
            {
                "date": "2021-02-23T18:52:40Z",
                "message": "Merge pull request #22369 from karalabe/android-bionic-builder\n\ntravis: bump builders to Bionic"
            },
            {
                "date": "2021-02-23T18:31:09Z",
                "message": "travis: bump builders to Bionic"
            },
            {
                "date": "2021-02-23T17:58:37Z",
                "message": "Merge pull request #22368 from karalabe/ndk-bump\n\ntravis: bump Android NDK version"
            },
            {
                "date": "2021-02-23T17:57:39Z",
                "message": "travis: bump Android NDK version"
            },
            {
                "date": "2021-02-23T17:29:36Z",
                "message": "Merge pull request #22350 from karalabe/disable-preimage-collection\n\ncmd/utils: disable caching preimages by default"
            },
            {
                "date": "2021-02-23T16:42:43Z",
                "message": "travis, appveyor, build, Dockerfile: bump Go to 1.16 (#22351)\n\n* travis, appveyor, build: bump Go to 1.16\r\n\r\n* accounts/abi/bind: fix up Go mod files for Go 1.16"
            },
            {
                "date": "2021-02-23T16:28:24Z",
                "message": "Dockerfile: bump to Go 1.16 base images"
            },
            {
                "date": "2021-02-23T16:12:25Z",
                "message": "accounts/abi/bind: fix up Go mod files for Go 1.16"
            },
            {
                "date": "2021-02-23T12:09:19Z",
                "message": "internal/ethapi: reject non-replay-protected txs over RPC (#22339)\n\nThis PR prevents users from submitting transactions without EIP-155 enabled. This behaviour can be overridden by specifying the flag --rpc.allow-unprotected-txs=true."
            },
            {
                "date": "2021-02-23T10:27:32Z",
                "message": "cmd/geth: add db commands stats, compact, put, get, delete (#22014)\n\nThis PR introduces:\r\n\r\n- db.put to put a value into the database\r\n- db.get to read a value from the database\r\n- db.delete to delete a value from the database\r\n- db.stats to check compaction info from the database\r\n- db.compact to trigger a db compaction\r\n\r\nIt also moves inspectdb to db.inspect."
            }
        ],
        "2021-02-22": [
            {
                "date": "2021-02-22T13:33:11Z",
                "message": "les: clean up server handler (#22357)"
            }
        ],
        "2021-02-20": [
            {
                "date": "2021-02-20T09:40:38Z",
                "message": "tests/fuzzers/les: add fuzzer for les server handler (#22282)\n\n* les: refactored server handler\r\n\r\n* tests/fuzzers/les: add fuzzer for les server handler\r\n\r\n* tests, les: update les fuzzer\r\n\r\ntests: update les fuzzer\r\n\r\ntests/fuzzer/les: release resources\r\n\r\ntests/fuzzer/les: pre-initialize all resources\r\n\r\n* les: refactored server handler and fuzzer\r\n\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
            }
        ],
        "2021-02-19": [
            {
                "date": "2021-02-19T14:53:12Z",
                "message": "les: fix balance expiration (#22343)\n\n* les/lespay/server: fix balance expiration and add test\r\n\r\n* les: move client balances to a new db\r\n\r\n* les: rename lespayDb to lesDb"
            },
            {
                "date": "2021-02-19T14:03:17Z",
                "message": "travis, appveyor, build: bump Go to 1.16"
            },
            {
                "date": "2021-02-19T13:53:05Z",
                "message": "cmd/utils: disable caching preimages by default"
            },
            {
                "date": "2021-02-19T13:44:16Z",
                "message": "les: renamed lespay to vflux (#22347)"
            },
            {
                "date": "2021-02-19T08:54:46Z",
                "message": "p2p/dnsdisc: fix hot-spin when all trees are empty (#22313)\n\nIn the random sync algorithm used by the DNS node iterator, we first pick a random\r\ntree and then perform one sync action on that tree. This happens in a loop until any\r\nnode is found. If no trees contain any nodes, the iterator will enter a hot loop spinning\r\nat 100% CPU.\r\n\r\nThe fix is complicated. The iterator now checks if a meaningful sync action can\r\nbe performed on any tree. If there is nothing to do, it waits for the next root record\r\nrecheck time to arrive and then tries again.\r\n\r\nFixes #22306"
            }
        ],
        "2021-02-18": [
            {
                "date": "2021-02-18T16:54:29Z",
                "message": "eth: implement eth66 (#22241)\n\n* eth/protocols/eth: split up the eth protocol handlers\r\n\r\n* eth/protocols/eth: define eth-66 protocol messages\r\n\r\n* eth/protocols/eth: poc implement getblockheaders on eth/66\r\n\r\n* eth/protocols/eth: implement remaining eth-66 handlers\r\n\r\n* eth/protocols: define handler map for eth 66\r\n\r\n* eth/downloader: use protocol constants from eth package\r\n\r\n* eth/protocols/eth: add ETH66 capability\r\n\r\n* eth/downloader: tests for eth66\r\n\r\n* eth/downloader: fix error in tests\r\n\r\n* eth/protocols/eth: use eth66 for outgoing requests\r\n\r\n* eth/protocols/eth: remove unused error type\r\n\r\n* eth/protocols/eth: define protocol length\r\n\r\n* eth/protocols/eth: fix pooled tx over eth66\r\n\r\n* protocols/eth/handlers: revert behavioural change which caused tests to fail\r\n\r\n* eth/downloader: fix failing test\r\n\r\n* eth/protocols/eth: add testcases + fix flaw with header requests\r\n\r\n* eth/protocols: change comments\r\n\r\n* eth/protocols/eth: review fixes + fixed flaw in RequestOneHeader\r\n\r\n* eth/protocols: documentation\r\n\r\n* eth/protocols/eth: review concerns about types"
            },
            {
                "date": "2021-02-18T09:40:19Z",
                "message": "node: always show websocket url in logs (#22307)"
            },
            {
                "date": "2021-02-18T09:19:49Z",
                "message": "rlp: handle case of normal EOF in Stream.readFull (#22336)\n\nio.Reader may return n > 0 and io.EOF at the end of the input stream.\r\nreadFull did not handle this correctly, looking only at the error. This fixes\r\nit to check for n == len(buf) as well."
            },
            {
                "date": "2021-02-18T08:05:47Z",
                "message": "core/state: copy the snap when copying the state (#22340)\n\n* core/state: copy the snap when copying the state\r\n\r\n* core/state: deep-copy snap stuff during state Copy"
            }
        ],
        "2021-02-17": [
            {
                "date": "2021-02-17T13:59:00Z",
                "message": "eth/handler, broadcast: optimize tx broadcast mechanism (#22176)\n\nThis PR optimizes the broadcast loop. Instead of iterating twice through a given set of transactions to weed out which peers have and which do not have a tx, to send/announce transactions, we do it only once."
            }
        ],
        "2021-02-16": [
            {
                "date": "2021-02-16T14:30:07Z",
                "message": "Merge pull request #22334 from karalabe/fix-snap-cancel\n\neth: fix snap sync cancellation"
            },
            {
                "date": "2021-02-16T14:23:03Z",
                "message": "cmd/devp2p/internal/ethtest: use shared message types (#22315)\n\nThis updates the eth protocol test suite to use the message type\r\ndefinitions of the 'production' protocol implementation in eth/protocols/eth."
            },
            {
                "date": "2021-02-16T14:11:33Z",
                "message": "eth: fix snap sync cancellation"
            },
            {
                "date": "2021-02-16T13:26:37Z",
                "message": "Merge pull request #22331 from karalabe/enforce-min-snap-difflayers\n\ncore/state/snapshot: ensure Cap retains a min number of layers"
            },
            {
                "date": "2021-02-16T07:04:07Z",
                "message": "core/state/snapshot: ensure Cap retains a min number of layers"
            },
            {
                "date": "2021-02-16T11:30:15Z",
                "message": "Merge pull request #22332 from karalabe/fix-fastsync-restart-bloom-crash\n\ntrie: fix bloom crash on fast sync restart"
            },
            {
                "date": "2021-02-16T09:40:59Z",
                "message": "rpc: increase the number of subscriptions in storm test (#22316)"
            },
            {
                "date": "2021-02-16T08:44:38Z",
                "message": "trie: fix bloom crash on fast sync restart"
            }
        ],
        "2021-02-15": [
            {
                "date": "2021-02-15T18:47:47Z",
                "message": "cmd/geth: fix js unclean shutdown (#22302)"
            },
            {
                "date": "2021-02-15T18:37:09Z",
                "message": "cmd/utils: add workaround for FreeBSD statfs quirk (#22310)\n\nMake geth build on FreeBSD, fixes #22309."
            }
        ],
        "2021-02-12": [
            {
                "date": "2021-02-12T19:48:18Z",
                "message": "les: enable les/4 and add tests (#22321)"
            },
            {
                "date": "2021-02-12T13:34:35Z",
                "message": "Merge pull request #22319 from karalabe/fix-defer-leak\n\ncore: fix temp memory blowup caused by defers holding on to state"
            },
            {
                "date": "2021-02-12T10:45:34Z",
                "message": "core: fix temp memory blowup caused by defers holding on to state"
            }
        ],
        "2021-02-11": [
            {
                "date": "2021-02-11T11:09:13Z",
                "message": "cmd/devp2p: fix documentation for eth-test (#22298)"
            }
        ],
        "2021-02-10": [
            {
                "date": "2021-02-10T14:02:35Z",
                "message": "Merge pull request #22293 from karalabe/txunindex-1year\n\ncmd/utils, eth/ethconfig: unindex txs older than ~1 year"
            },
            {
                "date": "2021-02-10T12:12:13Z",
                "message": "accounts/abi/bind: fixed unpacking error (#22230)\n\nThere was a dormant error with structured inputs that failed unpacking.\r\nThis commit fixes the error by switching casting to the better abi.ConvertType function.\r\nIt also adds a test for calling a view function that returns a struct"
            }
        ],
        "2021-02-08": [
            {
                "date": "2021-02-08T18:44:05Z",
                "message": "cmd/utils, eth/ethconfig: unindex txs older than ~1 year"
            },
            {
                "date": "2021-02-08T19:31:52Z",
                "message": "core/state/pruner: fix compaction range error"
            },
            {
                "date": "2021-02-08T17:19:38Z",
                "message": "Merge pull request #22291 from karalabe/fix-pruner-compaction\n\ncore/state/pruner: fix compaction after pruning"
            },
            {
                "date": "2021-02-08T15:02:30Z",
                "message": "core/state/pruner: fix compaction after pruning"
            },
            {
                "date": "2021-02-08T11:16:50Z",
                "message": "Merge pull request #22288 from karalabe/1.10.unstable\n\nparams: just to make snapshots a bit more official"
            },
            {
                "date": "2021-02-08T11:16:30Z",
                "message": "all: bloom-filter based pruning mechanism (#21724)\n\n* cmd, core, tests: initial state pruner\r\n\r\ncore: fix db inspector\r\n\r\ncmd/geth: add verify-state\r\n\r\ncmd/geth: add verification tool\r\n\r\ncore/rawdb: implement flatdb\r\n\r\ncmd, core: fix rebase\r\n\r\ncore/state: use new contract code layout\r\n\r\ncore/state/pruner: avoid deleting genesis state\r\n\r\ncmd/geth: add helper function\r\n\r\ncore, cmd: fix extract genesis\r\n\r\ncore: minor fixes\r\n\r\ncontracts: remove useless\r\n\r\ncore/state/snapshot: plugin stacktrie\r\n\r\ncore: polish\r\n\r\ncore/state/snapshot: iterate storage concurrently\r\n\r\ncore/state/snapshot: fix iteration\r\n\r\ncore: add comments\r\n\r\ncore/state/snapshot: polish code\r\n\r\ncore/state: polish\r\n\r\ncore/state/snapshot: rebase\r\n\r\ncore/rawdb: add comments\r\n\r\ncore/rawdb: fix tests\r\n\r\ncore/rawdb: improve tests\r\n\r\ncore/state/snapshot: fix concurrent iteration\r\n\r\ncore/state: run pruning during the recovery\r\n\r\ncore, trie: implement martin's idea\r\n\r\ncore, eth: delete flatdb and polish pruner\r\n\r\ntrie: fix import\r\n\r\ncore/state/pruner: add log\r\n\r\ncore/state/pruner: fix issues\r\n\r\ncore/state/pruner: don't read back\r\n\r\ncore/state/pruner: fix contract code write\r\n\r\ncore/state/pruner: check root node presence\r\n\r\ncmd, core: polish log\r\n\r\ncore/state: use HEAD-127 as the target\r\n\r\ncore/state/snapshot: improve tests\r\n\r\ncmd/geth: fix verification tool\r\n\r\ncmd/geth: use HEAD as the verification default target\r\n\r\nall: replace the bloomfilter with martin's fork\r\n\r\ncmd, core: polish code\r\n\r\ncore, cmd: forcibly delete state root\r\n\r\ncore/state/pruner: add hash64\r\n\r\ncore/state/pruner: fix blacklist\r\n\r\ncore/state: remove blacklist\r\n\r\ncmd, core: delete trie clean cache before pruning\r\n\r\ncmd, core: fix lint\r\n\r\ncmd, core: fix rebase\r\n\r\ncore/state: fix the special case for clique networks\r\n\r\ncore/state/snapshot: remove useless code\r\n\r\ncore/state/pruner: capping the snapshot after pruning\r\n\r\ncmd, core, eth: fixes\r\n\r\ncore/rawdb: update db inspector\r\n\r\ncmd/geth: polish code\r\n\r\ncore/state/pruner: fsync bloom filter\r\n\r\ncmd, core: print warning log\r\n\r\ncore/state/pruner: adjust the parameters for bloom filter\r\n\r\ncmd, core: create the bloom filter by size\r\n\r\ncore: polish\r\n\r\ncore/state/pruner: sanitize invalid bloomfilter size\r\n\r\ncmd: address comments\r\n\r\ncmd/geth: address comments\r\n\r\ncmd/geth: address comment\r\n\r\ncore/state/pruner: address comments\r\n\r\ncore/state/pruner: rename homedir to datadir\r\n\r\ncmd, core: address comments\r\n\r\ncore/state/pruner: address comment\r\n\r\ncore/state: address comments\r\n\r\ncore, cmd, tests: address comments\r\n\r\ncore: address comments\r\n\r\ncore/state/pruner: release the iterator after each commit\r\n\r\ncore/state/pruner: improve pruner\r\n\r\ncmd, core: adjust bloom paramters\r\n\r\ncore/state/pruner: fix lint\r\n\r\ncore/state/pruner: fix tests\r\n\r\ncore: fix rebase\r\n\r\ncore/state/pruner: remove atomic rename\r\n\r\ncore/state/pruner: address comments\r\n\r\nall: run go mod tidy\r\n\r\ncore/state/pruner: avoid false-positive for the middle state roots\r\n\r\ncore/state/pruner: add checks for middle roots\r\n\r\ncmd/geth: replace crit with error\r\n\r\n* core/state/pruner: fix lint\r\n\r\n* core: drop legacy bloom filter\r\n\r\n* core/state/snapshot: improve pruner\r\n\r\n* core/state/snapshot: polish concurrent logs to report ETA vs. hashes\r\n\r\n* core/state/pruner: add progress report for pruning and compaction too\r\n\r\n* core: fix snapshot test API\r\n\r\n* core/state: fix some pruning logs\r\n\r\n* core/state/pruner: support recovering from bloom flush fail\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2021-02-08T11:03:06Z",
                "message": "params: just to make snapshots a bit more official"
            },
            {
                "date": "2021-02-08T10:58:54Z",
                "message": "Merge pull request #22280 from karalabe/snapshot-default\n\ncmd/utils: enable snapshots by default"
            },
            {
                "date": "2021-02-08T10:36:49Z",
                "message": "metrics: fix cast omission in cpu_syscall.go (#22262)\n\nfixes an regression which caused build failure on certain platforms"
            }
        ],
        "2021-02-09": [
            {
                "date": "2021-02-09T09:42:55Z",
                "message": "internal/debug: add switch to format logs with json (#22207)\n\nadds a flag --log.json which if enabled makes the client format logs with JSON."
            },
            {
                "date": "2021-02-09T09:01:21Z",
                "message": "Merge pull request #22294 from holiman/pruner_compact_fix\n\ncore/state/pruner: fix compaction range error"
            }
        ],
        "2021-02-07": [
            {
                "date": "2021-02-07T18:13:59Z",
                "message": "cmd/utils: enable snapshots by default"
            }
        ],
        "2021-02-05": [
            {
                "date": "2021-02-05T18:44:34Z",
                "message": "consensus: remove seal verification from the consensus engine interface (#22274)"
            },
            {
                "date": "2021-02-05T13:15:22Z",
                "message": "eth: don't wait for snap registration if we're not running snap (#22272)\n\nPrevents a situation where we (not running snap) connects with a peer running snap, and get stalled waiting for snap registration to succeed (which will never happen), which cause a waitgroup wait to halt shutdown"
            },
            {
                "date": "2021-02-05T12:51:53Z",
                "message": "internal/ethapi: fix typo in comment (#22271)"
            },
            {
                "date": "2021-02-05T12:51:15Z",
                "message": "eth: move eth.Config to a common package (#22205)\n\nThis moves the eth config definition into a separate package, eth/ethconfig. \r\nPackages eth and les can now import this common package instead of\r\nimporting eth from les, reducing dependencies.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-02-05T10:35:55Z",
                "message": "internal/ethapi: comment nitpick (#22270)"
            }
        ],
        "2021-02-03": [
            {
                "date": "2021-02-03T14:04:28Z",
                "message": "fuzzers: added consensys/gurvy library to bn256 differential fuzzer (#21812)\n\nThis pr adds consensys' gurvy bn256 variant into the code for differential fuzzing."
            },
            {
                "date": "2021-02-03T10:02:35Z",
                "message": "core: reset txpool state on sethead (#22247)\n\nfixes an issue where local transactions that were included in the chain before a SetHead were rejected if resubmitted, since the txpool had not reset the state to the current (older) state."
            }
        ],
        "2021-02-02": [
            {
                "date": "2021-02-02T12:09:23Z",
                "message": "trie : use trie.NewStackTrie instead of new(trie.Trie) (#22246)\n\nThe PR makes use of the stacktrie, which is is more lenient on resource consumption, than the regular trie, in cases where we only need it for DeriveSha"
            },
            {
                "date": "2021-02-02T09:32:44Z",
                "message": "all: remove unneeded parentheses (#21921)\n\n* remove uneeded convertion type\r\n\r\n* remove redundant type in composite literal\r\n\r\n* omit explicit type where implicit\r\n\r\n* remove unused redundant parenthesis\r\n\r\n* remove redundant import alias duktape"
            },
            {
                "date": "2021-02-02T09:05:46Z",
                "message": "cmd/geth, node: allow configuring JSON-RPC on custom path prefix (#22184)\n\nThis change allows users to set a custom path prefix on which to mount the http-rpc\r\nor ws-rpc handlers via the new flags --http.rpcprefix and --ws.rpcprefix.\r\n\r\nFixes #21826\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-02-02T08:44:36Z",
                "message": "eth: check snap satelliteness, delegate drop to eth (#22235)\n\n* eth: check snap satelliteness, delegate drop to eth\r\n\r\n* eth: better handle eth/snap satellite relation, merge reg/unreg paths"
            }
        ],
        "2021-02-01": [
            {
                "date": "2021-02-01T13:41:43Z",
                "message": "eth/tracers: fix unigram tracer (#22248)"
            }
        ],
        "2021-01-29": [
            {
                "date": "2021-01-29T15:53:44Z",
                "message": "cmd/clef: don't check file permissions on windows (#22251)\n\nFixes #20123"
            }
        ],
        "2021-01-28": [
            {
                "date": "2021-01-28T21:47:15Z",
                "message": "les/utils: UDP rate limiter (#21930)\n\n* les/utils: Limiter\r\n\r\n* les/utils: dropped prior weight vs variable cost logic, using fixed weights\r\n\r\n* les/utils: always create node selector in addressGroup\r\n\r\n* les/utils: renamed request weight to request cost\r\n\r\n* les/utils: simplified and improved the DoS penalty mechanism\r\n\r\n* les/utils: minor fixes\r\n\r\n* les/utils: made selection weight calculation nicer\r\n\r\n* les/utils: fixed linter warning\r\n\r\n* les/utils: more precise and reliable probabilistic test\r\n\r\n* les/utils: fixed linter warning"
            },
            {
                "date": "2021-01-28T20:19:07Z",
                "message": "cmd,core,eth,params,tests: define yolov3 + enable EIP-2565 (#22213)\n\nRemoves the yolov2 definition, adds yolov3, including EIP-2565. This PR also disables some of the erroneously generated blockchain and statetests, and adds the new genesis hash + alloc for yolov3. \r\nThis PR disables the CLI switches for yolo, since it's not complete until we merge support for 2930."
            }
        ],
        "2021-01-27": [
            {
                "date": "2021-01-27T09:20:34Z",
                "message": "rpc: deprecate Client.ShhSubscribe (#22239)\n\nIt never worked, whisper uses polling.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2021-01-26": [
            {
                "date": "2021-01-26T20:41:35Z",
                "message": "les: switch to new discv5 (#21940)\n\nThis PR enables running the new discv5 protocol in both LES client\r\nand server mode. In client mode it mixes discv5 and dnsdisc iterators\r\n(if both are enabled) and filters incoming ENRs for \"les\" tag and fork ID.\r\nThe old p2p/discv5 package and all references to it are removed.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-01-26T15:43:12Z",
                "message": "accounts/scwallet: update documentation (#22242)"
            },
            {
                "date": "2021-01-26T15:01:13Z",
                "message": "accounts/scwallet: use go-ethereum crypto instead of go-ecdh (#22212)\n\n* accounts/scwallet: use go-ethereum crypto instead of go-ecdh\r\n\r\ngithub.com/wsddn/go-ecdh is a wrapper package for ECDH functionality\r\nwith any elliptic curve.\r\n\r\nSince 'generic' ECDH is not required in accounts/scwallet (the curve is\r\nalways secp256k1), we can just use the standard library functionality\r\nand our own crypto libraries to perform ECDH and save a dependency.\r\n\r\n* Update accounts/scwallet/securechannel.go\r\n\r\nCo-authored-by: Guillaume Ballet <gballet@gmail.com>\r\n\r\n* Use the correct key\r\n\r\nCo-authored-by: Guillaume Ballet <gballet@gmail.com>"
            },
            {
                "date": "2021-01-26T11:17:11Z",
                "message": "core: speed up header import (#21967)\n\nThis PR implements the following modifications\r\n\r\n- Don't shortcut check if block is present, thus avoid disk lookup\r\n- Don't check hash ancestry in early-check (it's still done in parallel checker)\r\n- Don't check time.Now for every single header\r\n\r\nCharts and background info can be found here: https://github.com/holiman/headerimport/blob/main/README.md\r\nWith these changes, writing 1M headers goes down to from 80s to 62s."
            },
            {
                "date": "2021-01-26T11:15:31Z",
                "message": "core/state: fix panic in state dumping (#22225)"
            },
            {
                "date": "2021-01-26T11:13:55Z",
                "message": "internal/ethapi: print tx details when submitting (#22170)\n\nThis adds more info about submitted transactions in log messages.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2021-01-25": [
            {
                "date": "2021-01-25T20:40:14Z",
                "message": "tests/fuzzers/abi: fixed one-off panic with int.Min64 value (#22233)\n\n* tests/fuzzers/abi: fixed one-off panic with int.Min64 value\r\n\r\n* tests/fuzzers/abi: fixed one-off panic with int.Min64 value"
            },
            {
                "date": "2021-01-25T18:06:52Z",
                "message": "eth, p2p: reserve half peer slots for snap peers during snap sync (#22171)\n\n* eth, p2p: reserve half peer slots for snap peers during snap sync\r\n\r\n* eth: less logging\r\n\r\n* eth: rework the eth/snap peer reservation logic\r\n\r\n* eth: rework the eth/snap peer reservation logic (again)"
            },
            {
                "date": "2021-01-25T13:36:39Z",
                "message": "eth/tracers: move tracing APIs into eth/tracers (#22161)\n\nThis moves the tracing RPC API implementation to package eth/tracers.\r\nBy doing so, package eth no longer depends on tracing and the duktape JS engine.\r\n\r\nThe change also enables tracing using the light client. All tracing methods work with the\r\nlight client, but it's a lot slower compared to using a full node."
            },
            {
                "date": "2021-01-25T13:29:45Z",
                "message": "core: reset to genesis when middle block is missing (#22135)\n\nWhen a sethead/rewind finds that the targeted block is missing, it resets to genesis instead of crashing. Closes #22129"
            },
            {
                "date": "2021-01-25T13:25:55Z",
                "message": "snapshot: merge loops for better performance (#22160)"
            },
            {
                "date": "2021-01-25T11:46:09Z",
                "message": "go.mod: upgrade github.com/huin/goupnp (#22227)\n\nThis updates the goupnp dependency, fixing huin/goupnp#33"
            },
            {
                "date": "2021-01-25T10:31:18Z",
                "message": "graphql: change receipt status to decimal instead of hex (#22187)\n\nThis PR fixes the receipt status field to be decimal instead of a hex string,\r\nas called for by the spec.\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2021-01-25T09:42:07Z",
                "message": "go.mod: update dependencies (#22216)\n\nThis updates go module dependencies as discussed in #22050."
            },
            {
                "date": "2021-01-25T06:17:05Z",
                "message": "eth/protocols/snap: snap sync testing (#22179)\n\n* eth/protocols/snap: make timeout configurable\r\n\r\n* eth/protocols/snap: snap sync testing\r\n\r\n* eth/protocols/snap: test to trigger panic\r\n\r\n* eth/protocols/snap: fix race condition on timeouts\r\n\r\n* eth/protocols/snap: return error on cancelled sync\r\n\r\n* squashme: updates + test causing panic + properly serve accounts in order\r\n\r\n* eth/protocols/snap: revert failing storage response\r\n\r\n* eth/protocols/snap: revert on bad responses (storage, code)\r\n\r\n* eth/protocols/snap: fix account handling stall\r\n\r\n* eth/protocols/snap: fix remaining revertal-issues\r\n\r\n* eth/protocols/snap: timeouthandler for bytecode requests\r\n\r\n* eth/protocols/snap: debugging + fix log message\r\n\r\n* eth/protocols/snap: fix misspelliings in docs\r\n\r\n* eth/protocols/snap: fix race in bytecode handling\r\n\r\n* eth/protocols/snap: undo deduplication of storage roots\r\n\r\n* synctests: refactor + minify panic testcase\r\n\r\n* eth/protocols/snap: minor polishes\r\n\r\n* eth: minor polishes to make logs more useful\r\n\r\n* eth/protocols/snap: remove excessive logs from the test runs\r\n\r\n* eth/protocols/snap: stress tests with concurrency\r\n\r\n* eth/protocols/snap: further fixes to test cancel channel handling\r\n\r\n* eth/protocols/snap: extend test timeouts on CI\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            }
        ],
        "2021-01-24": [
            {
                "date": "2021-01-24T10:37:39Z",
                "message": "cmd, geth: CLI help fixes (#22220)\n\n* cmd, geth: Reflect command being optional - closes 22218\r\n\r\n* cmd, geth: Set current year to 2021"
            },
            {
                "date": "2021-01-24T10:37:08Z",
                "message": "cmd, geth: CLI help fixes (#22220)\n\n* cmd, geth: Reflect command being optional - closes 22218\r\n\r\n* cmd, geth: Set current year to 2021"
            }
        ],
        "2021-01-22": [
            {
                "date": "2021-01-22T19:15:27Z",
                "message": "common/mclock: remove dependency on github.com/aristanetworks/goarista (#22211)\n\nIt takes three lines of code to get to runtime.nanotime, no need to\r\npull a dependency for that."
            },
            {
                "date": "2021-01-22T09:11:24Z",
                "message": "trie: fix range prover (#22210)\n\nFixes a special case when the trie only has a single trie node and the range proof only contains a single element."
            }
        ],
        "2021-01-21": [
            {
                "date": "2021-01-21T12:47:38Z",
                "message": "event: add ResubscribeErr (#22191)\n\nThis adds a way to get the error of the failing subscription\r\nfor logging/debugging purposes.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-01-21T11:17:10Z",
                "message": "eth/filters: fix potential deadlock in filter timeout loop (#22178)\n\nThis fixes #22131 and adds a test reproducing the issue."
            }
        ],
        "2021-01-20": [
            {
                "date": "2021-01-20T23:48:08Z",
                "message": "Merge pull request #21047 from holiman/improve_updates_2\n\ncore: improve trie updates (part 2)"
            },
            {
                "date": "2021-01-20T21:45:01Z",
                "message": "downloader: extract findAncestor search functions (#21744)\n\nThis is a simple refactoring, extracting common ancestor\r\nnegotiation logic to named function"
            },
            {
                "date": "2021-01-20T18:34:21Z",
                "message": "go.mod: upgrade golang-lru (#22134)"
            },
            {
                "date": "2021-01-20T17:21:13Z",
                "message": "oss-fuzz: fix abi fuzzer (#22199)"
            }
        ],
        "2021-01-08": [
            {
                "date": "2021-01-08T13:01:49Z",
                "message": "core/state: convert prefetcher to concurrent per-trie loader"
            },
            {
                "date": "2021-01-08T20:29:25Z",
                "message": "ethclient: better test suite for ethclient package (#22127)\n\nThis commit extends the ethclient test suite and increases code coverage of the ethclient\r\npackage from ~15% to >55%. These tests act as early smoke tests to signal issues in the\r\nRPC-interface. E.g. if a functionality like eth_chainId or eth_call breaks, the test\r\nwill break."
            },
            {
                "date": "2021-01-08T10:17:15Z",
                "message": "cmd/faucet: fix nonce-gap problem (#22145)\n\n* cmd/faucet: avoid encoding for each client\r\n\r\n* cmd/faucet: fix flaw in clearing of txs, avoid sending more than necessary\r\n\r\n* cmd/faucet: fix flaw in tx cropping\r\n\r\n* cmd/faucet: revert change to not always send tx info\r\n\r\n* cmd/faucet: review fixes\r\n\r\n* cmd/faucet: revert #22018, fix order in UI\r\n\r\n* cmd/faucet: fix lock error\r\n\r\n* cmd/faucet: revert json changes\r\n\r\n* squashme"
            }
        ],
        "2021-01-19": [
            {
                "date": "2021-01-19T09:52:45Z",
                "message": "eth, les: add new config field SyncFromCheckpoint (#22123)\n\nThis PR introduces a new config field SyncFromCheckpoint for light client.\r\n\r\nIn some special scenarios, it's required to start synchronization from some\r\narbitrary checkpoint or even from the scratch. So this PR offers this\r\nflexibility to users so that the synchronization start point can be configured.\r\n\r\nThere are two relevant configs: SyncFromCheckpoint and Checkpoint.\r\n\r\n- If the SyncFromCheckpoint is true, the light client will try to sync from the\r\n  specified checkpoint.\r\n\r\n- If the Checkpoint is not configured, then the light client will sync from the\r\n  scratch(from the latest header if the database is not empty)\r\n\r\nAdditional notes: these two configs are not visible in the CLI flags but only\r\naccessable in the config file.\r\n\r\nExample Usage:\r\n\r\n[Eth]\r\nSyncFromCheckpoint = true\r\n\r\n[Eth.Checkpoint]\r\nSectionIndex = 100\r\nSectionHead = \"0xabc\"\r\nCHTRoot = \"0xabc\"\r\nBloomRoot = \"0xabc\"\r\n\r\nPS. Historical checkpoint can be retrieved from the synced full node or light\r\nclient via les_getCheckpoint API."
            },
            {
                "date": "2021-01-19T08:26:42Z",
                "message": "cmd/geth: graceful shutdown if disk is full (#22103)\n\nAdding warnings of free disk space left and graceful shutdown when there is not enough space left.\r\nThis also adds a flag datadir.minfreedisk which can be used to set the trigger for low disk space, and setting it to zero disables the check. \r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2021-01-18": [
            {
                "date": "2021-01-18T13:39:43Z",
                "message": "core/state/snapshot: write snapshot generator in batch (#22163)\n\n* core/state/snapshot: write snapshot generator in batch\r\n\r\n* core: refactor the tests\r\n\r\n* core: update tests\r\n\r\n* core: update tests"
            },
            {
                "date": "2021-01-18T13:36:05Z",
                "message": "cmd/geth: dump config for metrics (#22083)\n\n* cmd/geth: dump config\r\n\r\n* cmd/geth: dump config\r\n\r\n* cmd/geth: properly read config again\r\n\r\n* cmd/geth: override metrics if flags are set\r\n\r\n* cmd/geth: write metrics regardless if enabled\r\n\r\n* cmd/geth: renamed to metricsfromcliargs\r\n\r\n* metrics: add default configuration"
            },
            {
                "date": "2021-01-18T13:33:15Z",
                "message": "tests/fuzzers/abi: better test generation (#22158)\n\n* tests/fuzzers/abi: better test generation\r\n\r\n* tests/fuzzers/abi: fixed packing issue\r\n\r\n* oss-fuzz: enable abi fuzzer"
            }
        ],
        "2021-01-16": [
            {
                "date": "2021-01-16T18:06:18Z",
                "message": "les: remove useless protocol defines (#22115)\n\nThis PR has two changes in the les protocol:\r\n\r\n- the auxRoot is not supported. See ethereum/devp2p#171 for more information\r\n- the empty response will be returned in GetHelperTrieProofsMsg request if the merkle\r\n   proving is failed. note, for backward compatibility, the empty merkle proof as well as\r\n   the request auxiliary data will still be returned in  les2/3 protocol no matter the proving\r\n   is successful or not. the proving failure can happen e.g. request the proving for a\r\n   non-included entry in helper trie (unstable header)."
            },
            {
                "date": "2021-01-16T17:15:18Z",
                "message": "eth/protocols/eth: fix slice resize flaw (#22181)"
            }
        ],
        "2021-01-15": [
            {
                "date": "2021-01-15T22:04:38Z",
                "message": "les: don't drop sentTo for normal cases (#22048)"
            },
            {
                "date": "2021-01-15T10:54:34Z",
                "message": "Merge pull request #22177 from karalabe/snapshot-storage-logs\n\ncore/state/snapshot: add generation logs to storage too"
            },
            {
                "date": "2021-01-15T10:26:46Z",
                "message": "core/state/snapshot: add generation logs to storage too"
            }
        ],
        "2021-01-14": [
            {
                "date": "2021-01-14T10:19:57Z",
                "message": "Merge pull request #22169 from karalabe/faucet-regen\n\ncmd/faucet: update the embedded website asset"
            },
            {
                "date": "2021-01-14T10:10:52Z",
                "message": "cmd/faucet: update the embedded website asset"
            }
        ],
        "2021-01-13": [
            {
                "date": "2021-01-13T21:43:07Z",
                "message": "graphql: fix spurious travis failure (#22166)\n\nThe tests sometimes failed with certain go versions because\r\nthe behavior of http.Server.Shutdown changed over time. A bug\r\nthat was fixed in Go 1.15 could cause active connections on unrelated\r\nservers to close unexpectedly. This is fixed by avoiding use of the\r\nsame port number in all tests."
            },
            {
                "date": "2021-01-13T10:44:20Z",
                "message": "consensus/ethash: increase seal timeout for tests (#22162)\n\nIt seems that the 2 second timeout is not enough for Travis CI:\r\n\r\n   --- FAIL: TestTestMode (2.00s)\r\n       ethash_test.go:53: sealing result timeout"
            },
            {
                "date": "2021-01-13T10:42:26Z",
                "message": "graphql: fix spurious error in test (#22164)\n\nThis solves an issue in graphql tests:\r\n\r\n    graphql_test.go:38: could not create new node: datadir already used by another process"
            },
            {
                "date": "2021-01-13T10:29:28Z",
                "message": "tests: update the reference tests (#22009)"
            },
            {
                "date": "2021-01-13T10:14:36Z",
                "message": "cmd/utils: don't enumerate USB unless --usb is set (#22130)\n\nUSB enumeration still occured. Make sure it will only occur if --usb is set.\r\nThis also deprecates the 'NoUSB' config file option in favor of a new option 'USB'."
            }
        ],
        "2021-01-12": [
            {
                "date": "2021-01-12T16:39:31Z",
                "message": "go.mod: use github.com/holiman/bloomfilter/v2 (#22044)\n\n* deps: use improved bloom filter implementation\r\n\r\n* eth/handler, trie: use 4 keys for syncbloom + minor fixes\r\n\r\n* eth/protocols, trie: revert change on syncbloom method signature"
            },
            {
                "date": "2021-01-12T14:50:11Z",
                "message": "cmd/utils: avoid making console preloads absolute (#22109)\n\nResolves https://github.com/etclabscore/core-geth/issues/273\r\n\r\njsre.JSRE already handles establishing preload\r\nfile paths relative to the 'assets' path (aka docroot),\r\nwhere it joins the assets dir and the file path if relative,\r\nor uses the file path only if absolute.\r\n\r\nThe duplication of this logic by MakeConsolePreloads\r\ncaused preloaded files to have paths which contained\r\nduplicate references to the assets dir path.\r\n\r\nDate: 2020-12-30 08:25:01-06:00\r\nSigned-off-by: meows <b5c6@protonmail.com>"
            },
            {
                "date": "2021-01-12T09:52:13Z",
                "message": "eth: return error from eth_chainID during sync before EIP-155 activates (#21686)\n\nThis changes the chainID RPC method to return an error when EIP-155 is not yet\r\nactive at the current block height. It used to simply return zero in this case, but\r\nthat's confusing."
            }
        ],
        "2021-01-11": [
            {
                "date": "2021-01-11T13:55:42Z",
                "message": " graphql: fix issue with unmarshalling int32 into `Long` type #22153"
            },
            {
                "date": "2021-01-11T11:53:13Z",
                "message": "eth: improve log message (#22146)\n\n* eth: fixed typos\r\n\r\n* eth: fixed log message"
            },
            {
                "date": "2021-01-11T08:52:46Z",
                "message": "Merge pull request #22157 from karalabe/prque-tests\n\ncommon/prque: pull in tests and benchmarks from upstream"
            },
            {
                "date": "2021-01-11T08:31:03Z",
                "message": "common/prque: pull in tests and benchmarks from upstream"
            }
        ],
        "2021-01-10": [
            {
                "date": "2021-01-10T11:54:15Z",
                "message": "core: persist bad blocks (#21827)\n\n* core: persist bad blocks\r\n\r\n* core, eth, internal: address comments\r\n\r\n* core/rawdb: add badblocks to inspector\r\n\r\n* core, eth: update\r\n\r\n* internal: revert\r\n\r\n* core, eth: only save 10 bad blocks\r\n\r\n* core/rawdb: address comments\r\n\r\n* core/rawdb: fix\r\n\r\n* core: address comments"
            }
        ],
        "2021-01-09": [
            {
                "date": "2021-01-09T16:29:19Z",
                "message": "eth/downloader: fix race condition in tests (#22140)\n\n* downloader: fix race condition in tests\r\n\r\n* eth/downloader: fix race condition in tests\r\n\r\n* Revert \"downloader: fix race condition in tests\"\r\n\r\nThis reverts commit 108033ebc6985de83791d375b6e6647a77d28d5a."
            }
        ],
        "2021-01-07": [
            {
                "date": "2021-01-07T22:39:35Z",
                "message": "les: remove transaction propagation limits (#22125)"
            },
            {
                "date": "2021-01-07T16:45:27Z",
                "message": "Merge pull request #22137 from karalabe/faucet-fb-fix\n\ncmd/faucet: switch Facebook auth over to mobile site"
            },
            {
                "date": "2021-01-07T11:04:20Z",
                "message": "cmd/faucet: switch Facebook auth over to mobile site"
            },
            {
                "date": "2021-01-07T16:12:41Z",
                "message": "eth/protocols/snap: speed up hash checks (#22023)\n\n* eth/protocols/snap: speed up hash checks\r\n\r\n* eth/protocols/snap: nit fix\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2021-01-07T10:58:42Z",
                "message": "Merge pull request #22136 from karalabe/faucet-websocket-fix\n\ncmd/faucet: fix websocket race regression after switching to gorilla"
            },
            {
                "date": "2021-01-07T10:58:07Z",
                "message": "eth/protocols/snap: track reverts when peer rejects request (#22016)\n\n* eth/protocols/snap: reschedule missed deliveries\r\n\r\n* eth/protocols/snap: clarify log message\r\n\r\n* eth/protocols/snap: revert failures async and update runloop\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2021-01-07T08:23:50Z",
                "message": "cmd/faucet: fix websocket race regression after switching to gorilla"
            },
            {
                "date": "2021-01-07T07:12:20Z",
                "message": "Merge pull request #22122 from karalabe/snapshot-polishes\n\ncmd/utils, eth/downloader: minor snap nitpicks"
            },
            {
                "date": "2021-01-07T06:36:21Z",
                "message": "snapshot, trie: fixed typos, mostly in snapshot pkg (#22133)"
            }
        ],
        "2021-01-06": [
            {
                "date": "2021-01-06T16:19:16Z",
                "message": "graphql: return decimal for `estimateGas` and `cumulativeGas` queries  (#22126)\n\n* estimateGas, cumulativeGas\r\n* linted\r\n* add test for estimateGas"
            },
            {
                "date": "2021-01-06T11:06:44Z",
                "message": "crypto: fix ineffectual assignments (#22124)\n\n* crypto/bls12381: fixed ineffectual assignment\r\n\r\n* crypto/signify: fix ineffectual assignment"
            },
            {
                "date": "2021-01-06T06:37:45Z",
                "message": "cmd/utils, eth/downloader: minor snap nitpicks"
            }
        ],
        "2021-01-05": [
            {
                "date": "2021-01-05T13:56:01Z",
                "message": "eth/downloader: enhanced test cases for downloader queue (#22114)"
            },
            {
                "date": "2021-01-05T13:48:22Z",
                "message": "common/compiler: fix parsing of solc output with solidity v.0.8.0 (#22092)\n\nSolidity 0.8.0 changes the way that output is marshalled. This patch allows to parse both\r\nthe legacy format used previously and the new format.\r\n\r\nSee also https://docs.soliditylang.org/en/breaking/080-breaking-changes.html#interface-changes"
            },
            {
                "date": "2021-01-05T13:31:23Z",
                "message": "cmd/geth: added --mainnet flag (#21932)\n\n* cmd/geth: added --mainnet flag\r\n\r\n* cmd/utils: set default genesis if --mainnet is specified\r\n\r\n* cmd/utils: addressed comments"
            },
            {
                "date": "2021-01-05T10:22:32Z",
                "message": "graphql: use a decimal representation for gas limit and gas used (#21883)\n\nThis changes the JSON encoding of blocks returned by the API\r\nto have decimal instead of hexadecimal numbers. The spec wants\r\nit this way.\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2021-01-05T10:18:22Z",
                "message": "cmd/geth: usb is off by default (#21984)"
            },
            {
                "date": "2021-01-05T09:44:33Z",
                "message": "miner: avoid sleeping in miner (#22108)\n\nThis PR removes a logic in the miner, which was originally intended to help temporary testnets based on ethash from \"running off into the future\". If the difficulty was low, and a few computers started mining several blocks per second, the ethash rules (which demand 1s delay between blocks) would push the blocktimes further and further away.\r\nThe solution was to make the miner sleep while this happened.\r\n\r\nNowadays, this problem is solved instead by PoA chains, and it's recommended to let testnets and devnets be based on clique instead. The existing logic is problematic, since it can cause stalls within the miner making it difficult for remote workers to submit work if the channel is blocked on a sleep.\r\n\r\nCredits to Saar Tochner for reporting this via the bug bounty"
            },
            {
                "date": "2021-01-05T08:27:33Z",
                "message": "Merge pull request #22107 from karalabe/faucet-twitter\n\ncmd: support v1.1 Twitter API in faucet, fix puppeth"
            }
        ],
        "2021-01-04": [
            {
                "date": "2021-01-04T11:58:46Z",
                "message": "cmd: support v1.1 Twitter API in faucet, fix puppeth"
            },
            {
                "date": "2021-01-04T11:42:47Z",
                "message": "SECURITY.md: link to release page (#22067)\n\nAdd links to go-ethereum's GitHub release page.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2021-01-04T11:39:25Z",
                "message": "node: rename startNetworking to openEndpoints (#22105)"
            },
            {
                "date": "2021-01-04T10:58:51Z",
                "message": ".github: Replace wiki links with new doc pages (#22065) (#22068)"
            },
            {
                "date": "2021-01-04T10:52:23Z",
                "message": "cmd/geth: update copyright year (#22099)"
            },
            {
                "date": "2021-01-04T08:07:43Z",
                "message": "core/state/snapshot: gethring -> gathering typo (#22104)"
            }
        ],
        "2020-12-30": [
            {
                "date": "2020-12-30T12:10:11Z",
                "message": "accounts/abi/bind: fix erroneous test (#22053)\n\ncloses #22049"
            }
        ],
        "2020-12-27": [
            {
                "date": "2020-12-27T21:38:16Z",
                "message": "core/rawdb, eth/protocols : Method name typo fix (#22026)"
            },
            {
                "date": "2020-12-27T21:28:08Z",
                "message": "docs: replace wiki links with new doc pages in readme.md (#22065) (#22066)"
            },
            {
                "date": "2020-12-27T21:26:42Z",
                "message": "eth/downloader: remove unnecessary condition (#22052)"
            },
            {
                "date": "2020-12-27T21:18:57Z",
                "message": "signer: docs - replace wiki links with new doc pages (#22069)"
            },
            {
                "date": "2020-12-27T21:09:05Z",
                "message": "eth/filters: replace wiki links with new doc pages (#22070)"
            },
            {
                "date": "2020-12-27T21:01:28Z",
                "message": "cmd/geth: replace wiki links with new doc pages (#22071)"
            },
            {
                "date": "2020-12-27T20:58:39Z",
                "message": "tests/fuzzers: fix false positive in bitutil fuzzer (#22076)"
            },
            {
                "date": "2020-12-27T20:57:19Z",
                "message": "eth, eth/tracers: include intrinsic gas in calltracer, expose for all tracers (#22038)\n\n* eth/tracers: share tx gas price with js tracer\r\n\r\n* eth/tracers: use `go generate`\r\n\r\n* eth/tracers: try with another version of go-bindata\r\n\r\n* eth/tracers: export txGas\r\n\r\n* eth, eth/tracers: pass intrinsic gas to js tracers\r\n\r\neth/tracers: include tx gas in tracers usedGas\r\n\r\neth/tracers: fix prestate tracer's sender balance\r\n\r\neth/tracers: rm unnecessary import\r\n\r\neth/tracers: pass intrinsicGas separately to tracer\r\n\r\neth/tracers: fix tests broken by lack of txdata\r\n\r\neth, eth/tracers: minor fix\r\n\r\n* eth/tracers: regenerate assets + unexport test-struct + add testcase\r\n\r\n* eth/tracers: simplify tests + make table-driven\r\n\r\nCo-authored-by: Guillaume Ballet <gballet@gmail.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2020-12-27T17:56:50Z",
                "message": "README.md: update Travis badge (#22079)\n\nThe legacy dot-org URL was displaying a message about the repository\r\nhaving migrated to the dot-com service, which now covers open-source\r\nprojects as well."
            }
        ],
        "2020-12-23": [
            {
                "date": "2020-12-23T16:44:45Z",
                "message": "common,crypto: move fuzzers out of core (#22029)\n\n* common,crypto: move fuzzers out of core\r\n\r\n* fuzzers: move vm fuzzer out from core\r\n\r\n* fuzzing: rework cover package logic\r\n\r\n* fuzzers: lint"
            },
            {
                "date": "2020-12-23T12:43:22Z",
                "message": "internal/ethapi: restore net_version RPC method (#22061)\n\nDuring the snap and eth refactor, the net_version rpc call was falsely deprecated.\r\nThis restores the net_version RPC handler as most eth2 nodes and other software\r\ndepend on it."
            }
        ],
        "2020-12-21": [
            {
                "date": "2020-12-21T14:39:58Z",
                "message": "eth/downloader: fix typo in comment (#22019)"
            },
            {
                "date": "2020-12-21T10:54:39Z",
                "message": "eth/download/statesync : optimize to avoid a copy in state sync hashing  (#22035)\n\n* eth/download/statesync : state hash sum optimized\r\n\r\n* go fmt with blank in imports\r\n\r\n* keccak read arg fix"
            }
        ],
        "2020-12-17": [
            {
                "date": "2020-12-17T00:20:20Z",
                "message": "cmd/faucet: sort requests by newest first (#22018)"
            }
        ],
        "2020-12-15": [
            {
                "date": "2020-12-15T19:12:14Z",
                "message": "les: les/4 minimalistic version (#21909)\n\n* les: allow tx unindexing in les/4 light server mode\r\n\r\n* les: minor fixes\r\n\r\n* les: more small fixes\r\n\r\n* les: add meaningful constants for recentTxIndex handshake field"
            },
            {
                "date": "2020-12-15T17:52:51Z",
                "message": "eth, core: speed up some tests (#22000)"
            }
        ],
        "2020-12-14": [
            {
                "date": "2020-12-14T13:31:23Z",
                "message": "eth/protocols/eth: remove magic numbers in test (#21999)"
            },
            {
                "date": "2020-12-14T13:08:53Z",
                "message": "cmd/geth: fixed parallelization flaw in account import test (#22002)"
            },
            {
                "date": "2020-12-14T09:27:15Z",
                "message": " core, eth: split eth package, implement snap protocol (#21482)\n\nThis commit splits the eth package, separating the handling of eth and snap protocols. It also includes the capability to run snap sync (https://github.com/ethereum/devp2p/blob/master/caps/snap.md) , but does not enable it by default. \r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2020-12-12": [
            {
                "date": "2020-12-12T16:36:32Z",
                "message": "cmd/abigen: clarify abigen alias flag usage (#21875)\n\n* doc: clarify abigen alias flag usage\r\n\r\nupdate the `abigen --alias` flag help info, give an example to make it more clear\r\n\r\nrelated issue: https://github.com/ethereum/go-ethereum/issues/21846\r\n\r\n* Update cmd/abigen/main.go\r\n\r\nCo-authored-by: ligi <ligi@ligi.de>\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\nCo-authored-by: ligi <ligi@ligi.de>"
            },
            {
                "date": "2020-12-12T09:16:34Z",
                "message": "abi/bind: fix error-handling in generated wrappers for functions returning structs (#22005)\n\nFixes the template used when generating code, which in some scenarios would lead to panic instead of returning an error."
            }
        ],
        "2020-12-11": [
            {
                "date": "2020-12-11T14:56:00Z",
                "message": "core, eth, les: implement unclean-shutdown marker (#21893)\n\nThis PR implements unclean shutdown marker. Every time geth boots, it adds a timestamp to a list of timestamps in the database. This list is capped at 10. At a clean shutdown, the timestamp is removed again. \r\nThus, when geth exits unclean, the marker remains, and at boot up we show the most recent unclean shutdowns to the user, which makes it easier to diagnose root-causes to certain problems. \r\n\r\nCo-authored-by: Nagy Salem <me@muhnagy.com>"
            },
            {
                "date": "2020-12-11T14:49:44Z",
                "message": "consensus: refactor FinalizeAndAssemble to use Finalize (#21993)"
            },
            {
                "date": "2020-12-11T10:06:44Z",
                "message": "consensus/ethash: implement faster difficulty calculators (#21976)\n\nThis PR adds re-written difficulty calculators, which are based on uint256. It also adds a fuzzer + oss-fuzz integration for the new fuzzer. It does differential fuzzing between the new and old calculators.\r\n\r\nNote: this PR does not actually enable the new calculators."
            },
            {
                "date": "2020-12-11T09:44:57Z",
                "message": "core/txpool: remove \"local\" notion from the txpool price heap (#21478)\n\n* core: separate the local notion from the pricedHeap\r\n\r\n* core: add benchmarks\r\n\r\n* core: improve tests\r\n\r\n* core: address comments\r\n\r\n* core: degrade the panic to error message\r\n\r\n* core: fix typo\r\n\r\n* core: address comments\r\n\r\n* core: address comment\r\n\r\n* core: use PEAK instead of POP\r\n\r\n* core: address comments"
            },
            {
                "date": "2020-12-11T09:35:39Z",
                "message": "cmd/faucet: use Twitter API instead of scraping webpage (#21850)\n\nThis PR adds support for using Twitter API to query the tweet and author details. There are two reasons behind this change:\r\n\r\n- Twitter will be deprecating the legacy website on 15th December. The current method is expected to stop working then.\r\n- More importantly, the current system uses Twitter handle for spam protection but the Twitter handle can be changed via automated calls. This allows bots to use the same tweet to withdraw funds infinite times as long as they keep changing their handle between every request. The Rinkeby as well as the Goerli faucet are being actively drained via this method. This PR changes the spam protection to be based on Twitter IDs instead of usernames. A user can not change their Twitter ID."
            },
            {
                "date": "2020-12-11T09:29:42Z",
                "message": "miner, test: fix potential goroutine leak (#21989)\n\nIn miner/worker.go, there are two goroutine using channel w.newWorkCh: newWorkerLoop() sends to this channel, and mainLoop() receives from this channel. Only the receive operation is in a select.\r\n\r\nHowever, w.exitCh may be closed by another goroutine. This is fine for the receive since receive is in select, but if the send operation is blocking, then it will block forever. This commit puts the send in a select, so it won't block even if w.exitCh is closed.\r\n\r\nSimilarly, there are two goroutines using channel errc: the parent that runs the test receives from it, and the child created at line 573 sends to it. If the parent goroutine exits too early by calling t.Fatalf() at line 614, then the child goroutine will be blocked at line 574 forever. This commit adds 1 buffer to errc. Now send will not block, and receive is not influenced because receive still needs to wait for the send."
            },
            {
                "date": "2020-12-11T09:28:01Z",
                "message": "les: rework float conversion on arm64 and other architectures (#21994)\n\nThe previous fix #21960 converted the float to an intermediate signed int, before attempting the uint conversion. Although this works, this doesn't guarantee that other architectures will work the same."
            },
            {
                "date": "2020-12-11T07:59:46Z",
                "message": "params: begin v1.9.26 release cycle"
            },
            {
                "date": "2020-12-11T07:59:12Z",
                "message": "params: go-ethereum v1.9.25 stable"
            },
            {
                "date": "2020-12-11T08:02:55Z",
                "message": "build: upgrade to Go 1.15.6 (#21986)"
            }
        ],
        "2020-12-10": [
            {
                "date": "2020-12-10T16:20:55Z",
                "message": "les: introduce forkID (#21974)\n\n* les: introduce forkID\r\n\r\n* les: address comment"
            },
            {
                "date": "2020-12-10T13:48:32Z",
                "message": "core, trie: speed up some tests with quadratic processing flaw (#21987)\n\nThis commit fixes a flaw in two testcases, and brings down the exec-time from ~40s to ~8s for trie/TestIncompleteSync.\r\n\r\nThe checkConsistency was performed over and over again on the complete set of nodes, not just the recently added, turning it into a quadratic runtime."
            },
            {
                "date": "2020-12-10T13:33:52Z",
                "message": "les, light: remove untrusted header retrieval in ODR (#21907)\n\n* les, light: remove untrusted header retrieval in ODR\r\n\r\n* les: polish\r\n\r\n* light: check the hash equality in odr"
            }
        ],
        "2020-12-09": [
            {
                "date": "2020-12-09T19:21:31Z",
                "message": "p2p/enode: avoid crashing for invalid IP (#21981)\n\nThe database panicked for invalid IPs. This is usually no problem\r\nbecause all code paths leading to node DB access verify the IP, but it's\r\ndangerous because improper validation can turn this panic into a DoS\r\nvulnerability. The quick fix here is to just turn database accesses\r\nusing invalid IP into a noop. This isn't great, but I'm planning to\r\nremove the node DB for discv5 long-term, so it should be fine to have\r\nthis quick fix for half a year.\r\n\r\nFixes #21849"
            },
            {
                "date": "2020-12-09T14:43:36Z",
                "message": "crypto/signify, build: fix archive signing with signify (#21977)\n\nThis fixes some issues in crypto/signify and makes release signing work.\r\n\r\nThe archive signing step in ci.go used getenvBase64, which decodes the key data.\r\nThis is incorrect here because crypto/signify already base64-decodes the key."
            },
            {
                "date": "2020-12-09T12:59:24Z",
                "message": "cmd/geth: add test to verify regexps in version check (#21962)"
            },
            {
                "date": "2020-12-09T10:13:02Z",
                "message": "core,les: headerchain import in batches (#21471)\n\n* core: add test for headerchain inserts\r\n\r\n* core, light: write headerchains in batches\r\n\r\n* core: change to one callback per batch of inserted headers + review concerns\r\n\r\n* core: error-check on batch write\r\n\r\n* core: unexport writeHeaders\r\n\r\n* core: remove callback parameter in InsertHeaderChain\r\n\r\nThe semantics of InsertHeaderChain are now much simpler: it is now an\r\nall-or-nothing operation. The new WriteStatus return value allows\r\ncallers to check for the canonicality of the insertion. This change\r\nsimplifies use of HeaderChain in package les, where the callback was\r\npreviously used to post chain events.\r\n\r\n* core: skip some hashing when writing headers\r\n\r\n* core: less hashing in header validation\r\n\r\n* core: fix headerchain flaw regarding blacklisted hashes\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2020-12-08": [
            {
                "date": "2020-12-08T18:19:09Z",
                "message": "common: improve printing of Hash and Address (#21834)\n\nBoth Hash and Address have a String method, which returns the value as\r\nhex with 0x prefix. They also had a Format method which tried to print\r\nthe value using printf of []byte. The way Format worked was at odds with\r\nString though, leading to a situation where fmt.Sprintf(\"%v\", hash)\r\nreturned the decimal notation and hash.String() returned a hex string.\r\n\r\nThis commit makes it consistent again. Both types now support the %v,\r\n%s, %q format verbs for 0x-prefixed hex output. %x, %X creates\r\nunprefixed hex output. %d is also supported and returns the decimal\r\nnotation \"[1 2 3...]\".\r\n\r\nFor Address, the case of hex characters in %v, %s, %q output is\r\ndetermined using the EIP-55 checksum. Using %x, %X with Address\r\ndisables checksumming.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2020-12-08T13:44:56Z",
                "message": "accounts/abi/bind: allow specifying signer on transactOpts (#21356)\n\nThis commit enables users to specify which signer they want to use while creating their transactOpts.\r\nPreviously all contract interactions used the homestead signer. Now a user can specify whether they\r\nwant to sign with homestead or EIP155 and specify the chainID which adds another layer of security.\r\n\r\nCloses #16484"
            },
            {
                "date": "2020-12-08T09:47:56Z",
                "message": "crypto/secp256k1: add workaround for go mod vendor (#21735)\n\nGo won't vendor C files if there are no Go files present in the directory.\r\nWorkaround is to add dummy Go files.\r\n\r\nFixes: #20232"
            }
        ],
        "2020-12-07": [
            {
                "date": "2020-12-07T13:04:27Z",
                "message": "les: cosmetic rewrite of the arm64 float bug workaround (#21960)\n\n* les: revert arm float bug workaround to check go 1.15\r\n\r\n* add traces to reproduce outside travis\r\n\r\n* simpler workaround"
            }
        ],
        "2020-12-04": [
            {
                "date": "2020-12-04T14:01:47Z",
                "message": "cmd/geth: implement vulnerability check (#21859)\n\n* cmd/geth: implement vulnerability check\r\n\r\n* cmd/geth: use minisign to verify vulnerability feed\r\n\r\n* cmd/geth: add the test too\r\n\r\n* cmd/geth: more minisig/signify testing\r\n\r\n* cmd/geth: support multiple pubfiles for signing\r\n\r\n* cmd/geth: add @holiman minisig pubkey\r\n\r\n* cmd/geth: polishes on vulnerability check\r\n\r\n* cmd/geth: fix ineffassign linter nit\r\n\r\n* cmd/geth: add CVE to version check struct\r\n\r\n* cmd/geth/testdata: add missing testfile\r\n\r\n* cmd/geth: add more keys to versionchecker\r\n\r\n* cmd/geth: support file:// URLs in version check\r\n\r\n* cmd/geth: improve key ID printing when signature check fails\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2020-12-04T11:22:19Z",
                "message": "core: improve contextual information on core errors (#21869)\n\nA lot of times when we hit 'core' errors, example: invalid tx, the information provided is\r\ninsufficient. We miss several pieces of information: what account has nonce too high,\r\nand what transaction in that block was offending?\r\n\r\nThis PR adds that information, using the new type of wrapped errors.\r\nIt also adds a testcase which (partly) verifies the output from the errors.\r\n\r\nThe first commit changes all usage of direct equality-checks on core errors, into\r\nusing errors.Is. The second commit adds contextual information. This wraps most\r\nof the core errors with more information, and also wraps it one more time in\r\nstateprocessor, to further provide tx index and tx hash, if such a tx is encoutered in\r\na block. The third commit uses the chainmaker to try to generate chains with such\r\nerrors in them, thus triggering the errors and checking that the generated string meets\r\nexpectations."
            },
            {
                "date": "2020-12-04T07:54:07Z",
                "message": "core/vm/runtime: remove duplicated line (#21956)\n\n\r\nThis line is duplicated, though it doesn't cause any issues."
            }
        ],
        "2020-12-03": [
            {
                "date": "2020-12-03T12:16:20Z",
                "message": "cmd/devp2p: add node filter for snap + fix arg error (#21950)"
            }
        ],
        "2020-12-02": [
            {
                "date": "2020-12-02T15:42:38Z",
                "message": "go.mod: update github.com/golang/snappy(#21934)\n\nThis updates the snappy library depency to include a fix for\r\na Go 1.16 incompatibility issue."
            },
            {
                "date": "2020-12-02T11:49:20Z",
                "message": "eth: fix error in tracing if reexec is set (#21830)\n\n* eth: fix error in tracing if reexec is set\r\n\r\n* eth: change pointer embedding to value-embedding"
            },
            {
                "date": "2020-12-02T08:17:59Z",
                "message": "params: update CHTs (#21941)"
            }
        ],
        "2020-12-01": [
            {
                "date": "2020-12-01T09:03:41Z",
                "message": "les: fix nodiscover option (#21906)"
            }
        ],
        "2020-11-30": [
            {
                "date": "2020-11-30T17:58:47Z",
                "message": "p2p/nodestate: fix deadlock during shutdown of les server (#21927)\n\nThis PR fixes a deadlock reported here: #21925\r\n\r\nThe cause is that many operations may be pending, but if the close happens, only one of them gets awoken and exits, the others remain waiting for a signal that never comes."
            },
            {
                "date": "2020-11-30T14:23:48Z",
                "message": "cmd/devp2p/internal/ethtest: add transaction tests (#21857)"
            },
            {
                "date": "2020-11-30T13:43:20Z",
                "message": "cmd/geth: make tests run quicker + use less memory and disk (#21919)"
            },
            {
                "date": "2020-11-30T08:03:24Z",
                "message": "accounts/keystore: add missing function doc for SignText (#21914)\n\nCo-authored-by: Pascal Dierich <pascal@pascaldierich.com>"
            }
        ],
        "2020-11-29": [
            {
                "date": "2020-11-29T12:43:15Z",
                "message": "accounts, signer: fix Ledger Live account derivation path (clef) (#21757)\n\n* signer/core/api: fix derivation of ledger live accounts\r\n\r\nFor ledger hardware wallets, change account iteration as follows:\r\n\r\n- ledger legacy: m/44'/60'/0'/X; for 0<=X<5\r\n- ledger live: m/44'/60'/0'/0/X; for 0<=X<5\r\n\r\n- ledger legacy: m/44'/60'/0'/X; for 0<=X<10\r\n- ledger live: m/44'/60'/X'/0/0; for 0<=X<10\r\n\r\nNon-ledger derivation is unchanged and remains as:\r\n- non-ledger: m/44'/60'/0'/0/X; for 0<=X<10\r\n\r\n* signer/core/api: derive ten default paths for all hardware wallets, plus ten legacy and ten live paths for ledger wallets\r\n\r\n* signer/core/api: as .../0'/0/0 already included by default paths, do not include it again with ledger live paths\r\n\r\n* accounts, signer: implement path iterators for hd wallets\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2020-11-27": [
            {
                "date": "2020-11-27T11:13:54Z",
                "message": "crypto: signing builds with signify/minisign (#21798)\n\n* internal/build: implement signify's signing func\r\n* Add signify to the ci utility\r\n* fix output file format\r\n* Add unit test for signify\r\n* holiman's + travis' feedback\r\n* internal/build: verify signify's output\r\n* crypto: move signify to common dir\r\n* use go-minisign to verify binaries\r\n* more holiman feedback\r\n* crypto, ci: support minisign output\r\n* only accept one-line trusted comments\r\n* configurable untrusted comments\r\n* code cleanup in tests\r\n* revert to use ed25519 from the stdlib\r\n* bug: fix for empty untrusted comments\r\n* write timestamp as comment if trusted comment isn't present\r\n* rename line checker to commentHasManyLines\r\n* crypto: added signify fuzzer (#6)\r\n* crypto: added signify fuzzer\r\n* stuff\r\n* crypto: updated signify fuzzer to fuzz comments\r\n* crypto: repro signify crashes\r\n* rebased fuzzer on build-signify branch\r\n* hide fuzzer behind gofuzz build flag\r\n* extract key data inside a single function\r\n* don't treat \\r as a newline\r\n* travis: fix signing command line\r\n* do not use an external binary in tests\r\n* crypto: move signify to crypto/signify\r\n* travis: fix formatting issue\r\n* ci: fix linter build after package move\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
            }
        ],
        "2020-11-25": [
            {
                "date": "2020-11-25T21:16:36Z",
                "message": "p2p/discover: fix deadlock in discv5 message dispatch (#21858)\n\nThis fixes a deadlock that could occur when a response packet arrived\r\nafter a call had already received enough responses and was about to\r\nsignal completion to the dispatch loop.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2020-11-25T20:00:23Z",
                "message": "all: remove redundant conversions and import names (#21903)"
            },
            {
                "date": "2020-11-25T09:19:36Z",
                "message": "graphql: always return 400 if errors are present in the response (#21882)\n\n* Make sure to return 400 when errors are present in the response\r\n\r\n* graphql: use less memory in chainconfig for tests\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2020-11-25T08:24:50Z",
                "message": "all: simplify nested complexity and if blocks ending with a return statement (#21854)\n\nChanges:\r\n\r\n    Simplify nested complexity\r\n    If an if blocks ends with a return statement then remove the else nesting.\r\n\r\nMost of the changes has also been reported in golint https://goreportcard.com/report/github.com/ethereum/go-ethereum#golint"
            },
            {
                "date": "2020-11-25T07:53:20Z",
                "message": "core/types: fixed typo (#21897)"
            }
        ],
        "2020-11-24": [
            {
                "date": "2020-11-24T15:09:17Z",
                "message": "cmd/devp2p/internal/ethtest: add 'large announcement' tests (#21792)\n\n* cmd/devp2p/internal/ethtest: added large announcement tests\r\n\r\n* cmd/devp2p/internal/ethtest: added large announcement tests\r\n\r\n* cmd/devp2p/internal/ethtest: refactored stuff a bit\r\n\r\n* cmd/devp2p/internal/ethtest: added TestMaliciousStatus/Handshake\r\n\r\n* cmd/devp2p/internal/ethtest: fixed rebasing issue\r\n\r\n* happy linter, happy life\r\n\r\n* cmd/devp2p/internal/ethtest: used readAndServe\r\n\r\n* stuff\r\n\r\n* cmd/devp2p/internal/ethtest: fixed test cases"
            },
            {
                "date": "2020-11-24T15:02:53Z",
                "message": "github: Remove vulnerability.md (#21894)\n\nThis type is automatically offered by github after changing to the new style and a security.md being present"
            },
            {
                "date": "2020-11-24T09:55:17Z",
                "message": "les: fix GetProofsV2 bug (#21896)"
            },
            {
                "date": "2020-11-24T09:33:58Z",
                "message": "cmd/faucet: improve handling of facebook post url (#21838)\n\nResolves #21532\r\n\r\nCo-authored-by: roger <dengjun@huobi.com>"
            }
        ],
        "2020-11-23": [
            {
                "date": "2020-11-23T15:47:20Z",
                "message": "Merge pull request #21890 from ligi/issue_templates\n\ngithub: Add new style of issue-templates"
            },
            {
                "date": "2020-11-23T14:49:16Z",
                "message": "tests/fuzzers/bls1381: add bls fuzzer (#21796)\n\n* added bls fuzzer\r\n\r\n* crypto/bls12381: revert bls-changes, fixup fuzzer tests\r\n\r\n* fuzzers: split bls fuzzing into 8 different units\r\n\r\n* fuzzers/bls: remove (now stale) corpus\r\n\r\n* crypto/bls12381: added blsfuzz corpus\r\n\r\n* fuzzers/bls12381: fix the bls corpus\r\n\r\n* fuzzers: fix oss-fuzz script\r\n\r\n* tests/fuzzers: fixups on bls corpus\r\n\r\n* test/fuzzers: remove leftover corpus\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
            },
            {
                "date": "2020-11-23T12:12:42Z",
                "message": "github: Add new style of issue-templates\n\ncloses #20024"
            },
            {
                "date": "2020-11-23T09:18:33Z",
                "message": "les/utils: protect against WeightedRandomSelect overflow (#21839)\n\nAlso fixes a bug in les/flowcontrol that caused the overflow."
            }
        ],
        "2020-11-20": [
            {
                "date": "2020-11-20T14:14:25Z",
                "message": "p2p: avoid spinning loop on out-of-handles (#21878)\n\n* p2p: avoid busy-loop on temporary errors\r\n\r\n* p2p: address review concerns"
            },
            {
                "date": "2020-11-20T07:53:10Z",
                "message": "crypto/bn256: fix bn256Mul fuzzer to not hang on large input (#21872)\n\n* crypto/bn256: fix bn256Mul fuzzer to not hang on large input\r\n\r\n* Update crypto/bn256/bn256_fuzz.go\r\n\r\nCo-authored-by: ligi <ligi@ligi.de>\r\n\r\nCo-authored-by: ligi <ligi@ligi.de>"
            }
        ],
        "2020-11-19": [
            {
                "date": "2020-11-19T21:50:47Z",
                "message": "trie, rpc, cmd/geth: fix tests on 32-bit and windows + minor rpc fixes (#21871)\n\n* trie: fix tests to work on 32-bit systems\r\n\r\n* les: make test work on 32-bit platform\r\n\r\n* cmd/geth: fix windows-issues on tests\r\n\r\n* trie: improve balance\r\n\r\n* cmd/geth: make account tests less verbose + less mem intense\r\n\r\n* rpc: make debug-level log output less verbose\r\n\r\n* cmd/geth: lint"
            },
            {
                "date": "2020-11-19T13:54:49Z",
                "message": "node: support expressive origin rules in ws.origins (#21481)\n\n* Only compare hostnames in ws.origins\r\n\r\nAlso using a helper function for ToLower consolidates all preparation steps in one function for more maintainable consistency.\r\n\r\nSpaces => tabs\r\n\r\nRemove a semicolon\r\n\r\nAdd space at start of comment\r\n\r\nRemove parens around conditional\r\n\r\nHandle case wehre parsed hostname is empty\r\n\r\nWhen passing a single word like \"localhost\" the parsed hostname is an empty string. Handle this and the error-parsing case together as default, and the nonempty hostname case in the conditional.\r\n\r\nRefactor with new originIsAllowed functions\r\n\r\nAdds originIsAllowed() & ruleAllowsOrigin(); removes prepOriginForComparison\r\n\r\nRemove blank line\r\n\r\nAdded tests for simple allowed-orign rule\r\n\r\nwhich does not specify a protocol or port, just a hostname\r\n\r\nFix copy-paste: `:=` => `=`\r\n\r\nRemove parens around conditional\r\n\r\nRemove autoadded whitespace on blank lines\r\n\r\nCompare scheme, hostname, and port with rule\r\n\r\nif the rule specifies those portions.\r\n\r\nRemove one autoadded trailing whitespace\r\n\r\nBetter handle case where only origin host is given\r\n\r\ne.g. \"localhost\"\r\n\r\nRemove parens around conditional\r\n\r\nRefactor: attemptWebsocketConnectionFromOrigin DRY\r\n\r\nInclude return type on helper function\r\n\r\nProvide srv obj in helper fn\r\n\r\nProvide srv to helper fn\r\n\r\nRemove stray underscore\r\n\r\nRemove blank line\r\n\r\nparent 93e666b4c1e7e49b8406dc83ed93f4a02ea49ac1\r\nauthor wbt <wbt@users.noreply.github.com> 1598559718 -0400\r\ncommitter Martin Holst Swende <martin@swende.se> 1605602257 +0100\r\ngpgsig -----BEGIN PGP SIGNATURE-----\r\n\r\n iQFFBAABCAAvFiEEypmrtbNuJK1doP1AaDtDjAWl3fAFAl+zi9ARHG1hcnRpbkBz\r\n d2VuZGUuc2UACgkQaDtDjAWl3fDRiwgAoMtzU8dwRV7Q9xkCwWEx9Wz2f3n6jUr2\r\n VWBycDKGKwRkPPOER3oc9kzjGU/P1tFlK07PjfnAKZ9KWzxpDcJZwYM3xCBurG7A\r\n 16y4YsQnzgPNONv3xIkdi3RZtDBIiPFFEmdZFFvZ/jKexfI6JIYPngCAoqdTIFb9\r\n On/aPvvVWQn1ExfmarsvvJ7kUDUG77tZipuacEH5FfFsfelBWOEYPe+I9ToUHskv\r\n +qO6rOkV1Ojk8eBc6o0R1PnApwCAlEhJs7aM/SEOg4B4ZJJneiFuEXBIG9+0yS2I\r\n NOicuDPLGucOB5nBsfIKI3USPeE+3jxdT8go2lN5Nrhm6MimoILDsQ==\r\n =sgUp\r\n -----END PGP SIGNATURE-----\r\n\r\nRefactor: drop err var for more concise test lines\r\n\r\nAdd several tests for new WebSocket origin checks\r\n\r\nRemove autoadded whitespace on blank lines\r\n\r\nRestore TestWebsocketOrigins originally-named test\r\n\r\nand rename the others to be helpers rather than full tests\r\n\r\nRemove autoadded whitespace on blank line\r\n\r\nTemporarily comment out new test sets\r\n\r\nUncomment test around origin rule with scheme\r\n\r\nRemove tests without scheme on browser origin\r\n\r\nper https://github.com/ethereum/go-ethereum/pull/21481/files#r479371498\r\n\r\nUncomment tests with port; remove some blank lines\r\n\r\nHandle when browser does not specify scheme/port\r\n\r\nUncomment test for including scheme & port in rule\r\n\r\nAdd IP tests\r\n\r\n* node: more tests + table-driven, ws origin changes\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2020-11-19T05:49:40Z",
                "message": "Merge pull request #21861 from holiman/remove_retesteth\n\ncmd/geth: remove retesteth"
            }
        ],
        "2020-11-18": [
            {
                "date": "2020-11-18T20:50:11Z",
                "message": "metrics: fix the panic for reading empty cpu stats (#21864)"
            },
            {
                "date": "2020-11-18T09:51:33Z",
                "message": "all: disable recording preimage of trie keys (#21402)\n\n* cmd, core, eth, light, trie: disable recording preimage by default\r\n\r\n* core, eth: fix unit tests\r\n\r\n* core: fix import\r\n\r\n* all: change to nopreimage\r\n\r\n* cmd, core, eth, trie: use cache.preimages flag\r\n\r\n* cmd: enable preimages for archive node\r\n\r\n* cmd/utils, trie: simplify preimage tracking a bit\r\n\r\n* core: fix linter\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            }
        ],
        "2020-11-17": [
            {
                "date": "2020-11-17T11:01:19Z",
                "message": "cmd/geth: improve les test on windows (#21860)"
            },
            {
                "date": "2020-11-17T10:47:17Z",
                "message": "crypto/secp256k1: add checking z sign in affineFromJacobian (#18419)\n\nThe z == 0 check is hit whenever we Add two points with the same x1/x2\r\ncoordinate. crypto/elliptic uses the same check in their affineFromJacobian\r\nfunction. This change does not affect block processing or tx signature verification\r\nin any way, because it does not use the Add or Double methods."
            },
            {
                "date": "2020-11-17T10:44:38Z",
                "message": "cmd/geth: remove retesteth"
            },
            {
                "date": "2020-11-17T09:35:58Z",
                "message": "consensus/ethash: fix usage of *reflect.SliceHeader (#21372)\n\n* consensus/ethash: only use *reflect.SliceHeader, not reflect.SliceHeader. See comment here: https://github.com/golang/go/issues/40397\\#issuecomment-663748689\r\n\r\n* consensus/ethash: pr feedback from @mdempsky, makes a copy of dest such that is not mutated\r\n\r\n* consensus/ethash: remove noop assign\r\n\r\n* consensus/ethash: apply same fix to another location\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2020-11-17T08:51:36Z",
                "message": "crypto/bn256: refine comments according to #19577, #21595, and #21836 (#21847)"
            }
        ],
        "2020-11-16": [
            {
                "date": "2020-11-16T13:08:13Z",
                "message": "common: fix documentation of Address.SetBytes (#21814)"
            }
        ],
        "2020-11-13": [
            {
                "date": "2020-11-13T12:43:15Z",
                "message": "accounts/abi: template: set events Raw field in Parse methods (#21807)"
            },
            {
                "date": "2020-11-13T12:42:19Z",
                "message": "core, all: split vm.Context into BlockContext and TxContext (#21672)\n\n* all: core: split vm.Config into BlockConfig and TxConfig\r\n\r\n* core: core/vm: reset EVM between tx in block instead of creating new\r\n\r\n* core/vm: added docs"
            },
            {
                "date": "2020-11-13T12:39:59Z",
                "message": "core/vm, protocol_params: implement eip-2565 modexp repricing (#21607)\n\n* core/vm, protocol_params: implement eip-2565 modexp repricing\r\n\r\n* core/vm: fix review concerns"
            },
            {
                "date": "2020-11-13T11:36:38Z",
                "message": "tests/fuzzers: improve the fuzzers (#21829)\n\n* tests/fuzzers, common/bitutil: make fuzzers use correct returnvalues + remove output\r\n\r\n* tests/fuzzers/stacktrie: fix duplicate-key insertion in stacktrie (false positive)\r\n\r\n* tests/fuzzers/stacktrie: fix compilation error\r\n\r\n* tests/fuzzers: linter nits"
            },
            {
                "date": "2020-11-13T09:17:23Z",
                "message": "crypto/bn256: better comments for u, P and Order (#21836)"
            },
            {
                "date": "2020-11-13T08:27:57Z",
                "message": "crypto/bn256: improve bn256 fuzzer (#21815)\n\n* crypto/cloudflare: fix nil deref in random G1/G2 reading\r\n\r\n* crypto/bn256: improve fuzzer\r\n\r\n* crypto/bn256: fix some flaws in fuzzer"
            }
        ],
        "2020-11-12": [
            {
                "date": "2020-11-12T20:21:24Z",
                "message": "params: begin v1.9.25 release cycle"
            },
            {
                "date": "2020-11-12T20:10:15Z",
                "message": "params: release Geth v1.9.24 with Go 1.15.5 (#21842)"
            }
        ],
        "2020-11-11": [
            {
                "date": "2020-11-11T22:52:50Z",
                "message": ".travis.yml: move test builders after install builders (#21833)"
            },
            {
                "date": "2020-11-11T21:08:22Z",
                "message": "build: fix regressions with the -dlgo change (#21831)\n\nThis fixes cross-build and mobile framework failures.\r\nIt also disables the mac test builder because it was failing\r\nall the time in hard to understand ways and we can't afford\r\nit anymore under Travis CI's new pricing."
            },
            {
                "date": "2020-11-11T20:13:12Z",
                "message": "consensus/ethash: use 64bit indexes for the DAG generation (#21793)\n\n* Bit boundary fix for the DAG generation routine\r\n\r\n* Fix unnecessary conversion warnings\r\n\r\nCo-authored-by: Sergey Pavlov <spavlov@gmail.com>"
            },
            {
                "date": "2020-11-11T13:34:43Z",
                "message": "build: add -dlgo flag in ci.go (#21824)\n\nThis new flag downloads a known version of Go and builds with it. This\r\nis meant for environments where we can't easily upgrade the installed Go\r\nversion.\r\n\r\n* .travis.yml: remove install step for PR test builders\r\n\r\nWe added this step originally to avoid re-building everything\r\nfor every test. go test has become much smarter in recent go\r\nreleases, so we no longer need to install anything here."
            }
        ],
        "2020-11-10": [
            {
                "date": "2020-11-10T19:54:59Z",
                "message": "fuzzers: removed fuzzbuzz configuration (#21813)\n\nWe decided to move our fuzzing efforts to oss-fuzz since fuzzbuzz is still early access."
            },
            {
                "date": "2020-11-10T14:21:41Z",
                "message": "scripts: create oss-fuzz script in go-ethereum (#21808)"
            },
            {
                "date": "2020-11-10T13:19:44Z",
                "message": "p2p/simulations/adapters/exec: fix some issues (#21801)\n\n- Remove the ws:// prefix from the status endpoint since\r\n  the ws:// is already included in the stack.WSEndpoint().\r\n- Don't register the services again in the node start.\r\n  Registration is already done in the initialization stage.\r\n- Expose admin namespace via websocket.\r\n  This namespace is necessary for connecting the peers via websocket.\r\n- Offer logging relevant options for exec adapter.\r\n  It's really painful to mix all log output in the single console. So\r\n  this PR offers two additional options for exec adapter in this case\r\n  testers can config the log output(e.g. file output) and log level\r\n  for each p2p node."
            }
        ],
        "2020-11-09": [
            {
                "date": "2020-11-09T15:57:23Z",
                "message": "Merge pull request #21803 from holiman/ethash\n\nconsensus/ethash: fix the percentage progress report"
            },
            {
                "date": "2020-11-09T15:50:26Z",
                "message": "Merge pull request #21804 from karalabe/snapshot-marker-sync\n\ncore/state/snapshot: update generator marker in sync with flushes"
            },
            {
                "date": "2020-11-09T15:49:56Z",
                "message": "Merge pull request #21805 from karalabe/travis-drop-1.13\n\ntravis: drop Go 1.13 builders as it's not supported any more"
            },
            {
                "date": "2020-11-09T15:49:21Z",
                "message": "Merge pull request #21806 from karalabe/deprecate-eoan\n\nbuild: stop building for Ubuntu Eoan, not supported any more"
            },
            {
                "date": "2020-11-09T15:43:54Z",
                "message": "build: stop building for Ubuntu Eoan, not supported any more"
            },
            {
                "date": "2020-11-09T15:39:42Z",
                "message": "travis: drop Go 1.13 builders as it's not supported any more"
            },
            {
                "date": "2020-11-09T14:08:12Z",
                "message": "trie, tests/fuzzers: implement a stacktrie fuzzer + stacktrie fixes (#21799)\n\n* trie: fix error in stacktrie not committing small roots\r\n\r\n* fuzzers: make trie-fuzzer use correct returnvalues\r\n\r\n* trie: improved tests\r\n\r\n* tests/fuzzers: fuzzer for stacktrie vs regular trie\r\n\r\n* test/fuzzers: make stacktrie fuzzer use 32-byte keys\r\n\r\n* trie: fix error in stacktrie with small nodes\r\n\r\n* trie: add (skipped) testcase for stacktrie\r\n\r\n* tests/fuzzers: address review comments for stacktrie fuzzer\r\n\r\n* trie: fix docs in stacktrie"
            },
            {
                "date": "2020-11-09T14:03:58Z",
                "message": "core/state/snapshot: update generator marker in sync with flushes"
            },
            {
                "date": "2020-11-09T10:48:18Z",
                "message": "consensus/ethash: fix the percentage progress report"
            }
        ],
        "2020-11-05": [
            {
                "date": "2020-11-05T09:55:50Z",
                "message": "Merge pull request #21787 from karalabe/pod-non-verbose\n\nbuild: stop verbose output to keep travis from overflowing"
            },
            {
                "date": "2020-11-05T09:52:35Z",
                "message": "build: stop verbose output to keep travis from overflowing"
            }
        ],
        "2020-11-04": [
            {
                "date": "2020-11-04T18:29:24Z",
                "message": "core/types, rlp: optimize derivesha (#21728)\n\nThis PR contains a minor optimization in derivesha, by exposing the RLP\r\nint-encoding and making use of it to write integers directly to a\r\nbuffer (an RLP integer is known to never require more than 9 bytes\r\ntotal). rlp.AppendUint64 might be useful in other places too.\r\n\r\nThe code assumes, just as before, that the hasher (a trie) will copy the\r\nkey internally, which it does when doing keybytesToHex(key).\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2020-11-04T16:36:56Z",
                "message": "cmd/devp2p/internal/ethtest: add correct chain files and improve test output (#21782)\n\nThis PR replaces the old test genesis.json and chain.rlp files in the testdata\r\ndirectory for the eth protocol test suite, and also adds documentation for\r\nrunning the eth test suite locally.\r\n\r\nIt also improves the test output text and adds more timeouts.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2020-11-04T14:02:58Z",
                "message": "cmd/devp2p, internal/utesting: implement TAP output (#21760)\n\nTAP is a text format for test results. Parsers for it are available in many languages,\r\nmaking it easy to consume. I want TAP output from our protocol tests because the\r\nHive wrapper around them needs to know about the test names and their individual\r\nresults and logs. It would also be possible to just write this info as JSON, but I don't\r\nwant to invent a new format.\r\n\r\nThis also improves the normal console output for tests (when running without --tap).\r\nIt now prints -- RUN lines before any output from the test, and indents the log output\r\nby one space."
            },
            {
                "date": "2020-11-04T11:41:46Z",
                "message": "core/state/snapshot: fix journal recovery from generating old journal (#21775)\n\n* core/state/snapshot: print warning if failed to resolve journal\r\n\r\n* core/state/snapshot: fix snapshot recovery\r\n\r\nWhen we meet the snapshot journal consisted with:\r\n- disk layer generator with new-format\r\n- diff layer journal with old-format\r\n\r\nThe base layer should be returned without error.\r\nThe broken diff layer can be reconstructed later\r\nbut we definitely don't want to reconstruct the\r\nhuge diff layer.\r\n\r\n* core: add tests"
            },
            {
                "date": "2020-11-04T10:20:39Z",
                "message": "common: remove ToHex and ToHexArray (#21610)\n\nToHex was deprecated a couple years ago. The last remaining use\r\nwas in ToHexArray, which itself only had a single call site.\r\n\r\nThis just moves ToHexArray near its only remaining call site and\r\nimplements it using hexutil.Encode. This changes the default behaviour\r\nof ToHexArray and with it the behaviour of eth_getProof. Previously we\r\nencoded an empty slice as 0, now the empty slice is encoded as 0x."
            }
        ],
        "2020-10-30": [
            {
                "date": "2020-10-30T17:04:38Z",
                "message": "les, p2p/simulations/adapters: fix issues found while simulating les  (#21761)\n\nThis adds a few tiny fixes for les and the p2p simulation framework:\r\n\r\nLES Parts\r\n\r\n- Keep the LES-SERVER connection even it's non-synced\r\n\r\n  We had this idea to reject the connections in LES protocol if the les-server itself is\r\n  not synced. However, in LES protocol we will also receive the connection from another\r\n  les-server. In this case even the local node is not synced yet, we should keep the tcp\r\n  connection for other protocols(e.g. eth protocol).\r\n\r\n- Don't count \"invalid message\" for non-existing GetBlockHeadersMsg request\r\n\r\n  In the eth syncing mechanism (full sync, fast sync, light sync), it will try to fetch\r\n  some non-existent blocks or headers(to ensure we indeed download all the missing chain).\r\n  In this case, it's possible that the les-server will receive the request for\r\n  non-existent headers. So don't count it as the \"invalid message\" for scheduling\r\n  dropping.\r\n\r\n- Copy the announce object in the closure\r\n\r\n  Before the les-server pushes the latest headers to all connected clients, it will create\r\n  a closure and queue it in the underlying request scheduler. In some scenarios it's\r\n  problematic. E.g, in private networks, the block can be mined very fast. So before the\r\n  first closure is executed, we may already update the latest_announce object. So actually\r\n  the \"announce\" object we want to send is replaced.\r\n\r\n  The downsize is the client will receive two announces with the same td and then drop the\r\n  server.\r\n\r\nP2P Simulation Framework\r\n\r\n- Don't double register the protocol services in p2p-simulation \"Start\".\r\n\r\n  The protocols upon the devp2p are registered in the \"New node stage\". So don't reigster\r\n  them again when starting a node in the p2p simulation framework\r\n\r\n- Add one more new config field \"ExternalSigner\", in order to use clef service in the\r\n  framework."
            }
        ],
        "2020-10-29": [
            {
                "date": "2020-10-29T19:01:58Z",
                "message": "core: improve snapshot journal recovery (#21594)\n\n* core/state/snapshot: introduce snapshot journal version\r\n\r\n* core: update the disk layer in an atomic way\r\n\r\n* core: persist the disk layer generator periodically\r\n\r\n* core/state/snapshot: improve logging\r\n\r\n* core/state/snapshot: forcibly ensure the legacy snapshot is matched\r\n\r\n* core/state/snapshot: add debug logs\r\n\r\n* core, tests: fix tests and special recovery case\r\n\r\n* core: polish\r\n\r\n* core: add more blockchain tests for snapshot recovery\r\n\r\n* core/state: fix comment\r\n\r\n* core: add recovery flag for snapshot\r\n\r\n* core: add restart after start-after-crash tests\r\n\r\n* core/rawdb: fix imports\r\n\r\n* core: fix tests\r\n\r\n* core: remove log\r\n\r\n* core/state/snapshot: fix snapshot\r\n\r\n* core: avoid callbacks in SetHead\r\n\r\n* core: fix setHead cornercase where the threshold root has state\r\n\r\n* core: small docs for the test cases\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            }
        ],
        "2020-10-28": [
            {
                "date": "2020-10-28T12:27:37Z",
                "message": "core/state: disable snapshot iteration if it's not fully constructed (#21682)\n\n* core/state/snapshot: add diskRoot function\r\n\r\n* core/state/snapshot: disable iteration if the snapshot is generating\r\n\r\n* core/state/snapshot: simplify the function\r\n\r\n* core/state: panic for undefined layer"
            },
            {
                "date": "2020-10-28T12:00:22Z",
                "message": "core/state: maintain one more diff layer (#21730)\n\n* core/state: maintain one more diff layer\r\n\r\n* core/state: address comment"
            }
        ],
        "2020-10-27": [
            {
                "date": "2020-10-27T16:22:44Z",
                "message": "accounts/abi/bind: restore error functionality (#21743)\n\n* accounts/abi/bind: restore error functionality\r\n\r\n* Update accounts/abi/bind/base.go\r\n\r\nCo-authored-by: Guillaume Ballet <gballet@gmail.com>\r\n\r\nCo-authored-by: Guillaume Ballet <gballet@gmail.com>"
            }
        ],
        "2020-10-26": [
            {
                "date": "2020-10-26T12:45:08Z",
                "message": "cmd/geth: fix dir path in geth attach for yolov2 network (#21749)"
            }
        ],
        "2020-10-23": [
            {
                "date": "2020-10-23T14:48:43Z",
                "message": "Merge pull request #21747 from holiman/yolov2update\n\nparams: update yolov2 bootnode with elastic ip"
            },
            {
                "date": "2020-10-23T14:47:26Z",
                "message": "params: update yolov2 bootnode with elastic ip"
            },
            {
                "date": "2020-10-23T13:42:08Z",
                "message": "Merge pull request #21745 from holiman/yolov2_bootnodes\n\nutils, params: add yolov2 bootnode"
            },
            {
                "date": "2020-10-23T13:40:48Z",
                "message": "utils, params: add yolov2 bootnode"
            },
            {
                "date": "2020-10-23T11:34:44Z",
                "message": "cmd/devp2p/internal/ethtest: update test chain (#21742)\n\nThe old one was wrong in two ways: the first block in chain.rlp was the\r\ngenesis block, and the genesis difficulty was below minimum difficulty.\r\n\r\nThis also contains some other fixes to the test."
            },
            {
                "date": "2020-10-23T06:26:57Z",
                "message": "all: implement EIP-2929 (gas cost increases for state access opcodes) + yolo-v2 (#21509)\n\n* core/vm, core/state: implement EIP-2929 + YOLOv2\r\n\r\n* core/state, core/vm: fix some review concerns\r\n\r\n* core/state, core/vm: address review concerns\r\n\r\n* core/vm: address review concerns\r\n\r\n* core/vm: better documentation\r\n\r\n* core/vm: unify sload cost as fully dynamic\r\n\r\n* core/vm: fix typo\r\n\r\n* core/vm/runtime: fix compilation flaw\r\n\r\n* core/vm/runtime: fix renaming-err leftovers\r\n\r\n* core/vm: renaming\r\n\r\n* params/config: use correct yolov2 chainid for config\r\n\r\n* core, params: use a proper new genesis for yolov2\r\n\r\n* core/state/tests: golinter nitpicks"
            }
        ],
        "2020-10-21": [
            {
                "date": "2020-10-21T14:56:45Z",
                "message": "accounts/usbwallet: fix ledger version check (#21733)\n\nThe version check logic did not take into account the second digit (i.e. the '4' in v1.4.0) - this one line patch corrects this."
            },
            {
                "date": "2020-10-21T14:53:30Z",
                "message": "core: fix blockchain insert report time interval calculation (#21723)"
            },
            {
                "date": "2020-10-21T08:56:33Z",
                "message": "les: remove clientPeerSet and serverSet (#21566)\n\n* les: move NodeStateMachine from clientPool to LesServer\r\n\r\n* les: new header broadcaster\r\n\r\n* les: peerCommons.headInfo always contains last announced head\r\n\r\n* les: remove clientPeerSet and serverSet\r\n\r\n* les: fixed panic\r\n\r\n* les: fixed --nodiscover option\r\n\r\n* les: disconnect all peers at ns.Stop()\r\n\r\n* les: added comments and fixed signed broadcasts\r\n\r\n* les: removed unused parameter, fixed tests"
            }
        ],
        "2020-10-20": [
            {
                "date": "2020-10-20T18:19:21Z",
                "message": "eth/api: fix potential nil deref in AccountRange (#21710)\n\n* Fix potential nil pointer error when neither block number nor hash is specified to accountRange\r\n\r\n* Update error description"
            },
            {
                "date": "2020-10-20T14:34:50Z",
                "message": "core: track and improve tx indexing/unindexing (#21331)\n\n* core: add background indexer to waitgroup\r\n\r\n* core: make indexer stopable\r\n\r\n* core/rawdb: add unit tests\r\n\r\n* core/rawdb: fix lint\r\n\r\n* core/rawdb: fix tests\r\n\r\n* core/rawdb: fix linter"
            },
            {
                "date": "2020-10-20T08:58:26Z",
                "message": "miner: fixed race condition in tests (#21664)"
            },
            {
                "date": "2020-10-20T08:56:51Z",
                "message": "console: don't exit on ctrl-c, only on ctrl-d (#21660)\n\n* add interrupt counter\r\n\r\n* remove interrupt counter, allow ctrl-C to clear ONLY, ctrl-D will terminate console, stop node\r\n\r\n* format\r\n\r\n* add instructions to exit\r\n\r\n* fix tests"
            }
        ],
        "2020-10-16": [
            {
                "date": "2020-10-16T09:28:03Z",
                "message": "core/vm: marshall returnData as hexstring in trace logs (#21715)\n\n* core/vm: marshall returnData as hexstring in trace logs\r\n\r\n* core/vm: marshall returnData as hexstring in trace logs"
            }
        ],
        "2020-10-15": [
            {
                "date": "2020-10-15T10:30:41Z",
                "message": "params: begin v1.9.24 release cycle"
            },
            {
                "date": "2020-10-15T10:29:42Z",
                "message": "params: go-ethereum v1.9.23 stable"
            }
        ],
        "2020-10-14": [
            {
                "date": "2020-10-14T10:28:17Z",
                "message": "p2p/discover: implement v5.1 wire protocol (#21647)\n\nThis change implements the Discovery v5.1 wire protocol and\r\nalso adds an interactive test suite for this protocol."
            },
            {
                "date": "2020-10-14T09:59:11Z",
                "message": "miner: set etherbase even if mining isn't possible at the moment (#21707)"
            },
            {
                "date": "2020-10-14T09:57:37Z",
                "message": "params: update CHTs (#21706)"
            }
        ],
        "2020-10-13": [
            {
                "date": "2020-10-13T17:46:43Z",
                "message": "accounts/keystore: fix flaky test (#21703)\n\n* accounts/keystore: add timeout to test to prevent failure on travis\r\n\r\nThe TestWalletNotifications test sporadically fails on travis.\r\nThis is because we shutdown the event collection before all events are received.\r\nAdding a small timeout (10 milliseconds) allows the collector to be scheduled\r\nand to consume all pending events before we shut it down.\r\n\r\n* accounts/keystore: added newlines back in\r\n\r\n* accounts/keystore: properly fix the walletNotifications test"
            },
            {
                "date": "2020-10-13T12:12:06Z",
                "message": "miner: don't interrupt mining after successful sync (#21701)\n\n* miner: exit loop when downloader Done or Failed\r\n\r\nFollowing the logic of the comment at the method,\r\nthis fixes a regression introduced at 7cf56d6f064869cb62b1673f9ee437020c595391\r\n, which would allow external parties to DoS with\r\nblocks, preventing mining progress.\r\n\r\nSigned-off-by: meows <b5c6@protonmail.com>\r\n\r\n* miner: remove ineff assign (lint)\r\n\r\nSigned-off-by: meows <b5c6@protonmail.com>\r\n\r\n* miner: update test re downloader events\r\n\r\nSigned-off-by: meows <b5c6@protonmail.com>\r\n\r\n* Revert \"miner: remove ineff assign (lint)\"\r\n\r\nThis reverts commit eaefcd34ab4862ebc936fb8a07578aa2744bc058.\r\n\r\n* Revert \"miner: exit loop when downloader Done or Failed\"\r\n\r\nThis reverts commit 23abd34265aa246c38fc390bb72572ad6ae9fe3b.\r\n\r\n* miner: add test showing imprecise TestMiner\r\n\r\nSigned-off-by: meows <b5c6@protonmail.com>\r\n\r\n* miner: fix waitForMiningState precision\r\n\r\nThis helper function would return an affirmation\r\non the first positive match on a desired bool.\r\n\r\nThis was imprecise; it return false positives\r\nby not waiting initially for an 'updated' value.\r\n\r\nThis fix causes TestMiner_2 to fail, which is\r\nexpected.\r\n\r\nSigned-off-by: meows <b5c6@protonmail.com>\r\n\r\n* miner: remove TestMiner_2 demonstrating broken test\r\n\r\nThis test demonstrated the imprecision of the test\r\nhelper function waitForMiningState. This function\r\nhas been fixed with 6d365c2851, and this test test\r\nmay now be removed.\r\n\r\nSigned-off-by: meows <b5c6@protonmail.com>\r\n\r\n* miner: fix test regarding downloader event/mining expectations\r\n\r\nSee comment for logic.\r\n\r\nSigned-off-by: meows <b5c6@protonmail.com>\r\n\r\n* miner: add test describing expectations for downloader/mining events\r\n\r\nWe expect that once the downloader emits a DoneEvent,\r\nsignaling a successful sync, that subsequent StartEvents\r\nare not longer permitted to stop the miner.\r\n\r\nThis prevents a security vulnerability where forced syncs via\r\nfake high blocks would stall mining operation.\r\n\r\nSigned-off-by: meows <b5c6@protonmail.com>\r\n\r\n* miner: use 'canStop' state to fix downloader event handling\r\n\r\n- Break downloader event handling into event\r\nseparating Done and Failed events. We need to\r\ntreat these cases differently since a DoneEvent\r\nshould prevent the miner from being stopped on\r\nsubsequent downloader Start events.\r\n\r\n- Use canStop state to handle the one-off\r\ncase when a downloader first succeeds.\r\n\r\nSigned-off-by: meows <b5c6@protonmail.com>\r\n\r\n* miner: improve comment wording\r\n\r\nSigned-off-by: meows <b5c6@protonmail.com>\r\n\r\n* miner: start mining on downloader events iff not already mining\r\n\r\nSigned-off-by: meows <b5c6@protonmail.com>\r\n\r\n* miner: refactor miner update logic w/r/t downloader events\r\n\r\nThis makes mining pause/start logic regarding downloader\r\nevents more explicit. Instead of eternally handling downloader\r\nevents after the first done event, the subscription is closed\r\nwhen downloader events are no longer actionable.\r\n\r\nSigned-off-by: meows <b5c6@protonmail.com>\r\n\r\n* miner: fix handling downloader events on subcription closed\r\n\r\nSigned-off-by: meows <b5c6@protonmail.com>\r\n\r\n* miner: (lint:gosimple) use range over chan instead of for/select\r\n\r\nSigned-off-by: meows <b5c6@protonmail.com>\r\n\r\n* miner: refactor update loop to remove race condition\r\n\r\nThe go routine handling the downloader events handling\r\nvars in parallel with the parent routine, causing a\r\nrace condition.\r\n\r\nThis change, though ugly, remove the condition while\r\nstill allowing the downloader event subscription to be\r\nclosed when the miner has no further use for it (ie DoneEvent).\r\n\r\n* miner: alternate fix for miner-flaw\r\n\r\nCo-authored-by: meows <b5c6@protonmail.com>"
            },
            {
                "date": "2020-10-13T11:33:10Z",
                "message": "cmd/geth, cmd/utils: fixed flags name (#21700)"
            },
            {
                "date": "2020-10-13T11:28:24Z",
                "message": "eth, p2p: use truncated names  (#21698)\n\n* peer: return localAddr instead of name to prevent spam\r\n\r\nWe currently use the name (which can be freely set by the peer) in several log messages.\r\nThis enables malicious actors to write spam into your geth log.\r\nThis commit returns the localAddr instead of the freely settable name.\r\n\r\n* p2p: reduce usage of peer.Name in warn messages\r\n\r\n* eth, p2p: use truncated names\r\n\r\n* Update peer.go\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2020-10-13T11:24:08Z",
                "message": "internal/web3ext: improve some web3 apis (#21639)\n\n* imporve some web3-ext apis\r\n\r\n* Update web3ext.go\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2020-10-13T11:21:25Z",
                "message": "trie: fix flaw in stacktrie pool reuse (#21699)"
            },
            {
                "date": "2020-10-13T09:00:42Z",
                "message": "consensus/clique: unexport calcDifficulty and improve comment (#21619)"
            },
            {
                "date": "2020-10-13T08:58:41Z",
                "message": "all: replace RWMutex with Mutex in places where RLock is not used (#21622)"
            },
            {
                "date": "2020-10-13T08:55:57Z",
                "message": "console: fix admin.sleepBlocks (#21629)"
            }
        ],
        "2020-10-12": [
            {
                "date": "2020-10-12T13:02:38Z",
                "message": "accouts, consensus, core: fix some comments (#21617)"
            },
            {
                "date": "2020-10-12T10:08:04Z",
                "message": "trie: polish commit function (#21692)\n\n* trie: polish commit function\r\n\r\n* trie: fix typo"
            }
        ],
        "2020-10-09": [
            {
                "date": "2020-10-09T09:23:46Z",
                "message": "core: fix txpool off-by-one error (#21683)"
            },
            {
                "date": "2020-10-09T07:09:10Z",
                "message": "eth/downloader: cache parent hash instead of recomputing (#21678)"
            },
            {
                "date": "2020-10-09T06:58:30Z",
                "message": "eth/downloader: fix data race around the ancientlimit (#21681)\n\n* eth/downloader: fix data race around the ancientlimit\r\n\r\n* eth/downloader: initialize the ancientlimit as 0"
            }
        ],
        "2020-10-08": [
            {
                "date": "2020-10-08T12:03:24Z",
                "message": "core/vm: dedup config check in markdown logger (#21655)\n\n* core/vm: dedup config check\r\n\r\n* review feedback: reuse buffer"
            },
            {
                "date": "2020-10-08T09:19:54Z",
                "message": "p2p/discover: remove use of shared hash instance for key derivation (#21673)\n\nFor some reason, using the shared hash causes a cryptographic incompatibility\r\nwhen using Go 1.15. I noticed this during the development of Discovery v5.1\r\nwhen I added test vector verification.\r\n\r\nThe go library commit that broke this is golang/go@97240d5, but the\r\nway we used HKDF is slightly dodgy anyway and it's not a regression."
            },
            {
                "date": "2020-10-08T08:10:58Z",
                "message": "signer/core: don't mismatch reject and no accounts (#21677)\n\n* signer/core: don't mismatch reject and zero accounts, fixes #21674\r\n\r\n* signer/core: docs"
            }
        ],
        "2020-10-07": [
            {
                "date": "2020-10-07T18:05:14Z",
                "message": "node: relax websocket connection header check (#21646)\n\nThis makes it accept the \"upgrade,keep-alive\" header value, which\r\napparently is a thing."
            },
            {
                "date": "2020-10-07T15:22:44Z",
                "message": "cmd/devp2p/internal/ethtest: improve eth test suite (#21615)\n\nThis fixes issues with the protocol handshake and status exchange\r\nand adds support for responding to GetBlockHeaders requests."
            }
        ],
        "2020-10-06": [
            {
                "date": "2020-10-06T13:57:00Z",
                "message": "core/types: optimize bloom filters (#21624)\n\n* core/types: tests for bloom\r\n\r\n* core/types: refactored bloom filter for receipts, added tests\r\n\r\ncore/types: replaced old bloom implementation\r\n\r\ncore/types: change interface of bloom add+test\r\n\r\n* core/types: refactor bloom\r\n\r\n* core/types: minor tweak on LogsBloom\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
            },
            {
                "date": "2020-10-06T13:34:29Z",
                "message": "core/bloombits: faster generator (#21625)\n\n* core/bloombits: add benchmark\r\n\r\n* core/bloombits: optimize inserts"
            },
            {
                "date": "2020-10-06T05:35:21Z",
                "message": "params: update goerli testnet bootnodes (#21659)\n\n* params: update pegasys besu bootnode\r\n\r\n* params: update goerli initiative bootnodes"
            }
        ],
        "2020-10-05": [
            {
                "date": "2020-10-05T10:50:26Z",
                "message": "cmd/faucet: enable DNS discovery for known networks (#21636)"
            },
            {
                "date": "2020-10-05T08:52:36Z",
                "message": "core/state/snapshot: stop generator if it hits missing trie nodes (#21649)\n\n* core/state/snapshot: exit Geth if generator hits missing trie nodes\r\n\r\n* core/state/snapshot: error instead of hard die on generator fault\r\n\r\n* core/state/snapshot: don't enable logging on the tests"
            }
        ],
        "2020-09-30": [
            {
                "date": "2020-09-30T17:49:20Z",
                "message": "trie: add Commit-sequence tests for stacktrie commit (#21643)"
            },
            {
                "date": "2020-09-30T11:45:56Z",
                "message": "trie: polishes to trie committer (#21351)\n\n* trie: update tests to check commit integrity\r\n\r\n* trie: polish committer\r\n\r\n* trie: fix typo\r\n\r\n* trie: remove hasvalue notion\r\n\r\nAccording to the benchmarks, type assertion between the pointer and\r\ninterface is extremely fast.\r\n\r\nBenchmarkIntmethod-12           1000000000               1.91 ns/op\r\nBenchmarkInterface-12           1000000000               2.13 ns/op\r\nBenchmarkTypeSwitch-12          1000000000               1.81 ns/op\r\nBenchmarkTypeAssertion-12       2000000000               1.78 ns/op\r\n\r\nSo the overhead for asserting whether the shortnode has \"valuenode\"\r\nchild is super tiny. No necessary to have another field.\r\n\r\n* trie: linter nitpicks\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2020-09-29": [
            {
                "date": "2020-09-29T15:40:08Z",
                "message": "accounts, signer: implement gnosis safe support (#21593)\n\n* accounts, signer: implement gnosis safe support\r\n\r\n* common/math: add type for marshalling big to dec\r\n\r\n* accounts, signer: properly sign gnosis requests\r\n\r\n* signer, clef: implement account_signGnosisTx\r\n\r\n* signer: fix auditlog print, change rpc-name (signGnosisTx to signGnosisSafeTx)\r\n\r\n* signer: pass validation-messages/warnings to the UI for gnonsis-safe txs\r\n\r\n* signer/core: minor change to validationmessages of typed data"
            },
            {
                "date": "2020-09-29T15:38:13Z",
                "message": "trie: use stacktrie for Derivesha operation (#21407)\n\ncore/types: use stacktrie for derivesha\r\n\r\ntrie: add stacktrie file\r\n\r\ntrie: fix linter\r\n\r\ncore/types: use stacktrie for derivesha\r\n\r\nrebased: adapt stacktrie to the newer version of DeriveSha\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\nMore linter fixes\r\n\r\nreview feedback: no key offset for nodes converted to hashes\r\n\r\ntrie: use EncodeRLP for full nodes\r\n\r\ncore/types: insert txs in order in derivesha\r\n\r\ntrie: tests for derivesha with stacktrie\r\n\r\ntrie: make stacktrie use pooled hashers\r\n\r\ntrie: make stacktrie reuse tmp slice space\r\n\r\ntrie: minor polishes on stacktrie\r\n\r\ntrie/stacktrie: less rlp dancing\r\n\r\ncore/types: explain the contorsions in DeriveSha\r\n\r\nci: fix goimport errors\r\n\r\ntrie: clear mem on subtrie hashing\r\n\r\nsquashme: linter fix\r\n\r\nstracktrie: use pooling, less allocs (#3)\r\n\r\ntrie: in-place hex prefix, reduce allocs and add rawNode.EncodeRLP\r\n\r\nReintroduce the `[]node` method, add the missing `EncodeRLP` implementation for `rawNode` and calculate the hex prefix in place.\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2020-09-29T09:31:14Z",
                "message": "cmd/bootnode,internal/debug: fix some comments (#21623)"
            }
        ],
        "2020-09-28": [
            {
                "date": "2020-09-28T18:11:30Z",
                "message": "build: keep geth-sources.jar build result for JavaDoc (#21596)\n\n* ci: tooltips for javadoc for mobile app\r\n\r\n* f space"
            },
            {
                "date": "2020-09-28T18:10:11Z",
                "message": "p2p/enode: remove unused code (#21612)"
            },
            {
                "date": "2020-09-28T12:30:10Z",
                "message": "light: fix wrong description in a comment (#21573)"
            },
            {
                "date": "2020-09-28T12:28:38Z",
                "message": "internal/web3ext: improve eth_getBlockByNumber and eth_getBlockByHash console api (#21608)"
            },
            {
                "date": "2020-09-28T12:24:01Z",
                "message": "core: free pointer from slice after popping element from price heap (#21572)\n\n* Fix potential memory leak in price heap\r\n\r\n* core: nil free pointer slice (alternative version)\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2020-09-28T12:14:45Z",
                "message": "core/vm, params: make 2200 in line with spec (#21605)"
            },
            {
                "date": "2020-09-28T12:12:08Z",
                "message": "mobile: added constructor for big int (#21597)\n\n* mobile: added constructor for big int\r\n\r\n* mobile: tiny nitpick"
            },
            {
                "date": "2020-09-28T12:10:26Z",
                "message": "accounts/abi: ABI explicit difference between Unpack and UnpackIntoInterface (#21091)\n\n* accounts/abi: refactored abi.Unpack\r\n\r\n* accounts/abi/bind: fixed error\r\n\r\n* accounts/abi/bind: modified template\r\n\r\n* accounts/abi/bind: added ToStruct for conversion\r\n\r\n* accounts/abi: reenabled tests\r\n\r\n* accounts/abi: fixed tests\r\n\r\n* accounts/abi: fixed tests for packing/unpacking\r\n\r\n* accounts/abi: fixed tests\r\n\r\n* accounts/abi: added more logic to ToStruct\r\n\r\n* accounts/abi/bind: fixed template\r\n\r\n* accounts/abi/bind: fixed ToStruct conversion\r\n\r\n* accounts/abi/: removed unused code\r\n\r\n* accounts/abi: updated template\r\n\r\n* accounts/abi: refactored unused code\r\n\r\n* contracts/checkpointoracle: updated contracts to sol ^0.6.0\r\n\r\n* accounts/abi: refactored reflection logic\r\n\r\n* accounts/abi: less code duplication in Unpack*\r\n\r\n* accounts/abi: fixed rebasing bug\r\n\r\n* fix a few typos in comments\r\n\r\n* rebase on master\r\n\r\nCo-authored-by: Guillaume Ballet <gballet@gmail.com>"
            },
            {
                "date": "2020-09-28T08:23:02Z",
                "message": "params: begin v1.9.23 release cycle"
            },
            {
                "date": "2020-09-28T08:21:47Z",
                "message": "params: release Geth v1.9.22"
            },
            {
                "date": "2020-09-28T08:21:17Z",
                "message": "Merge pull request #21635 from karalabe/cht-1.9.22\n\nparams: update CHTs for Geth v1.9.22"
            },
            {
                "date": "2020-09-28T08:19:22Z",
                "message": "params: update CHTs for Geth v1.9.22"
            }
        ],
        "2020-09-24": [
            {
                "date": "2020-09-24T08:46:43Z",
                "message": "cmd/devp2p/internal/ethtest: lower protocol version to 64 (#21604)"
            }
        ],
        "2020-09-23": [
            {
                "date": "2020-09-23T15:48:47Z",
                "message": "cmd/devp2p/internal/ethtest: update version in handshake (#21603)"
            },
            {
                "date": "2020-09-23T13:18:17Z",
                "message": "cmd/devp2p: add eth protocol test suite (#21598)\n\nThis change adds a test framework for the \"eth\" protocol and some basic\r\ntests. The tests can be run using the './devp2p rlpx eth-test' command."
            },
            {
                "date": "2020-09-23T11:08:40Z",
                "message": "internal/ethapi: fix nil deref + fix estimateGas console bindings (#21601)\n\n* tried to fix\r\n\r\n* fix for js api\r\n\r\n* fix for nil pointer ex\r\n\r\n* rev space\r\n\r\n* rev space\r\n\r\n* input call formatter"
            },
            {
                "date": "2020-09-23T09:44:09Z",
                "message": "trie: extend range proof (#21250)\n\n* trie: support non-existent right proof\r\n\r\n* trie: improve test\r\n\r\n* trie: minor linter fix\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2020-09-23T08:29:48Z",
                "message": "internal/ethapi: add optional parameter blockNrOrHash to estimateGas (#21545)\n\nThis allows users to estimate gas on top of arbitrary blocks as well as pending and latest.\r\nTracing on pending is useful for most users as it takes into account the current txpool while\r\ntracing on latest might be useful for users that have little to know knowledge of the current\r\ntransactions in the network.\r\n\r\nIf blockNrOrHash is not specified, estimateGas defaults to pending"
            },
            {
                "date": "2020-09-23T08:03:21Z",
                "message": "trie: support empty range proof (#21199)"
            },
            {
                "date": "2020-09-23T07:59:11Z",
                "message": "trie: fix gaped range proof test case (#21484)"
            }
        ],
        "2020-09-22": [
            {
                "date": "2020-09-22T21:22:54Z",
                "message": "cmd/clef, cmd/geth: use SplitAndTrim from cmd/utils (#21579)"
            },
            {
                "date": "2020-09-22T08:17:39Z",
                "message": "p2p: move rlpx into separate package (#21464)\n\nThis change moves the RLPx protocol implementation into a separate package,\r\np2p/rlpx. The new package can be used to establish RLPx connections for\r\nprotocol testing purposes.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2020-09-21": [
            {
                "date": "2020-09-21T14:33:35Z",
                "message": "mobile: better api for java users (#21580)\n\n* (mobile): Adds string representations for types\r\n\r\n* mobile: better interfaces add stringer to types\r\n\r\nCo-authored-by: sarath <sarath@melvault.com>"
            }
        ],
        "2020-09-20": [
            {
                "date": "2020-09-20T08:43:57Z",
                "message": "accounts/abi: improve documentation and names (#21540)\n\n* accounts: abi/bid/backends; cleaned doc errors, camelCase refactors and anonymous variable assignments\r\n\r\n* acounts/abi/bind: doc errors, anonymous parameter assignments\r\n\r\n* accounts/abi: doc edits, camelCase refactors\r\n\r\n* accounts/abi/bind: review fix\r\n\r\n* reverted name changes\r\n\r\n* name revert\r\n\r\nCo-authored-by: Osoro Bironga <osoro@doctaroo.com>"
            }
        ],
        "2020-09-18": [
            {
                "date": "2020-09-18T12:26:19Z",
                "message": "core: fix a typo in comment (#21439)"
            },
            {
                "date": "2020-09-18T09:29:33Z",
                "message": "Merge pull request #21529 from karalabe/dynamic-pivot\n\neth/downloader: dynamically move pivot even during chain sync"
            }
        ],
        "2020-09-08": [
            {
                "date": "2020-09-08T08:13:16Z",
                "message": "eth/downloader: dynamically move pivot even during chain sync"
            },
            {
                "date": "2020-09-08T20:02:14Z",
                "message": ".github: remove whisper from CODEOWNERS (#21527)"
            },
            {
                "date": "2020-09-08T14:13:48Z",
                "message": "build: remove wnode from the list of packages binaries (#21526)"
            },
            {
                "date": "2020-09-08T11:07:55Z",
                "message": "accounts/usbwallet, signer/core: show accounts from ledger legacy derivation paths (#21517)\n\n* accounts/usbwallet, signer/core: un-hide accounts from ledger legacy derivation paths\r\n\r\n* Update accounts/usbwallet/wallet.go\r\n\r\n* Update signer/core/api.go\r\n\r\n* Update signer/core/api.go"
            },
            {
                "date": "2020-09-08T08:47:48Z",
                "message": "whisper: remove whisper (#21487)\n\n* whisper: remove whisper\r\n\r\n* Update cmd/geth/config.go\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\n\r\n* cmd/geth: warn on enabling whisper + remove more whisper deps\r\n\r\n* mobile: remove all whisper references\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            }
        ],
        "2020-09-17": [
            {
                "date": "2020-09-17T08:23:56Z",
                "message": "cmd/geth: added counters to the geth inspect report (#21495)\n\n* database: added counters\r\n\r\n* Improved stats for ancient db\r\n\r\n* Small improvement\r\n\r\n* Better message and added percentage while counting receipts\r\n\r\n* Fast counting for receipts\r\n\r\n* added info message\r\n\r\n* Show both receips itemscount  from ancient db and counted receipts\r\n\r\n* Fixed default case\r\n\r\n* Removed counter for receipts in ancient store\r\n\r\n* Removed counting of receipts present in leveldb"
            }
        ],
        "2020-09-16": [
            {
                "date": "2020-09-16T11:17:50Z",
                "message": "cmd/utils: use preconfigured testnet flags instead of networkid (#21561)\n\n* cmd/utils: use preconfigured testnet flags instead of networkid\r\n\r\n* cmd/utils: shorter description\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>\r\n\r\n* Update flags.go\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2020-09-16T11:15:22Z",
                "message": "tests/fuzzers/abi: add fuzzer for fuzzing package accounts/abi (#21217)\n\n* tests/fuzzers/abi: added abi fuzzer\r\n\r\n* accounts/abi: fixed issues found by fuzzing\r\n\r\n* tests/fuzzers/abi: update fuzzers, added repro test\r\n\r\n* tests/fuzzers/abi: renamed abi_fuzzer to abifuzzer\r\n\r\n* tests/fuzzers/abi: updated abi fuzzer\r\n\r\n* tests/fuzzers/abi: updated abi fuzzer\r\n\r\n* accounts/abi: minor style fix\r\n\r\n* go.mod: added go-fuzz dependency\r\n\r\n* tests/fuzzers/abi: updated abi fuzzer\r\n\r\n* tests/fuzzers/abi: make linter happy\r\n\r\n* tests/fuzzers/abi: make linter happy\r\n\r\n* tests/fuzzers/abi: comment out false positives"
            },
            {
                "date": "2020-09-16T09:51:16Z",
                "message": "les/lespay/server: bump database version (#21571)"
            },
            {
                "date": "2020-09-16T06:39:35Z",
                "message": "params: allow setting Petersburg block before chain head (#21473)\n\n* Allow setting PetersburgBlock before chainhead\r\n\r\nif it is at the same block as ConstantinopleBlock\r\n\r\n* Add a negative test"
            }
        ],
        "2020-09-15": [
            {
                "date": "2020-09-15T09:29:51Z",
                "message": "ethclient: fix BlockNumber (#21565)\n\nIt didn't actually work because it called a method that doesn't\r\nexist. This fixes it also adds a test.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2020-09-15T08:37:01Z",
                "message": "core/rawdb: single point of maintenance for writing and deleting tx lookup indexes (#21480)"
            },
            {
                "date": "2020-09-15T06:27:17Z",
                "message": "COYPING: restore the full text text of GPL (#21568)\n\nWhen the license was added to the repository, its text was changed (some\r\nsections at the end removed) and, worse, the authors of go-ethereum\r\ntried to claim copyright on the license text.\r\n\r\nThe correct way to apply GPL to a project is to copy it verbatim.\r\nThis change reverts the text of the GPL to the original."
            },
            {
                "date": "2020-09-15T06:22:47Z",
                "message": "eth/tracers: regenerate assets from #21549 (#21564)"
            }
        ],
        "2020-09-14": [
            {
                "date": "2020-09-14T20:44:20Z",
                "message": "les, les/lespay/server: refactor client pool (#21236)\n\n* les, les/lespay/server: refactor client pool\r\n\r\n* les: use ns.Operation and sub calls where needed\r\n\r\n* les: fixed tests\r\n\r\n* les: removed active/inactive logic from peerSet\r\n\r\n* les: removed active/inactive peer logic\r\n\r\n* les: fixed linter warnings\r\n\r\n* les: fixed more linter errors and added missing metrics\r\n\r\n* les: addressed comments\r\n\r\n* cmd/geth: fixed TestPriorityClient\r\n\r\n* les: simplified clientPool state machine\r\n\r\n* les/lespay/server: do not use goroutine for balance callbacks\r\n\r\n* internal/web3ext: fix addBalance required parameters\r\n\r\n* les: removed freeCapacity, always connect at minCapacity initially\r\n\r\n* les: only allow capacity change with priority status\r\n\r\nCo-authored-by: rjl493456442 <garyrong0905@gmail.com>"
            },
            {
                "date": "2020-09-14T17:23:01Z",
                "message": "rlp: add SplitUint64 (#21563)\n\nThis can be useful when working with raw RLP data."
            },
            {
                "date": "2020-09-14T12:57:28Z",
                "message": "js/tracers: make calltracer report value in selfdestructs  (#21549)"
            },
            {
                "date": "2020-09-14T12:01:18Z",
                "message": "p2p/nodestate: ensure correct callback order (#21436)\n\nThis PR adds an extra guarantee to NodeStateMachine: it ensures that all\r\nimmediate effects of a certain change are processed before any subsequent\r\neffects of any of the immediate effects on the same node. In the original\r\nversion, if a cascaded change caused a subscription callback to be called\r\nmultiple times for the same node then these calls might have happened in a\r\nwrong chronological order.\r\n\r\nFor example:\r\n\r\n- a subscription to flag0 changes flag1 and flag2\r\n- a subscription to flag1 changes flag3\r\n- a subscription to flag1, flag2 and flag3 was called in the following order:\r\n\r\n   [flag1] -> [flag1, flag3]\r\n   [] -> [flag1]\r\n   [flag1, flag3] -> [flag1, flag2, flag3]\r\n\r\nThis happened because the tree of changes was traversed in a \"depth-first\r\norder\". Now it is traversed in a \"breadth-first order\"; each node has a\r\nFIFO queue for pending callbacks and each triggered subscription callback\r\nis added to the end of the list. The already existing guarantees are\r\nretained; no SetState or SetField returns until the callback queue of the\r\nnode is empty again. Just like before, it is the responsibility of the\r\nstate machine design to ensure that infinite state loops are not possible.\r\nMultiple changes affecting the same node can still happen simultaneously;\r\nin this case the changes can be interleaved in the FIFO of the node but the\r\ncorrect order is still guaranteed.\r\n\r\nA new unit test is also added to verify callback order in the above scenario."
            }
        ],
        "2020-09-13": [
            {
                "date": "2020-09-13T20:25:15Z",
                "message": "Dockerfile: unexpose port 8547 as GraphQL was merged into HTTP endpoint (#21556)"
            }
        ],
        "2020-09-11": [
            {
                "date": "2020-09-11T18:35:38Z",
                "message": "p2p/discover: fix typo in comments (#21554)"
            },
            {
                "date": "2020-09-11T16:17:09Z",
                "message": "miner: fix regression, add test for starting while download (#21547)\n\nFixes a regression introduced in #21536"
            }
        ],
        "2020-09-10": [
            {
                "date": "2020-09-10T17:27:42Z",
                "message": "miner: use channels instead of atomics in update loop (#21536)\n\nThis PR changes several different things:\r\n\r\n- Adds test cases for the miner loop\r\n- Stops the worker if it wasn't already stopped in worker.Close()\r\n- Uses channels instead of atomics in the miner.update() loop\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2020-09-10T13:14:19Z",
                "message": "cmd/geth: print warning when whisper config is present in toml (#21544)\n\n* cmd/geth: print warning when whisper config is present in toml\r\n\r\n* Update cmd/geth/config.go\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2020-09-10T12:24:21Z",
                "message": "ethclient: add BlockNumber method (#21500)\n\nThis adds a new client method BlockNumber to fetch the most recent\r\nblock number of the chain."
            },
            {
                "date": "2020-09-10T12:21:51Z",
                "message": "go.mod: remove golang.org/x/sync (#21541)"
            },
            {
                "date": "2020-09-10T07:19:30Z",
                "message": "core/vm: fix benchmark overflow + prep for precompile repricings (#21530)\n\n* core/vm/testdata: add gascost expectations to testcases\r\n\r\n* core/vm: verify expected gas in tests for precompiles\r\n\r\n* core/vm: fix overflow flaw in gas/s calculation"
            }
        ],
        "2020-09-09": [
            {
                "date": "2020-09-09T15:38:47Z",
                "message": "cmd, eth: offer maxprice flag for overwritting price cap (#21531)\n\n* cmd, eth: offer maxprice flag for overwritting price cap\r\n\r\n* eth: rename default price cap"
            },
            {
                "date": "2020-09-09T15:37:37Z",
                "message": "Merge pull request #21537 from karalabe/les-reorg-fix\n\neth/downloader: only roll back light sync if not fully validating"
            },
            {
                "date": "2020-09-09T13:21:20Z",
                "message": "accounts/abi/bind/backends: reverted some stylistic changes (#21535)"
            },
            {
                "date": "2020-09-09T11:06:32Z",
                "message": "eth/downloader: only roll back light sync if not fully validating"
            },
            {
                "date": "2020-09-09T08:23:37Z",
                "message": "params: begin v1.9.22 release cycle"
            },
            {
                "date": "2020-09-09T08:22:11Z",
                "message": "params: release Geth v1.9.21"
            },
            {
                "date": "2020-09-09T07:34:53Z",
                "message": "Merge pull request #21534 from karalabe/cht-1.9.21\n\nparams: update CHTs for v1.9.21 release"
            },
            {
                "date": "2020-09-09T07:33:20Z",
                "message": "params: update CHTs for v1.9.21 release"
            }
        ],
        "2020-09-07": [
            {
                "date": "2020-09-07T11:07:15Z",
                "message": "accounts: abi/bid/backends; cleaned doc errors, camelCase refactors and anonymous variable assignments (#21514)\n\nCo-authored-by: Osoro Bironga <osoro@doctaroo.com>"
            },
            {
                "date": "2020-09-07T08:52:01Z",
                "message": "eth: added trace_call to trace on top of arbitrary blocks (#21338)\n\n* eth: Added TraceTransactionPending\r\n\r\n* eth: Implement Trace_Call, remove traceTxPending\r\n\r\n* eth: debug_call -> debug_traceCall, recompute tx environment if pruned\r\n\r\n* eth: fix nil panic\r\n\r\n* eth: improve block retrieving logic in tracers\r\n\r\n* internal/web3ext: add debug_traceCall to console"
            }
        ],
        "2020-09-02": [
            {
                "date": "2020-09-02T10:52:51Z",
                "message": "Merge pull request #21504 from karalabe/trie-path-sync\n\ncore, eth, trie: prepare trie sync for path based operation"
            },
            {
                "date": "2020-09-02T09:01:46Z",
                "message": "eth/downloader: change intial download size (#21366)\n\nThis changes how the downloader works, a little bit. Previously, when block sync started,\r\nwe immediately started filling up to 8192 blocks. Usually this is fine, blocks are small\r\nin the early numbers. The threshold then is lowered as we measure the size of the blocks\r\nthat are filled.\r\n\r\nHowever, if the node is shut down and restarts syncing while we're in a heavy segment,\r\nthat might be bad. This PR introduces a more conservative initial threshold of 2K blocks\r\ninstead."
            }
        ],
        "2020-08-28": [
            {
                "date": "2020-08-28T07:50:37Z",
                "message": "core, eth, trie: prepare trie sync for path based operation"
            },
            {
                "date": "2020-08-28T14:27:58Z",
                "message": "rpc: fix issue with null JSON-RPC messages (#21497)"
            }
        ],
        "2020-09-01": [
            {
                "date": "2020-09-01T10:56:22Z",
                "message": "go.mod : update goja dependency (#21432)"
            },
            {
                "date": "2020-09-01T09:02:12Z",
                "message": "\"Downloader queue stats\" is now provided once per minute (#21455)\n\n* \"Downloader queue stats\" is now a DEBUG information\r\n\r\nI think this info is more a DEBUG related information then an INFO. If it must remains an INFO, maybe it can be slow down to one time every 5 minutes or so.\r\n\r\n* Update queue.go\r\n\r\n\"Downloader queue stats\" information is now provided once every minute instead of once every 10 seconds."
            },
            {
                "date": "2020-09-01T08:23:04Z",
                "message": "internal: fix personal.sign() (#21503)"
            },
            {
                "date": "2020-09-01T07:29:54Z",
                "message": "accounts/abi: fix a bug in getTypeSize method (#21501)\n\n* accounts/abi: fix a bug in getTypeSize method\r\n\r\ne.g. for \"Tuple[2]\" type, the element of the array is a tuple type and the size of the tuple may not be 32.\r\n\r\n* accounts/abi: add unit test of getTypeSize method"
            }
        ],
        "2020-08-27": [
            {
                "date": "2020-08-27T09:33:45Z",
                "message": "eth/tracers: revert reason in call_tracer + error for failed internal calls (#21387)\n\n* tests: add testdata of call tracer\r\n\r\n* eth/tracers: return revert reason in call_tracer\r\n\r\n* eth/tracers: regenerate assets\r\n\r\n* eth/tracers: add error message even if no exec occurrs, fixes #21438\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2020-08-27T08:24:28Z",
                "message": "Merge pull request #21491 from karalabe/state-sync-leak-fix\n\ncore/state, eth, trie: stabilize memory use, fix memory leak"
            }
        ],
        "2020-08-26": [
            {
                "date": "2020-08-26T13:53:12Z",
                "message": "go.mod | goleveldb latest update (#21448)\n\n* go.mod | goleveldb latest update\r\n\r\n* go.mod update\r\n\r\n* leveldb options\r\n\r\n* go.mod: double check\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2020-08-26T10:20:12Z",
                "message": "eth: updated comments (#21490)"
            },
            {
                "date": "2020-08-26T10:05:06Z",
                "message": "core/state, eth, trie: stabilize memory use, fix memory leak"
            },
            {
                "date": "2020-08-26T07:37:00Z",
                "message": "accounts/abi/bind/backends: Disallow AdjustTime for non-empty blocks (#21334)\n\n* accounts/abi/bind/backends: Disallow timeshift for non-empty blocks\r\n\r\n* accounts/abi/bind/backends: added tests for adjust time\r\n\r\n* accounts/abi/bind/simulated: added comments, fixed test for AdjustTime\r\n\r\n* accounts/abi/bind/backends: updated comment"
            }
        ],
        "2020-08-25": [
            {
                "date": "2020-08-25T14:21:41Z",
                "message": "params: begin v1.9.21 release cycle"
            },
            {
                "date": "2020-08-25T14:20:37Z",
                "message": "params: release Geth v1.9.20"
            },
            {
                "date": "2020-08-25T10:25:23Z",
                "message": "Merge pull request #21486 from karalabe/cht-1.9.20\n\nparams: update CHTs for v1.9.20 release"
            },
            {
                "date": "2020-08-25T10:02:51Z",
                "message": "params: update CHTs for v1.9.20 release"
            },
            {
                "date": "2020-08-25T08:38:56Z",
                "message": "graphql: add support for retrieving the chain id (#21451)"
            },
            {
                "date": "2020-08-25T06:21:44Z",
                "message": "Merge pull request #21483 from karalabe/freezer-truncate-silent\n\ncore/rawdb: only complain loudly if truncating many items"
            },
            {
                "date": "2020-08-25T05:45:41Z",
                "message": "core/rawdb: only complain loudly if truncating many items"
            }
        ],
        "2020-08-24": [
            {
                "date": "2020-08-24T12:42:39Z",
                "message": "p2p/discover: avoid dropping unverified nodes when table is almost empty (#21396)\n\nThis change improves discovery behavior in small networks. Very small\r\nnetworks would often fail to bootstrap because all member nodes were\r\ndropping table content due to findnode failure. The check is now changed\r\nto avoid dropping nodes on findnode failure when their bucket is almost\r\nempty. It also relaxes the liveness check requirement for FINDNODE/v4\r\nresponse nodes, returning unverified nodes as results when there aren't\r\nany verified nodes yet.\r\n\r\nThe \"findnode failed\" log now reports whether the node was dropped\r\ninstead of the number of results. The value of the \"results\" was\r\nalways zero by definition.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2020-08-24T11:00:57Z",
                "message": "Merge pull request #21477 from karalabe/snapshotter-shallow-generator\n\ncore/state/snapshot: reduce disk layer depth during generation"
            },
            {
                "date": "2020-08-24T10:22:36Z",
                "message": "core/state/snapshot: reduce disk layer depth during generation"
            },
            {
                "date": "2020-08-24T08:32:12Z",
                "message": "eth: utilize sync bloom for getNodeData (#21445)\n\n* eth/downloader, eth/handler: utilize sync bloom for getNodeData\r\n\r\n* trie: handle if bloom is nil\r\n\r\n* trie, downloader: check bloom nilness externally"
            }
        ],
        "2020-08-22": [
            {
                "date": "2020-08-22T16:12:04Z",
                "message": "core: do less lookups when writing fast-sync block bodies (#21468)"
            }
        ],
        "2020-08-21": [
            {
                "date": "2020-08-21T12:10:40Z",
                "message": "core, eth, les, trie: add a prefix to contract code (#21080)"
            },
            {
                "date": "2020-08-21T11:43:14Z",
                "message": "Merge pull request #21472 from holiman/fix_dltest_fail\n\neth/downloader: fix rollback issue on short chains"
            },
            {
                "date": "2020-08-21T11:27:10Z",
                "message": "eth/downloader: fix rollback issue on short chains"
            },
            {
                "date": "2020-08-21T08:04:36Z",
                "message": "metrics: zero temp variable in  updateMeter (#21470)\n\n* metrics: zero temp variable in  updateMeter\r\n\r\nPreviously the temp variable was not updated properly after summing it to count.\r\nThis meant we had astronomically high metrics, now we zero out the temp whenever we\r\nsum it onto the snapshot count\r\n\r\n* metrics: move temp variable to be aligned, unit tests\r\n\r\nMoves the temp variable in MeterSnapshot to be 64-bit aligned because of the atomic bug.\r\nAdds a unit test, that catches the previous bug."
            }
        ],
        "2020-08-20": [
            {
                "date": "2020-08-20T18:34:31Z",
                "message": "consensus/ethash: less lookups of block data"
            },
            {
                "date": "2020-08-20T14:41:26Z",
                "message": "Merge pull request #21466 from karalabe/go1.15\n\ntravis, dockerfile, appveyor, build: bump to Go 1.15"
            },
            {
                "date": "2020-08-20T13:41:37Z",
                "message": "travis, dockerfile, appveyor, build: bump to Go 1.15"
            },
            {
                "date": "2020-08-20T10:01:24Z",
                "message": "core: define and test chain rewind corner cases (#21409)\n\n* core: define and test chain reparation cornercases\r\n\r\n* core: write up a variety of set-head tests\r\n\r\n* core, eth: unify chain rollbacks, handle all the cases\r\n\r\n* core: make linter smile\r\n\r\n* core: remove commented out legacy code\r\n\r\n* core, eth/downloader: fix review comments\r\n\r\n* core: revert a removed recovery mechanism"
            },
            {
                "date": "2020-08-20T07:49:35Z",
                "message": "core: more detailed metering for reorgs (#21420)"
            }
        ],
        "2020-08-19": [
            {
                "date": "2020-08-19T09:31:13Z",
                "message": "cmd/evm: statet8n output folder + tx hashes on trace filenames (#21406)\n\n* t8ntool: add output basedir\r\n\r\n* t8ntool: add txhash to trace filename\r\n\r\n* t8ntool: don't default to '.' basedir, allow absolute paths"
            },
            {
                "date": "2020-08-19T07:29:54Z",
                "message": "Merge pull request #21461 from karalabe/ppa-drop-disco\n\nbuild: drop disco, enable groovy on Ubuntu PPAs"
            },
            {
                "date": "2020-08-19T07:28:08Z",
                "message": "build: drop disco, enable groovy on Ubuntu PPAs"
            },
            {
                "date": "2020-08-19T06:54:21Z",
                "message": "core/state: fixed some comments (#21450)"
            }
        ],
        "2020-08-18": [
            {
                "date": "2020-08-18T09:27:04Z",
                "message": "metrics: make meter updates lock-free (#21446)"
            }
        ],
        "2020-08-14": [
            {
                "date": "2020-08-14T12:18:12Z",
                "message": "cmd/geth/tests: try to fix spurious travis failure in les tests (#21410)\n\n* cmd/geth/tests: try to fix spurious travis failure in les tests\r\n\r\n* cmd/geth: les_test - remove extraneous option during boot"
            }
        ],
        "2020-08-11": [
            {
                "date": "2020-08-11T11:11:16Z",
                "message": "params: begin v1.9.20 release cycle"
            },
            {
                "date": "2020-08-11T11:10:21Z",
                "message": "params: release Geth v1.9.19"
            },
            {
                "date": "2020-08-11T07:34:08Z",
                "message": "Merge pull request #21437 from karalabe/cht-1.9.19\n\nparams: update CHTs for v1.9.19"
            },
            {
                "date": "2020-08-11T07:20:03Z",
                "message": "params: update CHTs for v1.9.19"
            }
        ],
        "2020-08-10": [
            {
                "date": "2020-08-10T19:06:14Z",
                "message": "tests: add Berlin-definition identical to YOLOv1 (#21435)"
            },
            {
                "date": "2020-08-10T12:13:31Z",
                "message": "Merge pull request #21434 from karalabe/ethstats-split-rwlock\n\nethstats: split read and write lock, otherwise they'll lock up"
            },
            {
                "date": "2020-08-10T11:33:22Z",
                "message": "ethstats: split read and write lock, otherwise they'll lock up"
            },
            {
                "date": "2020-08-10T09:08:46Z",
                "message": "Merge pull request #21433 from holiman/statsync_exiter\n\neth/downloader: allow all timers to exit"
            },
            {
                "date": "2020-08-10T08:42:33Z",
                "message": "eth/downloader: allow all timers to exit"
            }
        ],
        "2020-08-07": [
            {
                "date": "2020-08-07T16:40:28Z",
                "message": "Merge pull request #21428 from holiman/ethstats_moar\n\nethstats: overwrite old errors"
            },
            {
                "date": "2020-08-07T13:36:33Z",
                "message": "Merge pull request #21429 from holiman/timerfix\n\neth/downloader: set deliverytime on drops and timeouts too"
            },
            {
                "date": "2020-08-07T13:31:17Z",
                "message": "eth/downloader: set deliverytime on drops and timeouts too"
            },
            {
                "date": "2020-08-07T13:33:00Z",
                "message": "les: close all connected les-server when shutdown (#21426)\n\n* les: close all connected les-server when shutdown\r\n\r\n* les: linter nitpick\r\n\r\nCo-authored-by: Martin Holst Swende <martin@swende.se>"
            },
            {
                "date": "2020-08-07T09:15:41Z",
                "message": "ethstats: overwrite old errors"
            },
            {
                "date": "2020-08-07T12:27:00Z",
                "message": "Merge pull request #21427 from karalabe/fix-statesync-delivery-time\n\neth/downloader: save the correct delivery time for state sync"
            },
            {
                "date": "2020-08-07T12:16:29Z",
                "message": "eth/downloader: save the correct delivery time for state sync"
            },
            {
                "date": "2020-08-07T09:32:01Z",
                "message": "Merge pull request #21425 from holiman/leslock\n\nles: update checktime even if check fails"
            },
            {
                "date": "2020-08-07T08:57:02Z",
                "message": "les: update checktime even if check fails"
            }
        ],
        "2020-08-06": [
            {
                "date": "2020-08-06T12:28:31Z",
                "message": "cmd/utils: grant snapshot cache to trie if disabled (#21416)\n\n* cmd/utils: grant snapshot cache to trie if disabled\r\n\r\n* eth: fix up default non-mainnet cache distribution"
            },
            {
                "date": "2020-08-06T12:19:00Z",
                "message": "eth: use maxQueuedTxAnns for to limit the number of transactions announced (#21419)"
            },
            {
                "date": "2020-08-06T07:24:36Z",
                "message": "cmd/geth: fixes db unavailability for chain commands (#21415)\n\n* chaincmd should make config nodes instead of full nodes\r\n\r\n* add documentation for using makeConfigNode instead of makeFullNode;\r\n\r\n* add documentation to functions\r\n\r\n* code style"
            },
            {
                "date": "2020-08-06T05:09:15Z",
                "message": "Merge pull request #21411 from holiman/fix_codelookup\n\ncore/vm: avoid map lookups for accessing jumpdest analysis"
            },
            {
                "date": "2020-08-06T05:02:05Z",
                "message": "cmd/geth: fix import / export issues related to DB unavailability (#21414)\n\n* should fix import / export issues related to DB unavailability\r\n\r\n* document reason for makeConfigNode\r\n\r\n* fix comment\r\n\r\n* comment consistency\r\n\r\n* remove comments\r\n\r\n* lint"
            }
        ],
        "2020-08-05": [
            {
                "date": "2020-08-05T09:22:29Z",
                "message": "downloader: add eth65 tests (#21383)\n\n* eth65 tests\r\n\r\nlinted\r\n\r\n* remove non-latest eth light tests"
            },
            {
                "date": "2020-08-05T07:52:54Z",
                "message": "core: use errors.Is for consensus errors check (#21095)"
            },
            {
                "date": "2020-08-05T07:51:37Z",
                "message": "p2p/nat: limit UPNP request concurrency (#21390)\n\nThis adds a lock around requests because some routers can't handle\r\nconcurrent requests. Requests are also rate-limited.\r\n \r\nThe Map function request a new mapping exactly when the map timeout\r\noccurs instead of 5 minutes earlier. This should prevent duplicate mappings."
            }
        ],
        "2020-08-04": [
            {
                "date": "2020-08-04T13:40:23Z",
                "message": "core/vm: avoid map lookups for accessing jumpdest analysis"
            },
            {
                "date": "2020-08-04T10:21:51Z",
                "message": "ethstats: avoid concurrent write on websocket (#21404)\n\nFixes #21403"
            },
            {
                "date": "2020-08-04T09:51:53Z",
                "message": "core: avoid modification of accountSet cache in tx_pool (#21159)\n\n* core: avoid modification of accountSet cache in tx_pool\r\n\r\nwhen runReorg, we may copy the dirtyAccounts' accountSet cache to promoteAddrs\r\nin which accounts will be promoted, however, if we have reset request at the\r\nsame time, we may reuse promoteAddrs and modify the cache content which is\r\nagainst the original intention of accountSet cache. So, we need to make a new\r\nslice here to avoid modify accountSet cache.\r\n\r\n* core: fix flatten condition + comment\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2020-08-04T09:33:07Z",
                "message": "cmd/devp2p: print enode:// URL in enrdump (#21270)\n\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2020-08-03": [
            {
                "date": "2020-08-03T19:53:12Z",
                "message": "signer: EIP 712, parse `bytes` and `bytesX` as hex strings + correct padding (#21307)\n\n* Handle hex strings for bytesX types\r\n\r\n* Add tests for parseBytes\r\n\r\n* Improve tests\r\n\r\n* Return nil bytes if error is non-nil\r\n\r\n* Right-pad instead of left-pad bytes\r\n\r\n* More tests"
            },
            {
                "date": "2020-08-03T17:40:46Z",
                "message": "node: refactor package node (#21105)\n\nThis PR significantly changes the APIs for instantiating Ethereum nodes in\r\na Go program. The new APIs are not backwards-compatible, but we feel that\r\nthis is made up for by the much simpler way of registering services on\r\nnode.Node. You can find more information and rationale in the design\r\ndocument: https://gist.github.com/renaynay/5bec2de19fde66f4d04c535fd24f0775.\r\n\r\nThere is also a new feature in Node's Go API: it is now possible to\r\nregister arbitrary handlers on the user-facing HTTP server. In geth, this\r\nfacility is used to enable GraphQL.\r\n\r\nThere is a single minor change relevant for geth users in this PR: The\r\nGraphQL API is no longer available separately from the JSON-RPC HTTP\r\nserver. If you want GraphQL, you need to enable it using the\r\n./geth --http --graphql flag combination.\r\n\r\nThe --graphql.port and --graphql.addr flags are no longer available."
            },
            {
                "date": "2020-08-03T13:30:32Z",
                "message": "signer/core: EIP-712 encoded data should not reject a Domain without a ChainId (#21306)\n\n* Do not check for a non-nil ChainId\r\n\r\n* Add encoding test"
            },
            {
                "date": "2020-08-03T12:08:42Z",
                "message": "rpc: add SetHeader method to Client (#21392)\n\nResolves #20163\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2020-07-31": [
            {
                "date": "2020-07-31T14:20:31Z",
                "message": "rpc: remove silly use of ReadVarint in subscription ID generator (#21391)\n\nFound by @protolambda"
            }
        ],
        "2020-07-30": [
            {
                "date": "2020-07-30T07:23:36Z",
                "message": "Merge pull request #21358 from hendrikhofstadt/fix/tx-sort-time\n\ncore: sort txs at the same gas price by received time"
            }
        ],
        "2020-07-29": [
            {
                "date": "2020-07-29T19:53:59Z",
                "message": "core/rawdb: convert some comments to godoc convention (#21384)"
            },
            {
                "date": "2020-07-29T11:49:12Z",
                "message": "core/bloombits: use single channel for shutdown (#20878)\n\nThis replaces the two-stage shutdown scheme with the one we\r\nuse almost everywhere else: a single quit channel signalling\r\ntermination.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2020-07-29T10:48:03Z",
                "message": "build: use -trimpath flag when building executables (#21374)\n\n* Disable symbol table and DWARF generation by default.\r\nTrimpath if compiling with Go >= 1.13\r\n\r\n* Set Go to minimum version 1.13. Revert debug symbol changes."
            },
            {
                "date": "2020-07-29T10:47:19Z",
                "message": "eth/downloader: remove eth62 (#21378)\n\n* init\r\n\r\nnotes\r\n\r\nremoved some mentions of eth62, bumped protocol err too old to >=63\r\n\r\n* remove sanity checks and bump supported protocol version up to 63\r\n\r\n* remove 62 tests, still need to add 65\r\n\r\n* remove 65 tests"
            },
            {
                "date": "2020-07-29T10:44:14Z",
                "message": "les: fix unittest (#21382)"
            }
        ],
        "2020-07-28": [
            {
                "date": "2020-07-28T16:16:49Z",
                "message": "miner: refactor helper functions in worker.go (#21044)\n\nThis reduces complexity of some lengthy functions in worker.go,\r\nmaking the code easier to read."
            },
            {
                "date": "2020-07-28T15:02:35Z",
                "message": "les: implement new les fetcher (#20692)\n\n* cmd, consensus, eth, les: implement light fetcher\r\n\r\n* les: address comment\r\n\r\n* les: address comment\r\n\r\n* les: address comments\r\n\r\n* les: check td after delivery\r\n\r\n* les: add linearExpiredValue for error counter\r\n\r\n* les: fix import\r\n\r\n* les: fix dead lock\r\n\r\n* les: order announces by td\r\n\r\n* les: encapsulate invalid counter\r\n\r\n* les: address comment\r\n\r\n* les: add more checks during the delivery\r\n\r\n* les: fix log\r\n\r\n* eth, les: fix lint\r\n\r\n* eth/fetcher: address comment"
            },
            {
                "date": "2020-07-28T14:13:04Z",
                "message": "core: API-less transaction time sorting"
            },
            {
                "date": "2020-07-28T13:30:31Z",
                "message": "cmd, core, eth, light, trie: dump clean cache periodically (#20391)\n\n* cmd, core, eth, light, trie: dump clean cache periodically\r\n\r\n* eth: update config\r\n\r\n* trie: minor fix\r\n\r\n* core, trie: address comments\r\n\r\n* eth: remove useless\r\n\r\n* trie: print clean cache dump start too\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            },
            {
                "date": "2020-07-28T09:47:05Z",
                "message": "signer/storage: fix a badly ordered error check (#21379)"
            }
        ],
        "2020-07-22": [
            {
                "date": "2020-07-22T13:37:44Z",
                "message": "core: sort txs at the same gas price by received time"
            },
            {
                "date": "2020-07-22T14:39:08Z",
                "message": "Merge pull request #21352 from karalabe/dev-noinit-genesis\n\ncmd/utils: reuse existing genesis in persistent dev mode"
            }
        ],
        "2020-07-27": [
            {
                "date": "2020-07-27T11:58:45Z",
                "message": "params: begin v1.9.19 release cycle"
            },
            {
                "date": "2020-07-27T11:53:53Z",
                "message": "params: release Geth v1.9.18"
            },
            {
                "date": "2020-07-27T09:57:15Z",
                "message": "params: upgrade CHTs (#21376)"
            }
        ],
        "2020-07-24": [
            {
                "date": "2020-07-24T12:02:52Z",
                "message": "Merge pull request #21368 from holiman/update_uint256\n\ndeps: update uint256 to v1.1.1"
            },
            {
                "date": "2020-07-24T12:00:08Z",
                "message": "deps: update uint256 to v1.1.1"
            },
            {
                "date": "2020-07-24T08:14:42Z",
                "message": "Merge pull request #21300 from rjl493456442/txpool-fix-queued-evictions\n\ncore: fix queued transaction eviction"
            },
            {
                "date": "2020-07-24T07:46:26Z",
                "message": "eth/downloader: refactor downloader + queue (#21263)\n\n* eth/downloader: refactor downloader + queue\r\n\r\ndownloader, fetcher: throttle-metrics, fetcher filter improvements, standalone resultcache\r\n\r\ndownloader: more accurate deliverytime calculation, less mem overhead in state requests\r\n\r\ndownloader/queue: increase underlying buffer of results, new throttle mechanism\r\n\r\neth/downloader: updates to tests\r\n\r\neth/downloader: fix up some review concerns\r\n\r\neth/downloader/queue: minor fixes\r\n\r\neth/downloader: minor fixes after review call\r\n\r\neth/downloader: testcases for queue.go\r\n\r\neth/downloader: minor change, don't set progress unless progress...\r\n\r\neth/downloader: fix flaw which prevented useless peers from being dropped\r\n\r\neth/downloader: try to fix tests\r\n\r\neth/downloader: verify non-deliveries against advertised remote head\r\n\r\neth/downloader: fix flaw with checking closed-status causing hang\r\n\r\neth/downloader: hashing avoidance\r\n\r\neth/downloader: review concerns + simplify resultcache and queue\r\n\r\neth/downloader: add back some locks, address review concerns\r\n\r\ndownloader/queue: fix remaining lock flaw\r\n\r\n* eth/downloader: nitpick fixes\r\n\r\n* eth/downloader: remove the *2*3/4 throttling threshold dance\r\n\r\n* eth/downloader: print correct throttle threshold in stats\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            }
        ],
        "2020-07-08": [
            {
                "date": "2020-07-08T08:27:04Z",
                "message": "core: fix heartbeat in txpool\n\ncore: address comment"
            },
            {
                "date": "2020-07-08T21:08:08Z",
                "message": "eth/downloader: fix peer idleness tracking when restarting state sync (#21260)\n\nThis fixes two issues with state sync restarts:\r\n\r\nWhen sync restarts with a new root, some peers can have in-flight requests.\r\nSince all peers with active requests were marked idle when exiting sync,\r\nthe new sync would schedule more requests for those peers. When the\r\nresponse for the earlier request arrived, the new sync would reject it and\r\nmark the peer idle again, rendering the peer useless until it disconnected.\r\n\r\nThe other issue was that peers would not be marked idle when they had\r\ndelivered a response, but the response hadn't been processed before\r\nrestarting the state sync. This also made the peer useless because it\r\nwould be permanently marked busy.\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2020-07-08T12:06:53Z",
                "message": "go.mod: upgrade to github.com/golang/snappy with arm64 asm (#21304)"
            },
            {
                "date": "2020-07-08T09:50:26Z",
                "message": "eth: increase timeout in TestBroadcastBlock (#21299)"
            }
        ],
        "2020-07-23": [
            {
                "date": "2020-07-23T17:15:40Z",
                "message": "mobile: fix build on iOS (#21362)\n\nThis fixes the iOS framework build by naming the second parameter of the\r\nSigner interface method. The name is important because it becomes part\r\nof the objc method signature.\r\n\r\nFixes #21340"
            },
            {
                "date": "2020-07-23T10:34:08Z",
                "message": "build: fix GOBIN for gomobile commands (#21361)"
            },
            {
                "date": "2020-07-23T03:47:34Z",
                "message": "cmd/utils: implement configurable developer (--dev) account options (#21301)\n\n* geth,utils: implement configurable developer account options\r\n\r\nPrior to this change --dev (developer) mode\r\ngenerated one account with an empty password,\r\nirrespective of existing --password and --miner.etherbase\r\noptions.\r\n\r\nThis change makes --dev mode compatible with these\r\nexisting flags.\r\n\r\n--dev mode may now be used in conjunction with\r\n--password and --miner.etherbase flags to configure\r\nthe developer faucet using an existing keystore or\r\nin creating a new account.\r\n\r\nSigned-off-by: meows <b5c6@protonmail.com>\r\n\r\n* main: remove key/pass flags from usage developer section\r\n\r\nThese flags are included already in other sections,\r\nand it is not desired to duplicate them.\r\n\r\nThey were originally included in this section\r\nalong with added support for these flags in the\r\ndeveloper mode.\r\n\r\nSigned-off-by: meows <b5c6@protonmail.com>"
            }
        ],
        "2020-07-21": [
            {
                "date": "2020-07-21T12:53:47Z",
                "message": "cmd/utils: reuse existing genesis in persistent dev mode"
            },
            {
                "date": "2020-07-21T08:53:06Z",
                "message": "whisper/whisperv6: improve test error messages (#21348)"
            },
            {
                "date": "2020-07-21T08:51:15Z",
                "message": "ethclient: serialize negative block number as \"pending\" (#21177)\n\nFixes #21175\r\n\r\nCo-authored-by: sammy007 <sammy007@users.noreply.github.com>\r\nCo-authored-by: Adam Schmideg <adamschmideg@users.noreply.github.com>"
            },
            {
                "date": "2020-07-21T08:23:40Z",
                "message": "les: make clientPool.connectedBias configurable (#21305)"
            },
            {
                "date": "2020-07-21T07:53:12Z",
                "message": "Merge pull request #21336 from karalabe/tiny-ref-optimization\n\ncore/vm: use pointers to operations vs. copy by value"
            }
        ],
        "2020-07-20": [
            {
                "date": "2020-07-20T12:58:33Z",
                "message": "params: begin v1.9.18 release cycle"
            },
            {
                "date": "2020-07-20T12:56:42Z",
                "message": "params: release Geth v1.9.17"
            },
            {
                "date": "2020-07-20T12:52:42Z",
                "message": "accounts, internal: fix funding check when estimating gas (#21346)\n\n* internal, accounts: fix funding check when estimate gas\r\n\r\n* accounts, internal: address comments"
            },
            {
                "date": "2020-07-20T08:47:13Z",
                "message": "Merge pull request #21347 from karalabe/ethstats-fixes\n\nethstats: fix reconnection issue, implement primus pings"
            },
            {
                "date": "2020-07-20T08:11:38Z",
                "message": "ethstats: fix reconnection issue, implement primus pings"
            }
        ],
        "2020-07-16": [
            {
                "date": "2020-07-16T12:32:01Z",
                "message": "core/vm: use pointers to operations vs. copy by value"
            },
            {
                "date": "2020-07-16T12:08:38Z",
                "message": " core: raise gas limit in --dev mode, seed blake precompile (#21323)\n\n* Set gasLimit in --dev mode to be 9m.\r\n\r\n* core: Set gasLimit to 11.5 milion and add 1 wei allocation for BLAKE2b"
            },
            {
                "date": "2020-07-16T12:06:19Z",
                "message": "core/vm: less allocations for various call variants  (#21222)\n\n* core/vm/runtime/tests: add more benchmarks\r\n\r\n* core/vm: initial work on improving alloc count for calls to precompiles\r\n\r\nname                                  old time/op    new time/op    delta\r\nSimpleLoop/identity-precompile-10M-6     117ms \u00b175%      43ms \u00b1 1%  -63.09%  (p=0.008 n=5+5)\r\nSimpleLoop/loop-10M-6                   79.6ms \u00b1 4%    70.5ms \u00b1 1%  -11.42%  (p=0.008 n=5+5)\r\n\r\nname                                  old alloc/op   new alloc/op   delta\r\nSimpleLoop/identity-precompile-10M-6    24.4MB \u00b1 0%     4.9MB \u00b1 0%  -79.94%  (p=0.008 n=5+5)\r\nSimpleLoop/loop-10M-6                   13.2kB \u00b1 0%    13.2kB \u00b1 0%     ~     (p=0.357 n=5+5)\r\n\r\nname                                  old allocs/op  new allocs/op  delta\r\nSimpleLoop/identity-precompile-10M-6      382k \u00b1 0%      153k \u00b1 0%  -59.99%  (p=0.000 n=5+4)\r\nSimpleLoop/loop-10M-6                     40.0 \u00b1 0%      40.0 \u00b1 0%     ~     (all equal)\r\n\r\n* core/vm: don't allocate big.int for touch\r\n\r\nname                                  old time/op    new time/op    delta\r\nSimpleLoop/identity-precompile-10M-6    43.3ms \u00b1 1%    42.4ms \u00b1 7%     ~     (p=0.151 n=5+5)\r\nSimpleLoop/loop-10M-6                   70.5ms \u00b1 1%    76.7ms \u00b1 1%   +8.67%  (p=0.008 n=5+5)\r\n\r\nname                                  old alloc/op   new alloc/op   delta\r\nSimpleLoop/identity-precompile-10M-6    4.90MB \u00b1 0%    2.46MB \u00b1 0%  -49.83%  (p=0.008 n=5+5)\r\nSimpleLoop/loop-10M-6                   13.2kB \u00b1 0%    13.2kB \u00b1 1%     ~     (p=0.571 n=5+5)\r\n\r\nname                                  old allocs/op  new allocs/op  delta\r\nSimpleLoop/identity-precompile-10M-6      153k \u00b1 0%       76k \u00b1 0%  -49.98%  (p=0.029 n=4+4)\r\nSimpleLoop/loop-10M-6                     40.0 \u00b1 0%      40.0 \u00b1 0%     ~     (all equal)\r\n\r\n* core/vm: reduce allocs in staticcall\r\n\r\nname                                  old time/op    new time/op    delta\r\nSimpleLoop/identity-precompile-10M-6    42.4ms \u00b1 7%    37.5ms \u00b1 6%  -11.68%  (p=0.008 n=5+5)\r\nSimpleLoop/loop-10M-6                   76.7ms \u00b1 1%    69.1ms \u00b1 1%   -9.82%  (p=0.008 n=5+5)\r\n\r\nname                                  old alloc/op   new alloc/op   delta\r\nSimpleLoop/identity-precompile-10M-6    2.46MB \u00b1 0%    0.02MB \u00b1 0%  -99.35%  (p=0.008 n=5+5)\r\nSimpleLoop/loop-10M-6                   13.2kB \u00b1 1%    13.2kB \u00b1 0%     ~     (p=0.143 n=5+5)\r\n\r\nname                                  old allocs/op  new allocs/op  delta\r\nSimpleLoop/identity-precompile-10M-6     76.4k \u00b1 0%      0.1k \u00b1 0%     ~     (p=0.079 n=4+5)\r\nSimpleLoop/loop-10M-6                     40.0 \u00b1 0%      40.0 \u00b1 0%     ~     (all equal)\r\n\r\n* trie: better use of hasher keccakState\r\n\r\n* core/state/statedb: reduce allocations in getDeletedStateObject\r\n\r\n* core/vm: reduce allocations in all call derivates\r\n\r\n* core/vm: reduce allocations in call variants\r\n\r\n- Make returnstack `uint32`\r\n- Use a `sync.Pool` of `stack`s\r\n\r\n* core/vm: fix tests\r\n\r\n* core/vm: goimports\r\n\r\n* core/vm: tracer fix + staticcall gas fix\r\n\r\n* core/vm: add back snapshot to staticcall\r\n\r\n* core/vm: review concerns + make returnstack pooled + enable returndata in traces\r\n\r\n* core/vm: fix some test tracer method signatures\r\n\r\n* core/vm: run gencodec, minor comment polish\r\n\r\nCo-authored-by: P\u00e9ter Szil\u00e1gyi <peterke@gmail.com>"
            }
        ],
        "2020-07-15": [
            {
                "date": "2020-07-15T08:00:04Z",
                "message": "trie: quell linter in commiter.go (#21329)"
            }
        ],
        "2020-07-14": [
            {
                "date": "2020-07-14T19:42:32Z",
                "message": "core: transaction pool optimizations (#21328)\n\n* core: added local tx pool test case\r\n\r\n* core, crypto: various allocation savings regarding tx handling\r\n\r\n* core/txlist, txpool: save a reheap operation, avoid some bigint allocs\r\n\r\nCo-authored-by: Marius van der Wijden <m.vanderwijden@live.de>"
            },
            {
                "date": "2020-07-14T08:35:32Z",
                "message": "cmd/clef: change --rpcport to --http.port and update flags in docs (#21318)"
            }
        ],
        "2020-07-13": [
            {
                "date": "2020-07-13T20:25:45Z",
                "message": "p2p/discover: require table nodes to have an IP (#21330)\n\nThis fixes a corner case in discv5. The issue cannot happen in discv4\r\nbecause it performs IP checks on all incoming node information."
            },
            {
                "date": "2020-07-13T18:43:30Z",
                "message": "core/rawdb: better log messages for ancient failure (#21327)"
            },
            {
                "date": "2020-07-13T14:20:20Z",
                "message": ".github: Change Code Owners (#21326)\n\n* modify code owners\r\n\r\n* add marius"
            },
            {
                "date": "2020-07-13T10:45:39Z",
                "message": "internal/ethapi: cap txfee for SignTransaction and Resend (#21231)"
            },
            {
                "date": "2020-07-13T09:22:30Z",
                "message": " README.md: point Go API reference link to pkg.go.dev (#21321)"
            },
            {
                "date": "2020-07-13T09:20:47Z",
                "message": "p2p/discv5: unset pingEcho on pong timeout (#21324)"
            },
            {
                "date": "2020-07-13T09:17:49Z",
                "message": "light: goimports -w (#21325)"
            },
            {
                "date": "2020-07-13T09:02:54Z",
                "message": "les: historical data garbage collection (#19570)\n\nThis change introduces garbage collection for the light client. Historical\r\nchain data is deleted periodically. If you want to disable the GC, use\r\nthe --light.nopruning flag."
            }
        ],
        "2020-07-10": [
            {
                "date": "2020-07-10T10:40:31Z",
                "message": "params: begin v1.9.17 release cycle"
            },
            {
                "date": "2020-07-10T10:38:48Z",
                "message": "params: go-ethereum v1.9.16 stable"
            },
            {
                "date": "2020-07-10T09:33:31Z",
                "message": "accounts/external: remove dependency on internal/ethapi (#21319)\n\nFixes #20535\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            }
        ],
        "2020-07-09": [
            {
                "date": "2020-07-09T15:48:40Z",
                "message": "cmd/geth, cmd/puppeth: replace deprecated rpc and ws flags in tests and docs (#21317)"
            },
            {
                "date": "2020-07-09T15:45:49Z",
                "message": "common/math: use math/bits intrinsics for Safe* (#21316)\n\nThis is a resubmit of ledgerwatch/turbo-geth#556. The performance\r\nbenefit of this change is negligible, but it does remove a TODO."
            },
            {
                "date": "2020-07-09T12:02:03Z",
                "message": "Revert \"core, txpool: less allocations when handling transactions (#21232)\"\n\nReverting because this change started handling account balances as\nuint64 in the transaction pool, which is incorrect.\n\nThis reverts commit af5c97aebe1d37486635521ef553cb8bd4bada13."
            }
        ],
        "2020-07-07": [
            {
                "date": "2020-07-07T20:23:23Z",
                "message": "cmd/clef: Fix broken link in README and other minor fixes (#21303)"
            },
            {
                "date": "2020-07-07T12:37:33Z",
                "message": "cmd/devp2p: add discv4 test suite (#21163)\n\nThis adds a test suite for discovery v4. The test suite is a port of the Hive suite for\r\ndiscovery, and will replace the current suite on Hive soon-ish. The tests can be\r\nrun locally with this command:\r\n\r\n    devp2p discv4 test -remote enode//...\r\n\r\nCo-authored-by: Felix Lange <fjl@twurst.com>"
            },
            {
                "date": "2020-07-07T09:12:38Z",
                "message": "cmd/clef: Update README with external v6.0.0 & internal v7.0.1 APIs (#21298)\n\nChanges include:\r\n* Updates response docs for `account_new`, `account_list`, `account_signTransaction`\r\n* Removes `account_import`, `account_export` docs\r\n* Adds `account_version` docs\r\n* Updates request docs for `ui_approveListing`, `ui_approveSignData`, `ui_showInfo`, `ui_showError`, `ui_onApprovedTx`\r\n* Adds `ui_approveNewAccount`, `ui_onInputRequired` docs"
            }
        ],
        "2020-07-06": [
            {
                "date": "2020-07-06T20:09:30Z",
                "message": "cmd, node: dump empty value config (#21296)"
            },
            {
                "date": "2020-07-06T09:17:09Z",
                "message": "rlp: reduce allocations for big.Int and byte array encoding (#21291)\n\nThis change further improves the performance of RLP encoding by removing\r\nallocations for big.Int and [...]byte types. I have added a new benchmark\r\nthat measures RLP encoding of types.Block to verify that performance is\r\nimproved."
            }
        ],
        "2020-07-05": [],
        "2020-07-11": [],
        "2020-07-12": [],
        "2020-07-17": [],
        "2020-07-18": [],
        "2020-07-19": [],
        "2020-07-25": [],
        "2020-07-26": [],
        "2020-08-01": [],
        "2020-08-02": [],
        "2020-08-08": [],
        "2020-08-09": [],
        "2020-08-12": [],
        "2020-08-13": [],
        "2020-08-15": [],
        "2020-08-16": [],
        "2020-08-17": [],
        "2020-08-23": [],
        "2020-08-29": [],
        "2020-08-30": [],
        "2020-08-31": [],
        "2020-09-03": [],
        "2020-09-04": [],
        "2020-09-05": [],
        "2020-09-06": [],
        "2020-09-12": [],
        "2020-09-19": [],
        "2020-09-25": [],
        "2020-09-26": [],
        "2020-09-27": [],
        "2020-10-01": [],
        "2020-10-02": [],
        "2020-10-03": [],
        "2020-10-04": [],
        "2020-10-10": [],
        "2020-10-11": [],
        "2020-10-17": [],
        "2020-10-18": [],
        "2020-10-19": [],
        "2020-10-22": [],
        "2020-10-24": [],
        "2020-10-25": [],
        "2020-10-31": [],
        "2020-11-01": [],
        "2020-11-02": [],
        "2020-11-03": [],
        "2020-11-06": [],
        "2020-11-07": [],
        "2020-11-08": [],
        "2020-11-14": [],
        "2020-11-15": [],
        "2020-11-21": [],
        "2020-11-22": [],
        "2020-11-26": [],
        "2020-11-28": [],
        "2020-12-05": [],
        "2020-12-06": [],
        "2020-12-13": [],
        "2020-12-16": [],
        "2020-12-18": [],
        "2020-12-19": [],
        "2020-12-20": [],
        "2020-12-22": [],
        "2020-12-24": [],
        "2020-12-25": [],
        "2020-12-26": [],
        "2020-12-28": [],
        "2020-12-29": [],
        "2020-12-31": [],
        "2021-01-01": [],
        "2021-01-02": [],
        "2021-01-03": [],
        "2021-01-17": [],
        "2021-01-23": [],
        "2021-01-30": [],
        "2021-01-31": [],
        "2021-02-04": [],
        "2021-02-06": [],
        "2021-02-13": [],
        "2021-02-14": [],
        "2021-02-21": [],
        "2021-02-27": [],
        "2021-02-28": [],
        "2021-03-05": [],
        "2021-03-06": [],
        "2021-03-10": [],
        "2021-03-18": [],
        "2021-03-21": [],
        "2021-03-27": [],
        "2021-03-28": [],
        "2021-04-01": [],
        "2021-04-02": [],
        "2021-04-03": [],
        "2021-04-04": [],
        "2021-04-05": [],
        "2021-04-10": [],
        "2021-04-11": [],
        "2021-04-12": [],
        "2021-04-17": [],
        "2021-04-24": [],
        "2021-04-25": [],
        "2021-05-02": [],
        "2021-05-08": [],
        "2021-05-09": [],
        "2021-05-13": [],
        "2021-05-14": [],
        "2021-05-15": [],
        "2021-05-16": [],
        "2021-05-23": [],
        "2021-05-29": [],
        "2021-06-05": [],
        "2021-06-06": [],
        "2021-06-12": [],
        "2021-06-13": [],
        "2021-06-19": [],
        "2021-06-26": [],
        "2021-06-27": [],
        "2021-07-03": []
    }
}